class Solution:
    def isValidSudoku(self, board) -> bool:
        ok = True

        for r in range(9):
            se = set()
            ser = set()
            for c in range(9):
                if board[r][c] == ".":
                    continue
                x = int(board[r][c])
                if board[r][c] in se or x < 1 or x > 9:
                    ok = False
                se.add(board[r][c])

                # for columns
                if board[c][r] == ".":
                    continue
                x = int(board[c][r])
                if board[c][r] in ser or x < 1 or x > 9:
                    ok = False
                ser.add(board[c][r])

        r, c = 0, 0
        while r < 9 and c < 9:
            for k in range(3):
                se = set()
                for i in range(r, r + 3):
                    for j in range(c, c + 3):
                        if board[i][j] == ".":
                            continue
                        x = int(board[i][j])
                        if board[i][j] in se or x < 1 or x > 9:
                            ok = False
                        se.add(board[i][j])
                c += 3
            c = 0
            r += 3

        return ok


# board = [
#     ["5", "3", ".", ".", "7", ".", ".", ".", "."],
#     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
#     [".", "9", "8", ".", ".", ".", ".", "6", "."],
#     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
#     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
#     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
#     [".", "6", ".", ".", ".", ".", "2", "8", "."],
#     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
#     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
# ]
# board = [
#     ["8", "3", ".", ".", "7", ".", ".", ".", "."],
#     ["6", ".", ".", "1", "9", "5", ".", ".", "."],
#     [".", "9", "8", ".", ".", ".", ".", "6", "."],
#     ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
#     ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
#     ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
#     [".", "6", ".", ".", ".", ".", "2", "8", "."],
#     [".", ".", ".", "4", "1", "9", ".", ".", "5"],
#     [".", ".", ".", ".", "8", ".", ".", "7", "9"],
# ]
# board = [
#     [".", ".", "4", ".", ".", ".", "6", "3", "."],
#     [".", ".", ".", ".", ".", ".", ".", ".", "."],
#     ["5", ".", ".", ".", ".", ".", ".", "9", "."],
#     [".", ".", ".", "5", "6", ".", ".", ".", "."],
#     ["4", ".", "3", ".", ".", ".", ".", ".", "1"],
#     [".", ".", ".", "7", ".", ".", ".", ".", "."],
#     [".", ".", ".", "5", ".", ".", ".", ".", "."],
#     [".", ".", ".", ".", ".", ".", ".", ".", "."],
#     [".", ".", ".", ".", ".", ".", ".", ".", "."],
# ]
# board = [
#     [".", ".", ".", ".", "5", ".", ".", "1", "."],
#     [".", "4", ".", "3", ".", ".", ".", ".", "."],
#     [".", ".", ".", ".", ".", "3", ".", ".", "1"],
#     ["8", ".", ".", ".", ".", ".", ".", "2", "."],
#     [".", ".", "2", ".", "7", ".", ".", ".", "."],
#     [".", "1", "5", ".", ".", ".", ".", ".", "."],
#     [".", ".", ".", ".", ".", "2", ".", ".", "."],
#     [".", "2", ".", "9", ".", ".", ".", ".", "."],
#     [".", ".", "4", ".", ".", ".", ".", ".", "."],
# ]

board = [
    [".", ".", ".", ".", ".", ".", "5", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    ["9", "3", ".", ".", "2", ".", "4", ".", "."],
    [".", ".", "7", ".", ".", ".", "3", ".", "."],
    [".", ".", ".", ".", ".", ".", ".", ".", "."],
    [".", ".", ".", "3", "4", ".", ".", ".", "."],
    [".", ".", ".", ".", ".", "3", ".", ".", "."],
    [".", ".", ".", ".", ".", "5", "2", ".", "."],
]
sol = Solution().isValidSudoku(board)
print(sol)
