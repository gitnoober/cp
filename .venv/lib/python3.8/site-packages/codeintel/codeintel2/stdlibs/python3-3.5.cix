<?xml version="1.0" encoding="UTF-8"?>
<codeintel version="2.0">
  <file lang="Python3" mtime="0" path="python3-3.5.cix">
    <scope doc="create and manipulate C data types in Python&#10;" ilk="blob" lang="Python3" name="ctypes">
      <scope doc="# XXX Deprecated" ilk="function" name="ARRAY" signature="ARRAY(typ, len)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided&#10;" ilk="class" name="Array">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope classrefs="Structure" doc="Structure with big endian byte order&#10;" ilk="class" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared&#10;library, exporting functions using the standard C calling convention (named 'cdecl' on Windows).  The exported functions can be accessed as attributes, or by indexing with the function name.  Examples:  &lt;obj&gt;.qsort -&gt; callable object &lt;obj&gt;['qsort'] -&gt; callable object  Calling the functions releases the Python GIL during the call and" ilk="class" name="CDLL">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name_or_ordinal)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, mode=0, handle=None, use_errno=False, use_last_error=False)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False,&#10;use_last_error=False) -&gt; function prototype." ilk="function" name="CFUNCTYPE" signature="CFUNCTYPE(restype, *argtypes, **kw)" />
      <variable citdl="int" name="DEFAULT_MODE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="LibraryLoader">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dlltype)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="LoadLibrary" signature="LoadLibrary(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
      </scope>
      <scope classrefs="_CData" doc="Structure base class&#10;" ilk="class" name="LittleEndianStructure">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" name="PYFUNCTYPE" signature="PYFUNCTYPE(restype, *argtypes)" />
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to&#10;access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" name="PyDLL" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope doc="# XXX Deprecated" ilk="function" name="SetPointerType" signature="SetPointerType(pointer, cls)" />
      <scope classrefs="_CData" doc="Structure base class&#10;" ilk="class" name="Structure">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_CData" doc="Union base class&#10;" ilk="class" name="Union">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <import module="_endian" />
      <import module="_os" />
      <import module="_sys" />
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" signature="alignment(C type) -&gt; integer&#10;alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as&#10;function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_bool" />
      <scope ilk="function" name="c_buffer" signature="c_buffer(init, size=None)" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_byte" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_char" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_char_p">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_double" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_float" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int16" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int32" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int64" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int8" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_long" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_longdouble" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_longlong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_short" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_size_t" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ssize_t" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ubyte" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint16" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint32" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint64" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint8" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ulong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ulonglong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ushort" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_void_p" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_voidp" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_wchar" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_wchar_p">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="cast" signature="cast(obj, typ)" />
    </scope>
    <scope doc="distutils.cygwinccompiler&#10;Provides the CygwinCCompiler class, a subclass of UnixCCompiler that handles the Cygwin port of the GNU C compiler to Windows.  It also contains the Mingw32CCompiler class which handles the mingw32 port of GCC (same as cygwin in no-cygwin mode)." ilk="blob" lang="Python3" name="distutils.cygwinccompiler">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <variable citdl="str" name="CONFIG_H_NOTOK" />
      <variable citdl="str" name="CONFIG_H_OK" />
      <variable citdl="str" name="CONFIG_H_UNCERTAIN" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="UnixCCompiler" doc="Handles the Cygwin port of the GNU C compiler to Windows.&#10;" ilk="class" name="CygwinCCompiler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Link the objects." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Compiles the source by spawning GCC and windres if needed." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Adds supports for rc and res files." ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
      </scope>
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="Version" doc="Version numbering for anarchists and software realists.&#10;Implements the standard interface for version number classes as described above.  A version number consists of a series of numbers, separated by either periods or strings of letters.  When comparing version numbers, the numeric components will be compared numerically, and the alphabetic components lexically.  The following are all valid version numbers, in no particular order:  1.5.1 1.5.2b2 161" ilk="class" name="LooseVersion">
        <scope ilk="function" name="parse" signature="parse(self, vstring)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, vstring=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="CygwinCCompiler" doc="Handles the Mingw32 port of the GNU C compiler to Windows.&#10;" ilk="class" name="Mingw32CCompiler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
      </scope>
      <variable citdl="int" name="PIPE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Popen">
        <scope ilk="function" name="__del__" signature="__del__(self, _maxsize=9223372036854775807)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope doc="Send a signal to the process." ilk="function" name="send_signal" signature="send_signal(self, sig)" />
        <scope ilk="function" name="_communicate" signature="_communicate(self, input, endtime, orig_timeout)" />
        <scope ilk="function" name="_translate_newlines" signature="_translate_newlines(self, data, encoding)" />
        <scope doc="Create new Popen instance." ilk="function" name="__init__" signature="__init__(self, args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=&lt;object object at 0x7f11880dc0f0&gt;, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=())" />
        <scope doc="Wait for child process to terminate." ilk="function" name="wait" signature="wait(self, timeout=None, endtime=None)" />
        <scope doc="Check if child process has terminated." ilk="function" name="_internal_poll" signature="_internal_poll(self, _deadstate=None, _waitpid=&lt;built-in function waitpid&gt;, _WNOHANG=1, _ECHILD=10)" />
        <scope doc="All callers to this function MUST hold self._waitpid_lock." ilk="function" name="_handle_exitstatus" signature="_handle_exitstatus(self, sts, _WIFSIGNALED=&lt;built-in function WIFSIGNALED&gt;, _WTERMSIG=&lt;built-in function WTERMSIG&gt;, _WIFEXITED=&lt;built-in function WIFEXITED&gt;, _WEXITSTATUS=&lt;built-in function WEXITSTATUS&gt;)" />
        <scope doc="Convenience for checking if a timeout has expired." ilk="function" name="_check_timeout" signature="_check_timeout(self, endtime, orig_timeout)" />
        <scope doc="Execute program (POSIX version)" ilk="function" name="_execute_child" signature="_execute_child(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, start_new_session)" />
        <scope doc="Terminate the process with SIGTERM" ilk="function" name="terminate" signature="terminate(self)" />
        <scope doc="All callers to this function MUST hold self._waitpid_lock." ilk="function" name="_try_wait" signature="_try_wait(self, wait_flags)" />
        <scope doc="Interact with process: Send data to stdin." ilk="function" name="communicate" signature="communicate(self, input=None, timeout=None)" />
        <scope ilk="function" name="_stdin_write" signature="_stdin_write(self, input)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="poll" signature="poll(self)" />
        <scope ilk="function" name="_save_input" signature="_save_input(self, input)" />
        <scope doc="Construct and return tuple with IO objects: p2cread,&#10;p2cwrite, c2pread, c2pwrite, errread, errwrite" ilk="function" name="_get_handles" signature="_get_handles(self, stdin, stdout, stderr)" />
        <scope doc="Convenience for _communicate when computing timeouts." ilk="function" name="_remaining_time" signature="_remaining_time(self, endtime)" />
        <scope doc="Kill the process with SIGKILL" ilk="function" name="kill" signature="kill(self)" />
        <scope ilk="function" name="_get_devnull" signature="_get_devnull(self)" />
      </scope>
      <variable citdl="SRE_Pattern" name="RE_VERSION" />
      <scope classrefs="CCompiler" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="UnixCCompiler">
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="_is_gcc" signature="_is_gcc(self, compiler_name)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope doc="Check if the current Python installation appears amenable to&#10;building extensions with GCC." ilk="function" name="check_config_h" signature="check_config_h()" />
      <scope doc="Run command with arguments and return its output." ilk="function" name="check_output" signature="check_output(*popenargs, timeout=None, **kwargs)" />
      <import module="copy" />
      <scope doc="Tries to find 'executable' in the directories listed in&#10;'path'." ilk="function" name="find_executable" signature="find_executable(executable, path=None)" />
      <scope doc="Generate linker options for searching library directories&#10;and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at&#10;least two types of compilers: the typical Unix compiler and&#10;Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Include the appropriate MSVC runtime library if Python was&#10;built with MSVC 7.0 or later." ilk="function" name="get_msvcr" signature="get_msvcr()" />
      <scope doc="Try to find out the versions of gcc, ld and dllwrap." ilk="function" name="get_versions" signature="get_versions()" />
      <scope doc="Try to determine if the gcc that would be used is from&#10;cygwin." ilk="function" name="is_cygwingcc" signature="is_cygwingcc()" />
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write 'contents'&#10;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="Utilities to support packages.&#10;" ilk="blob" lang="Python3" name="pkgutil">
      <scope classrefs="object" doc="PEP 302 Importer that wraps Python's &quot;classic&quot; import algorithm&#10;ImpImporter(dirname) produces a PEP 302 importer that searches that directory.  ImpImporter(None) produces a PEP 302 importer that searches the current sys.path, plus any modules that are frozen or built-in.  Note that ImpImporter does not currently support being used by placement on sys.meta_path." ilk="class" name="ImpImporter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, path=None)" />
        <scope ilk="function" name="find_module" signature="find_module(self, fullname, path=None)" />
        <scope ilk="function" name="iter_modules" signature="iter_modules(self, prefix='')" />
      </scope>
      <scope classrefs="object" doc="PEP 302 Loader that wraps Python's &quot;classic&quot; import algorithm&#10;" ilk="class" name="ImpLoader">
        <scope ilk="function" name="get_data" signature="get_data(self, pathname)" />
        <scope ilk="function" name="is_package" signature="is_package(self, fullname)" />
        <scope ilk="function" name="get_filename" signature="get_filename(self, fullname=None)" />
        <scope ilk="function" name="_fix_name" signature="_fix_name(self, fullname)" />
        <scope ilk="function" name="_reopen" signature="_reopen(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fullname, file, filename, etc)" />
        <scope ilk="function" name="get_source" signature="get_source(self, fullname=None)" />
        <scope ilk="function" name="_get_delegate" signature="_get_delegate(self)" />
        <scope ilk="function" name="get_code" signature="get_code(self, fullname=None)" />
        <scope ilk="function" name="load_module" signature="load_module(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#10;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="specialized dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Extend a package's path." ilk="function" name="extend_path" signature="extend_path(path, name)" />
      <scope doc="Find a PEP 302 &quot;loader&quot; object for fullname" ilk="function" name="find_loader" signature="find_loader(fullname)" />
      <scope doc="Get a resource from a package." ilk="function" name="get_data" signature="get_data(package, resource)" />
      <scope doc="Retrieve a PEP 302 importer for the given path item" ilk="function" name="get_importer" signature="get_importer(path_item)" />
      <scope doc="Get a PEP 302 &quot;loader&quot; object for module_or_name" ilk="function" name="get_loader" signature="get_loader(module_or_name)" />
      <import module="importlib" />
      <scope ilk="function" name="iter_importer_modules" signature="iter_importer_modules(*args, **kw)" />
      <scope doc="Yield PEP 302 importers for the given module name" ilk="function" name="iter_importers" signature="iter_importers(fullname='')" />
      <scope doc="or, if path is None, all top-level modules on sys.path." ilk="function" name="iter_modules" signature="Yields (module_loader, name, ispkg) for all submodules on path," />
      <scope ilk="function" name="iter_zipimport_modules" signature="iter_zipimport_modules(importer, prefix='')" />
      <import module="os" />
      <scope ilk="function" name="read_code" signature="read_code(stream)" />
      <scope doc="Single-dispatch generic function decorator." ilk="function" name="simplegeneric" signature="simplegeneric(func)" />
      <import module="sys" />
      <scope doc="on path, or, if path is None, all accessible modules." ilk="function" name="walk_packages" signature="Yields (module_loader, name, ispkg) for all modules recursively" />
      <import module="warnings" />
      <import module="zipimport" />
      <scope classrefs="object" doc="zipimporter(archivepath) -&gt; zipimporter object&#10;Create a new zipimporter instance. 'archivepath' must be a path to a zipfile, or to a specific path inside a zipfile. For example, it can be '/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a valid directory inside the archive.  'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip archive.  The 'archive' attribute of zipimporter objects contains the name of the zipfile targeted." ilk="class" name="zipimporter">
        <scope doc="Return the data associated with 'pathname'." ilk="function" name="get_data" returns="str" signature="get_data(pathname) -&gt; string with file data." />
        <scope doc="Return True if the module specified by fullname is a&#10;package." ilk="function" name="is_package" signature="is_package(fullname) -&gt; bool." />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return the filename for the specified module." ilk="function" name="get_filename" signature="get_filename(fullname) -&gt; filename string." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the source code for the specified module." ilk="function" name="get_source" signature="get_source(fullname) -&gt; source string." />
        <scope doc="Search for a module specified by 'fullname'." ilk="function" name="find_module" signature="find_module(fullname, path=None) -&gt; self or None." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Search for a module specified by 'fullname'." ilk="function" name="find_loader" signature="find_loader(fullname, path=None) -&gt; self, str or None." />
        <scope doc="Return the code object for the specified module." ilk="function" name="get_code" returns="code" signature="get_code(fullname) -&gt; code object." />
        <scope doc="Load the module specified by 'fullname'." ilk="function" name="load_module" signature="load_module(fullname) -&gt; module." />
      </scope>
    </scope>
    <scope doc="High performance data structures.&#10;- deque:        ordered collection accessible from endpoints only - defaultdict:  dict subclass with a default value factory" ilk="blob" lang="Python3" name="_collections">
      <scope classrefs="dict" doc="Dictionary that remembers insertion order&#10;" ilk="class" name="OrderedDict">
        <scope doc="od.clear() -&gt; None.  Remove all items from od." ilk="function" name="clear" signature="od.clear() -&gt; None.  Remove all items from od." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="od.__reversed__() &lt;==&gt; reversed(od)" ilk="function" name="__reversed__" signature="od.__reversed__() &lt;==&gt; reversed(od)" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Move an existing element to the end (or beginning if&#10;last==False)." ilk="function" name="move_to_end" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="od.copy() -&gt; a shallow copy of od" ilk="function" name="copy" signature="od.copy() -&gt; a shallow copy of od" />
        <scope doc="Pairs are returned in LIFO order if last is true or FIFO&#10;order if false." ilk="function" name="popitem" signature="od.popitem() -&gt; (k, v), return and remove a (key, value) pair." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="value." ilk="function" name="pop" signature="od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" ilk="function" name="setdefault" signature="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope classrefs="dict" doc="defaultdict(default_factory[, ...]) --&gt; dict with default factory&#10;The default factory is called without arguments to produce a new value when a key is not present, in __getitem__ only. A defaultdict compares equal to a dict with the same items. All remaining arguments are treated the same as if they were passed to the dict constructor, including keyword arguments." ilk="class" name="defaultdict">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="__copy__" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="if self.default_factory is None: raise KeyError((key,))&#10;self[key] = value = self.default_factory() return value" ilk="function" name="__missing__" signature="__missing__(key) # Called by __getitem__ for missing key; pseudo-code:" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
    </scope>
    <scope doc="Fix incompatible imports and module references.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_imports">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixImports">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="build_pattern" signature="build_pattern(self)" />
        <scope doc="Compiles self.PATTERN into self.pattern." ilk="function" name="compile_pattern" signature="compile_pattern(self)" />
      </scope>
      <variable citdl="dict" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <scope ilk="function" name="build_pattern" signature="build_pattern(mapping={'repr': 'reprlib', 'tkFileDialog': 'tkinter.filedialog', 'SimpleDialog': 'tkinter.simpledialog', 'StringIO': 'io', 'HTMLParser': 'html.parser', 'ConfigParser': 'configparser', 'UserString': 'collections', 'Tkdnd': 'tkinter.dnd', 'cPickle': 'pickle', 'ttk': 'tkinter.ttk', '__builtin__': 'builtins', 'dbm': 'dbm.ndbm', 'gdbm': 'dbm.gnu', 'xmlrpclib': 'xmlrpc.client', 'tkCommonDialog': 'tkinter.commondialog', 'tkSimpleDialog': 'tkinter.simpledialog', 'cStringIO': 'io', 'thread': '_thread', 'SimpleXMLRPCServer': 'xmlrpc.server', 'dbhash': 'dbm.bsd', 'htmlentitydefs': 'html.entities', 'tkMessageBox': 'tkinter.messagebox', 'tkColorChooser': 'tkinter.colorchooser', 'SimpleHTTPServer': 'http.server', 'dummy_thread': '_dummy_thread', 'Tkconstants': 'tkinter.constants', 'urlparse': 'urllib.parse', 'BaseHTTPServer': 'http.server', 'dumbdbm': 'dbm.dumb', 'robotparser': 'urllib.robotparser', 'tkFont': 'tkinter.font', 'Tix': 'tkinter.tix', '_winreg': 'winreg', 'FileDialog': 'tkinter.filedialog', 'Dialog': 'tkinter.dialog', 'DocXMLRPCServer': 'xmlrpc.server', 'commands': 'subprocess', 'cookielib': 'http.cookiejar', 'Tkinter': 'tkinter', 'Queue': 'queue', 'copy_reg': 'copyreg', 'httplib': 'http.client', 'SocketServer': 'socketserver', 'CGIHTTPServer': 'http.server', 'UserList': 'collections', 'Cookie': 'http.cookies', 'markupbase': '_markupbase', 'ScrolledText': 'tkinter.scrolledtext'})" />
      <import module="fixer_base" />
    </scope>
    <scope doc="JSON token scanner&#10;" ilk="blob" lang="Python3" name="json.scanner">
      <variable citdl="SRE_Pattern" name="NUMBER_RE" />
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="JSON scanner object&#10;" ilk="class" name="c_make_scanner">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
      </scope>
      <scope classrefs="object" doc="JSON scanner object&#10;" ilk="class" name="make_scanner">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
      </scope>
      <scope ilk="function" name="py_make_scanner" signature="py_make_scanner(context)" />
      <import module="re" />
    </scope>
    <scope doc="curses&#10;The main package for curses support for Python.  Normally used by importing the package, and perhaps a particular module inside it.  import curses from curses import textpad curses.initscr() ..." ilk="blob" lang="Python3" name="curses">
      <variable citdl="int" name="ALL_MOUSE_EVENTS" />
      <variable citdl="int" name="A_ALTCHARSET" />
      <variable citdl="int" name="A_ATTRIBUTES" />
      <variable citdl="int" name="A_BLINK" />
      <variable citdl="int" name="A_BOLD" />
      <variable citdl="int" name="A_CHARTEXT" />
      <variable citdl="int" name="A_COLOR" />
      <variable citdl="int" name="A_DIM" />
      <variable citdl="int" name="A_HORIZONTAL" />
      <variable citdl="int" name="A_INVIS" />
      <variable citdl="int" name="A_LEFT" />
      <variable citdl="int" name="A_LOW" />
      <variable citdl="int" name="A_NORMAL" />
      <variable citdl="int" name="A_PROTECT" />
      <variable citdl="int" name="A_REVERSE" />
      <variable citdl="int" name="A_RIGHT" />
      <variable citdl="int" name="A_STANDOUT" />
      <variable citdl="int" name="A_TOP" />
      <variable citdl="int" name="A_UNDERLINE" />
      <variable citdl="int" name="A_VERTICAL" />
      <variable citdl="int" name="BUTTON1_CLICKED" />
      <variable citdl="int" name="BUTTON1_DOUBLE_CLICKED" />
      <variable citdl="int" name="BUTTON1_PRESSED" />
      <variable citdl="int" name="BUTTON1_RELEASED" />
      <variable citdl="int" name="BUTTON1_TRIPLE_CLICKED" />
      <variable citdl="int" name="BUTTON2_CLICKED" />
      <variable citdl="int" name="BUTTON2_DOUBLE_CLICKED" />
      <variable citdl="int" name="BUTTON2_PRESSED" />
      <variable citdl="int" name="BUTTON2_RELEASED" />
      <variable citdl="int" name="BUTTON2_TRIPLE_CLICKED" />
      <variable citdl="int" name="BUTTON3_CLICKED" />
      <variable citdl="int" name="BUTTON3_DOUBLE_CLICKED" />
      <variable citdl="int" name="BUTTON3_PRESSED" />
      <variable citdl="int" name="BUTTON3_RELEASED" />
      <variable citdl="int" name="BUTTON3_TRIPLE_CLICKED" />
      <variable citdl="int" name="BUTTON4_CLICKED" />
      <variable citdl="int" name="BUTTON4_DOUBLE_CLICKED" />
      <variable citdl="int" name="BUTTON4_PRESSED" />
      <variable citdl="int" name="BUTTON4_RELEASED" />
      <variable citdl="int" name="BUTTON4_TRIPLE_CLICKED" />
      <variable citdl="int" name="BUTTON_ALT" />
      <variable citdl="int" name="BUTTON_CTRL" />
      <variable citdl="int" name="BUTTON_SHIFT" />
      <variable citdl="int" name="COLOR_BLACK" />
      <variable citdl="int" name="COLOR_BLUE" />
      <variable citdl="int" name="COLOR_CYAN" />
      <variable citdl="int" name="COLOR_GREEN" />
      <variable citdl="int" name="COLOR_MAGENTA" />
      <variable citdl="int" name="COLOR_RED" />
      <variable citdl="int" name="COLOR_WHITE" />
      <variable citdl="int" name="COLOR_YELLOW" />
      <variable citdl="int" name="ERR" />
      <variable citdl="int" name="KEY_A1" />
      <variable citdl="int" name="KEY_A3" />
      <variable citdl="int" name="KEY_B2" />
      <variable citdl="int" name="KEY_BACKSPACE" />
      <variable citdl="int" name="KEY_BEG" />
      <variable citdl="int" name="KEY_BREAK" />
      <variable citdl="int" name="KEY_BTAB" />
      <variable citdl="int" name="KEY_C1" />
      <variable citdl="int" name="KEY_C3" />
      <variable citdl="int" name="KEY_CANCEL" />
      <variable citdl="int" name="KEY_CATAB" />
      <variable citdl="int" name="KEY_CLEAR" />
      <variable citdl="int" name="KEY_CLOSE" />
      <variable citdl="int" name="KEY_COMMAND" />
      <variable citdl="int" name="KEY_COPY" />
      <variable citdl="int" name="KEY_CREATE" />
      <variable citdl="int" name="KEY_CTAB" />
      <variable citdl="int" name="KEY_DC" />
      <variable citdl="int" name="KEY_DL" />
      <variable citdl="int" name="KEY_DOWN" />
      <variable citdl="int" name="KEY_EIC" />
      <variable citdl="int" name="KEY_END" />
      <variable citdl="int" name="KEY_ENTER" />
      <variable citdl="int" name="KEY_EOL" />
      <variable citdl="int" name="KEY_EOS" />
      <variable citdl="int" name="KEY_EXIT" />
      <variable citdl="int" name="KEY_F0" />
      <variable citdl="int" name="KEY_F1" />
      <variable citdl="int" name="KEY_F10" />
      <variable citdl="int" name="KEY_F11" />
      <variable citdl="int" name="KEY_F12" />
      <variable citdl="int" name="KEY_F13" />
      <variable citdl="int" name="KEY_F14" />
      <variable citdl="int" name="KEY_F15" />
      <variable citdl="int" name="KEY_F16" />
      <variable citdl="int" name="KEY_F17" />
      <variable citdl="int" name="KEY_F18" />
      <variable citdl="int" name="KEY_F19" />
      <variable citdl="int" name="KEY_F2" />
      <variable citdl="int" name="KEY_F20" />
      <variable citdl="int" name="KEY_F21" />
      <variable citdl="int" name="KEY_F22" />
      <variable citdl="int" name="KEY_F23" />
      <variable citdl="int" name="KEY_F24" />
      <variable citdl="int" name="KEY_F25" />
      <variable citdl="int" name="KEY_F26" />
      <variable citdl="int" name="KEY_F27" />
      <variable citdl="int" name="KEY_F28" />
      <variable citdl="int" name="KEY_F29" />
      <variable citdl="int" name="KEY_F3" />
      <variable citdl="int" name="KEY_F30" />
      <variable citdl="int" name="KEY_F31" />
      <variable citdl="int" name="KEY_F32" />
      <variable citdl="int" name="KEY_F33" />
      <variable citdl="int" name="KEY_F34" />
      <variable citdl="int" name="KEY_F35" />
      <variable citdl="int" name="KEY_F36" />
      <variable citdl="int" name="KEY_F37" />
      <variable citdl="int" name="KEY_F38" />
      <variable citdl="int" name="KEY_F39" />
      <variable citdl="int" name="KEY_F4" />
      <variable citdl="int" name="KEY_F40" />
      <variable citdl="int" name="KEY_F41" />
      <variable citdl="int" name="KEY_F42" />
      <variable citdl="int" name="KEY_F43" />
      <variable citdl="int" name="KEY_F44" />
      <variable citdl="int" name="KEY_F45" />
      <variable citdl="int" name="KEY_F46" />
      <variable citdl="int" name="KEY_F47" />
      <variable citdl="int" name="KEY_F48" />
      <variable citdl="int" name="KEY_F49" />
      <variable citdl="int" name="KEY_F5" />
      <variable citdl="int" name="KEY_F50" />
      <variable citdl="int" name="KEY_F51" />
      <variable citdl="int" name="KEY_F52" />
      <variable citdl="int" name="KEY_F53" />
      <variable citdl="int" name="KEY_F54" />
      <variable citdl="int" name="KEY_F55" />
      <variable citdl="int" name="KEY_F56" />
      <variable citdl="int" name="KEY_F57" />
      <variable citdl="int" name="KEY_F58" />
      <variable citdl="int" name="KEY_F59" />
      <variable citdl="int" name="KEY_F6" />
      <variable citdl="int" name="KEY_F60" />
      <variable citdl="int" name="KEY_F61" />
      <variable citdl="int" name="KEY_F62" />
      <variable citdl="int" name="KEY_F63" />
      <variable citdl="int" name="KEY_F7" />
      <variable citdl="int" name="KEY_F8" />
      <variable citdl="int" name="KEY_F9" />
      <variable citdl="int" name="KEY_FIND" />
      <variable citdl="int" name="KEY_HELP" />
      <variable citdl="int" name="KEY_HOME" />
      <variable citdl="int" name="KEY_IC" />
      <variable citdl="int" name="KEY_IL" />
      <variable citdl="int" name="KEY_LEFT" />
      <variable citdl="int" name="KEY_LL" />
      <variable citdl="int" name="KEY_MARK" />
      <variable citdl="int" name="KEY_MAX" />
      <variable citdl="int" name="KEY_MESSAGE" />
      <variable citdl="int" name="KEY_MIN" />
      <variable citdl="int" name="KEY_MOUSE" />
      <variable citdl="int" name="KEY_MOVE" />
      <variable citdl="int" name="KEY_NEXT" />
      <variable citdl="int" name="KEY_NPAGE" />
      <variable citdl="int" name="KEY_OPEN" />
      <variable citdl="int" name="KEY_OPTIONS" />
      <variable citdl="int" name="KEY_PPAGE" />
      <variable citdl="int" name="KEY_PREVIOUS" />
      <variable citdl="int" name="KEY_PRINT" />
      <variable citdl="int" name="KEY_REDO" />
      <variable citdl="int" name="KEY_REFERENCE" />
      <variable citdl="int" name="KEY_REFRESH" />
      <variable citdl="int" name="KEY_REPLACE" />
      <variable citdl="int" name="KEY_RESET" />
      <variable citdl="int" name="KEY_RESIZE" />
      <variable citdl="int" name="KEY_RESTART" />
      <variable citdl="int" name="KEY_RESUME" />
      <variable citdl="int" name="KEY_RIGHT" />
      <variable citdl="int" name="KEY_SAVE" />
      <variable citdl="int" name="KEY_SBEG" />
      <variable citdl="int" name="KEY_SCANCEL" />
      <variable citdl="int" name="KEY_SCOMMAND" />
      <variable citdl="int" name="KEY_SCOPY" />
      <variable citdl="int" name="KEY_SCREATE" />
      <variable citdl="int" name="KEY_SDC" />
      <variable citdl="int" name="KEY_SDL" />
      <variable citdl="int" name="KEY_SELECT" />
      <variable citdl="int" name="KEY_SEND" />
      <variable citdl="int" name="KEY_SEOL" />
      <variable citdl="int" name="KEY_SEXIT" />
      <variable citdl="int" name="KEY_SF" />
      <variable citdl="int" name="KEY_SFIND" />
      <variable citdl="int" name="KEY_SHELP" />
      <variable citdl="int" name="KEY_SHOME" />
      <variable citdl="int" name="KEY_SIC" />
      <variable citdl="int" name="KEY_SLEFT" />
      <variable citdl="int" name="KEY_SMESSAGE" />
      <variable citdl="int" name="KEY_SMOVE" />
      <variable citdl="int" name="KEY_SNEXT" />
      <variable citdl="int" name="KEY_SOPTIONS" />
      <variable citdl="int" name="KEY_SPREVIOUS" />
      <variable citdl="int" name="KEY_SPRINT" />
      <variable citdl="int" name="KEY_SR" />
      <variable citdl="int" name="KEY_SREDO" />
      <variable citdl="int" name="KEY_SREPLACE" />
      <variable citdl="int" name="KEY_SRESET" />
      <variable citdl="int" name="KEY_SRIGHT" />
      <variable citdl="int" name="KEY_SRSUME" />
      <variable citdl="int" name="KEY_SSAVE" />
      <variable citdl="int" name="KEY_SSUSPEND" />
      <variable citdl="int" name="KEY_STAB" />
      <variable citdl="int" name="KEY_SUNDO" />
      <variable citdl="int" name="KEY_SUSPEND" />
      <variable citdl="int" name="KEY_UNDO" />
      <variable citdl="int" name="KEY_UP" />
      <variable citdl="int" name="OK" />
      <variable citdl="int" name="REPORT_MOUSE_POSITION" />
      <import module="_os" />
      <import module="_sys" />
      <scope ilk="function" name="baudrate" />
      <scope ilk="function" name="beep" />
      <scope ilk="function" name="can_change_color" />
      <scope ilk="function" name="cbreak" />
      <scope ilk="function" name="color_content" />
      <scope ilk="function" name="color_pair" />
      <scope ilk="function" name="curs_set" />
      <scope ilk="function" name="def_prog_mode" />
      <scope ilk="function" name="def_shell_mode" />
      <scope ilk="function" name="delay_output" />
      <scope ilk="function" name="doupdate" />
      <scope ilk="function" name="echo" />
      <scope ilk="function" name="endwin" />
      <scope ilk="function" name="erasechar" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <scope ilk="function" name="filter" />
      <scope ilk="function" name="flash" />
      <scope ilk="function" name="flushinp" />
      <scope ilk="function" name="getmouse" />
      <scope ilk="function" name="getsyx" />
      <scope ilk="function" name="getwin" />
      <scope ilk="function" name="halfdelay" />
      <scope ilk="function" name="has_colors" />
      <scope ilk="function" name="has_ic" />
      <scope ilk="function" name="has_il" />
      <scope ilk="function" name="has_key" />
      <scope ilk="function" name="init_color" />
      <scope ilk="function" name="init_pair" />
      <scope ilk="function" name="initscr" signature="initscr()" />
      <scope ilk="function" name="intrflush" />
      <scope ilk="function" name="is_term_resized" />
      <scope ilk="function" name="isendwin" />
      <scope ilk="function" name="keyname" />
      <scope ilk="function" name="killchar" />
      <scope ilk="function" name="longname" />
      <scope ilk="function" name="meta" />
      <scope ilk="function" name="mouseinterval" />
      <scope ilk="function" name="mousemask" />
      <scope ilk="function" name="napms" />
      <scope ilk="function" name="newpad" />
      <scope ilk="function" name="newwin" />
      <scope ilk="function" name="nl" />
      <scope ilk="function" name="nocbreak" />
      <scope ilk="function" name="noecho" />
      <scope ilk="function" name="nonl" />
      <scope ilk="function" name="noqiflush" />
      <scope ilk="function" name="noraw" />
      <scope ilk="function" name="pair_content" />
      <scope ilk="function" name="pair_number" />
      <scope ilk="function" name="putp" />
      <scope ilk="function" name="qiflush" />
      <scope ilk="function" name="raw" />
      <scope ilk="function" name="reset_prog_mode" />
      <scope ilk="function" name="reset_shell_mode" />
      <scope ilk="function" name="resetty" />
      <scope ilk="function" name="resize_term" />
      <scope ilk="function" name="resizeterm" />
      <scope ilk="function" name="savetty" />
      <scope ilk="function" name="setsyx" />
      <scope ilk="function" name="setupterm" />
      <scope ilk="function" name="start_color" signature="start_color()" />
      <scope ilk="function" name="termattrs" />
      <scope ilk="function" name="termname" />
      <scope ilk="function" name="tigetflag" />
      <scope ilk="function" name="tigetnum" />
      <scope ilk="function" name="tigetstr" />
      <scope ilk="function" name="tparm" />
      <scope ilk="function" name="typeahead" />
      <scope ilk="function" name="unctrl" />
      <scope ilk="function" name="unget_wch" />
      <scope ilk="function" name="ungetch" />
      <scope ilk="function" name="ungetmouse" />
      <scope ilk="function" name="update_lines_cols" />
      <scope ilk="function" name="use_default_colors" />
      <scope ilk="function" name="use_env" />
      <variable citdl="bytes" name="version" />
      <scope doc="Wrapper function that initializes curses and calls another&#10;function, restoring normal keyboard/screen behavior on&#10;error." ilk="function" name="wrapper" signature="wrapper(func, *args, **kwds)" />
    </scope>
    <scope doc="Provide the _dbm module as a dbm submodule.&#10;" ilk="blob" lang="Python3" name="dbm.ndbm">
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="error" />
      <variable citdl="str" name="library" />
      <scope doc="Return a database object." ilk="function" name="open" />
    </scope>
    <scope doc="Python interface for the 'lsprof' profiler.&#10;Compatible with the 'profile' module." ilk="blob" lang="Python3" name="cProfile">
      <scope classrefs="Profiler" doc="Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)&#10;Builds a profiler object using the specified timer function. The default timer is a fast built-in one based on real time. For custom timer functions returning integers, time_unit can be a float specifying a scale (i.e. how long each integer unit is, in seconds)." ilk="class" name="Profile">
        <scope doc="# This method is more useful to profile a single function&#10;call." ilk="function" name="runcall" signature="runcall(self, func, *args, **kw)" />
        <scope ilk="function" name="print_stats" signature="print_stats(self, sort=-1)" />
        <scope ilk="function" name="runctx" signature="runctx(self, cmd, globals, locals)" />
        <scope ilk="function" name="run" signature="run(self, cmd)" />
        <scope ilk="function" name="snapshot_stats" signature="snapshot_stats(self)" />
        <scope ilk="function" name="dump_stats" signature="dump_stats(self, file)" />
        <scope ilk="function" name="create_stats" signature="create_stats(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_lsprof" />
      <import module="_pyprofile" />
      <scope ilk="function" name="label" signature="label(code)" />
      <scope ilk="function" name="main" signature="main()" />
      <scope doc="Run statement under profiler optionally saving results in&#10;filename" ilk="function" name="run" signature="run(statement, filename=None, sort=-1)" />
      <scope doc="Run statement under profiler, supplying your own globals and&#10;locals, optionally saving results in filename." ilk="function" name="runctx" signature="runctx(statement, globals, locals, filename=None, sort=-1)" />
    </scope>
    <scope doc="HTML character entity references.&#10;" ilk="blob" lang="Python3" name="html.entities">
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="codepoint2name" />
      <variable citdl="dict" name="entitydefs" />
      <variable citdl="dict" name="html5" />
      <variable citdl="dict" name="name2codepoint" />
    </scope>
    <scope doc="Library that exposes various tables found in the StringPrep RFC 3454.&#10;There are two kinds of tables: sets, for which a member test is provided, and mappings, for which a mapping function is provided." ilk="blob" lang="Python3" name="stringprep">
      <variable citdl="set" name="b1_set" />
      <variable citdl="dict" name="b3_exceptions" />
      <variable citdl="set" name="c22_specials" />
      <variable citdl="set" name="c6_set" />
      <variable citdl="set" name="c7_set" />
      <variable citdl="set" name="c8_set" />
      <variable citdl="set" name="c9_set" />
      <scope ilk="function" name="in_table_a1" signature="in_table_a1(code)" />
      <scope ilk="function" name="in_table_b1" signature="in_table_b1(code)" />
      <scope ilk="function" name="in_table_c11" signature="in_table_c11(code)" />
      <scope ilk="function" name="in_table_c11_c12" signature="in_table_c11_c12(code)" />
      <scope ilk="function" name="in_table_c12" signature="in_table_c12(code)" />
      <scope ilk="function" name="in_table_c21" signature="in_table_c21(code)" />
      <scope ilk="function" name="in_table_c21_c22" signature="in_table_c21_c22(code)" />
      <scope ilk="function" name="in_table_c22" signature="in_table_c22(code)" />
      <scope ilk="function" name="in_table_c3" signature="in_table_c3(code)" />
      <scope ilk="function" name="in_table_c4" signature="in_table_c4(code)" />
      <scope ilk="function" name="in_table_c5" signature="in_table_c5(code)" />
      <scope ilk="function" name="in_table_c6" signature="in_table_c6(code)" />
      <scope ilk="function" name="in_table_c7" signature="in_table_c7(code)" />
      <scope ilk="function" name="in_table_c8" signature="in_table_c8(code)" />
      <scope ilk="function" name="in_table_c9" signature="in_table_c9(code)" />
      <scope ilk="function" name="in_table_d1" signature="in_table_d1(code)" />
      <scope ilk="function" name="in_table_d2" signature="in_table_d2(code)" />
      <scope ilk="function" name="map_table_b2" signature="map_table_b2(a)" />
      <scope ilk="function" name="map_table_b3" signature="map_table_b3(code)" />
      <variable citdl="UCD" name="unicodedata" />
    </scope>
    <scope doc="An RFC 5321 smtp proxy with optional RFC 1870 and RFC 6531 extensions.&#10;Usage: %(program)s [options] [localhost:localport [remotehost:remoteport]]  Options:  --nosetuid -n This program generally tries to setuid `nobody', unless this flag is set.  The setuid call will fail if this program is not run as root (in which case, use this flag). " ilk="blob" lang="Python3" name="smtpd">
      <variable citdl="str" name="COMMASPACE" />
      <variable citdl="int" name="DATA_SIZE_DEFAULT" />
      <variable citdl="Devnull" name="DEBUGSTREAM" />
      <scope classrefs="SMTPServer" doc="&#10;" ilk="class" name="DebuggingServer">
        <scope doc="Override this abstract method to handle messages from the&#10;client." ilk="function" name="process_message" signature="process_message(self, peer, mailfrom, rcpttos, data, **kwargs)" />
        <scope ilk="function" name="_print_message_content" signature="_print_message_content(self, peer, data)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Devnull">
        <scope ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="write" signature="write(self, msg)" />
      </scope>
      <scope classrefs="PureProxy" doc="&#10;" ilk="class" name="MailmanProxy">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
        <scope doc="Override this abstract method to handle messages from the&#10;client." ilk="function" name="process_message" signature="process_message(self, peer, mailfrom, rcpttos, data)" />
      </scope>
      <variable citdl="str" name="NEWLINE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Options" />
      <scope classrefs="SMTPServer" doc="&#10;" ilk="class" name="PureProxy">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
        <scope doc="Override this abstract method to handle messages from the&#10;client." ilk="function" name="process_message" signature="process_message(self, peer, mailfrom, rcpttos, data)" />
        <scope ilk="function" name="_deliver" signature="_deliver(self, mailfrom, rcpttos, data)" />
      </scope>
      <scope classrefs="async_chat" doc="This is an abstract class.  You must derive from this class, and add&#10;the two methods collect_incoming_data() and found_terminator()" ilk="class" name="SMTPChannel">
        <scope doc="# Implementation of base class abstract method" ilk="function" name="found_terminator" signature="found_terminator(self)" />
        <scope doc="# SMTP and ESMTP commands" ilk="function" name="smtp_HELO" signature="smtp_HELO(self, arg)" />
        <scope doc="# Commands that have not been implemented" ilk="function" name="smtp_EXPN" signature="smtp_EXPN(self, arg)" />
        <scope ilk="function" name="_getparams" signature="_getparams(self, params)" />
        <scope ilk="function" name="smtp_HELP" signature="smtp_HELP(self, arg)" />
        <scope ilk="function" name="smtp_NOOP" signature="smtp_NOOP(self, arg)" />
        <scope ilk="function" name="smtp_MAIL" signature="smtp_MAIL(self, arg)" />
        <scope ilk="function" name="smtp_EHLO" signature="smtp_EHLO(self, arg)" />
        <scope ilk="function" name="smtp_VRFY" signature="smtp_VRFY(self, arg)" />
        <scope doc="Reset state variables to their post-DATA state." ilk="function" name="_set_post_data_state" signature="_set_post_data_state(self)" />
        <scope ilk="function" name="_strip_command_keyword" signature="_strip_command_keyword(self, keyword, arg)" />
        <scope ilk="function" name="smtp_RSET" signature="smtp_RSET(self, arg)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, server, conn, addr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=None)" />
        <scope doc="# Overrides base class for convenience." ilk="function" name="push" signature="push(self, msg)" />
        <scope ilk="function" name="smtp_RCPT" signature="smtp_RCPT(self, arg)" />
        <scope doc="# Implementation of base class abstract method" ilk="function" name="collect_incoming_data" signature="collect_incoming_data(self, data)" />
        <scope ilk="function" name="_getaddr" signature="_getaddr(self, arg)" />
        <scope doc="Reset all state variables except the greeting." ilk="function" name="_set_rset_state" signature="_set_rset_state(self)" />
        <scope ilk="function" name="smtp_DATA" signature="smtp_DATA(self, arg)" />
        <scope ilk="function" name="smtp_QUIT" signature="smtp_QUIT(self, arg)" />
      </scope>
      <scope classrefs="dispatcher" doc="&#10;" ilk="class" name="SMTPServer">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=None)" />
        <scope doc="Override this abstract method to handle messages from the&#10;client." ilk="function" name="process_message" signature="process_message(self, peer, mailfrom, rcpttos, data, **kwargs)" />
        <scope ilk="function" name="handle_accepted" signature="handle_accepted(self, conn, addr)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="asynchat" />
      <import module="asyncore" />
      <import module="collections" />
      <import module="errno" />
      <scope doc="addr-spec = local-part &quot;@&quot; domain" ilk="function" name="get_addr_spec" signature="get_addr_spec(value)" />
      <scope doc="angle-addr = [CFWS] &quot;&lt;&quot; addr-spec &quot;&gt;&quot; [CFWS] / obs-angle-&#10;addr obs-angle-addr = [CFWS] &quot;&lt;&quot; obs-route addr-spec &quot;&gt;&quot;&#10;[CFWS]" ilk="function" name="get_angle_addr" signature="get_angle_addr(value)" />
      <import module="getopt" />
      <import module="os" />
      <scope ilk="function" name="parseargs" signature="parseargs()" />
      <variable citdl="str" name="program" />
      <import module="socket" />
      <import module="sys" />
      <import module="time" />
      <scope ilk="function" name="usage" signature="usage(code, msg='')" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="distutils.command.build_clib&#10;Implements the Distutils 'build_clib' command, to build a C/C++ library that is included in the module distribution and needed by an extension module." ilk="blob" lang="Python3" name="distutils.command.build_clib">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_clib">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that the list of libraries is valid." ilk="function" name="check_library_list" signature="check_library_list(self, libraries)" />
        <scope ilk="function" name="get_library_names" signature="get_library_names(self)" />
        <scope ilk="function" name="get_source_files" signature="get_source_files(self)" />
        <scope ilk="function" name="build_libraries" signature="build_libraries(self, libraries)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope doc="Do any platform-specific customization of a CCompiler&#10;instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <import module="log" />
      <import module="os" />
      <scope ilk="function" name="show_compilers" signature="show_compilers()" />
    </scope>
    <scope doc="Header value parser implementing various email-related RFC parsing rules.&#10;The parsing methods defined in this module implement various email related parsing rules.  Principal among them is RFC 5322, which is the followon to RFC 2822 and primarily a clarification of the former.  It also implements RFC 2047 encoded word decoding.  RFC 5322 goes to considerable trouble to maintain backward compatibility with RFC 822 in the parse phase, while cleaning up the structure on the generation phase.  This parser supports correct RFC 5322 generation by tagging white space as folding white space only when folding is allowed in the non-obsolete rule sets.  Actually, the parser is even more generous when accepting input than RFC" ilk="blob" lang="Python3" name="email._header_value_parser">
      <variable citdl="set" name="ASPECIALS" />
      <variable citdl="set" name="ATOM_ENDS" />
      <variable citdl="set" name="ATTRIBUTE_ENDS" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="AddrSpec" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Address" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="AddressList" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="AngleAddr" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Atom" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Attribute" />
      <scope classrefs="QuotedString" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="BareQuotedString">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="WhiteSpaceTokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="CFWSList">
        <scope ilk="function" name="has_leading_comment" signature="has_leading_comment(self)" />
      </scope>
      <variable citdl="set" name="CFWS_LEADER" />
      <scope classrefs="WhiteSpaceTokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Comment">
        <scope ilk="function" name="quote" signature="quote(self, value)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="ParameterizedHeaderValue" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ContentDisposition" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ContentTransferEncoding" />
      <scope classrefs="ParameterizedHeaderValue" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ContentType" />
      <variable citdl="ValueTerminal" name="DOT" />
      <variable citdl="set" name="DOT_ATOM_ENDS" />
      <scope classrefs="Phrase" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="DisplayName" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Domain" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="DomainLiteral" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="DotAtom" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="DotAtomText" />
      <scope classrefs="WhiteSpaceTerminal" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="EWWhiteSpaceTerminal">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="set" name="EXTENDED_ATTRIBUTE_ENDS" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="EncodedWord" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Group" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="GroupList" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Header">
        <scope ilk="function" name="_fold" signature="_fold(self, folded)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="HeaderLabel" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="InvalidMailbox" />
      <scope classrefs="Parameter" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="InvalidParameter" />
      <variable citdl="ValueTerminal" name="ListSeparator" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="LocalPart" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="MIMEVersion" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Mailbox" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="MailboxList" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="MimeParameters">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="NameAddr" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ObsLocalPart" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ObsRoute" />
      <scope classrefs="dict" doc="Dictionary that remembers insertion order&#10;" ilk="class" name="OrderedDict">
        <scope doc="od.clear() -&gt; None.  Remove all items from od." ilk="function" name="clear" signature="od.clear() -&gt; None.  Remove all items from od." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="od.__reversed__() &lt;==&gt; reversed(od)" ilk="function" name="__reversed__" signature="od.__reversed__() &lt;==&gt; reversed(od)" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Move an existing element to the end (or beginning if&#10;last==False)." ilk="function" name="move_to_end" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="od.copy() -&gt; a shallow copy of od" ilk="function" name="copy" signature="od.copy() -&gt; a shallow copy of od" />
        <scope doc="Pairs are returned in LIFO order if last is true or FIFO&#10;order if false." ilk="function" name="popitem" signature="od.popitem() -&gt; (k, v), return and remove a (key, value) pair." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="value." ilk="function" name="pop" signature="od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" ilk="function" name="setdefault" signature="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <variable citdl="set" name="PHRASE_ENDS" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Parameter" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="ParameterizedHeaderValue" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Phrase">
        <scope ilk="function" name="cte_encode" signature="cte_encode(self, charset, policy)" />
        <scope ilk="function" name="_fold" signature="_fold(self, folded)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="QuotedString" />
      <variable citdl="ValueTerminal" name="RouteComponentMarker" />
      <variable citdl="set" name="SPECIALS" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Section" />
      <variable citdl="set" name="TOKEN_ENDS" />
      <variable citdl="set" name="TSPECIALS" />
      <scope classrefs="str" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="Terminal">
        <scope ilk="function" name="pop_trailing_ws" signature="pop_trailing_ws(self)" />
        <scope ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope ilk="function" name="pop_leading_fws" signature="pop_leading_fws(self)" />
        <scope ilk="function" name="cte_encode" signature="cte_encode(self, charset, policy)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, value, token_type)" />
        <scope ilk="function" name="_pp" signature="_pp(self, indent='')" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="has_leading_comment" signature="has_leading_comment(self)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Token" />
      <scope classrefs="list" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="TokenList">
        <scope ilk="function" name="pop_trailing_ws" signature="pop_trailing_ws(self)" />
        <scope ilk="function" name="_fold" signature="_fold(self, folded)" />
        <scope ilk="function" name="as_encoded_word" signature="as_encoded_word(self, charset)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kw)" />
        <scope ilk="function" name="cte_encode" signature="cte_encode(self, charset, policy)" />
        <scope ilk="function" name="startswith_fws" signature="startswith_fws(self)" />
        <scope ilk="function" name="_pp" signature="_pp(self, indent='')" />
        <scope ilk="function" name="has_leading_comment" signature="has_leading_comment(self)" />
        <scope ilk="function" name="pprint" signature="pprint(self, indent='')" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="ppstr" signature="ppstr(self, indent='')" />
        <scope ilk="function" name="pop_leading_fws" signature="pop_leading_fws(self)" />
        <scope ilk="function" name="fold" signature="fold(self, *, policy)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="UnstructuredTokenList">
        <scope ilk="function" name="cte_encode" signature="cte_encode(self, charset, policy)" />
        <scope ilk="function" name="_fold" signature="_fold(self, folded)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Value" />
      <scope classrefs="Terminal" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="ValueTerminal">
        <scope ilk="function" name="startswith_fws" signature="startswith_fws(self)" />
        <scope ilk="function" name="as_encoded_word" signature="as_encoded_word(self, charset)" />
      </scope>
      <variable citdl="set" name="WSP" />
      <scope classrefs="Terminal" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="WhiteSpaceTerminal">
        <scope ilk="function" name="startswith_fws" signature="startswith_fws(self)" />
      </scope>
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="WhiteSpaceTokenList" />
      <scope classrefs="TokenList" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="Word" />
      <import module="_ew" />
      <import module="errors" />
      <scope doc="addr-spec = local-part &quot;@&quot; domain" ilk="function" name="get_addr_spec" signature="get_addr_spec(value)" />
      <scope doc="address = mailbox / group" ilk="function" name="get_address" signature="get_address(value)" />
      <scope doc="address_list = (address *(&quot;,&quot; address)) / obs-addr-list obs-&#10;addr-list = *([CFWS] &quot;,&quot;) address *(&quot;,&quot; [address / CFWS])" ilk="function" name="get_address_list" signature="get_address_list(value)" />
      <scope doc="angle-addr = [CFWS] &quot;&lt;&quot; addr-spec &quot;&gt;&quot; [CFWS] / obs-angle-&#10;addr obs-angle-addr = [CFWS] &quot;&lt;&quot; obs-route addr-spec &quot;&gt;&quot;&#10;[CFWS]" ilk="function" name="get_angle_addr" signature="get_angle_addr(value)" />
      <scope doc="atext = &lt;matches _atext_matcher&gt;" ilk="function" name="get_atext" signature="get_atext(value)" />
      <scope doc="atom = [CFWS] 1*atext [CFWS]" ilk="function" name="get_atom" signature="get_atom(value)" />
      <scope doc="[CFWS] 1*attrtext [CFWS]" ilk="function" name="get_attribute" signature="get_attribute(value)" />
      <scope doc="attrtext = 1*(any non-ATTRIBUTE_ENDS character)" ilk="function" name="get_attrtext" signature="get_attrtext(value)" />
      <scope doc="bare-quoted-string = DQUOTE *([FWS] qcontent) [FWS] DQUOTE" ilk="function" name="get_bare_quoted_string" signature="get_bare_quoted_string(value)" />
      <scope doc="CFWS = (1*([FWS] comment) [FWS]) / FWS" ilk="function" name="get_cfws" signature="get_cfws(value)" />
      <scope doc="comment = &quot;(&quot; *([FWS] ccontent) [FWS] &quot;)&quot; ccontent = ctext /&#10;quoted-pair / comment" ilk="function" name="get_comment" signature="get_comment(value)" />
      <scope doc="display-name = phrase" ilk="function" name="get_display_name" signature="get_display_name(value)" />
      <scope doc="domain = dot-atom / domain-literal / obs-domain obs-domain =&#10;atom *(&quot;.&quot; atom))" ilk="function" name="get_domain" signature="get_domain(value)" />
      <scope doc="domain-literal = [CFWS] &quot;[&quot; *([FWS] dtext) [FWS] &quot;]&quot; [CFWS]" ilk="function" name="get_domain_literal" signature="get_domain_literal(value)" />
      <scope doc="dot-atom = [CFWS] dot-atom-text [CFWS]" ilk="function" name="get_dot_atom" signature="get_dot_atom(value)" />
      <scope doc="dot-text = 1*atext *(&quot;.&quot; 1*atext)" ilk="function" name="get_dot_atom_text" signature="get_dot_atom_text(value)" />
      <scope doc="dtext = &lt;printable ascii except \ [ ]&gt; / obs-dtext obs-dtext&#10;= obs-NO-WS-CTL / quoted-pair" ilk="function" name="get_dtext" signature="get_dtext(value)" />
      <scope doc="encoded-word = &quot;=?&quot; charset &quot;?&quot; encoding &quot;?&quot; encoded-text&#10;&quot;?=&quot;" ilk="function" name="get_encoded_word" signature="get_encoded_word(value)" />
      <scope doc="[CFWS] 1*extended_attrtext [CFWS]" ilk="function" name="get_extended_attribute" signature="get_extended_attribute(value)" />
      <scope doc="attrtext = 1*(any non-ATTRIBUTE_ENDS character plus '%')" ilk="function" name="get_extended_attrtext" signature="get_extended_attrtext(value)" />
      <scope doc="FWS = 1*WSP" ilk="function" name="get_fws" signature="get_fws(value)" />
      <scope doc="group = display-name &quot;:&quot; [group-list] &quot;;&quot; [CFWS]" ilk="function" name="get_group" signature="get_group(value)" />
      <scope doc="group-list = mailbox-list / CFWS / obs-group-list obs-group-&#10;list = 1*([CFWS] &quot;,&quot;) [CFWS]" ilk="function" name="get_group_list" signature="get_group_list(value)" />
      <scope doc="Read everything up to one of the chars in endchars." ilk="function" name="get_invalid_mailbox" signature="get_invalid_mailbox(value, endchars)" />
      <scope doc="Read everything up to the next ';'." ilk="function" name="get_invalid_parameter" signature="get_invalid_parameter(value)" />
      <scope doc="local-part = dot-atom / quoted-string / obs-local-part" ilk="function" name="get_local_part" signature="get_local_part(value)" />
      <scope doc="mailbox = name-addr / addr-spec" ilk="function" name="get_mailbox" signature="get_mailbox(value)" />
      <scope doc="mailbox-list = (mailbox *(&quot;,&quot; mailbox)) / obs-mbox-list obs-&#10;mbox-list = *([CFWS] &quot;,&quot;) mailbox *(&quot;,&quot; [mailbox / CFWS])" ilk="function" name="get_mailbox_list" signature="get_mailbox_list(value)" />
      <scope doc="name-addr = [display-name] angle-addr" ilk="function" name="get_name_addr" signature="get_name_addr(value)" />
      <scope doc="obs-local-part = word *(&quot;.&quot; word)" ilk="function" name="get_obs_local_part" signature="get_obs_local_part(value)" />
      <scope doc="obs-route = obs-domain-list &quot;:&quot; obs-domain-list = *(CFWS /&#10;&quot;,&quot;) &quot;@&quot; domain *(&quot;,&quot; [CFWS] [&quot;@&quot; domain])" ilk="function" name="get_obs_route" signature="get_obs_route(value)" />
      <scope doc="attribute [section] [&quot;*&quot;] [CFWS] &quot;=&quot; value" ilk="function" name="get_parameter" signature="get_parameter(value)" />
      <scope doc="phrase = 1*word / obs-phrase obs-phrase = word *(word / &quot;.&quot;&#10;/ CFWS)" ilk="function" name="get_phrase" signature="get_phrase(value)" />
      <scope doc="qcontent = qtext / quoted-pair" ilk="function" name="get_qcontent" signature="get_qcontent(value)" />
      <scope doc="ctext = &lt;printable ascii except \ ( )&gt;" ilk="function" name="get_qp_ctext" signature="get_qp_ctext(value)" />
      <scope doc="quoted-string = [CFWS] &lt;bare-quoted-string&gt; [CFWS]" ilk="function" name="get_quoted_string" signature="get_quoted_string(value)" />
      <scope doc="'*' digits" ilk="function" name="get_section" signature="get_section(value)" />
      <scope doc="token = [CFWS] 1*ttext [CFWS]" ilk="function" name="get_token" signature="get_token(value)" />
      <scope doc="ttext = &lt;matches _ttext_matcher&gt;" ilk="function" name="get_ttext" signature="get_ttext(value)" />
      <scope doc="unstructured = (*([FWS] vchar) *WSP) / obs-unstruct obs-&#10;unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS) obs-&#10;utext = %d0 / obs-NO-WS-CTL / LF / CR" ilk="function" name="get_unstructured" signature="get_unstructured(value)" />
      <scope doc="quoted-string / attribute" ilk="function" name="get_value" signature="get_value(value)" />
      <scope doc="word = atom / quoted-string" ilk="function" name="get_word" signature="get_word(value)" />
      <variable citdl="str" name="hexdigits" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object&#10;Return a callable object that fetches the given item(s) from its operand. After f = itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])" ilk="class" name="itemgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="disposition-type *( &quot;;&quot; parameter )" ilk="function" name="parse_content_disposition_header" signature="parse_content_disposition_header(value)" />
      <scope doc="mechanism" ilk="function" name="parse_content_transfer_encoding_header" signature="parse_content_transfer_encoding_header(value)" />
      <scope doc="maintype &quot;/&quot; subtype *( &quot;;&quot; parameter )" ilk="function" name="parse_content_type_header" signature="parse_content_type_header(value)" />
      <scope doc="parameter *( &quot;;&quot; parameter )" ilk="function" name="parse_mime_parameters" signature="parse_mime_parameters(value)" />
      <scope doc="mime-version = [CFWS] 1*digit [CFWS] &quot;.&quot; [CFWS] 1*digit&#10;[CFWS]" ilk="function" name="parse_mime_version" signature="parse_mime_version(value)" />
      <scope ilk="function" name="quote_string" signature="quote_string(value)" />
      <import module="re" />
      <import module="urllib" />
      <import module="utils" />
    </scope>
    <scope doc="Abstract Transport class.&#10;" ilk="blob" lang="Python3" name="asyncio.transports">
      <scope classrefs="object" doc="Base class for transports.&#10;" ilk="class" name="BaseTransport">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, extra=None)" />
        <scope doc="Close the transport." ilk="function" name="close" signature="close(self)" />
        <scope doc="Get optional transport information." ilk="function" name="get_extra_info" signature="get_extra_info(self, name, default=None)" />
        <scope doc="Return True if the transport is closing or closed." ilk="function" name="is_closing" signature="is_closing(self)" />
      </scope>
      <scope classrefs="BaseTransport" doc="Interface for datagram (UDP) transports.&#10;" ilk="class" name="DatagramTransport">
        <scope doc="Send data to the transport." ilk="function" name="sendto" signature="sendto(self, data, addr=None)" />
        <scope doc="Close the transport immediately." ilk="function" name="abort" signature="abort(self)" />
      </scope>
      <scope classrefs="BaseTransport" doc="Interface for read-only transports.&#10;" ilk="class" name="ReadTransport">
        <scope doc="Pause the receiving end." ilk="function" name="pause_reading" signature="pause_reading(self)" />
        <scope doc="Resume the receiving end." ilk="function" name="resume_reading" signature="resume_reading(self)" />
      </scope>
      <scope classrefs="BaseTransport" doc="Base class for transports.&#10;" ilk="class" name="SubprocessTransport">
        <scope doc="Get transport for pipe with number fd." ilk="function" name="get_pipe_transport" signature="get_pipe_transport(self, fd)" />
        <scope doc="Send signal to subprocess." ilk="function" name="send_signal" signature="send_signal(self, signal)" />
        <scope doc="Get subprocess returncode." ilk="function" name="get_returncode" signature="get_returncode(self)" />
        <scope doc="Get subprocess id." ilk="function" name="get_pid" signature="get_pid(self)" />
        <scope doc="Kill the subprocess." ilk="function" name="kill" signature="kill(self)" />
        <scope doc="Stop the subprocess." ilk="function" name="terminate" signature="terminate(self)" />
      </scope>
      <scope classrefs="ReadTransport WriteTransport" doc="Interface representing a bidirectional transport.&#10;There may be several implementations, but typically, the user does not implement new transports; rather, the platform provides some useful transports that are implemented using the platform's best practices.  The user never instantiates a transport directly; they call a utility function, passing it a protocol factory and other information necessary to create the transport and protocol.  (E.g. EventLoop.create_connection() or EventLoop.create_server().) " ilk="class" name="Transport" />
      <scope classrefs="BaseTransport" doc="Interface for write-only transports.&#10;" ilk="class" name="WriteTransport">
        <scope doc="Return the current size of the write buffer." ilk="function" name="get_write_buffer_size" signature="get_write_buffer_size(self)" />
        <scope doc="Set the high- and low-water limits for write flow control." ilk="function" name="set_write_buffer_limits" signature="set_write_buffer_limits(self, high=None, low=None)" />
        <scope doc="Close the transport immediately." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="Write some data bytes to the transport." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Return True if this transport supports write_eof(), False if&#10;not." ilk="function" name="can_write_eof" signature="can_write_eof(self)" />
        <scope doc="Write a list (or any iterable) of data bytes to the&#10;transport." ilk="function" name="writelines" signature="writelines(self, list_of_data)" />
        <scope doc="Close the write end after flushing buffered data." ilk="function" name="write_eof" signature="write_eof(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="compat" />
    </scope>
    <scope doc="Fixer for exec.&#10;This converts usages of the exec statement into calls to a built-in exec() function.  exec code in ns1, ns2 -&gt; exec(code, ns1, ns2)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_exec">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixExec">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="pytree" />
    </scope>
    <scope doc="Fixer for dict methods.&#10;d.keys() -&gt; list(d.keys()) d.items() -&gt; list(d.items()) d.values() -&gt; list(d.values())  d.iterkeys() -&gt; iter(d.keys()) d.iteritems() -&gt; iter(d.items()) d.itervalues() -&gt; iter(d.values())  d.viewkeys() -&gt; d.keys() d.viewitems() -&gt; d.items()" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_dict">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, '('), rparen=Leaf(8, ')'))" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixDict">
        <scope ilk="function" name="in_special_context" signature="in_special_context(self, node, isiter)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <import module="fixer_base" />
      <import module="fixer_util" />
      <variable citdl="set" name="iter_exempt" />
      <import module="patcomp" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Fixer for unicode.&#10;* Changes unicode to str and unichr to chr.  * If &quot;...\u...&quot; is not unicode literal change it into &quot;...\\u...&quot;.  * Change u&quot;...&quot; into &quot;...&quot;." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_unicode">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixUnicode">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
      </scope>
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="Provides classes to represent module version numbers (one class for&#10;each style of version numbering).  There are currently two such classes implemented: StrictVersion and LooseVersion.  Every version number class implements the following interface: * the 'parse' method takes a string and parses it to some internal representation; if the string is an invalid version number, 'parse' raises a ValueError exception * the class constructor takes an optional string argument which, if supplied, is passed to 'parse' * __str__ reconstructs the string that was passed to 'parse' (or" ilk="blob" lang="Python3" name="distutils.version">
      <scope classrefs="Version" doc="Version numbering for anarchists and software realists.&#10;Implements the standard interface for version number classes as described above.  A version number consists of a series of numbers, separated by either periods or strings of letters.  When comparing version numbers, the numeric components will be compared numerically, and the alphabetic components lexically.  The following are all valid version numbers, in no particular order:  1.5.1 1.5.2b2 161" ilk="class" name="LooseVersion">
        <scope ilk="function" name="parse" signature="parse(self, vstring)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, vstring=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Version" doc="Version numbering for anal retentives and software idealists.&#10;Implements the standard interface for version number classes as described above.  A version number consists of two or three dot-separated numeric components, with an optional &quot;pre-release&quot; tag on the end.  The pre-release tag consists of the letter 'a' or 'b' followed by a number.  If the numeric components of two version numbers are equal, then one with a pre-release tag will always be deemed earlier (lesser) than one without.  The following are valid version numbers (shown in the order that would be obtained by sorting according to the supplied cmp function):" ilk="class" name="StrictVersion">
        <scope ilk="function" name="parse" signature="parse(self, vstring)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="_cmp" signature="_cmp(self, other)" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for version numbering classes.  Just provides&#10;constructor (__init__) and reproducer (__repr__), because those seem to be the same for all version numbering classes; and route rich comparisons to _cmp." ilk="class" name="Version">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, vstring=None)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <import module="re" />
    </scope>
    <scope doc="# Access WeakSet through the weakref module.&#10;# This code is separated-out because it is needed # by abc.py to load everything else at startup." ilk="blob" lang="Python3" name="_weakrefset">
      <scope classrefs="object" doc="&#10;" ilk="class" name="WeakSet">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="symmetric_difference_update" signature="symmetric_difference_update(self, other)" />
        <scope ilk="function" name="union" signature="union(self, other)" />
        <scope ilk="function" name="difference_update" signature="difference_update(self, other)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope ilk="function" name="difference" signature="difference(self, other)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope ilk="function" name="symmetric_difference" signature="symmetric_difference(self, other)" />
        <scope ilk="function" name="remove" signature="remove(self, item)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="issuperset" signature="issuperset(self, other)" />
        <scope ilk="function" name="intersection_update" signature="intersection_update(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope ilk="function" name="intersection" signature="intersection(self, other)" />
        <scope ilk="function" name="add" signature="add(self, item)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope ilk="function" name="update" signature="update(self, other)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="issubset" signature="issubset(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, other)" />
        <scope ilk="function" name="discard" signature="discard(self, item)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ref">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
    </scope>
    <scope doc="Macintosh binhex compression/decompression.&#10;easy interface: binhex(inputfilename, outputfilename) hexbin(inputfilename, outputfilename)" ilk="blob" lang="Python3" name="binhex">
      <scope classrefs="object" doc="&#10;" ilk="class" name="BinHex">
        <scope ilk="function" name="_writecrc" signature="_writecrc(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name_finfo_dlen_rlen, ofp)" />
        <scope ilk="function" name="_write" signature="_write(self, data)" />
        <scope ilk="function" name="_writeinfo" signature="_writeinfo(self, name, finfo)" />
        <scope ilk="function" name="close_data" signature="close_data(self)" />
        <scope ilk="function" name="write_rsrc" signature="write_rsrc(self, data)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="FInfo">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="HexBin">
        <scope ilk="function" name="read" signature="read(self, *n)" />
        <scope ilk="function" name="read_rsrc" signature="read_rsrc(self, *n)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_read" signature="_read(self, len)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, ifp)" />
        <scope ilk="function" name="_readheader" signature="_readheader(self)" />
        <scope ilk="function" name="close_data" signature="close_data(self)" />
        <scope ilk="function" name="_checkcrc" signature="_checkcrc(self)" />
      </scope>
      <variable citdl="int" name="LINELEN" />
      <variable citdl="int" name="REASONABLY_LARGE" />
      <variable citdl="bytes" name="RUNCHAR" />
      <variable citdl="list" name="__all__" />
      <import module="binascii" />
      <scope doc="create binhex-encoded copy of a file" ilk="function" name="binhex" signature="binhex(infilename, outfilename)" />
      <scope ilk="function" name="getfileinfo" signature="getfileinfo(name)" />
      <scope doc="Decode binhexed file" ilk="function" name="hexbin" signature="hexbin(infilename, outfilename)" />
      <import module="io" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="openrsrc">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
        <scope ilk="function" name="read" signature="read(self, *args)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="write" signature="write(self, *args)" />
      </scope>
      <import module="os" />
      <import module="struct" />
    </scope>
    <scope doc="faulthandler module.&#10;" ilk="blob" lang="Python3" name="faulthandler">
      <scope doc="cancel the previous call to dump_traceback_later()." ilk="function" name="cancel_dump_traceback_later" signature="cancel_dump_traceback_later():" />
      <scope doc="disable the fault handler" ilk="function" name="disable" signature="disable()" />
      <scope doc="dump the traceback of the current thread, or of all threads&#10;if all_threads is True, into file" ilk="function" name="dump_traceback" signature="dump_traceback(file=sys.stderr, all_threads=True)" />
      <scope doc="dump the traceback of all threads in timeout seconds, or&#10;each timeout seconds if repeat is True." ilk="function" name="dump_traceback_later" signature="dump_traceback_later(timeout, repeat=False, file=sys.stderrn, exit=False):" />
      <scope doc="enable the fault handler" ilk="function" name="enable" signature="enable(file=sys.stderr, all_threads=True)" />
      <scope doc="is_enabled()-&gt;bool: check if the handler is enabled" ilk="function" name="is_enabled" signature="is_enabled()-&gt;bool: check if the handler is enabled" />
      <scope doc="register an handler for the signal 'signum': dump the&#10;traceback of the current thread, or of all threads if&#10;all_threads is True, into file" ilk="function" name="register" signature="register(signum, file=sys.stderr, all_threads=True, chain=False)" />
      <scope doc="unregister the handler of the signal 'signum' registered by&#10;register()" ilk="function" name="unregister" signature="unregister(signum)" />
    </scope>
    <scope doc="A Future class similar to the one in PEP 3148.&#10;" ilk="blob" lang="Python3" name="asyncio.futures">
      <scope classrefs="Error" doc="The Future was cancelled.&#10;" ilk="class" name="CancelledError" />
      <scope classrefs="Exception" doc="Base class for all future-related exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="object" doc="This class is *almost* compatible with concurrent.futures.Future.&#10;Differences:  - result() and exception() do not take a timeout argument and raise an exception when the future isn't done yet.  - Callbacks registered with add_done_callback() are always called via the event loop's call_soon_threadsafe().  - This class is not compatible with the wait() and as_completed() methods in the concurrent.futures package." ilk="class" name="Future">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Return the exception that was set on this future." ilk="function" name="exception" signature="exception(self)" />
        <scope doc="Cancel the future and schedule callbacks." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Remove all instances of a callback from the &quot;call when done&quot;&#10;list." ilk="function" name="remove_done_callback" signature="remove_done_callback(self, fn)" />
        <scope doc="Add a callback to be run when the future becomes done." ilk="function" name="add_done_callback" signature="add_done_callback(self, fn)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize the future." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Return True if the future is done." ilk="function" name="done" signature="done(self)" />
        <scope ilk="function" name="_Future__format_callbacks" signature="_Future__format_callbacks(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the result this future represents." ilk="function" name="result" signature="result(self)" />
        <scope doc="Internal: Ask the event loop to call all callbacks." ilk="function" name="_schedule_callbacks" signature="_schedule_callbacks(self)" />
        <scope doc="Mark the future done and set an exception." ilk="function" name="set_exception" signature="set_exception(self, exception)" />
        <scope ilk="function" name="__await__" signature="__await__(self)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Mark the future done and set its result." ilk="function" name="set_result" signature="set_result(self, result)" />
        <scope doc="Return True if the future was cancelled." ilk="function" name="cancelled" signature="cancelled(self)" />
      </scope>
      <scope classrefs="Error" doc="The operation is not allowed in this state.&#10;" ilk="class" name="InvalidStateError" />
      <variable citdl="int" name="STACK_DEBUG" />
      <scope classrefs="Error" doc="The operation exceeded the given deadline.&#10;" ilk="class" name="TimeoutError" />
      <variable citdl="list" name="__all__" />
      <import module="compat" />
      <import module="concurrent" />
      <import module="events" />
      <import module="logging" />
      <import module="reprlib" />
      <import module="sys" />
      <import module="traceback" />
      <scope doc="Wrap concurrent.futures.Future object." ilk="function" name="wrap_future" signature="wrap_future(future, *, loop=None)" />
    </scope>
    <scope doc="Fixer that changes 'a ,b' into 'a, b'.&#10;This also changes '{a :b}' into '{a: b}', but does not touch other uses of colons.  It does not touch other uses of whitespace." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_ws_comma">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixWsComma">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="distutils.ccompiler&#10;Contains CCompiler, an abstract base class that defines the interface for the Distutils compiler abstraction model." ilk="blob" lang="Python3" name="distutils.ccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="CCompiler">
        <scope doc="Add 'libname' to the list of libraries that will be included&#10;in all links driven by this compiler object." ilk="function" name="add_library" signature="add_library(self, libname)" />
        <scope doc="Define the executables (and options for them) that will be&#10;run to perform the various stages of compilation." ilk="function" name="set_executables" signature="set_executables(self, **kwargs)" />
        <scope doc="Add 'object' to the list of object files (or analogues, such&#10;as explicitly named library files or the output of &quot;resource&#10;compilers&quot;) to be included in every link driven by this&#10;compiler object." ilk="function" name="add_link_object" signature="add_link_object(self, object)" />
        <scope doc="Detect the language of a given file, or list of files." ilk="function" name="detect_language" signature="detect_language(self, sources)" />
        <scope ilk="function" name="shared_object_filename" signature="shared_object_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for libraries specified to 'add_library()' and&#10;'set_libraries()'." ilk="function" name="add_library_dir" signature="add_library_dir(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope ilk="function" name="link_shared_lib" signature="link_shared_lib(self, objects, output_libname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope ilk="function" name="move_file" signature="move_file(self, src, dst)" />
        <scope doc="Return true if we need to relink the files listed in&#10;'objects' to recreate 'output_file'." ilk="function" name="_need_link" signature="_need_link(self, objects, output_file)" />
        <scope ilk="function" name="_find_macro" signature="_find_macro(self, name)" />
        <scope doc="Set the list of directories that will be searched to 'dirs'&#10;(a list of strings)." ilk="function" name="set_include_dirs" signature="set_include_dirs(self, dirs)" />
        <scope doc="Typecheck and fix up some arguments supplied to various&#10;methods." ilk="function" name="_fix_object_args" signature="_fix_object_args(self, objects, output_dir)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
        <scope ilk="function" name="_get_cc_args" signature="_get_cc_args(self, pp_opts, debug, before)" />
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="set_executable" signature="set_executable(self, key, value)" />
        <scope doc="Typecheck and fix-up some of the arguments to the&#10;'compile()' method, and return fixed-up values." ilk="function" name="_fix_compile_args" signature="_fix_compile_args(self, output_dir, macros, include_dirs)" />
        <scope ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope ilk="function" name="executable_filename" signature="executable_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Set the list of libraries to be included in all links driven&#10;by this compiler object to 'libnames' (a list of strings)." ilk="function" name="set_libraries" signature="set_libraries(self, libnames)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Set the list of library search directories to 'dirs' (a list&#10;of strings)." ilk="function" name="set_library_dirs" signature="set_library_dirs(self, dirs)" />
        <scope doc="Undefine a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="undefine_macro" signature="undefine_macro(self, name)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for shared libraries at runtime." ilk="function" name="add_runtime_library_dir" signature="add_runtime_library_dir(self, dir)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope ilk="function" name="library_filename" signature="library_filename(self, libname, lib_type='static', strip_dir=0, output_dir='')" />
        <scope ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Typecheck and fix up some of the arguments supplied to the&#10;'link_*' methods." ilk="function" name="_fix_lib_args" signature="_fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)" />
        <scope doc="Set the list of object files (or analogues) to be included&#10;in every link to 'objects'." ilk="function" name="set_link_objects" signature="set_link_objects(self, objects)" />
        <scope doc="Return a boolean indicating whether funcname is supported on&#10;the current platform." ilk="function" name="has_function" signature="has_function(self, funcname, includes=None, include_dirs=None, libraries=None, library_dirs=None)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Set the list of directories to search for shared libraries&#10;at runtime to 'dirs' (a list of strings)." ilk="function" name="set_runtime_library_dirs" signature="set_runtime_library_dirs(self, dirs)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Process arguments and decide which source files to compile." ilk="function" name="_setup_compile" signature="_setup_compile(self, outdir, macros, incdirs, sources, depends, extra)" />
        <scope ilk="function" name="spawn" signature="spawn(self, cmd)" />
        <scope ilk="function" name="link_executable" signature="link_executable(self, objects, output_progname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None)" />
        <scope doc="Decide which souce files must be recompiled." ilk="function" name="_prep_compile" signature="_prep_compile(self, sources, output_dir, depends=None)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="link_shared_object" signature="link_shared_object(self, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Define a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="define_macro" signature="define_macro(self, name, value=None)" />
        <scope doc="Ensures that every element of 'definitions' is a valid macro&#10;definition, ie." ilk="function" name="_check_macro_definitions" signature="_check_macro_definitions(self, definitions)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for header files." ilk="function" name="add_include_dir" signature="add_include_dir(self, dir)" />
      </scope>
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <variable citdl="dict" name="compiler_class" />
      <scope doc="Perform some action that affects the outside world (eg." ilk="function" name="execute" signature="execute(func, args, msg=None, verbose=0, dry_run=0)" />
      <scope doc="Generate linker options for searching library directories&#10;and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at&#10;least two types of compilers: the typical Unix compiler and&#10;Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Determine the default compiler to use for the given&#10;platform." ilk="function" name="get_default_compiler" signature="get_default_compiler(osname=None, platform=None)" />
      <import module="log" />
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" name="mkpath" signature="mkpath(name, mode=511, verbose=1, dry_run=0)" />
      <scope doc="Move a file 'src' to 'dst'." ilk="function" name="move_file" signature="move_file(src, dst, verbose=1, dry_run=0)" />
      <scope doc="Generate an instance of some CCompiler subclass for the&#10;supplied platform/compiler combination." ilk="function" name="new_compiler" signature="new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)" />
      <scope doc="Return true if 'target' is out-of-date with respect to any&#10;file listed in 'sources'." ilk="function" name="newer_group" signature="newer_group(sources, target, missing='error')" />
      <scope doc="Walk two filename lists in parallel, testing if each source&#10;is newer than its corresponding target." ilk="function" name="newer_pairwise" signature="newer_pairwise(sources, targets)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Print list of available compilers (used by the &quot;--help-&#10;compiler&quot; options to &quot;build&quot;, &quot;build_ext&quot;, &quot;build_clib&quot;)." ilk="function" name="show_compilers" signature="show_compilers()" />
      <scope doc="Run another program, specified as a command list 'cmd', in a&#10;new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Split a string up according to Unix shell-like rules for&#10;quotes and backslashes." ilk="function" name="split_quoted" signature="split_quoted(s)" />
      <import module="sys" />
    </scope>
    <scope doc="Access to Python's configuration information.&#10;" ilk="blob" lang="Python3" name="sysconfig">
      <variable citdl="list" name="__all__" />
      <scope doc="Return the path of pyconfig.h." ilk="function" name="get_config_h_filename" signature="get_config_h_filename()" />
      <scope doc="Return the value of a single variable using the dictionary&#10;returned by 'get_config_vars()'." ilk="function" name="get_config_var" signature="get_config_var(name)" />
      <scope doc="With no arguments, return a dictionary of all configuration&#10;variables relevant for the current platform." ilk="function" name="get_config_vars" signature="get_config_vars(*args)" />
      <scope doc="Return the path of the Makefile." ilk="function" name="get_makefile_filename" signature="get_makefile_filename()" />
      <scope doc="Return a path corresponding to the scheme." ilk="function" name="get_path" signature="get_path(name, scheme='posix_prefix', vars=None, expand=True)" />
      <scope doc="Return a tuple containing the paths names." ilk="function" name="get_path_names" signature="get_path_names()" />
      <scope doc="Return a mapping containing an install scheme." ilk="function" name="get_paths" signature="get_paths(scheme='posix_prefix', vars=None, expand=True)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope ilk="function" name="get_python_version" signature="get_python_version()" />
      <scope doc="Return a tuple containing the schemes names." ilk="function" name="get_scheme_names" signature="get_scheme_names()" />
      <scope ilk="function" name="is_python_build" signature="is_python_build(check_home=False)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <scope doc="Parse a config.h-style file." ilk="function" name="parse_config_h" signature="parse_config_h(fp, vars=None)" />
      <scope doc="Return the canonical path of the specified filename,&#10;eliminating any symbolic links encountered in the path." ilk="function" name="realpath" signature="realpath(filename)" />
      <variable citdl="str" name="scheme" />
      <import module="sys" />
    </scope>
    <scope doc="Filename matching with shell patterns.&#10;fnmatch(FILENAME, PATTERN) matches according to the local convention. fnmatchcase(FILENAME, PATTERN) always takes case in account.  The functions operate by translating the pattern into a regular expression.  They cache the compiled regular expressions for speed.  The function translate(PATTERN) returns a regular expression corresponding to PATTERN.  (It does not compile it.)" ilk="blob" lang="Python3" name="fnmatch">
      <variable citdl="list" name="__all__" />
      <scope doc="Return the subset of the list NAMES that match PAT." ilk="function" name="filter" signature="filter(names, pat)" />
      <scope doc="Test whether FILENAME matches PATTERN." ilk="function" name="fnmatch" signature="fnmatch(name, pat)" />
      <scope doc="Test whether FILENAME matches PATTERN, including case." ilk="function" name="fnmatchcase" signature="fnmatchcase(name, pat)" />
      <import module="functools" />
      <import module="os" />
      <import module="posixpath" />
      <import module="re" />
      <scope doc="Translate a shell PATTERN to a regular expression." ilk="function" name="translate" signature="translate(pat)" />
    </scope>
    <scope doc="# ElementTree&#10;# $Id: ElementInclude.py 3375 2008-02-13 08:05:08Z fredrik $ # # limited xinclude support for element trees # # history: # 2003-08-15 fl   created # 2003-11-14 fl   fixed default loader # # Copyright (c) 2003-2004 by Fredrik Lundh.  All rights reserved. #" ilk="blob" lang="Python3" name="xml.etree.ElementInclude">
      <import module="ElementTree" />
      <scope classrefs="SyntaxError" doc="Invalid syntax.&#10;" ilk="class" name="FatalIncludeError" />
      <variable citdl="str" name="XINCLUDE" />
      <variable citdl="str" name="XINCLUDE_FALLBACK" />
      <variable citdl="str" name="XINCLUDE_INCLUDE" />
      <import module="copy" />
      <scope ilk="function" name="default_loader" signature="default_loader(href, parse, encoding=None)" />
      <scope ilk="function" name="include" signature="include(elem, loader=None)" />
    </scope>
    <scope doc="Implementation of JSONEncoder&#10;" ilk="blob" lang="Python3" name="json.encoder">
      <variable citdl="SRE_Pattern" name="ESCAPE" />
      <variable citdl="SRE_Pattern" name="ESCAPE_ASCII" />
      <variable citdl="dict" name="ESCAPE_DCT" />
      <scope doc="Return the canonical string representation of the object." ilk="function" name="FLOAT_REPR" />
      <variable citdl="SRE_Pattern" name="HAS_UTF8" />
      <variable citdl="float" name="INFINITY" />
      <scope classrefs="object" doc="Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.&#10;Supports the following objects and types by default:  +-------------------+---------------+ | Python            | JSON          | +===================+===============+ | dict              | object        | +-------------------+---------------+ | list, tuple       | array         | +-------------------+---------------+ | str               | string        |" ilk="class" name="JSONEncoder">
        <scope doc="Encode the given object and yield each string representation&#10;as available." ilk="function" name="iterencode" signature="iterencode(self, o, _one_shot=False)" />
        <scope doc="Return a JSON string representation of a Python data&#10;structure." ilk="function" name="encode" signature="encode(self, o)" />
        <scope doc="Implement this method in a subclass such that it returns a&#10;serializable object for ``o``, or calls the base&#10;implementation (to raise a ``TypeError``)." ilk="function" name="default" signature="default(self, o)" />
        <scope doc="Constructor for JSONEncoder, with sensible defaults." ilk="function" name="__init__" signature="__init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)" />
      </scope>
      <scope doc="Return a JSON representation of a Python string" ilk="function" name="c_encode_basestring" returns="str" signature="encode_basestring(string) -&gt; string" />
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" name="c_encode_basestring_ascii" returns="str" signature="encode_basestring_ascii(string) -&gt; string" />
      <scope classrefs="object" doc="_iterencode(obj, _current_indent_level) -&gt; iterable&#10;" ilk="class" name="c_make_encoder">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="Return a JSON representation of a Python string" ilk="function" name="encode_basestring" returns="str" signature="encode_basestring(string) -&gt; string" />
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" name="encode_basestring_ascii" returns="str" signature="encode_basestring_ascii(string) -&gt; string" />
      <variable citdl="int" name="i" />
      <scope doc="Return a JSON representation of a Python string" ilk="function" name="py_encode_basestring" signature="py_encode_basestring(s)" />
      <scope doc="Return an ASCII-only JSON representation of a Python string" ilk="function" name="py_encode_basestring_ascii" signature="py_encode_basestring_ascii(s)" />
      <import module="re" />
    </scope>
    <scope doc="Keywords (from &quot;graminit.c&quot;)&#10;This file is automatically generated; please don't muck it up!  To update the symbols in this file, 'cd' to the top directory of the python source tree after building the interpreter and run:  ./python Lib/keyword.py" ilk="blob" lang="Python3" name="keyword">
      <variable citdl="list" name="__all__" />
      <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="iskeyword" signature="x.__contains__(y) &lt;==&gt; y in x." />
      <variable citdl="list" name="kwlist" />
      <scope ilk="function" name="main" signature="main()" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/sys/stropts.h&#10;" ilk="blob" lang="Python3" name="plat-unixware7.STROPTS">
      <variable citdl="int" name="ADT_EMASKSIZE" />
      <variable citdl="int" name="ANYMARK" />
      <variable citdl="int" name="CLOCK_MAX" />
      <variable citdl="int" name="DAF_PHYSREQ" />
      <variable citdl="int" name="DAF_PRE8" />
      <variable citdl="int" name="DAF_REQDMA" />
      <variable citdl="int" name="DAF_STATIC" />
      <variable citdl="int" name="DAF_STR" />
      <variable citdl="int" name="DI_BCBP" />
      <variable citdl="int" name="DI_MEDIA" />
      <variable citdl="int" name="D_BLKOFF" />
      <variable citdl="int" name="D_DMA" />
      <variable citdl="int" name="D_HOT" />
      <variable citdl="int" name="D_INITPUB" />
      <variable citdl="int" name="D_LFS" />
      <variable citdl="int" name="D_MOD" />
      <variable citdl="int" name="D_MP" />
      <variable citdl="int" name="D_NEW" />
      <variable citdl="int" name="D_NOBRKUP" />
      <variable citdl="int" name="D_NOSPECMACDATA" />
      <variable citdl="int" name="D_OLD" />
      <variable citdl="int" name="D_PSEUDO" />
      <variable citdl="int" name="D_RANDOM" />
      <variable citdl="int" name="D_RDWEQ" />
      <variable citdl="int" name="D_SEEKNEG" />
      <variable citdl="int" name="D_STR" />
      <variable citdl="int" name="D_TAPE" />
      <variable citdl="int" name="D_UPF" />
      <variable citdl="int" name="EFF_ONLY_OK" />
      <variable citdl="int" name="ES_MACADTLID" />
      <variable citdl="int" name="ES_MACOPENLID" />
      <variable citdl="int" name="ES_MACROOTLID" />
      <variable citdl="int" name="ES_MACSYSLID" />
      <variable citdl="int" name="ES_PRVID" />
      <variable citdl="int" name="ES_PRVINFO" />
      <variable citdl="int" name="ES_PRVSETCNT" />
      <variable citdl="int" name="ES_PRVSETS" />
      <variable citdl="int" name="ES_TPGETMAJOR" />
      <variable citdl="int" name="EX_OK" />
      <variable citdl="int" name="FD_SETSIZE" />
      <variable citdl="int" name="FLUSHBAND" />
      <variable citdl="int" name="FLUSHR" />
      <variable citdl="int" name="FLUSHRW" />
      <variable citdl="int" name="FLUSHW" />
      <variable citdl="int" name="FMNAMESZ" />
      <variable citdl="int" name="F_LOCK" />
      <variable citdl="int" name="F_OK" />
      <variable citdl="int" name="F_TEST" />
      <variable citdl="int" name="F_TLOCK" />
      <variable citdl="int" name="F_ULOCK" />
      <variable citdl="str" name="GF_PATH" />
      <variable citdl="int" name="INFTIM" />
      <variable citdl="int" name="INT_MAX" />
      <variable citdl="int" name="INT_MIN" />
      <variable citdl="int" name="ISTAT_ASSERTED" />
      <variable citdl="int" name="ISTAT_ASSUMED" />
      <variable citdl="int" name="ISTAT_NONE" />
      <variable citdl="int" name="I_ATMARK" />
      <variable citdl="int" name="I_BIGPIPE" />
      <variable citdl="int" name="I_CANPUT" />
      <variable citdl="int" name="I_CKBAND" />
      <variable citdl="int" name="I_E_RECVFD" />
      <variable citdl="int" name="I_FDINSERT" />
      <variable citdl="int" name="I_FIND" />
      <variable citdl="int" name="I_FLUSH" />
      <variable citdl="int" name="I_FLUSHBAND" />
      <variable citdl="int" name="I_GETBAND" />
      <variable citdl="int" name="I_GETCLTIME" />
      <variable citdl="int" name="I_GETSIG" />
      <variable citdl="int" name="I_GETTP" />
      <variable citdl="int" name="I_GRDOPT" />
      <variable citdl="int" name="I_GWROPT" />
      <variable citdl="int" name="I_LINK" />
      <variable citdl="int" name="I_LIST" />
      <variable citdl="int" name="I_LOOK" />
      <variable citdl="int" name="I_NREAD" />
      <variable citdl="int" name="I_PEEK" />
      <variable citdl="int" name="I_PLINK" />
      <variable citdl="int" name="I_POP" />
      <variable citdl="int" name="I_PUNLINK" />
      <variable citdl="int" name="I_PUSH" />
      <variable citdl="int" name="I_RECVFD" />
      <variable citdl="int" name="I_SENDFD" />
      <variable citdl="int" name="I_SETCLTIME" />
      <variable citdl="int" name="I_SETSIG" />
      <variable citdl="int" name="I_SRDOPT" />
      <variable citdl="int" name="I_STATS" />
      <variable citdl="int" name="I_STR" />
      <variable citdl="int" name="I_SWROPT" />
      <variable citdl="int" name="I_S_RECVFD" />
      <variable citdl="int" name="I_UNLINK" />
      <variable citdl="int" name="LASTMARK" />
      <variable citdl="int" name="LONG_MAX" />
      <variable citdl="int" name="LONG_MIN" />
      <variable citdl="int" name="MCD_VERSION" />
      <variable citdl="int" name="MORECTL" />
      <variable citdl="int" name="MOREDATA" />
      <variable citdl="int" name="MSG_ANY" />
      <variable citdl="int" name="MSG_BAND" />
      <variable citdl="int" name="MSG_DISCARD" />
      <variable citdl="int" name="MSG_HIPRI" />
      <variable citdl="int" name="MSG_PEEKIOCTL" />
      <variable citdl="int" name="MUXID_ALL" />
      <variable citdl="int" name="NBBY" />
      <variable citdl="int" name="NULL" />
      <variable citdl="int" name="OFF32_MAX" />
      <variable citdl="int" name="OFF_MAX" />
      <variable citdl="str" name="PF_PATH" />
      <variable citdl="int" name="P_MYHOSTID" />
      <variable citdl="int" name="P_MYID" />
      <variable citdl="int" name="RMODEMASK" />
      <variable citdl="int" name="RMSGD" />
      <variable citdl="int" name="RMSGN" />
      <variable citdl="int" name="RNORM" />
      <variable citdl="int" name="ROOTFS_NAMESZ" />
      <variable citdl="int" name="RPROTDAT" />
      <variable citdl="int" name="RPROTDIS" />
      <variable citdl="int" name="RPROTMASK" />
      <variable citdl="int" name="RPROTNORM" />
      <variable citdl="int" name="RS_HIPRI" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" name="SA_EXEC" />
      <variable citdl="int" name="SA_READ" />
      <variable citdl="int" name="SA_SUBSIZE" />
      <variable citdl="int" name="SA_WRITE" />
      <variable citdl="int" name="SECMASK" />
      <variable citdl="int" name="SEEK_CUR" />
      <variable citdl="int" name="SEEK_END" />
      <variable citdl="int" name="SEEK_SET" />
      <variable citdl="int" name="SHRT_MAX" />
      <variable citdl="int" name="SHRT_MIN" />
      <variable citdl="int" name="SNDPIPE" />
      <variable citdl="int" name="SNDZERO" />
      <variable citdl="int" name="STDERR_FILENO" />
      <variable citdl="int" name="STDIN_FILENO" />
      <variable citdl="int" name="STDOUT_FILENO" />
      <variable citdl="int" name="STR" />
      <variable citdl="int" name="S_BANDURG" />
      <variable citdl="int" name="S_ERROR" />
      <variable citdl="int" name="S_HANGUP" />
      <variable citdl="int" name="S_HIPRI" />
      <variable citdl="int" name="S_INPUT" />
      <variable citdl="int" name="S_MSG" />
      <variable citdl="int" name="S_OUTPUT" />
      <variable citdl="int" name="S_RDBAND" />
      <variable citdl="int" name="S_RDNORM" />
      <variable citdl="int" name="S_WRBAND" />
      <variable citdl="int" name="S_WRNORM" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="X_I_BASE" />
      <variable citdl="int" name="X_I_FDINSERT" />
      <variable citdl="int" name="X_I_FIND" />
      <variable citdl="int" name="X_I_FLUSH" />
      <variable citdl="int" name="X_I_GETSIG" />
      <variable citdl="int" name="X_I_GRDOPT" />
      <variable citdl="int" name="X_I_LINK" />
      <variable citdl="int" name="X_I_LOOK" />
      <variable citdl="int" name="X_I_NREAD" />
      <variable citdl="int" name="X_I_PEEK" />
      <variable citdl="int" name="X_I_POP" />
      <variable citdl="int" name="X_I_PUSH" />
      <variable citdl="int" name="X_I_RECVFD" />
      <variable citdl="int" name="X_I_SENDFD" />
      <variable citdl="int" name="X_I_SETSIG" />
      <variable citdl="int" name="X_I_SRDOPT" />
      <variable citdl="int" name="X_I_STR" />
      <variable citdl="int" name="X_I_UNLINK" />
      <variable citdl="int" name="X_OK" />
      <variable citdl="int" name="X_STR" />
      <scope doc="# Included from sys/types.h" ilk="function" name="quad_low" signature="quad_low(x)" />
    </scope>
    <scope doc="Class for profiling Python code.&#10;" ilk="blob" lang="Python3" name="profile">
      <scope classrefs="OptionContainer" doc="Class attributes:&#10;standard_option_list : [Option] list of standard options that will be accepted by all instances of this parser class (intended to be overridden by subclasses).  Instance attributes: usage : string a usage string for your program.  Before it is displayed to the user, &quot;%prog&quot; will be expanded to the name of your program (self.prog or os.path.basename(sys.argv[0])). prog : string" ilk="class" name="OptionParser">
        <scope ilk="function" name="_get_args" signature="_get_args(self, args)" />
        <scope ilk="function" name="get_option_group" signature="get_option_group(self, opt_str)" />
        <scope ilk="function" name="get_prog_name" signature="get_prog_name(self)" />
        <scope doc="Print an extended help message, listing all options and any&#10;help text provided with them, to 'file' (default stdout)." ilk="function" name="print_help" signature="print_help(file : file = stdout)" />
        <scope ilk="function" name="_add_help_option" signature="_add_help_option(self)" />
        <scope ilk="function" name="_get_all_options" signature="_get_all_options(self)" />
        <scope doc="Determine which long option string 'opt' matches, ie." ilk="function" name="_match_long_opt" returns="str" signature="_match_long_opt(opt : string) -&gt; string" />
        <scope ilk="function" name="_init_parsing_state" signature="_init_parsing_state(self)" />
        <scope ilk="function" name="set_defaults" signature="set_defaults(self, **kwargs)" />
        <scope doc="Print the usage message for the current program (self.usage)&#10;to 'file' (default stdout)." ilk="function" name="print_usage" signature="print_usage(file : file = stdout)" />
        <scope doc="_process_args(largs : [string], rargs : [string], values :&#10;Values)" ilk="function" name="_process_args" signature="_process_args(self, largs, rargs, values)" />
        <scope ilk="function" name="set_default" signature="set_default(self, dest, value)" />
        <scope ilk="function" name="set_usage" signature="set_usage(self, usage)" />
        <scope doc="Set parsing to not stop on the first non-option, allowing&#10;interspersing switches with command arguments." ilk="function" name="enable_interspersed_args" signature="enable_interspersed_args(self)" />
        <scope ilk="function" name="_populate_option_list" signature="_populate_option_list(self, option_list, add_help=True)" />
        <scope ilk="function" name="_process_long_opt" signature="_process_long_opt(self, rargs, values)" />
        <scope ilk="function" name="add_option_group" signature="add_option_group(self, *args, **kwargs)" />
        <scope ilk="function" name="exit" signature="exit(self, status=0, msg=None)" />
        <scope ilk="function" name="format_option_help" signature="format_option_help(self, formatter=None)" />
        <scope ilk="function" name="get_description" signature="get_description(self)" />
        <scope ilk="function" name="_add_version_option" signature="_add_version_option(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, usage=None, option_list=None, option_class=&lt;class 'optparse.Option'&gt;, version=None, conflict_handler='error', description=None, formatter=None, add_help_option=True, prog=None, epilog=None)" />
        <scope ilk="function" name="get_default_values" signature="get_default_values(self)" />
        <scope ilk="function" name="get_usage" signature="get_usage(self)" />
        <scope doc="Print a usage message incorporating 'msg' to stderr and&#10;exit." ilk="function" name="error" signature="error(msg : string)" />
        <scope doc="Set parsing to stop on the first non-option." ilk="function" name="disable_interspersed_args" signature="disable_interspersed_args(self)" />
        <scope ilk="function" name="_create_option_list" signature="_create_option_list(self)" />
        <scope doc="-&gt; (values : Values, args : [string])" ilk="function" name="check_values" signature="check_values(values : Values, args : [string])" />
        <scope ilk="function" name="format_epilog" signature="format_epilog(self, formatter)" />
        <scope ilk="function" name="get_version" signature="get_version(self)" />
        <scope ilk="function" name="expand_prog_name" signature="expand_prog_name(self, s)" />
        <scope ilk="function" name="_process_short_opts" signature="_process_short_opts(self, rargs, values)" />
        <scope ilk="function" name="set_process_default_values" signature="set_process_default_values(self, process)" />
        <scope doc="Declare that you are done with this OptionParser." ilk="function" name="destroy" signature="destroy(self)" />
        <scope ilk="function" name="format_help" signature="format_help(self, formatter=None)" />
        <scope doc="parse_args(args : [string] = sys.argv[1:], values : Values =&#10;None) -&gt; (values : Values, args : [string])" ilk="function" name="parse_args" signature="parse_args(self, args=None, values=None)" />
        <scope doc="Print the version message for this program (self.version) to&#10;'file' (default stdout)." ilk="function" name="print_version" signature="print_version(file : file = stdout)" />
      </scope>
      <scope classrefs="object" doc="Profiler class.&#10;self.cur is always a tuple.  Each such tuple corresponds to a stack frame that is currently active (self.cur[-2]).  The following are the definitions of its members.  We use this external &quot;parallel stack&quot; to avoid contaminating the program that we are profiling. (old profiler used to write into the frames local dictionary!!) Derived classes can change the definition of some entries, as long as they leave [-2:] intact (frame and previous tuple).  In case an internal error is detected, the -3 element is used as the function name.  [ 0] = Time that needs to be charged to the parent frame's function." ilk="class" name="Profile">
        <scope doc="# This method is more useful to profile a single function&#10;call." ilk="function" name="runcall" signature="runcall(self, func, *args, **kw)" />
        <scope ilk="function" name="trace_dispatch_return" signature="trace_dispatch_return(self, frame, t)" />
        <scope ilk="function" name="trace_dispatch_c_call" signature="trace_dispatch_c_call(self, frame, t)" />
        <scope ilk="function" name="trace_dispatch" signature="trace_dispatch(self, frame, event, arg)" />
        <scope ilk="function" name="set_cmd" signature="set_cmd(self, cmd)" />
        <scope ilk="function" name="create_stats" signature="create_stats(self)" />
        <scope ilk="function" name="trace_dispatch_call" signature="trace_dispatch_call(self, frame, t)" />
        <scope ilk="function" name="trace_dispatch_mac" signature="trace_dispatch_mac(self, frame, event, arg)" />
        <scope ilk="function" name="run" signature="run(self, cmd)" />
        <scope ilk="function" name="simulate_call" signature="simulate_call(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, timer=None, bias=None)" />
        <scope ilk="function" name="simulate_cmd_complete" signature="simulate_cmd_complete(self)" />
        <scope ilk="function" name="trace_dispatch_i" signature="trace_dispatch_i(self, frame, event, arg)" />
        <scope ilk="function" name="print_stats" signature="print_stats(self, sort=-1)" />
        <scope ilk="function" name="_calibrate_inner" signature="_calibrate_inner(self, m, verbose)" />
        <scope ilk="function" name="runctx" signature="runctx(self, cmd, globals, locals)" />
        <scope ilk="function" name="calibrate" signature="calibrate(self, m, verbose=0)" />
        <scope ilk="function" name="snapshot_stats" signature="snapshot_stats(self)" />
        <scope ilk="function" name="dump_stats" signature="dump_stats(self, file)" />
        <scope ilk="function" name="trace_dispatch_exception" signature="trace_dispatch_exception(self, frame, t)" />
        <scope ilk="function" name="trace_dispatch_l" signature="trace_dispatch_l(self, frame, event, arg)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="main" signature="main()" />
      <import module="marshal" />
      <import module="os" />
      <scope doc="Run statement under profiler optionally saving results in&#10;filename" ilk="function" name="run" signature="run(statement, filename=None, sort=-1)" />
      <scope doc="Run statement under profiler, supplying your own globals and&#10;locals, optionally saving results in filename." ilk="function" name="runctx" signature="runctx(statement, globals, locals, filename=None, sort=-1)" />
      <import module="sys" />
      <import module="time" />
    </scope>
    <scope doc="HTTP server classes.&#10;Note: BaseHTTPRequestHandler doesn't implement any HTTP request; see SimpleHTTPRequestHandler for simple implementations of GET, HEAD and POST, and CGIHTTPRequestHandler for CGI scripts.  It does, however, optionally implement HTTP/1.1 persistent connections, as of version 0.3.  Notes on CGIHTTPRequestHandler ------------------------------ " ilk="blob" lang="Python3" name="http.server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="BaseHTTPRequestHandler">
        <scope doc="Decide what to do with an &quot;Expect: 100-continue&quot; header." ilk="function" name="handle_expect_100" signature="handle_expect_100(self)" />
        <scope doc="Return the client address." ilk="function" name="address_string" signature="address_string(self)" />
        <scope doc="Parse a request (internal)." ilk="function" name="parse_request" signature="parse_request(self)" />
        <scope doc="Log an arbitrary message." ilk="function" name="log_message" signature="log_message(self, format, *args)" />
        <scope doc="Log an accepted request." ilk="function" name="log_request" signature="log_request(self, code='-', size='-')" />
        <scope doc="Send a MIME header to the headers buffer." ilk="function" name="send_header" signature="send_header(self, keyword, value)" />
        <scope doc="Return the current time formatted for logging." ilk="function" name="log_date_time_string" signature="log_date_time_string(self)" />
        <scope doc="Send the blank line ending the MIME headers." ilk="function" name="end_headers" signature="end_headers(self)" />
        <scope doc="Add the response header to the headers buffer and log the&#10;response code." ilk="function" name="send_response" signature="send_response(self, code, message=None)" />
        <scope ilk="function" name="flush_headers" signature="flush_headers(self)" />
        <scope doc="Send the response header only." ilk="function" name="send_response_only" signature="send_response_only(self, code, message=None)" />
        <scope doc="Handle multiple requests if necessary." ilk="function" name="handle" signature="handle(self)" />
        <scope doc="Return the server software version string." ilk="function" name="version_string" signature="version_string(self)" />
        <scope doc="Handle a single HTTP request." ilk="function" name="handle_one_request" signature="handle_one_request(self)" />
        <scope doc="Return the current date and time formatted for a message&#10;header." ilk="function" name="date_time_string" signature="date_time_string(self, timestamp=None)" />
        <scope doc="Log an error." ilk="function" name="log_error" signature="log_error(self, format, *args)" />
        <scope doc="Send and log an error reply." ilk="function" name="send_error" signature="send_error(self, code, message=None, explain=None)" />
      </scope>
      <scope classrefs="SimpleHTTPRequestHandler" doc="Complete HTTP server with GET, HEAD and POST commands.&#10;GET and HEAD also support running CGI scripts.  The POST command is *only* implemented for CGI scripts." ilk="class" name="CGIHTTPRequestHandler">
        <scope doc="Serve a POST request." ilk="function" name="do_POST" signature="do_POST(self)" />
        <scope doc="Test whether argument path is an executable file." ilk="function" name="is_executable" signature="is_executable(self, path)" />
        <scope doc="Version of send_head that support CGI scripts" ilk="function" name="send_head" signature="send_head(self)" />
        <scope doc="Test whether argument path is a Python script." ilk="function" name="is_python" signature="is_python(self, path)" />
        <scope doc="Execute a CGI script." ilk="function" name="run_cgi" signature="run_cgi(self)" />
        <scope doc="Test whether self.path corresponds to a CGI script." ilk="function" name="is_cgi" signature="is_cgi(self)" />
      </scope>
      <variable citdl="str" name="DEFAULT_ERROR_CONTENT_TYPE" />
      <variable citdl="str" name="DEFAULT_ERROR_MESSAGE" />
      <scope classrefs="TCPServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="HTTPServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
      </scope>
      <scope classrefs="IntEnum" doc="HTTP status codes and reason phrases&#10;Status codes from the following RFCs are all observed:  * RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616 * RFC 6585: Additional HTTP Status Codes * RFC 3229: Delta encoding in HTTP * RFC 4918: HTTP Extensions for WebDAV, obsoletes 2518 * RFC 5842: Binding Extensions to WebDAV * RFC 7238: Permanent Redirect * RFC 2295: Transparent Content Negotiation in HTTP * RFC 2774: An HTTP Extension Framework" ilk="class" name="HTTPStatus" />
      <scope classrefs="BaseHTTPRequestHandler" doc="Simple HTTP request handler with GET and HEAD commands.&#10;This serves files from the current directory and any of its subdirectories.  The MIME type for files is determined by calling the .guess_type() method.  The GET and HEAD requests are identical except that the HEAD request omits the actual contents of the file." ilk="class" name="SimpleHTTPRequestHandler">
        <scope doc="Serve a GET request." ilk="function" name="do_GET" signature="do_GET(self)" />
        <scope doc="Helper to produce a directory listing (absent index.html)." ilk="function" name="list_directory" signature="list_directory(self, path)" />
        <scope doc="Copy all data between two file objects." ilk="function" name="copyfile" signature="copyfile(self, source, outputfile)" />
        <scope doc="Common code for GET and HEAD commands." ilk="function" name="send_head" signature="send_head(self)" />
        <scope doc="Guess the type of a file." ilk="function" name="guess_type" signature="guess_type(self, path)" />
        <scope doc="Translate a /-separated PATH to the local filename syntax." ilk="function" name="translate_path" signature="translate_path(self, path)" />
        <scope doc="Serve a HEAD request." ilk="function" name="do_HEAD" signature="do_HEAD(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="argparse" />
      <import module="copy" />
      <scope doc="Test for executable file." ilk="function" name="executable" signature="executable(path)" />
      <import module="html" />
      <import module="http" />
      <import module="io" />
      <import module="mimetypes" />
      <variable citdl="NoneType" name="nobody" />
      <scope doc="Internal routine to get nobody's uid" ilk="function" name="nobody_uid" signature="nobody_uid()" />
      <import module="os" />
      <import module="posixpath" />
      <import module="select" />
      <import module="shutil" />
      <import module="socket" />
      <import module="socketserver" />
      <import module="sys" />
      <scope doc="Test the HTTP request handler class." ilk="function" name="test" signature="test(HandlerClass=&lt;class 'http.server.BaseHTTPRequestHandler'&gt;, ServerClass=&lt;class 'http.server.HTTPServer'&gt;, protocol='HTTP/1.0', port=8000, bind='')" />
      <import module="time" />
      <import module="urllib" />
    </scope>
    <scope doc="Support for regular expressions (RE).&#10;This module provides regular expression matching operations similar to those found in Perl.  It supports both 8-bit and Unicode strings; both the pattern and the strings being processed can contain null bytes and characters outside the US ASCII range.  Regular expressions can contain both special and ordinary characters. Most ordinary characters, like &quot;A&quot;, &quot;a&quot;, or &quot;0&quot;, are the simplest regular expressions; they simply match themselves.  You can concatenate ordinary characters, so last matches the string 'last'. " ilk="blob" lang="Python3" name="re">
      <variable citdl="int" name="A" />
      <variable citdl="int" name="ASCII" />
      <variable citdl="int" name="DEBUG" />
      <variable citdl="int" name="DOTALL" />
      <variable citdl="int" name="I" />
      <variable citdl="int" name="IGNORECASE" />
      <variable citdl="int" name="L" />
      <variable citdl="int" name="LOCALE" />
      <variable citdl="int" name="M" />
      <variable citdl="int" name="MULTILINE" />
      <variable citdl="int" name="S" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Scanner">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lexicon, flags=0)" />
        <scope ilk="function" name="scan" signature="scan(self, string)" />
      </scope>
      <variable citdl="int" name="T" />
      <variable citdl="int" name="TEMPLATE" />
      <variable citdl="int" name="U" />
      <variable citdl="int" name="UNICODE" />
      <variable citdl="int" name="VERBOSE" />
      <variable citdl="int" name="X" />
      <variable citdl="list" name="__all__" />
      <import module="_locale" />
      <scope doc="Compile a regular expression pattern, returning a pattern&#10;object." ilk="function" name="compile" signature="compile(pattern, flags=0)" />
      <import module="copyreg" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, pattern=None, pos=None)" />
      </scope>
      <scope doc="Escape all the characters in pattern except ASCII letters,&#10;numbers and '_'." ilk="function" name="escape" returns="str" signature="escape(pattern)" />
      <scope doc="Return a list of all non-overlapping matches in the string." ilk="function" name="findall" returns="list" signature="findall(pattern, string, flags=0)" />
      <scope doc="Return an iterator over all non-overlapping matches in the&#10;string." ilk="function" name="finditer" signature="finditer(pattern, string, flags=0)" />
      <scope doc="Try to apply the pattern to all of the string, returning a&#10;match object, or None if no match was found." ilk="function" name="fullmatch" signature="fullmatch(pattern, string, flags=0)" />
      <scope doc="Try to apply the pattern at the start of the string,&#10;returning a match object, or None if no match was found." ilk="function" name="match" returns="compile().match()" signature="match(pattern, string, flags=0)" />
      <scope doc="Clear the regular expression caches" ilk="function" name="purge" signature="purge()" />
      <scope doc="Scan through string looking for a match to the pattern,&#10;returning a match object, or None if no match was found." ilk="function" name="search" returns="compile().search()" signature="search(pattern, string, flags=0)" />
      <scope doc="Split the source string by the occurrences of the pattern,&#10;returning a list containing the resulting substrings." ilk="function" name="split" returns="list" signature="split(pattern, string, maxsplit=0, flags=0)" />
      <import module="sre_compile" />
      <import module="sre_parse" />
      <scope doc="Return the string obtained by replacing the leftmost non-&#10;overlapping occurrences of the pattern in string by the&#10;replacement repl." ilk="function" name="sub" returns="str" signature="sub(pattern, repl, string, count=0, flags=0)" />
      <scope doc="Return a 2-tuple containing (new_string, number)." ilk="function" name="subn" returns="str" signature="subn(pattern, repl, string, count=0, flags=0)" />
      <import module="sys" />
      <scope doc="Compile a template pattern, returning a pattern object" ilk="function" name="template" signature="template(pattern, flags=0)" />
    </scope>
    <scope doc="# This directory is a Python package.&#10;" ilk="blob" lang="Python3" name="xmlrpc" />
    <scope doc="distutils.dir_util&#10;Utility functions for manipulating directories and directory trees." ilk="blob" lang="Python3" name="distutils.dir_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope doc="Copy an entire directory tree 'src' to a new location 'dst'." ilk="function" name="copy_tree" signature="copy_tree(src, dst, preserve_mode=1, preserve_times=1, preserve_symlinks=0, update=0, verbose=1, dry_run=0)" />
      <scope doc="Create all the empty directories under 'base_dir' needed to&#10;put 'files' there." ilk="function" name="create_tree" signature="create_tree(base_dir, files, mode=511, verbose=1, dry_run=0)" />
      <scope doc="Take the full path 'path', and make it a relative path." ilk="function" name="ensure_relative" signature="ensure_relative(path)" />
      <import module="errno" />
      <import module="log" />
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" name="mkpath" signature="mkpath(name, mode=511, verbose=1, dry_run=0)" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
    </scope>
    <scope doc="Fixer that replaces deprecated unittest method names.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_asserts">
      <scope classrefs="object" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="BaseFix">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Return a string suitable for use as an identifier" ilk="function" name="new_name" signature="new_name(self, template='xxx_todo_changeme')" />
        <scope doc="Initializer. Subclass may override." ilk="function" name="__init__" signature="__init__(self, options, log)" />
        <scope doc="Set the filename." ilk="function" name="set_filename" signature="set_filename(self, filename)" />
        <scope doc="Warn the user that a given chunk of code is not valid Python&#10;3, but that it cannot be converted automatically." ilk="function" name="cannot_convert" signature="cannot_convert(self, node, reason=None)" />
        <scope doc="Compiles self.PATTERN into self.pattern." ilk="function" name="compile_pattern" signature="compile_pattern(self)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="log_message" signature="log_message(self, message)" />
        <scope doc="Used for warning the user about possible uncertainty in the&#10;translation." ilk="function" name="warning" signature="warning(self, node, reason)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="finish_tree" signature="finish_tree(self, tree, filename)" />
      </scope>
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixAsserts">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <variable citdl="dict" name="NAMES" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
    </scope>
    <scope doc="This module provides socket operations and some related functions.&#10;On Unix, it supports IP (Internet Protocol) and Unix domain sockets. On other systems, it only supports IP. Functions specific for a socket are available as methods of the socket object.  Functions:  socket() -- create a new socket object socketpair() -- create a pair of new socket objects [*] fromfd() -- create a socket object from an open file descriptor [*] fromshare() -- create a socket object from data received from socket.share() [*]" ilk="blob" lang="Python3" name="socket">
      <variable citdl="AddressFamily" name="AF_APPLETALK" />
      <variable citdl="AddressFamily" name="AF_ASH" />
      <variable citdl="AddressFamily" name="AF_ATMPVC" />
      <variable citdl="AddressFamily" name="AF_ATMSVC" />
      <variable citdl="AddressFamily" name="AF_AX25" />
      <variable citdl="AddressFamily" name="AF_BRIDGE" />
      <variable citdl="AddressFamily" name="AF_CAN" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="AddressFamily" name="AF_ECONET" />
      <variable citdl="AddressFamily" name="AF_INET" />
      <variable citdl="AddressFamily" name="AF_INET6" />
      <variable citdl="AddressFamily" name="AF_IPX" />
      <variable citdl="AddressFamily" name="AF_IRDA" />
      <variable citdl="AddressFamily" name="AF_KEY" />
      <variable citdl="AddressFamily" name="AF_LLC" />
      <variable citdl="AddressFamily" name="AF_NETBEUI" />
      <variable citdl="AddressFamily" name="AF_NETLINK" />
      <variable citdl="AddressFamily" name="AF_NETROM" />
      <variable citdl="AddressFamily" name="AF_PACKET" />
      <variable citdl="AddressFamily" name="AF_PPPOX" />
      <variable citdl="AddressFamily" name="AF_RDS" />
      <variable citdl="AddressFamily" name="AF_ROSE" />
      <variable citdl="AddressFamily" name="AF_ROUTE" />
      <variable citdl="AddressFamily" name="AF_SECURITY" />
      <variable citdl="AddressFamily" name="AF_SNA" />
      <variable citdl="AddressFamily" name="AF_TIPC" />
      <variable citdl="AddressFamily" name="AF_UNIX" />
      <variable citdl="AddressFamily" name="AF_UNSPEC" />
      <variable citdl="AddressFamily" name="AF_WANPIPE" />
      <variable citdl="AddressFamily" name="AF_X25" />
      <variable citdl="int" name="AI_ADDRCONFIG" />
      <variable citdl="int" name="AI_ALL" />
      <variable citdl="int" name="AI_CANONNAME" />
      <variable citdl="int" name="AI_NUMERICHOST" />
      <variable citdl="int" name="AI_NUMERICSERV" />
      <variable citdl="int" name="AI_PASSIVE" />
      <variable citdl="int" name="AI_V4MAPPED" />
      <scope classrefs="IntEnum" doc="An enumeration.&#10;" ilk="class" name="AddressFamily">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <variable citdl="int" name="CAN_BCM" />
      <variable citdl="int" name="CAN_BCM_RX_CHANGED" />
      <variable citdl="int" name="CAN_BCM_RX_DELETE" />
      <variable citdl="int" name="CAN_BCM_RX_READ" />
      <variable citdl="int" name="CAN_BCM_RX_SETUP" />
      <variable citdl="int" name="CAN_BCM_RX_STATUS" />
      <variable citdl="int" name="CAN_BCM_RX_TIMEOUT" />
      <variable citdl="int" name="CAN_BCM_TX_DELETE" />
      <variable citdl="int" name="CAN_BCM_TX_EXPIRED" />
      <variable citdl="int" name="CAN_BCM_TX_READ" />
      <variable citdl="int" name="CAN_BCM_TX_SEND" />
      <variable citdl="int" name="CAN_BCM_TX_SETUP" />
      <variable citdl="int" name="CAN_BCM_TX_STATUS" />
      <variable citdl="int" name="CAN_EFF_FLAG" />
      <variable citdl="int" name="CAN_EFF_MASK" />
      <variable citdl="int" name="CAN_ERR_FLAG" />
      <variable citdl="int" name="CAN_ERR_MASK" />
      <variable citdl="int" name="CAN_RAW" />
      <variable citdl="int" name="CAN_RAW_ERR_FILTER" />
      <variable citdl="int" name="CAN_RAW_FD_FRAMES" />
      <variable citdl="int" name="CAN_RAW_FILTER" />
      <variable citdl="int" name="CAN_RAW_LOOPBACK" />
      <variable citdl="int" name="CAN_RAW_RECV_OWN_MSGS" />
      <variable citdl="int" name="CAN_RTR_FLAG" />
      <variable citdl="int" name="CAN_SFF_MASK" />
      <variable citdl="PyCapsule" name="CAPI" />
      <scope doc="Return the total length, without trailing padding, of an&#10;ancillary data item with associated data of the given&#10;length." ilk="function" name="CMSG_LEN" signature="CMSG_LEN(length) -&gt; control message length" />
      <scope doc="Return the buffer size needed for recvmsg() to receive an&#10;ancillary data item with associated data of the given&#10;length, along with any trailing padding." ilk="function" name="CMSG_SPACE" returns="buffer" signature="CMSG_SPACE(length) -&gt; buffer size" />
      <variable citdl="int" name="EAGAIN" />
      <variable citdl="int" name="EAI_ADDRFAMILY" />
      <variable citdl="int" name="EAI_AGAIN" />
      <variable citdl="int" name="EAI_BADFLAGS" />
      <variable citdl="int" name="EAI_FAIL" />
      <variable citdl="int" name="EAI_FAMILY" />
      <variable citdl="int" name="EAI_MEMORY" />
      <variable citdl="int" name="EAI_NODATA" />
      <variable citdl="int" name="EAI_NONAME" />
      <variable citdl="int" name="EAI_OVERFLOW" />
      <variable citdl="int" name="EAI_SERVICE" />
      <variable citdl="int" name="EAI_SOCKTYPE" />
      <variable citdl="int" name="EAI_SYSTEM" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_SCTP" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_RECVDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVHOPLIMIT" />
      <variable citdl="int" name="IPV6_RECVHOPOPTS" />
      <variable citdl="int" name="IPV6_RECVPKTINFO" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TRANSPARENT" />
      <variable citdl="int" name="IP_TTL" />
      <scope classrefs="int Enum" doc="Enum where members are also (and must be) ints&#10;" ilk="class" name="IntEnum" />
      <variable citdl="int" name="MSG_CMSG_CLOEXEC" />
      <variable citdl="int" name="MSG_CONFIRM" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_DONTWAIT" />
      <variable citdl="int" name="MSG_EOR" />
      <variable citdl="int" name="MSG_ERRQUEUE" />
      <variable citdl="int" name="MSG_FASTOPEN" />
      <variable citdl="int" name="MSG_MORE" />
      <variable citdl="int" name="MSG_NOSIGNAL" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="MSG_WAITALL" />
      <variable citdl="int" name="NETLINK_DNRTMSG" />
      <variable citdl="int" name="NETLINK_FIREWALL" />
      <variable citdl="int" name="NETLINK_IP6_FW" />
      <variable citdl="int" name="NETLINK_NFLOG" />
      <variable citdl="int" name="NETLINK_ROUTE" />
      <variable citdl="int" name="NETLINK_USERSOCK" />
      <variable citdl="int" name="NETLINK_XFRM" />
      <variable citdl="int" name="NI_DGRAM" />
      <variable citdl="int" name="NI_MAXHOST" />
      <variable citdl="int" name="NI_MAXSERV" />
      <variable citdl="int" name="NI_NAMEREQD" />
      <variable citdl="int" name="NI_NOFQDN" />
      <variable citdl="int" name="NI_NUMERICHOST" />
      <variable citdl="int" name="NI_NUMERICSERV" />
      <variable citdl="int" name="PACKET_BROADCAST" />
      <variable citdl="int" name="PACKET_FASTROUTE" />
      <variable citdl="int" name="PACKET_HOST" />
      <variable citdl="int" name="PACKET_LOOPBACK" />
      <variable citdl="int" name="PACKET_MULTICAST" />
      <variable citdl="int" name="PACKET_OTHERHOST" />
      <variable citdl="int" name="PACKET_OUTGOING" />
      <variable citdl="int" name="PF_CAN" />
      <variable citdl="int" name="PF_PACKET" />
      <variable citdl="int" name="PF_RDS" />
      <variable citdl="int" name="SCM_CREDENTIALS" />
      <variable citdl="int" name="SCM_RIGHTS" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="SocketKind" name="SOCK_CLOEXEC" />
      <variable citdl="SocketKind" name="SOCK_DGRAM" />
      <variable citdl="SocketKind" name="SOCK_NONBLOCK" />
      <variable citdl="SocketKind" name="SOCK_RAW" />
      <variable citdl="SocketKind" name="SOCK_RDM" />
      <variable citdl="SocketKind" name="SOCK_SEQPACKET" />
      <variable citdl="SocketKind" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_CAN_BASE" />
      <variable citdl="int" name="SOL_CAN_RAW" />
      <variable citdl="int" name="SOL_IP" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOL_TCP" />
      <variable citdl="int" name="SOL_TIPC" />
      <variable citdl="int" name="SOL_UDP" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_BINDTODEVICE" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_MARK" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_PASSCRED" />
      <variable citdl="int" name="SO_PEERCRED" />
      <variable citdl="int" name="SO_PRIORITY" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_REUSEPORT" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TYPE" />
      <scope classrefs="RawIOBase" doc="Raw I/O implementation for stream sockets.&#10;This class supports the makefile() method on sockets.  It provides the raw I/O interface on top of a socket object." ilk="class" name="SocketIO">
        <scope doc="True if the SocketIO is open for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Close the SocketIO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="True if the SocketIO is open for seeking." ilk="function" name="seekable" signature="seekable(self)" />
        <scope doc="Write the given bytes or bytearray object *b* to the socket&#10;and return the number of bytes written." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock, mode)" />
        <scope doc="Return the file descriptor of the underlying socket." ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Read up to len(b) bytes into the writable buffer *b* and&#10;return the number of bytes read." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="True if the SocketIO is open for writing." ilk="function" name="writable" signature="writable(self)" />
      </scope>
      <scope classrefs="IntEnum" doc="An enumeration.&#10;" ilk="class" name="SocketKind">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <scope classrefs="object" doc="socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -&gt; socket object&#10;Open a socket of the given type.  The family argument specifies the address family; it defaults to AF_INET.  The type argument specifies whether this is a stream (SOCK_STREAM, this is the default) or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0, specifying the default protocol.  Keyword arguments are accepted. The socket is created as non-inheritable.  A socket object represents one endpoint of a network connection.  Methods of socket objects (keyword arguments not allowed):" ilk="class" name="SocketType">
        <scope doc="Like recv_into(buffer[, nbytes[, flags]]) but also return&#10;the sender's address info." ilk="function" name="recvfrom_into" signature="recvfrom_into(buffer[, nbytes[, flags]]) -&gt; (nbytes, address info)" />
        <scope doc="Enable a server to accept connections." ilk="function" name="listen" signature="listen([backlog])" />
        <scope doc="Like recv(buffersize, flags) but also return the sender's&#10;address info." ilk="function" name="recvfrom" signature="recvfrom(buffersize[, flags]) -&gt; (data, address info)" />
        <scope doc="Get a socket option." ilk="function" name="getsockopt" signature="getsockopt(level, option[, buffersize]) -&gt; value" />
        <scope doc="Receive up to buffersize bytes from the socket." ilk="function" name="recv" signature="recv(buffersize[, flags]) -&gt; data" />
        <scope doc="Send normal and ancillary data to the socket, gathering the&#10;non-ancillary data from a series of buffers and&#10;concatenating it into a single message." ilk="function" name="sendmsg" signature="sendmsg(buffers[, ancdata[, flags[, address]]]) -&gt; count" />
        <scope doc="Close the socket object without closing the underlying file&#10;descriptor." ilk="function" name="detach" signature="detach()" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Shut down the reading side of the socket (flag == SHUT_RD),&#10;the writing side of the socket (flag == SHUT_WR), or both&#10;ends (flag == SHUT_RDWR)." ilk="function" name="shutdown" signature="shutdown(flag)" />
        <scope doc="Return the integer file descriptor of the socket." ilk="function" name="fileno" returns="int" signature="fileno() -&gt; integer" />
        <scope doc="Receive normal data and ancillary data from the socket,&#10;scattering the non-ancillary data into a series of buffers." ilk="function" name="recvmsg_into" signature="recvmsg_into(buffers[, ancbufsize[, flags]]) -&gt; (nbytes, ancdata, msg_flags, address)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Set the socket to blocking (flag is true) or non-blocking&#10;(false)." ilk="function" name="setblocking" signature="setblocking(flag)" />
        <scope doc="Return the address of the local endpoint." ilk="function" name="getsockname" signature="getsockname() -&gt; address info" />
        <scope doc="Wait for an incoming connection." ilk="function" name="_accept" signature="_accept() -&gt; (integer, address info)" />
        <scope doc="Send a data string to the socket." ilk="function" name="send" signature="send(data[, flags]) -&gt; count" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Returns the timeout in seconds (float) associated with&#10;socket operations." ilk="function" name="gettimeout" signature="gettimeout() -&gt; timeout" />
        <scope doc="This is like connect(address), but returns an error code&#10;(the errno value) instead of raising an exception when an&#10;error occurs." ilk="function" name="connect_ex" signature="connect_ex(address) -&gt; errno" />
        <scope doc="Close the socket. It cannot be used after this call." ilk="function" name="close" signature="close()" />
        <scope doc="Connect the socket to a remote address." ilk="function" name="connect" signature="connect(address)" />
        <scope doc="A version of recv() that stores its data into a buffer&#10;rather than creating a new string." ilk="function" name="recv_into" signature="recv_into(buffer, [nbytes[, flags]]) -&gt; nbytes_read" />
        <scope doc="Set a socket option." ilk="function" name="setsockopt" signature="setsockopt(level, option, value)" />
        <scope doc="Set a timeout on socket operations." ilk="function" name="settimeout" signature="settimeout(timeout)" />
        <scope doc="Send a data string to the socket." ilk="function" name="sendall" signature="sendall(data[, flags])" />
        <scope doc="Like send(data, flags) but allows specifying the destination&#10;address." ilk="function" name="sendto" signature="sendto(data[, flags], address) -&gt; count" />
        <scope doc="Receive normal data (up to bufsize bytes) and ancillary data&#10;from the socket." ilk="function" name="recvmsg" signature="recvmsg(bufsize[, ancbufsize[, flags]]) -&gt; (data, ancdata, msg_flags, address)" />
        <scope doc="Bind the socket to a local address." ilk="function" name="bind" signature="bind(address)" />
        <scope doc="Return the address of the remote endpoint." ilk="function" name="getpeername" signature="getpeername() -&gt; address info" />
      </scope>
      <variable citdl="int" name="TCP_CORK" />
      <variable citdl="int" name="TCP_DEFER_ACCEPT" />
      <variable citdl="int" name="TCP_FASTOPEN" />
      <variable citdl="int" name="TCP_INFO" />
      <variable citdl="int" name="TCP_KEEPCNT" />
      <variable citdl="int" name="TCP_KEEPIDLE" />
      <variable citdl="int" name="TCP_KEEPINTVL" />
      <variable citdl="int" name="TCP_LINGER2" />
      <variable citdl="int" name="TCP_MAXSEG" />
      <variable citdl="int" name="TCP_NODELAY" />
      <variable citdl="int" name="TCP_QUICKACK" />
      <variable citdl="int" name="TCP_SYNCNT" />
      <variable citdl="int" name="TCP_WINDOW_CLAMP" />
      <variable citdl="int" name="TIPC_ADDR_ID" />
      <variable citdl="int" name="TIPC_ADDR_NAME" />
      <variable citdl="int" name="TIPC_ADDR_NAMESEQ" />
      <variable citdl="int" name="TIPC_CFG_SRV" />
      <variable citdl="int" name="TIPC_CLUSTER_SCOPE" />
      <variable citdl="int" name="TIPC_CONN_TIMEOUT" />
      <variable citdl="int" name="TIPC_CRITICAL_IMPORTANCE" />
      <variable citdl="int" name="TIPC_DEST_DROPPABLE" />
      <variable citdl="int" name="TIPC_HIGH_IMPORTANCE" />
      <variable citdl="int" name="TIPC_IMPORTANCE" />
      <variable citdl="int" name="TIPC_LOW_IMPORTANCE" />
      <variable citdl="int" name="TIPC_MEDIUM_IMPORTANCE" />
      <variable citdl="int" name="TIPC_NODE_SCOPE" />
      <variable citdl="int" name="TIPC_PUBLISHED" />
      <variable citdl="int" name="TIPC_SRC_DROPPABLE" />
      <variable citdl="int" name="TIPC_SUBSCR_TIMEOUT" />
      <variable citdl="int" name="TIPC_SUB_CANCEL" />
      <variable citdl="int" name="TIPC_SUB_PORTS" />
      <variable citdl="int" name="TIPC_SUB_SERVICE" />
      <variable citdl="int" name="TIPC_TOP_SRV" />
      <variable citdl="int" name="TIPC_WAIT_FOREVER" />
      <variable citdl="int" name="TIPC_WITHDRAWN" />
      <variable citdl="int" name="TIPC_ZONE_SCOPE" />
      <variable citdl="list" name="__all__" />
      <import module="_socket" />
      <scope doc="Connect to *address* and return the socket object." ilk="function" name="create_connection" signature="create_connection(address, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
      <scope doc="Duplicate an integer socket file descriptor." ilk="function" name="dup" returns="int" signature="dup(integer) -&gt; integer" />
      <import module="errno" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Create a socket object from a duplicate of the given file&#10;descriptor." ilk="function" name="fromfd" signature="fromfd(fd, family, type[, proto]) -&gt; socket object" />
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="gaierror" />
      <scope doc="Resolve host and port into list of address info entries." ilk="function" name="getaddrinfo" signature="getaddrinfo(host, port, family=0, type=0, proto=0, flags=0)" />
      <scope doc="Returns the default timeout in seconds (float) for new&#10;socket objects." ilk="function" name="getdefaulttimeout" signature="getdefaulttimeout() -&gt; timeout" />
      <scope doc="Get fully qualified domain name from name." ilk="function" name="getfqdn" signature="getfqdn(name='')" />
      <scope doc="Return the true host name, a list of aliases, and a list of&#10;IP addresses, for a host." ilk="function" name="gethostbyaddr" signature="gethostbyaddr(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the IP address (a string of the form&#10;'255.255.255.255') for a host." ilk="function" name="gethostbyname" signature="gethostbyname(host) -&gt; address" />
      <scope doc="Return the true host name, a list of aliases, and a list of&#10;IP addresses, for a host." ilk="function" name="gethostbyname_ex" signature="gethostbyname_ex(host) -&gt; (name, aliaslist, addresslist)" />
      <scope doc="Return the current host name." ilk="function" name="gethostname" returns="str" signature="gethostname() -&gt; string" />
      <scope doc="Get host and port for a sockaddr." ilk="function" name="getnameinfo" signature="getnameinfo(sockaddr, flags) --&gt; (host, port)" />
      <scope doc="Return the protocol number for the named protocol." ilk="function" name="getprotobyname" returns="int" signature="getprotobyname(name) -&gt; integer" />
      <scope doc="Return a port number from a service name and protocol name." ilk="function" name="getservbyname" returns="int" signature="getservbyname(servicename[, protocolname]) -&gt; integer" />
      <scope doc="Return the service name from a port number and protocol&#10;name." ilk="function" name="getservbyport" returns="str" signature="getservbyport(port[, protocolname]) -&gt; string" />
      <variable citdl="bool" name="has_ipv6" />
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="herror" />
      <scope doc="Convert a 32-bit integer from host to network byte order." ilk="function" name="htonl" returns="int" signature="htonl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from host to network byte order." ilk="function" name="htons" returns="int" signature="htons(integer) -&gt; integer" />
      <scope doc="Returns the interface name corresponding to the interface&#10;index if_index." ilk="function" name="if_indextoname" signature="if_indextoname(if_index)" />
      <scope doc="Returns a list of network interface information (index,&#10;name) tuples." ilk="function" name="if_nameindex" signature="if_nameindex()" />
      <scope doc="Returns the interface index corresponding to the interface&#10;name if_name." ilk="function" name="if_nametoindex" signature="if_nametoindex(if_name)" />
      <scope doc="Convert an IP address in string format (123.45.67.89) to the&#10;32-bit packed binary format used in low-level network&#10;functions." ilk="function" name="inet_aton" signature="inet_aton(string) -&gt; bytes giving packed 32-bit IP representation" />
      <scope doc="Convert an IP address from 32-bit packed binary format to&#10;string format" ilk="function" name="inet_ntoa" signature="inet_ntoa(packed_ip) -&gt; ip_address_string" />
      <scope doc="Convert a packed IP address of the given family to string&#10;format." ilk="function" name="inet_ntop" returns="str" signature="inet_ntop(af, packed_ip) -&gt; string formatted IP address" />
      <scope doc="Convert an IP address from string format to a packed string&#10;suitable for use with low-level network functions." ilk="function" name="inet_pton" signature="inet_pton(af, ip) -&gt; packed IP address string" />
      <import module="io" />
      <scope doc="Convert a 32-bit integer from network to host byte order." ilk="function" name="ntohl" returns="int" signature="ntohl(integer) -&gt; integer" />
      <scope doc="Convert a 16-bit integer from network to host byte order." ilk="function" name="ntohs" returns="int" signature="ntohs(integer) -&gt; integer" />
      <import module="os" />
      <import module="selectors" />
      <scope doc="Set the default timeout in seconds (float) for new socket&#10;objects." ilk="function" name="setdefaulttimeout" signature="setdefaulttimeout(timeout)" />
      <scope doc="Sets the hostname to name." ilk="function" name="sethostname" signature="sethostname(name)" />
      <scope classrefs="socket" doc="A subclass of _socket.socket adding the makefile() method.&#10;" ilk="class" name="socket">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="Close the socket object without closing the underlying file&#10;descriptor." ilk="function" name="detach" returns="file" signature="detach() -&gt; file descriptor" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketKind.SOCK_STREAM: 1&gt;, proto=0, fileno=None)" />
        <scope ilk="function" name="_real_close" signature="_real_close(self, _ss=&lt;class '_socket.socket'&gt;)" />
        <scope doc="Duplicate the socket." ilk="function" name="dup" signature="dup() -&gt; socket object" />
        <scope doc="Wrap __repr__() to reveal the real class name and socket&#10;address(es)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_sendfile_use_send" signature="_sendfile_use_send(self, file, offset=0, count=None)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="The arguments are as for io.open() after the filename,&#10;except the only mode characters supported are 'r', 'w' and&#10;'b'." ilk="function" name="makefile" signature="makefile(...) -&gt; an I/O stream connected to the socket" />
        <scope doc="Send a file until EOF is reached by using high-performance&#10;os.sendfile() and return the total number of bytes which&#10;were sent." ilk="function" name="sendfile" signature="sendfile(file[, offset[, count]]) -&gt; sent" />
        <scope doc="Close the socket. It cannot be used after this call." ilk="function" name="close" signature="close()" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="_decref_socketios" signature="_decref_socketios(self)" />
        <scope ilk="function" name="_sendfile_use_sendfile" signature="_sendfile_use_sendfile(self, file, offset=0, count=None)" />
        <scope doc="Get the inheritable flag of the socket" ilk="function" name="get_inheritable" signature="get_inheritable(self)" />
        <scope doc="Wait for an incoming connection." ilk="function" name="accept" signature="accept() -&gt; (socket object, address info)" />
        <scope ilk="function" name="_check_sendfile_params" signature="_check_sendfile_params(self, file, offset, count)" />
        <scope doc="Set the inheritable flag of the socket" ilk="function" name="set_inheritable" signature="set_inheritable(self, inheritable)" />
      </scope>
      <scope doc="Create a pair of socket objects from the sockets returned by&#10;the platform socketpair() function." ilk="function" name="socketpair" signature="socketpair([family[, type[, proto]]]) -&gt; (socket object, socket object)" />
      <import module="sys" />
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="timeout" />
    </scope>
    <scope doc="# Support for the API of the multiprocessing package using threads&#10;# # multiprocessing/dummy/__init__.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.dummy">
      <scope ilk="function" name="Array" signature="Array(typecode, sequence, lock=True)" />
      <scope classrefs="object" doc="Implements a Barrier.&#10;Useful for synchronizing a fixed number of threads at known synchronization points.  Threads block on 'wait()' and are simultaneously once they have all made that call." ilk="class" name="Barrier">
        <scope doc="Reset the barrier to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="# Optionally run the 'action' and release the threads&#10;waiting # in the barrier." ilk="function" name="_release" signature="_release(self)" />
        <scope ilk="function" name="_break" signature="_break(self)" />
        <scope doc="# Wait in the barrier until we are relased." ilk="function" name="_wait" signature="_wait(self, timeout)" />
        <scope doc="Create a barrier, initialised to 'parties' threads." ilk="function" name="__init__" signature="__init__(self, parties, action=None, timeout=None)" />
        <scope doc="Wait for the barrier." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="# If we are the last thread to exit the barrier, signal any&#10;threads # waiting for the barrier to drain." ilk="function" name="_exit" signature="_exit(self)" />
        <scope doc="Place the barrier into a 'broken' state." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="# Block until the barrier is ready for us, or raise an&#10;exception # if it is broken." ilk="function" name="_enter" signature="_enter(self)" />
      </scope>
      <scope classrefs="Semaphore" doc="Implements a bounded semaphore.&#10;A bounded semaphore checks to make sure its current value doesn't exceed its initial value. If it does, ValueError is raised. In most situations semaphores are used to guard resources with limited capacity.  If the semaphore is released too many times it's a sign of a bug. If not given, value defaults to 1.  Like regular semaphores, bounded semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return" ilk="class" name="BoundedSemaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope classrefs="object" doc="Class that implements a condition variable.&#10;A condition variable allows one or more threads to wait until they are notified by another thread.  If the lock argument is given and not None, it must be a Lock or RLock object, and it is used as the underlying lock. Otherwise, a new RLock object is created and used as the underlying lock." ilk="class" name="Condition">
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notifyAll" signature="notifyAll(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Wait until a condition evaluates to True." ilk="function" name="wait_for" signature="wait_for(self, predicate, timeout=None)" />
        <scope ilk="function" name="_release_save" signature="_release_save(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lock=None)" />
        <scope doc="Wait until notified or until a timeout occurs." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="Wake up one or more threads waiting on this condition, if&#10;any." ilk="function" name="notify" signature="notify(self, n=1)" />
        <scope ilk="function" name="_acquire_restore" signature="_acquire_restore(self, x)" />
        <scope ilk="function" name="_is_owned" signature="_is_owned(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="Thread" doc="A class that represents a thread of control.&#10;This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass." ilk="class" name="DummyProcess">
        <scope doc="This constructor should always be called with keyword&#10;arguments." ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs={})" />
        <scope doc="Start the thread's activity." ilk="function" name="start" signature="start(self)" />
      </scope>
      <scope classrefs="object" doc="Class implementing event objects.&#10;Events manage a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true.  The flag is initially false." ilk="class" name="Event">
        <scope doc="Reset the internal flag to false." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Set the internal flag to true." ilk="function" name="set" signature="set(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="isSet" signature="isSet(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Block until the internal flag is true." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="_reset_internal_locks" signature="_reset_internal_locks(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.&#10;If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="JoinableQueue">
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self, block=True, timeout=None)" />
        <scope doc="# Initialize the queue representation" ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope doc="# Get an item from the queue" ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0)" />
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item, block=True, timeout=None)" />
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise (not&#10;reliable!)." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope doc="# Put a new item in the queue" ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Blocks until all items in the Queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" name="qsize" signature="qsize(self)" />
        <scope doc="Return True if the queue is full, False otherwise (not&#10;reliable!)." ilk="function" name="full" signature="full(self)" />
      </scope>
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope ilk="function" name="Manager" signature="Manager()" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Namespace">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, **kwds)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="Pipe" signature="Pipe(duplex=True)" />
      <scope ilk="function" name="Pool" signature="Pool(processes=None, initializer=None, initargs=())" />
      <scope classrefs="Thread" doc="A class that represents a thread of control.&#10;This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass." ilk="class" name="Process">
        <scope doc="This constructor should always be called with keyword&#10;arguments." ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs={})" />
        <scope doc="Start the thread's activity." ilk="function" name="start" signature="start(self)" />
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.&#10;If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="Queue">
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self, block=True, timeout=None)" />
        <scope doc="# Initialize the queue representation" ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope doc="# Get an item from the queue" ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0)" />
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item, block=True, timeout=None)" />
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise (not&#10;reliable!)." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope doc="# Put a new item in the queue" ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Blocks until all items in the Queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" name="qsize" signature="qsize(self)" />
        <scope doc="Return True if the queue is full, False otherwise (not&#10;reliable!)." ilk="function" name="full" signature="full(self)" />
      </scope>
      <scope doc="Factory function that returns a new reentrant lock." ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <scope classrefs="object" doc="This class implements semaphore objects.&#10;Semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return without making the counter negative. If not given, value defaults to 1." ilk="class" name="Semaphore">
        <scope ilk="function" name="__exit__" signature="__exit__(self, t, v, tb)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="acquire" signature="acquire(self, blocking=True, timeout=None)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="__enter__" signature="__enter__(self, blocking=True, timeout=None)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Value">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, typecode, value, lock=True)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_set" signature="_set(self, value)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="active_children" signature="active_children()" />
      <import module="array" />
      <import module="connection" />
      <scope doc="Return the current Thread object, corresponding to the&#10;caller's thread of control." ilk="function" name="current_process" signature="current_process()" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="dict">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="True if D has a key k, else False." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope ilk="function" name="freeze_support" signature="freeze_support()" />
      <scope classrefs="object" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="list">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="L.reverse()" />
        <scope doc="L.clear() -&gt; None -- remove all items from L" ilk="function" name="clear" signature="L.clear() -&gt; None -- remove all items from L" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" ilk="function" name="sort" signature="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" />
        <scope doc="return a reverse iterator over the list" ilk="function" name="__reversed__" signature="L.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="L.copy() -&gt; list -- a shallow copy of L" ilk="function" name="copy" returns="list" signature="L.copy() -&gt; list -- a shallow copy of L" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" ilk="function" name="extend" signature="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="L.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="L.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope doc="L.append(object) -&gt; None -- append object to end" ilk="function" name="append" signature="L.append(object) -&gt; None -- append object to end" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="size of L in memory, in bytes" ilk="function" name="__sizeof__" signature="L.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="L.insert(index, object)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="remove" signature="L.remove(value) -&gt; None -- remove first occurrence of value." />
      </scope>
      <scope ilk="function" name="shutdown" signature="shutdown()" />
      <import module="sys" />
      <import module="threading" />
      <import module="weakref" />
    </scope>
    <scope doc="A collection of string constants.&#10;Public module variables:  whitespace -- a string containing all ASCII whitespace ascii_lowercase -- a string containing all ASCII lowercase letters ascii_uppercase -- a string containing all ASCII uppercase letters ascii_letters -- a string containing all ASCII letters digits -- a string containing all ASCII decimal digits hexdigits -- a string containing all ASCII hexadecimal digits octdigits -- a string containing all ASCII octal digits punctuation -- a string containing all ASCII punctuation characters" ilk="blob" lang="Python3" name="string">
      <scope classrefs="MutableMapping" doc="A ChainMap groups multiple dicts (or other mappings) together&#10;to create a single, updateable view.  The underlying mappings are stored in a list.  That list is public and can accessed or updated using the *maps* attribute.  There is no other state.  Lookups search the underlying mappings successively until a key is found. In contrast, writes, updates, and deletions only operate on the first mapping." ilk="class" name="ChainMap">
        <scope doc="Clear maps[0], leaving maps[1:] intact." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Create a ChainMap with a single dict created from the&#10;iterable." ilk="function" name="fromkeys" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize a ChainMap by setting *maps* to the given&#10;mappings." ilk="function" name="__init__" signature="__init__(self, *maps)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="Remove and return an item pair from maps[0]." ilk="function" name="popitem" signature="popitem(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="New ChainMap with a new map followed by all previous maps." ilk="function" name="new_child" signature="new_child(self, m=None)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Remove *key* from maps[0] and return its value." ilk="function" name="pop" signature="pop(self, key, *args)" />
        <scope doc="New ChainMap or subclass with a new copy of maps[0] and refs&#10;to maps[1:]" ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="New ChainMap or subclass with a new copy of maps[0] and refs&#10;to maps[1:]" ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope ilk="function" name="__missing__" signature="__missing__(self, key)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Formatter">
        <scope ilk="function" name="convert_field" signature="convert_field(self, value, conversion)" />
        <scope ilk="function" name="format_field" signature="format_field(self, value, format_spec)" />
        <scope ilk="function" name="_vformat" signature="_vformat(self, format_string, args, kwargs, used_args, recursion_depth, auto_arg_index=0)" />
        <scope ilk="function" name="check_unused_args" signature="check_unused_args(self, used_args, args, kwargs)" />
        <scope doc="# returns an iterable that contains tuples of the form: #&#10;(literal_text, field_name, format_spec, conversion) #&#10;literal_text can be zero length # field_name can be None, in&#10;which case there's no" ilk="function" name="parse" signature="parse(self, format_string)" />
        <scope ilk="function" name="get_value" signature="get_value(self, key, args, kwargs)" />
        <scope doc="# given a field_name, find the object it references." ilk="function" name="get_field" signature="get_field(self, field_name, args, kwargs)" />
        <scope ilk="function" name="vformat" signature="vformat(self, format_string, args, kwargs)" />
        <scope ilk="function" name="format" signature="format(*args, **kwargs)" />
      </scope>
      <scope classrefs="object" doc="A string class for supporting $-substitutions.&#10;" ilk="class" name="Template">
        <scope ilk="function" name="_invalid" signature="_invalid(self, mo)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, template)" />
        <scope ilk="function" name="safe_substitute" signature="safe_substitute(*args, **kws)" />
        <scope ilk="function" name="substitute" signature="substitute(*args, **kws)" />
      </scope>
      <import module="_re" />
      <import module="_string" />
      <variable citdl="str" name="ascii_letters" />
      <variable citdl="str" name="ascii_lowercase" />
      <variable citdl="str" name="ascii_uppercase" />
      <scope doc="Split the argument into words using split, capitalize each&#10;word using capitalize, and join the capitalized words using&#10;join." ilk="function" name="capwords" returns="str" signature="capwords(s [,sep]) -&gt; string" />
      <variable citdl="str" name="digits" />
      <variable citdl="str" name="hexdigits" />
      <variable citdl="str" name="octdigits" />
      <variable citdl="str" name="printable" />
      <variable citdl="str" name="punctuation" />
      <variable citdl="str" name="whitespace" />
    </scope>
    <scope doc="# Module implementing queues&#10;# # multiprocessing/queues.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.queues">
      <scope classrefs="Exception" doc="Exception raised by Queue.get(block=0)/get_nowait().&#10;" ilk="class" name="Empty" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs&#10;" ilk="class" name="Finalize">
        <scope doc="Run the callback unless it has already been called or&#10;cancelled" ilk="function" name="__call__" signature="__call__(self, wr=None, _finalizer_registry={}, sub_debug=&lt;function sub_debug at 0x7f11820f4488&gt;, getpid=&lt;built-in function getpid&gt;)" />
        <scope doc="Cancel finalization of the object" ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, obj, callback, args=(), kwargs=None, exitpriority=None)" />
        <scope doc="Return whether this finalizer is still waiting to invoke&#10;callback" ilk="function" name="still_active" signature="still_active(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Pickler" doc="Pickler subclass used by multiprocessing.&#10;" ilk="class" name="ForkingPickler">
        <scope doc="Register a reduce function for a type." ilk="function" name="register" />
        <scope ilk="function" name="dumps" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait().&#10;" ilk="class" name="Full" />
      <scope classrefs="Queue" doc="&#10;" ilk="class" name="JoinableQueue">
        <scope ilk="function" name="task_done" signature="task_done(self)" />
        <scope ilk="function" name="join" signature="join(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0, *, ctx)" />
        <scope ilk="function" name="put" signature="put(self, obj, block=True, timeout=None)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Queue">
        <scope ilk="function" name="put_nowait" signature="put_nowait(self, obj)" />
        <scope ilk="function" name="_finalize_join" signature="_finalize_join(twr)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="_after_fork" signature="_after_fork(self)" />
        <scope ilk="function" name="_start_thread" signature="_start_thread(self)" />
        <scope ilk="function" name="_finalize_close" signature="_finalize_close(buffer, notempty)" />
        <scope ilk="function" name="put" signature="put(self, obj, block=True, timeout=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0, *, ctx)" />
        <scope ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope ilk="function" name="empty" signature="empty(self)" />
        <scope ilk="function" name="get" signature="get(self, block=True, timeout=None)" />
        <scope ilk="function" name="cancel_join_thread" signature="cancel_join_thread(self)" />
        <scope ilk="function" name="qsize" signature="qsize(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="full" signature="full(self)" />
        <scope ilk="function" name="join_thread" signature="join_thread(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_feed" signature="_feed(buffer, notempty, send_bytes, writelock, close, ignore_epipe)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="SimpleQueue">
        <scope ilk="function" name="empty" signature="empty(self)" />
        <scope ilk="function" name="get" signature="get(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, ctx)" />
        <scope ilk="function" name="put" signature="put(self, obj)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_multiprocessing" />
      <import module="collections" />
      <import module="connection" />
      <import module="context" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <import module="errno" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <scope doc="Returns true if the process is shutting down" ilk="function" name="is_exiting" signature="is_exiting()" />
      <import module="os" />
      <scope ilk="function" name="register_after_fork" signature="register_after_fork(obj, func)" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="weakref" />
    </scope>
    <scope doc="Built-in functions, exceptions, and other objects.&#10;Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices." ilk="blob" lang="Python3" name="*">
      <scope classrefs="Exception" doc="Base class for arithmetic errors.&#10;" ilk="class" name="ArithmeticError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Assertion failed.&#10;" ilk="class" name="AssertionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Attribute not found.&#10;" ilk="class" name="AttributeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="Common base class for all exceptions&#10;" ilk="class" name="BaseException">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="set self.__traceback__ to tb and return self." ilk="function" name="with_traceback" signature="Exception.with_traceback(tb) --" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="OSError" doc="I/O operation would block.&#10;" ilk="class" name="BlockingIOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Broken pipe.&#10;" ilk="class" name="BrokenPipeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Buffer error.&#10;" ilk="class" name="BufferError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about bytes and buffer related problems, mostly&#10;related to conversion from str or comparing to str." ilk="class" name="BytesWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Child process error.&#10;" ilk="class" name="ChildProcessError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection aborted.&#10;" ilk="class" name="ConnectionAbortedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Connection error.&#10;" ilk="class" name="ConnectionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection refused.&#10;" ilk="class" name="ConnectionRefusedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection reset.&#10;" ilk="class" name="ConnectionResetError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about deprecated features.&#10;" ilk="class" name="DeprecationWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Read beyond end of file.&#10;" ilk="class" name="EOFError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="ellipsis" name="Ellipsis" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="EnvironmentError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="BaseException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Exception">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="bool" name="False" />
      <scope classrefs="OSError" doc="File already exists.&#10;" ilk="class" name="FileExistsError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="File not found.&#10;" ilk="class" name="FileNotFoundError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Floating point operation failed.&#10;" ilk="class" name="FloatingPointError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about constructs that will change semantically&#10;in the future." ilk="class" name="FutureWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="BaseException" doc="Request that a generator exit.&#10;" ilk="class" name="GeneratorExit">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="IOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="Exception" doc="Import can't find module, or can't find name in module.&#10;" ilk="class" name="ImportError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about probable mistakes in module imports&#10;" ilk="class" name="ImportWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="SyntaxError" doc="Improper indentation.&#10;" ilk="class" name="IndentationError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="LookupError" doc="Sequence index out of range.&#10;" ilk="class" name="IndexError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Interrupted by signal.&#10;" ilk="class" name="InterruptedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Operation doesn't work on directories.&#10;" ilk="class" name="IsADirectoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="LookupError" doc="Mapping key not found.&#10;" ilk="class" name="KeyError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="BaseException" doc="Program interrupted by user.&#10;" ilk="class" name="KeyboardInterrupt">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for lookup errors.&#10;" ilk="class" name="LookupError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Out of memory.&#10;" ilk="class" name="MemoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Name not found globally.&#10;" ilk="class" name="NameError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="NoneType" name="None" />
      <scope classrefs="OSError" doc="Operation only works on directories.&#10;" ilk="class" name="NotADirectoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="NotImplementedType" name="NotImplemented" />
      <scope classrefs="RuntimeError" doc="Method or function hasn't been implemented yet.&#10;" ilk="class" name="NotImplementedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="OSError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Result too large to be represented.&#10;" ilk="class" name="OverflowError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about features which will be deprecated&#10;in the future." ilk="class" name="PendingDeprecationWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Not enough permissions.&#10;" ilk="class" name="PermissionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Process not found.&#10;" ilk="class" name="ProcessLookupError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="RuntimeError" doc="Recursion limit exceeded.&#10;" ilk="class" name="RecursionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Weak ref proxy used after referent went away.&#10;" ilk="class" name="ReferenceError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about resource usage.&#10;" ilk="class" name="ResourceWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="RuntimeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about dubious runtime behavior.&#10;" ilk="class" name="RuntimeWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Signal the end from iterator.__anext__().&#10;" ilk="class" name="StopAsyncIteration">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Signal the end from iterator.__next__().&#10;" ilk="class" name="StopIteration">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Invalid syntax.&#10;" ilk="class" name="SyntaxError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about dubious syntax.&#10;" ilk="class" name="SyntaxWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Internal error in the Python interpreter.&#10;Please report this to the Python maintainer, along with the traceback, the Python version, and the hardware/OS platform and version." ilk="class" name="SystemError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="BaseException" doc="Request to exit from the interpreter.&#10;" ilk="class" name="SystemExit">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="IndentationError" doc="Improper mixture of spaces and tabs.&#10;" ilk="class" name="TabError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Timeout expired.&#10;" ilk="class" name="TimeoutError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="bool" name="True" />
      <scope classrefs="Exception" doc="Inappropriate argument type.&#10;" ilk="class" name="TypeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="NameError" doc="Local name referenced but not bound to a value.&#10;" ilk="class" name="UnboundLocalError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode decoding error.&#10;" ilk="class" name="UnicodeDecodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode encoding error.&#10;" ilk="class" name="UnicodeEncodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="ValueError" doc="Unicode related error.&#10;" ilk="class" name="UnicodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode translation error.&#10;" ilk="class" name="UnicodeTranslateError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about Unicode related problems, mostly&#10;related to conversion problems." ilk="class" name="UnicodeWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings generated by user code.&#10;" ilk="class" name="UserWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="ValueError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for warning categories.&#10;" ilk="class" name="Warning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Second argument to a division or modulo operation was zero.&#10;" ilk="class" name="ZeroDivisionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="Internal helper function used by the class statement." ilk="function" name="__build_class__" signature="__build_class__(func, name, *bases, metaclass=None, **kwds) -&gt; class" />
      <scope doc="Import a module." ilk="function" name="__import__" returns="module" signature="__import__(name, globals=None, locals=None, fromlist=(), level=0) -&gt; module" />
      <scope doc="Return the absolute value of the argument." ilk="function" name="abs" />
      <scope doc="Return True if bool(x) is True for all values x in the&#10;iterable." ilk="function" name="all" />
      <scope doc="Return True if bool(x) is True for any x in the iterable." ilk="function" name="any" />
      <scope doc="Return an ASCII-only representation of an object." ilk="function" name="ascii" />
      <scope doc="Return the binary representation of an integer." ilk="function" name="bin" />
      <scope classrefs="int" doc="bool(x) -&gt; bool&#10;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="bool">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope classrefs="object" doc="bytearray(iterable_of_ints) -&gt; bytearray&#10;bytearray(string, encoding[, errors]) -&gt; bytearray bytearray(bytes_or_buffer) -&gt; mutable copy of bytes_or_buffer bytearray(int) -&gt; bytes array of size given by the parameter initialized with null bytes bytearray() -&gt; empty bytes array  Construct an mutable bytearray object from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - a bytes or a buffer object - any object implementing the buffer API." ilk="class" name="bytearray">
        <scope doc="Remove all items from the bytearray." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end]." ilk="function" name="find" returns="int" signature="B.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="B.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa." ilk="function" name="swapcase" signature="B.swapcase() -&gt; copy of B" />
        <scope doc="Strip trailing bytes contained in the argument." ilk="function" name="rstrip" />
        <scope doc="Partition the bytearray into three parts using the given&#10;separator." ilk="function" name="partition" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;uppercase." ilk="function" name="upper" signature="B.upper() -&gt; copy of B" />
        <scope doc="Decode the bytearray using the codec registered for&#10;encoding." ilk="function" name="decode" />
        <scope doc="Return True if all cased characters in B are lowercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="islower" returns="bool" signature="B.islower() -&gt; bool" />
        <scope doc="Return a list of the sections in the bytearray, using sep as&#10;the delimiter." ilk="function" name="rsplit" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Strip leading and trailing bytes contained in the argument." ilk="function" name="strip" />
        <scope doc="Return a titlecased version of B, i.e." ilk="function" name="title" signature="B.title() -&gt; copy of B" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Append all the items from the iterator or sequence to the&#10;end of the bytearray." ilk="function" name="extend" />
        <scope doc="Reverse the order of the values in B in place." ilk="function" name="reverse" />
        <scope doc="Return a copy of B with only its first character capitalized&#10;(ASCII) and the rest lower-cased." ilk="function" name="capitalize" signature="B.capitalize() -&gt; copy of B" />
        <scope doc="Return True if all characters in B are alphabetic and there&#10;is at least one character in B, False otherwise." ilk="function" name="isalpha" returns="bool" signature="B.isalpha() -&gt; bool" />
        <scope doc="Like B.rfind() but raise ValueError when the subsection is&#10;not found." ilk="function" name="rindex" returns="int" signature="B.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of B where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" signature="B.expandtabs(tabsize=8) -&gt; copy of B" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;subsection sub in bytes B[start:end]." ilk="function" name="count" returns="int" signature="B.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="rpartition" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return a single item from B." ilk="function" name="pop" />
        <scope doc="Append a single item to the end of the bytearray." ilk="function" name="append" />
        <scope doc="Return B centered in a string of length width." ilk="function" name="center" signature="B.center(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Returns the size of the bytearray object in memory, in&#10;bytes." ilk="function" name="__sizeof__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce_ex__" />
        <scope doc="Return a copy with each character mapped by the given&#10;translation table." ilk="function" name="translate" signature="translate(table, [deletechars])" />
        <scope doc="Return True if all characters in B are alphanumeric and&#10;there is at least one character in B, False otherwise." ilk="function" name="isalnum" returns="bool" signature="B.isalnum() -&gt; bool" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;lowercase." ilk="function" name="lower" signature="B.lower() -&gt; copy of B" />
        <scope doc="Return a list of the sections in the bytearray, using sep as&#10;the delimiter." ilk="function" name="split" />
        <scope doc="Strip leading bytes contained in the argument." ilk="function" name="lstrip" />
        <scope doc="Return True if all characters in B are digits and there is&#10;at least one character in B, False otherwise." ilk="function" name="isdigit" returns="bool" signature="B.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in B are uppercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="isupper" returns="bool" signature="B.isupper() -&gt; bool" />
        <scope doc="Like B.find() but raise ValueError when the subsection is&#10;not found." ilk="function" name="index" returns="int" signature="B.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return B right justified in a string of length width." ilk="function" name="rjust" signature="B.rjust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return True if B starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="B.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return a copy with all occurrences of substring old replaced&#10;by new." ilk="function" name="replace" />
        <scope doc="Return B left justified in a string of length width." ilk="function" name="ljust" signature="B.ljust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return the number of bytes actually allocated." ilk="function" name="__alloc__" returns="int" signature="B.__alloc__() -&gt; int" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return True if B is a titlecased string and there is at&#10;least one character in B, i.e." ilk="function" name="istitle" returns="bool" signature="B.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string B with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" signature="B.zfill(width) -&gt; copy of B" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Concatenate any number of bytes/bytearray objects." ilk="function" name="join" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in the bytearray, breaking at&#10;line boundaries." ilk="function" name="splitlines" />
        <scope doc="Return a copy of B." ilk="function" name="copy" />
        <scope doc="Return True if all characters in B are whitespace and there&#10;is at least one character in B, False otherwise." ilk="function" name="isspace" returns="bool" signature="B.isspace() -&gt; bool" />
        <scope doc="Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end]." ilk="function" name="rfind" returns="int" signature="B.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Create a string of hexadecimal numbers from a bytearray&#10;object." ilk="function" name="hex" returns="str" signature="B.hex() -&gt; string" />
        <scope doc="Remove the first occurrence of a value in the bytearray." ilk="function" name="remove" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Insert a single item into the bytearray before the given&#10;index." ilk="function" name="insert" />
      </scope>
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes&#10;bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes bytes() -&gt; empty bytes object  Construct an immutable array of bytes from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - any object implementing the buffer API. - an integer" ilk="class" name="bytes">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return the lowest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="find" returns="int" signature="B.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="B.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Strip trailing bytes contained in the argument." ilk="function" name="rstrip" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="partition" />
        <scope doc="Return a copy of B with only its first character capitalized&#10;(ASCII) and the rest lower-cased." ilk="function" name="capitalize" signature="B.capitalize() -&gt; copy of B" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;uppercase." ilk="function" name="upper" signature="B.upper() -&gt; copy of B" />
        <scope doc="Decode the bytes using the codec registered for encoding." ilk="function" name="decode" />
        <scope doc="Return True if all cased characters in B are lowercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="islower" returns="bool" signature="B.islower() -&gt; bool" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="rsplit" />
        <scope doc="Strip leading and trailing bytes contained in the argument." ilk="function" name="strip" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return B right justified in a string of length width." ilk="function" name="rjust" signature="B.rjust(width[, fillchar]) -&gt; copy of B" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in B are alphabetic and there&#10;is at least one character in B, False otherwise." ilk="function" name="isalpha" returns="bool" signature="B.isalpha() -&gt; bool" />
        <scope doc="Like B.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="B.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of B where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" signature="B.expandtabs(tabsize=8) -&gt; copy of B" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string B[start:end]." ilk="function" name="count" returns="int" signature="B.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="rpartition" />
        <scope doc="Return B left justified in a string of length width." ilk="function" name="ljust" signature="B.ljust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return B centered in a string of length width." ilk="function" name="center" signature="B.center(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa." ilk="function" name="swapcase" signature="B.swapcase() -&gt; copy of B" />
        <scope doc="Return a titlecased version of B, i.e." ilk="function" name="title" signature="B.title() -&gt; copy of B" />
        <scope doc="Return a copy with each character mapped by the given&#10;translation table." ilk="function" name="translate" signature="translate(table, [deletechars])" />
        <scope doc="Return True if all characters in B are alphanumeric and&#10;there is at least one character in B, False otherwise." ilk="function" name="isalnum" returns="bool" signature="B.isalnum() -&gt; bool" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;lowercase." ilk="function" name="lower" signature="B.lower() -&gt; copy of B" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="split" />
        <scope doc="Strip leading bytes contained in the argument." ilk="function" name="lstrip" />
        <scope doc="Return True if all characters in B are digits and there is&#10;at least one character in B, False otherwise." ilk="function" name="isdigit" returns="bool" signature="B.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in B are uppercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="isupper" returns="bool" signature="B.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like B.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="B.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="B.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return a copy with all occurrences of substring old replaced&#10;by new." ilk="function" name="replace" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if B is a titlecased string and there is at&#10;least one character in B, i.e." ilk="function" name="istitle" returns="bool" signature="B.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string B with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" signature="B.zfill(width) -&gt; copy of B" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Concatenate any number of bytes objects." ilk="function" name="join" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in the bytes, breaking at line&#10;boundaries." ilk="function" name="splitlines" />
        <scope doc="Return True if all characters in B are whitespace and there&#10;is at least one character in B, False otherwise." ilk="function" name="isspace" returns="bool" signature="B.isspace() -&gt; bool" />
        <scope doc="Return the highest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="rfind" returns="int" signature="B.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Create a string of hexadecimal numbers from a bytes object." ilk="function" name="hex" returns="str" signature="B.hex() -&gt; string" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="Return whether the object is callable (i.e., some kind of&#10;function)." ilk="function" name="callable" />
      <scope doc="Return a Unicode string of one character with ordinal i; 0&#10;&lt;= i &lt;= 0x10ffff." ilk="function" name="chr" />
      <scope classrefs="object" doc="classmethod(function) -&gt; method&#10;Convert a function to be a class method.  A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:  class C: def f(cls, arg1, arg2, ...): ... f = classmethod(f) " ilk="class" name="classmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope doc="Compile source into a code object that can be executed by&#10;exec() or eval()." ilk="function" name="compile" />
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number&#10;Create a complex number from a real part and an optional imaginary part. This is equivalent to (real + imag*1j) where imag defaults to 0." ilk="class" name="complex">
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Convert to a string according to format_spec." ilk="function" name="__format__" returns="str" signature="complex.__format__() -&gt; str" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the complex conjugate of its argument." ilk="function" name="conjugate" returns="complex" signature="complex.conjugate() -&gt; complex" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <variable citdl="_Printer" name="credits" />
      <scope doc="Deletes the named attribute from the given object." ilk="function" name="delattr" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="dict">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="True if D has a key k, else False." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="If called without an argument, return the names in the&#10;current scope." ilk="function" name="dir" returns="list" signature="dir([object]) -&gt; list of strings" />
      <scope doc="Return the tuple ((x-x%y)/y, x%y)." ilk="function" name="divmod" />
      <scope classrefs="object" doc="enumerate(iterable[, start]) -&gt; iterator for index, value of iterable&#10;Return an enumerate object.  iterable must be another object that supports iteration.  The enumerate object yields pairs containing a count (from start, which defaults to zero) and a value yielded by the iterable argument. enumerate is useful for obtaining an indexed list: (0, seq[0]), (1, seq[1]), (2, seq[2]), ..." ilk="class" name="enumerate">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Evaluate the given source in the context of globals and&#10;locals." ilk="function" name="eval" />
      <scope doc="Execute the given source in the context of globals and&#10;locals." ilk="function" name="exec" />
      <scope classrefs="object" doc="filter(function or None, iterable) --&gt; filter object&#10;Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true." ilk="class" name="filter">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#10;Convert a string or number to a floating point number, if possible." ilk="class" name="float">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return the Integral closest to x, rounding half toward even." ilk="function" name="__round__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a pair of integers, whose ratio is exactly equal to&#10;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return a hexadecimal representation of a floating-point&#10;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
      </scope>
      <scope doc="Return value.__format__(format_spec)" ilk="function" name="format" />
      <scope classrefs="object" doc="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object  Build an immutable unordered collection of unique elements." ilk="class" name="frozenset">
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope doc="Get a named attribute from an object; getattr(x, 'y') is&#10;equivalent to x.y." ilk="function" name="getattr" signature="getattr(object, name[, default]) -&gt; value" />
      <scope doc="Return the dictionary containing the current scope's global&#10;variables." ilk="function" name="globals" />
      <scope doc="Return whether the object has an attribute with the given&#10;name." ilk="function" name="hasattr" />
      <scope doc="Return the hash value for the given object." ilk="function" name="hash" />
      <variable citdl="_Helper" name="help" />
      <scope doc="Return the hexadecimal representation of an integer." ilk="function" name="hex" />
      <scope doc="Return the identity of an object." ilk="function" name="id" />
      <scope doc="Read a string from standard input." ilk="function" name="input" />
      <scope classrefs="object" doc="int(x=0) -&gt; integer&#10;int(x, base=10) -&gt; integer  Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this truncates towards zero.  If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36." ilk="class" name="int">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="Return an array of bytes representing an integer." ilk="function" name="to_bytes" signature="int.to_bytes(length, byteorder, *, signed=False) -&gt; bytes" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Rounding an Integral returns itself." ilk="function" name="__round__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Returns size in memory, in bytes" ilk="function" name="__sizeof__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Flooring an Integral returns itself." ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="Ceiling of an Integral returns itself." ilk="function" name="__ceil__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <scope doc="Return whether an object is an instance of a class or of a&#10;subclass thereof." ilk="function" name="isinstance" />
      <scope doc="Return whether 'cls' is a derived from another class or is&#10;the same class." ilk="function" name="issubclass" />
      <scope doc="Get an iterator from an object." ilk="function" name="iter" signature="iter(iterable) -&gt; iterator&#10;iter(callable, sentinel) -&gt; iterator" />
      <scope doc="Return the number of items in a container." ilk="function" name="len" />
      <scope classrefs="object" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="list">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="L.reverse()" />
        <scope doc="L.clear() -&gt; None -- remove all items from L" ilk="function" name="clear" signature="L.clear() -&gt; None -- remove all items from L" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" ilk="function" name="sort" signature="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" />
        <scope doc="return a reverse iterator over the list" ilk="function" name="__reversed__" signature="L.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="L.copy() -&gt; list -- a shallow copy of L" ilk="function" name="copy" returns="list" signature="L.copy() -&gt; list -- a shallow copy of L" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" ilk="function" name="extend" signature="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="L.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="L.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope doc="L.append(object) -&gt; None -- append object to end" ilk="function" name="append" signature="L.append(object) -&gt; None -- append object to end" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="size of L in memory, in bytes" ilk="function" name="__sizeof__" signature="L.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="L.insert(index, object)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="remove" signature="L.remove(value) -&gt; None -- remove first occurrence of value." />
      </scope>
      <scope doc="Return a dictionary containing the current scope's local&#10;variables." ilk="function" name="locals" />
      <scope classrefs="object" doc="map(func, *iterables) --&gt; map object&#10;Make an iterator that computes the function using arguments from each of the iterables.  Stops when the shortest iterable is exhausted." ilk="class" name="map">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="With a single iterable argument, return its biggest item." ilk="function" name="max" signature="max(iterable, *[, default=obj, key=func]) -&gt; value&#10;max(arg1, arg2, *args, *[, key=func]) -&gt; value" />
      <scope classrefs="object" doc="Create a new memoryview object which references the given object.&#10;" ilk="class" name="memoryview">
        <scope ilk="function" name="__exit__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the data in the buffer as a byte string." ilk="function" name="tobytes" />
        <scope ilk="function" name="__enter__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Cast a memoryview to a new format or shape." ilk="function" name="cast" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Release the underlying buffer exposed by the memoryview&#10;object." ilk="function" name="release" />
        <scope doc="Return the data in the buffer as a list of elements." ilk="function" name="tolist" />
        <scope doc="Return the data in the buffer as a string of hexadecimal&#10;numbers." ilk="function" name="hex" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="With a single iterable argument, return its smallest item." ilk="function" name="min" signature="min(iterable, *[, default=obj, key=func]) -&gt; value&#10;min(arg1, arg2, *args, *[, key=func]) -&gt; value" />
      <scope doc="Return the next item from the iterator." ilk="function" name="next" signature="next(iterator[, default])" />
      <scope doc="The most base type&#10;" ilk="class" name="object">
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
      </scope>
      <scope doc="Return the octal representation of an integer." ilk="function" name="oct" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
      <scope doc="Return the Unicode code point for a one-character string." ilk="function" name="ord" />
      <scope doc="Equivalent to x**y (with two arguments) or x**y % z (with&#10;three arguments)" ilk="function" name="pow" />
      <scope doc="Prints the values to a stream, or to sys.stdout by default." ilk="function" name="print" signature="print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)" />
      <scope classrefs="object" doc="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute&#10;fget is a function to be used for getting an attribute value, and likewise fset is a function for setting, and fdel a function for del'ing, an attribute.  Typical use is to define a managed attribute x:  class C(object): def getx(self): return self._x def setx(self, value): self._x = value def delx(self): del self._x x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;) " ilk="class" name="property">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Descriptor to change the deleter on a property." ilk="function" name="deleter" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
        <scope doc="Descriptor to change the setter on a property." ilk="function" name="setter" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Descriptor to change the getter on a property." ilk="function" name="getter" />
      </scope>
      <variable citdl="Quitter" name="quit" />
      <scope classrefs="object" doc="range(stop) -&gt; range object&#10;range(start, stop[, step]) -&gt; range object  Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements. When step is given, it specifies the increment (or decrement)." ilk="class" name="range">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Raise ValueError if the value is not present." ilk="function" name="index" returns="int" signature="rangeobject.index(value, [start, [stop]]) -&gt; integer -- return index of value." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return a reverse iterator." ilk="function" name="__reversed__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="rangeobject.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="rangeobject.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
      </scope>
      <scope doc="Return the canonical string representation of the object." ilk="function" name="repr" />
      <scope classrefs="object" doc="reversed(sequence) -&gt; reverse iterator over values of the sequence&#10;Return a reverse iterator" ilk="class" name="reversed">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Round a number to a given precision in decimal digits&#10;(default 0 digits)." ilk="function" name="round" returns="int" signature="round(number[, ndigits]) -&gt; number" />
      <scope classrefs="object" doc="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" name="set">
        <scope doc="Remove all elements from this set." ilk="function" name="clear" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Update a set with the symmetric difference of itself and&#10;another." ilk="function" name="symmetric_difference_update" />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Remove all elements of another set from this set." ilk="function" name="difference_update" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="Remove an element from a set; it must be a member." ilk="function" name="remove" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Update a set with the intersection of itself and another." ilk="function" name="intersection_update" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Add an element to a set." ilk="function" name="add" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Update a set with the union of itself and others." ilk="function" name="update" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Remove and return an arbitrary set element." ilk="function" name="pop" />
        <scope doc="Remove an element from a set if it is a member." ilk="function" name="discard" />
      </scope>
      <scope doc="Sets the named attribute on the given object to the&#10;specified value." ilk="function" name="setattr" />
      <scope classrefs="object" doc="slice(stop)&#10;slice(start, stop[, step])  Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="slice">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Assuming a sequence of length len, calculate the start and&#10;stop indices, and the stride length of the extended slice&#10;described by S." ilk="function" name="indices" signature="S.indices(len) -&gt; (start, stop, stride)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Return a new list containing all items from the iterable in&#10;ascending order." ilk="function" name="sorted" />
      <scope classrefs="object" doc="staticmethod(function) -&gt; method&#10;Convert a function to be a static method.  A static method does not receive an implicit first argument. To declare a static method, use this idiom:  class C: def f(arg1, arg2, ...): ... f = staticmethod(f)  It can be called either on the class (e.g. C.f()) or on an instance" ilk="class" name="staticmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="object" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="str">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if S ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;mapping." ilk="function" name="format_map" returns="str" signature="S.format_map(mapping) -&gt; str" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of the string S with trailing whitespace&#10;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; str" />
        <scope doc="Search for the separator sep in S, and return the part&#10;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; str" />
        <scope doc="Return a version of S suitable for caseless comparisons." ilk="function" name="casefold" returns="str" signature="S.casefold() -&gt; str" />
        <scope doc="Return True if there are only numeric characters in S, False&#10;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; str" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; str" />
        <scope doc="Return True if all cased characters in S are lowercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string, starting at the end of the string and working to the&#10;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading and trailing&#10;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; str" />
        <scope doc="Return a copy of S with all occurrences of substring old&#10;replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; str" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; str" />
        <scope doc="Encode S using the codec registered for encoding." ilk="function" name="encode" signature="S.encode(encoding='utf-8', errors='strict') -&gt; bytes" />
        <scope doc="Return True if all characters in S are alphabetic and there&#10;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of S where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs(tabsize=8) -&gt; str" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#10;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#10;and return the part before it, the separator itself, and the&#10;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; str" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; str" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of S with uppercase characters converted to&#10;lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; str" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; str" />
        <scope doc="Return a copy of the string S in which each character has&#10;been mapped through the given translation table." ilk="function" name="translate" returns="str" signature="S.translate(table) -&gt; str" />
        <scope doc="Return True if all characters in S are considered printable&#10;in repr() or S is empty, False otherwise." ilk="function" name="isprintable" returns="bool" signature="S.isprintable() -&gt; bool" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; str" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string." ilk="function" name="split" returns="list" signature="S.split(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading whitespace&#10;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; str" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return True if all characters in S are digits and there is&#10;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in S are uppercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="S.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if S is a titlecased string and there is at&#10;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; str" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; str" />
        <scope doc="Return True if S is a valid identifier according to the&#10;language definition." ilk="function" name="isidentifier" returns="bool" signature="S.isidentifier() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#10;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; str" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in S, breaking at line&#10;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return True if all characters in S are whitespace and there&#10;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="Return True if S starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if all characters in S are alphanumeric and&#10;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="Return the sum of a 'start' value (default: 0) plus an&#10;iterable of numbers" ilk="function" name="sum" />
      <scope classrefs="object" doc="super() -&gt; same as super(__class__, &lt;first argument&gt;)&#10;super(type) -&gt; unbound super object super(type, obj) -&gt; bound super object; requires isinstance(obj, type) super(type, type2) -&gt; bound super object; requires issubclass(type2, type) Typical use to call a cooperative superclass method: class C(B): def meth(self, arg): super().meth(arg) This works for class methods too: class C(B): @classmethod" ilk="class" name="super">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object." ilk="class" name="tuple">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="T.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="T.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope classrefs="object" doc="type(object_or_name, bases, dict)&#10;type(object) -&gt; the object's type type(name, bases, dict) -&gt; a new type" ilk="class" name="type">
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="specialized __dir__ implementation for types" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return memory consumption of the type object" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="return a type's method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
      </scope>
      <scope doc="Without arguments, equivalent to locals()." ilk="function" name="vars" returns="dict" signature="vars([object]) -&gt; dictionary" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object&#10;Return a zip object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the shortest iterable in the argument sequence is exhausted and then it raises StopIteration." ilk="class" name="zip">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="opcode module - potentially shared between dis and other modules which&#10;operate on bytecodes (e.g. peephole optimizers)." ilk="blob" lang="Python3" name="opcode">
      <variable citdl="int" name="EXTENDED_ARG" />
      <variable citdl="int" name="HAVE_ARGUMENT" />
      <variable citdl="list" name="__all__" />
      <variable citdl="tuple" name="cmp_op" />
      <variable citdl="list" name="hascompare" />
      <variable citdl="list" name="hasconst" />
      <variable citdl="list" name="hasfree" />
      <variable citdl="list" name="hasjabs" />
      <variable citdl="list" name="hasjrel" />
      <variable citdl="list" name="haslocal" />
      <variable citdl="list" name="hasname" />
      <variable citdl="list" name="hasnargs" />
      <variable citdl="dict" name="opmap" />
      <variable citdl="list" name="opname" />
      <scope doc="Compute the stack effect of the opcode." ilk="function" name="stack_effect" />
    </scope>
    <scope doc="An object-oriented interface to .netrc files.&#10;" ilk="blob" lang="Python3" name="netrc">
      <scope classrefs="Exception" doc="Exception raised on syntax errors in the .netrc file.&#10;" ilk="class" name="NetrcParseError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, filename=None, lineno=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="netrc">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file=None)" />
        <scope doc="Return a (user, account, password) tuple for given host." ilk="function" name="authenticators" signature="authenticators(self, host)" />
        <scope doc="Dump the class data in the format of a .netrc file." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_parse" signature="_parse(self, file, fp, default_netrc)" />
      </scope>
      <import module="os" />
      <import module="shlex" />
      <import module="stat" />
    </scope>
    <scope doc="Manage shelves of pickled objects.&#10;A &quot;shelf&quot; is a persistent, dictionary-like object.  The difference with dbm databases is that the values (not the keys!) in a shelf can be essentially arbitrary Python objects -- anything that the &quot;pickle&quot; module can handle.  This includes most class instances, recursive data types, and objects containing lots of shared sub-objects.  The keys are ordinary strings.  To summarize the interface (key is a string, data is an arbitrary object): " ilk="blob" lang="Python3" name="shelve">
      <scope classrefs="Shelf" doc="Shelf implementation using the &quot;BSD&quot; db interface.&#10;This adds methods first(), next(), previous(), last() and set_location() that have no counterpart in [g]dbm databases.  The actual database must be opened using one of the &quot;bsddb&quot; modules &quot;open&quot; routines (i.e. bsddb.hashopen, bsddb.btopen or bsddb.rnopen) and passed to the constructor.  See the module's __doc__ string for an overview of the interface." ilk="class" name="BsdDbShelf">
        <scope ilk="function" name="next" signature="next(self)" />
        <scope ilk="function" name="previous" signature="previous(self)" />
        <scope ilk="function" name="set_location" signature="set_location(self, key)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dict, protocol=None, writeback=False, keyencoding='utf-8')" />
        <scope ilk="function" name="last" signature="last(self)" />
        <scope ilk="function" name="first" signature="first(self)" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="Shelf" doc="Shelf implementation using the &quot;dbm&quot; generic dbm interface.&#10;This is initialized with the filename for the dbm database. See the module's __doc__ string for an overview of the interface." ilk="class" name="DbfilenameShelf">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filename, flag='c', protocol=None, writeback=False)" />
      </scope>
      <scope classrefs="object" doc="This takes a binary file for writing a pickle data stream.&#10;The optional *protocol* argument tells the pickler to use the given protocol; supported protocols are 0, 1, 2, 3 and 4.  The default protocol is 3; a backward-incompatible protocol designed for Python 3.  Specifying a negative protocol version selects the highest protocol version supported.  The higher the protocol used, the more recent the version of Python needed to read the pickle produced.  The *file* argument must have a write() method that accepts a single bytes argument. It can thus be a file object opened for binary" ilk="class" name="Pickler">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Clears the pickler's &quot;memo&quot;." ilk="function" name="clear_memo" />
        <scope doc="Write a pickled representation of the given object to the&#10;open file." ilk="function" name="dump" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
      </scope>
      <scope classrefs="MutableMapping" doc="Base class for shelf implementations.&#10;This is initialized with a dictionary-like object. See the module's __doc__ string for an overview of the interface." ilk="class" name="Shelf">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dict, protocol=None, writeback=False, keyencoding='utf-8')" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="sync" signature="sync(self)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="This takes a binary file for reading a pickle data stream.&#10;The protocol version of the pickle is detected automatically, so no protocol argument is needed.  Bytes past the pickled object's representation are ignored.  The argument *file* must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.  Both methods should return bytes.  Thus *file* can be a binary file object opened for reading, an io.BytesIO object, or any other custom object that meets this interface. " ilk="class" name="Unpickler">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an object from a specified module." ilk="function" name="find_class" />
        <scope doc="Load a pickle." ilk="function" name="load" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <scope doc="Open a persistent dictionary for reading and writing." ilk="function" name="open" signature="open(filename, flag='c', protocol=None, writeback=False)" />
    </scope>
    <scope doc="Class for printing reports on profiled python code.&#10;" ilk="blob" lang="Python3" name="pstats">
      <scope classrefs="object" doc="This class is used for creating reports from data generated by the&#10;Profile class.  It is a &quot;friend&quot; of that class, and imports data either by direct access to members of Profile class, or by reading in a dictionary that was emitted (via marshal) from the Profile class.  The big change from the previous Profiler (in terms of raw functionality) is that an &quot;add()&quot; method has been provided to combine Stats from several distinct profile runs.  Both the constructor and the add() method now take arbitrarily many file names as arguments.  All the print methods now take an argument that indicates how many lines" ilk="class" name="Stats">
        <scope ilk="function" name="init" signature="init(self, arg)" />
        <scope ilk="function" name="calc_callees" signature="calc_callees(self)" />
        <scope ilk="function" name="print_line" signature="print_line(self, func)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, stream=None)" />
        <scope ilk="function" name="print_call_heading" signature="print_call_heading(self, name_size, column_title)" />
        <scope ilk="function" name="add" signature="add(self, *arg_list)" />
        <scope ilk="function" name="strip_dirs" signature="strip_dirs(self)" />
        <scope ilk="function" name="get_print_list" signature="get_print_list(self, sel_list)" />
        <scope ilk="function" name="load_stats" signature="load_stats(self, arg)" />
        <scope ilk="function" name="sort_stats" signature="sort_stats(self, *field)" />
        <scope ilk="function" name="print_call_line" signature="print_call_line(self, name_size, source, call_dict, arrow='-&gt;')" />
        <scope ilk="function" name="print_stats" signature="print_stats(self, *amount)" />
        <scope ilk="function" name="print_callees" signature="print_callees(self, *amount)" />
        <scope ilk="function" name="print_callers" signature="print_callers(self, *amount)" />
        <scope ilk="function" name="get_top_level_stats" signature="get_top_level_stats(self)" />
        <scope doc="Expand all abbreviations that are unique." ilk="function" name="get_sort_arg_defs" signature="get_sort_arg_defs(self)" />
        <scope ilk="function" name="eval_print_amount" signature="eval_print_amount(self, sel, list, msg)" />
        <scope doc="Write the profile data to a file we know how to load back." ilk="function" name="dump_stats" signature="dump_stats(self, filename)" />
        <scope ilk="function" name="reverse_order" signature="reverse_order(self)" />
        <scope ilk="function" name="print_title" signature="print_title(self)" />
      </scope>
      <scope classrefs="object" doc="This class provides a generic function for comparing any two tuples.&#10;Each instance records a list of tuple-indices (from most significant to least significant), and sort direction (ascending or decending) for each tuple-index.  The compare functions can then be used as the function argument to the system sort() function when a list of tuples need to be sorted in the instances order." ilk="class" name="TupleComp">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, comp_select_list)" />
        <scope ilk="function" name="compare" signature="compare(self, left, right)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Combine two caller lists in a single list." ilk="function" name="add_callers" signature="add_callers(target, source)" />
      <scope doc="Add together all the stats for two profile entries." ilk="function" name="add_func_stats" signature="add_func_stats(target, source)" />
      <scope doc="Convert a cmp= function into a key= function." ilk="function" name="cmp_to_key" />
      <scope doc="Sum the caller statistics to get total number of calls&#10;received." ilk="function" name="count_calls" signature="count_calls(callers)" />
      <scope ilk="function" name="f8" signature="f8(x)" />
      <scope ilk="function" name="func_get_function_name" signature="func_get_function_name(func)" />
      <scope ilk="function" name="func_std_string" signature="func_std_string(func_name)" />
      <scope ilk="function" name="func_strip_path" signature="func_strip_path(func_name)" />
      <import module="marshal" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="time" />
    </scope>
    <scope doc="distutils.file_util&#10;Utility functions for operating on single files." ilk="blob" lang="Python3" name="distutils.file_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope doc="Copy a file 'src' to 'dst'." ilk="function" name="copy_file" signature="copy_file(src, dst, preserve_mode=1, preserve_times=1, update=0, link=None, verbose=1, dry_run=0)" />
      <import module="log" />
      <scope doc="Move a file 'src' to 'dst'." ilk="function" name="move_file" signature="move_file(src, dst, verbose=1, dry_run=0)" />
      <import module="os" />
      <scope doc="Create a file with the specified name and write 'contents'&#10;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="Synchronization primitives.&#10;" ilk="blob" lang="Python3" name="asyncio.locks">
      <scope classrefs="Semaphore" doc="A bounded semaphore implementation.&#10;This raises ValueError in release() if it would increase the value above the initial value." ilk="class" name="BoundedSemaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, loop=None)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope classrefs="_ContextManagerMixin" doc="Asynchronous equivalent to threading.Condition.&#10;This class implements condition variable objects. A condition variable allows one or more coroutines to wait until they are notified by another coroutine.  A new Lock object is created and used as the underlying lock." ilk="class" name="Condition">
        <scope doc="Wait until a predicate becomes true." ilk="function" name="wait_for" signature="wait_for(self, predicate)" />
        <scope doc="By default, wake up one coroutine waiting on this condition,&#10;if any." ilk="function" name="notify" signature="notify(self, n=1)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lock=None, *, loop=None)" />
        <scope doc="Wait until notified." ilk="function" name="wait" signature="wait(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="object" doc="Asynchronous equivalent to threading.Event.&#10;Class implementing event objects. An event manages a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true. The flag is initially false." ilk="class" name="Event">
        <scope doc="Reset the internal flag to false." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Set the internal flag to true." ilk="function" name="set" signature="set(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Block until the internal flag is true." ilk="function" name="wait" signature="wait(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return True if and only if the internal flag is true." ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope classrefs="_ContextManagerMixin" doc="Primitive lock objects.&#10;A primitive lock is a synchronization primitive that is not owned by a particular coroutine when locked.  A primitive lock is in one of two states, 'locked' or 'unlocked'.  It is created in the unlocked state.  It has two basic methods, acquire() and release().  When the state is unlocked, acquire() changes the state to locked and returns immediately.  When the state is locked, acquire() blocks until a call to release() in another coroutine changes it to unlocked, then the acquire() call resets it to locked and returns.  The release() method should only" ilk="class" name="Lock">
        <scope doc="Acquire a lock." ilk="function" name="acquire" signature="acquire(self)" />
        <scope doc="Return True if lock is acquired." ilk="function" name="locked" signature="locked(self)" />
        <scope doc="Release a lock." ilk="function" name="release" signature="release(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_ContextManagerMixin" doc="A Semaphore implementation.&#10;A semaphore manages an internal counter which is decremented by each acquire() call and incremented by each release() call. The counter can never go below zero; when acquire() finds that it is zero, it blocks, waiting until some other thread calls release().  Semaphores also support the context management protocol.  The optional argument gives the initial value for the internal counter; it defaults to 1. If the value given is less than 0, ValueError is raised." ilk="class" name="Semaphore">
        <scope doc="Acquire a semaphore." ilk="function" name="acquire" signature="acquire(self)" />
        <scope doc="Returns True if semaphore can not be acquired immediately." ilk="function" name="locked" signature="locked(self)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
        <scope ilk="function" name="_wake_up_next" signature="_wake_up_next(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, loop=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="compat" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="events" />
      <import module="futures" />
    </scope>
    <scope doc="A generally useful event scheduler class.&#10;Each instance of this class manages its own queue. No multi-threading is implied; you are supposed to hack that yourself, or use a single instance per application.  Each instance is parametrized with two functions, one that is supposed to return the current time, one that is supposed to implement a delay.  You can implement real-time scheduling by substituting time and sleep from built-in module time, or you can implement simulated time by writing your own functions.  This can also be used to integrate scheduling with STDWIN events; the delay" ilk="blob" lang="Python3" name="sched">
      <scope classrefs="Event" doc="Event(time, priority, action, argument, kwargs)&#10;" ilk="class" name="Event">
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(s, o)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(s, o)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(s, o)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(s, o)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(s, o)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="heapq" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="scheduler">
        <scope doc="A variant that specifies the time as a relative time." ilk="function" name="enter" signature="enter(self, delay, priority, action, argument=(), kwargs=&lt;object object at 0x7f11880dc230&gt;)" />
        <scope doc="Check whether the queue is empty." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Remove an event from the queue." ilk="function" name="cancel" signature="cancel(self, event)" />
        <scope doc="Execute events until the queue is empty." ilk="function" name="run" signature="run(self, blocking=True)" />
        <scope doc="Initialize a new instance, passing the time and delay&#10;functions" ilk="function" name="__init__" signature="__init__(self, timefunc=&lt;built-in function monotonic&gt;, delayfunc=&lt;built-in function sleep&gt;)" />
        <scope doc="Enter a new event in the queue at an absolute time." ilk="function" name="enterabs" signature="enterabs(self, time, priority, action, argument=(), kwargs=&lt;object object at 0x7f11880dc230&gt;)" />
      </scope>
      <import module="threading" />
      <import module="time" />
    </scope>
    <scope doc="Fixer that transforms `xyzzy` into repr(xyzzy).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_repr">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixRepr">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
    </scope>
    <scope doc="subprocess - Subprocesses with accessible I/O streams&#10;This module allows you to spawn processes, connect to their input/output/error pipes, and obtain their return codes.  This module intends to replace several older modules and functions:  os.system os.spawn*  Information about how the subprocess module can be used to replace these modules and functions can be found below. " ilk="blob" lang="Python3" name="subprocess">
      <scope classrefs="SubprocessError" doc="This exception is raised when a process run by check_call() or&#10;check_output() returns a non-zero exit status. The exit status will be stored in the returncode attribute; check_output() will also store the output in the output attribute." ilk="class" name="CalledProcessError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, returncode, cmd, output=None, stderr=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="A process that has finished running.&#10;This is returned by run().  Attributes: args: The list or str args passed to run(). returncode: The exit code of the process, negative for signals. stdout: The standard output (None if not captured). stderr: The standard error (None if not captured)." ilk="class" name="CompletedProcess">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, args, returncode, stdout=None, stderr=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Raise CalledProcessError if the exit code is non-zero." ilk="function" name="check_returncode" signature="check_returncode(self)" />
      </scope>
      <variable citdl="int" name="DEVNULL" />
      <variable citdl="int" name="PIPE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Popen">
        <scope ilk="function" name="__del__" signature="__del__(self, _maxsize=9223372036854775807)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope doc="Send a signal to the process." ilk="function" name="send_signal" signature="send_signal(self, sig)" />
        <scope ilk="function" name="_communicate" signature="_communicate(self, input, endtime, orig_timeout)" />
        <scope ilk="function" name="_translate_newlines" signature="_translate_newlines(self, data, encoding)" />
        <scope doc="Create new Popen instance." ilk="function" name="__init__" signature="__init__(self, args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=&lt;object object at 0x7f11880dc0f0&gt;, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=())" />
        <scope doc="Wait for child process to terminate." ilk="function" name="wait" signature="wait(self, timeout=None, endtime=None)" />
        <scope doc="Check if child process has terminated." ilk="function" name="_internal_poll" signature="_internal_poll(self, _deadstate=None, _waitpid=&lt;built-in function waitpid&gt;, _WNOHANG=1, _ECHILD=10)" />
        <scope doc="All callers to this function MUST hold self._waitpid_lock." ilk="function" name="_handle_exitstatus" signature="_handle_exitstatus(self, sts, _WIFSIGNALED=&lt;built-in function WIFSIGNALED&gt;, _WTERMSIG=&lt;built-in function WTERMSIG&gt;, _WIFEXITED=&lt;built-in function WIFEXITED&gt;, _WEXITSTATUS=&lt;built-in function WEXITSTATUS&gt;)" />
        <scope doc="Convenience for checking if a timeout has expired." ilk="function" name="_check_timeout" signature="_check_timeout(self, endtime, orig_timeout)" />
        <scope doc="Execute program (POSIX version)" ilk="function" name="_execute_child" signature="_execute_child(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, start_new_session)" />
        <scope doc="Terminate the process with SIGTERM" ilk="function" name="terminate" signature="terminate(self)" />
        <scope doc="All callers to this function MUST hold self._waitpid_lock." ilk="function" name="_try_wait" signature="_try_wait(self, wait_flags)" />
        <scope doc="Interact with process: Send data to stdin." ilk="function" name="communicate" signature="communicate(self, input=None, timeout=None)" />
        <scope ilk="function" name="_stdin_write" signature="_stdin_write(self, input)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="poll" signature="poll(self)" />
        <scope ilk="function" name="_save_input" signature="_save_input(self, input)" />
        <scope doc="Construct and return tuple with IO objects: p2cread,&#10;p2cwrite, c2pread, c2pwrite, errread, errwrite" ilk="function" name="_get_handles" signature="_get_handles(self, stdin, stdout, stderr)" />
        <scope doc="Convenience for _communicate when computing timeouts." ilk="function" name="_remaining_time" signature="_remaining_time(self, endtime)" />
        <scope doc="Kill the process with SIGKILL" ilk="function" name="kill" signature="kill(self)" />
        <scope ilk="function" name="_get_devnull" signature="_get_devnull(self)" />
      </scope>
      <variable citdl="int" name="STDOUT" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="SubprocessError" />
      <scope classrefs="SubprocessError" doc="This exception is raised when the timeout expires while waiting for a&#10;child process." ilk="class" name="TimeoutExpired">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cmd, timeout, output=None, stderr=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_posixsubprocess" />
      <import module="builtins" />
      <scope doc="Run command with arguments." ilk="function" name="call" signature="call(*popenargs, timeout=None, **kwargs)" />
      <scope doc="Run command with arguments. Wait for command to complete." ilk="function" name="check_call" signature="check_call(*popenargs, **kwargs)" />
      <scope doc="Run command with arguments and return its output." ilk="function" name="check_output" signature="check_output(*popenargs, timeout=None, **kwargs)" />
      <import module="errno" />
      <scope doc="Return output (stdout or stderr) of executing cmd in a&#10;shell." ilk="function" name="getoutput" signature="getoutput(cmd)" />
      <scope doc="Execute the string 'cmd' in a shell with 'check_output' and&#10;return a 2-tuple (status, output)." ilk="function" name="getstatusoutput" signature="Return (status, output) of executing cmd in a shell." />
      <import module="io" />
      <scope doc="Translate a sequence of arguments into a command line&#10;string, using the same rules as the MS C runtime:" ilk="function" name="list2cmdline" signature="list2cmdline(seq)" />
      <import module="os" />
      <scope doc="Run command with arguments and return a CompletedProcess&#10;instance." ilk="function" name="run" signature="run(*popenargs, input=None, timeout=None, check=False, **kwargs)" />
      <import module="select" />
      <import module="selectors" />
      <import module="signal" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="warnings" />
    </scope>
    <scope doc="Operator interface.&#10;This module exports a set of functions implemented in C corresponding to the intrinsic operators of Python.  For example, operator.add(x, y) is equivalent to the expression x+y.  The function names are those used for special methods; variants without leading and trailing '__' are also provided for convenience." ilk="blob" lang="Python3" name="_operator">
      <scope doc="Same as abs(a)." ilk="function" name="abs" signature="abs(a)" />
      <scope doc="Same as a + b." ilk="function" name="add" signature="add(a, b)" />
      <scope doc="Same as a &amp; b." ilk="function" name="and_" signature="and_(a, b)" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object&#10;Return a callable object that fetches the given attribute(s) from its operand. After f = attrgetter('name'), the call f(r) returns r.name. After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date). After h = attrgetter('name.first', 'name.last'), the call h(r) returns (r.name.first, r.name.last)." ilk="class" name="attrgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a + b, for a and b sequences." ilk="function" name="concat" signature="concat(a, b)" />
      <scope doc="Same as b in a (note reversed operands)." ilk="function" name="contains" signature="contains(a, b)" />
      <scope doc="Return the number of times b occurs in a." ilk="function" name="countOf" signature="countOf(a, b)" />
      <scope doc="Same as del a[b]." ilk="function" name="delitem" signature="delitem(a, b)" />
      <scope doc="Same as a==b." ilk="function" name="eq" signature="eq(a, b)" />
      <scope doc="Same as a // b." ilk="function" name="floordiv" signature="floordiv(a, b)" />
      <scope doc="Same as a&gt;=b." ilk="function" name="ge" signature="ge(a, b)" />
      <scope doc="Same as a[b]." ilk="function" name="getitem" signature="getitem(a, b)" />
      <scope doc="Same as a&gt;b." ilk="function" name="gt" signature="gt(a, b)" />
      <scope doc="Same as a += b." ilk="function" name="iadd" signature="iadd(a, b) -&gt; a" />
      <scope doc="Same as a &amp;= b." ilk="function" name="iand" signature="iand(a, b) -&gt; a" />
      <scope doc="Same as a += b, for a and b sequences." ilk="function" name="iconcat" signature="iconcat(a, b) -&gt; a" />
      <scope doc="Same as a //= b." ilk="function" name="ifloordiv" signature="ifloordiv(a, b) -&gt; a" />
      <scope doc="Same as a &lt;&lt;= b." ilk="function" name="ilshift" signature="ilshift(a, b) -&gt; a" />
      <scope doc="Same as a @= b." ilk="function" name="imatmul" signature="imatmul(a, b) -&gt; a" />
      <scope doc="Same as a %= b." ilk="function" name="imod" signature="imod(a, b) -&gt; a" />
      <scope doc="Same as a *= b." ilk="function" name="imul" signature="imul(a, b) -&gt; a" />
      <scope doc="Same as a.__index__()" ilk="function" name="index" signature="index(a)" />
      <scope doc="Return the first index of b in a." ilk="function" name="indexOf" signature="indexOf(a, b)" />
      <scope doc="Same as ~a." ilk="function" name="inv" signature="inv(a)" />
      <scope doc="Same as ~a." ilk="function" name="invert" signature="invert(a)" />
      <scope doc="Same as a |= b." ilk="function" name="ior" signature="ior(a, b) -&gt; a" />
      <scope doc="Same as a **= b." ilk="function" name="ipow" signature="ipow(a, b) -&gt; a" />
      <scope doc="Same as a &gt;&gt;= b." ilk="function" name="irshift" signature="irshift(a, b) -&gt; a" />
      <scope doc="Same as a is b." ilk="function" name="is_" signature="is_(a, b)" />
      <scope doc="Same as a is not b." ilk="function" name="is_not" signature="is_not(a, b)" />
      <scope doc="Same as a -= b." ilk="function" name="isub" signature="isub(a, b) -&gt; a" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object&#10;Return a callable object that fetches the given item(s) from its operand. After f = itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])" ilk="class" name="itemgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a /= b" ilk="function" name="itruediv" signature="itruediv(a, b) -&gt; a" />
      <scope doc="Same as a ^= b." ilk="function" name="ixor" signature="ixor(a, b) -&gt; a" />
      <scope doc="Same as a&lt;=b." ilk="function" name="le" signature="le(a, b)" />
      <scope doc="Return an estimate of the number of items in obj." ilk="function" name="length_hint" returns="int" signature="length_hint(obj, default=0) -&gt; int" />
      <scope doc="Same as a &lt;&lt; b." ilk="function" name="lshift" signature="lshift(a, b)" />
      <scope doc="Same as a&lt;b." ilk="function" name="lt" signature="lt(a, b)" />
      <scope doc="Same as a @ b." ilk="function" name="matmul" signature="matmul(a, b)" />
      <scope classrefs="object" doc="methodcaller(name, ...) --&gt; methodcaller object&#10;Return a callable object that calls the given method on its operand. After f = methodcaller('name'), the call f(r) returns r.name(). After g = methodcaller('name', 'date', foo=1), the call g(r) returns r.name('date', foo=1)." ilk="class" name="methodcaller">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a % b." ilk="function" name="mod" signature="mod(a, b)" />
      <scope doc="Same as a * b." ilk="function" name="mul" signature="mul(a, b)" />
      <scope doc="Same as a!=b." ilk="function" name="ne" signature="ne(a, b)" />
      <scope doc="Same as -a." ilk="function" name="neg" signature="neg(a)" />
      <scope doc="Same as not a." ilk="function" name="not_" signature="not_(a)" />
      <scope doc="Same as a | b." ilk="function" name="or_" signature="or_(a, b)" />
      <scope doc="Same as +a." ilk="function" name="pos" signature="pos(a)" />
      <scope doc="Same as a ** b." ilk="function" name="pow" signature="pow(a, b)" />
      <scope doc="Same as a &gt;&gt; b." ilk="function" name="rshift" signature="rshift(a, b)" />
      <scope doc="Same as a[b] = c." ilk="function" name="setitem" signature="setitem(a, b, c)" />
      <scope doc="Same as a - b." ilk="function" name="sub" signature="sub(a, b)" />
      <scope doc="Same as a / b." ilk="function" name="truediv" signature="truediv(a, b)" />
      <scope doc="Return True if a is true, False otherwise." ilk="function" name="truth" signature="truth(a)" />
      <scope doc="Same as a ^ b." ilk="function" name="xor" signature="xor(a, b)" />
    </scope>
    <scope doc="wsgiref -- a WSGI (PEP 3333) Reference Library&#10;Current Contents:  * util -- Miscellaneous useful functions and wrappers  * headers -- Manage response headers  * handlers -- base classes for server/gateway implementations  * simple_server -- a simple BaseHTTPServer that supports WSGI " ilk="blob" lang="Python3" name="wsgiref">
      <import module="handlers" />
      <import module="headers" />
      <import module="simple_server" />
      <import module="util" />
    </scope>
    <scope doc="Support for tasks, coroutines and the scheduler.&#10;" ilk="blob" lang="Python3" name="asyncio.tasks">
      <variable citdl="str" name="ALL_COMPLETED" />
      <variable citdl="str" name="FIRST_COMPLETED" />
      <variable citdl="str" name="FIRST_EXCEPTION" />
      <scope classrefs="Future" doc="A coroutine wrapped in a Future.&#10;" ilk="class" name="Task">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Request that this task cancel itself." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Return the list of stack frames for this task's coroutine." ilk="function" name="get_stack" signature="get_stack(self, *, limit=None)" />
        <scope doc="Initialize the future." ilk="function" name="__init__" signature="__init__(self, coro, *, loop=None)" />
        <scope ilk="function" name="_wakeup" signature="_wakeup(self, future)" />
        <scope doc="Return the currently running task in an event loop or None." ilk="function" name="current_task" />
        <scope ilk="function" name="_step" signature="_step(self, exc=None)" />
        <scope doc="Print the stack or traceback for this task's coroutine." ilk="function" name="print_stack" signature="print_stack(self, *, limit=None, file=None)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return a set of all tasks for an event loop." ilk="function" name="all_tasks" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return an iterator whose values are coroutines." ilk="function" name="as_completed" signature="as_completed(fs, *, loop=None, timeout=None)" />
      <scope doc="Wrap a coroutine in a future." ilk="function" name="async" signature="async(coro_or_future, *, loop=None)" />
      <import module="compat" />
      <import module="concurrent" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="coroutines" />
      <scope doc="Wrap a coroutine or an awaitable in a future." ilk="function" name="ensure_future" signature="ensure_future(coro_or_future, *, loop=None)" />
      <import module="events" />
      <import module="functools" />
      <import module="futures" />
      <scope doc="Return a future aggregating results from the given&#10;coroutines or futures." ilk="function" name="gather" signature="gather(*coros_or_futures, loop=None, return_exceptions=False)" />
      <import module="inspect" />
      <import module="linecache" />
      <scope doc="Submit a coroutine object to a given event loop." ilk="function" name="run_coroutine_threadsafe" signature="run_coroutine_threadsafe(coro, loop)" />
      <scope doc="Wait for a future, shielding it from cancellation." ilk="function" name="shield" signature="shield(arg, *, loop=None)" />
      <scope doc="Coroutine that completes after a given time (in seconds)." ilk="function" name="sleep" signature="sleep(delay, result=None, *, loop=None)" />
      <import module="traceback" />
      <scope doc="Wait for the Futures and coroutines given by fs to complete." ilk="function" name="wait" signature="wait(fs, *, loop=None, timeout=None, return_when='ALL_COMPLETED')" />
      <scope doc="Wait for the single Future or coroutine to complete, with&#10;timeout." ilk="function" name="wait_for" signature="wait_for(fut, timeout, *, loop=None)" />
      <import module="warnings" />
      <import module="weakref" />
    </scope>
    <scope doc="distutils.dist&#10;Provides the Distribution class, which represents the module distribution being built/installed/distributed." ilk="blob" lang="Python3" name="distutils.dist">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="object" doc="The core of the Distutils.  Most of the work hiding behind 'setup'&#10;is really done within a Distribution instance, which farms the work out to the Distutils commands specified on the command line.  Setup scripts will almost never instantiate Distribution directly, unless the 'setup()' function is totally inadequate to their needs. However, it is conceivable that a setup script might wish to subclass Distribution for some specialized purpose, and then pass the subclass to 'setup()' as the 'distclass' keyword argument.  If so, it is necessary to respect the expectations that 'setup' has of Distribution. See the code for 'setup()', in core.py, for details." ilk="class" name="Distribution">
        <scope doc="If there were any non-global &quot;display-only&quot; options (--help-&#10;commands or the metadata display options) on the command&#10;line, display the requested info and return true; else&#10;return false." ilk="function" name="handle_display_options" signature="handle_display_options(self, option_order)" />
        <scope doc="Reinitializes a command to the state it was in when first&#10;returned by 'get_command_obj()': ie., initialized but not&#10;yet finalized." ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope doc="Return the command object for 'command'." ilk="function" name="get_command_obj" signature="get_command_obj(self, command, create=1)" />
        <scope ilk="function" name="has_headers" signature="has_headers(self)" />
        <scope ilk="function" name="has_c_libraries" signature="has_c_libraries(self)" />
        <scope ilk="function" name="parse_config_files" signature="parse_config_files(self, filenames=None)" />
        <scope ilk="function" name="has_pure_modules" signature="has_pure_modules(self)" />
        <scope doc="Print out a help message listing all available commands with&#10;a description of each." ilk="function" name="print_commands" signature="print_commands(self)" />
        <scope doc="Get the option dictionary for a given command." ilk="function" name="get_option_dict" signature="get_option_dict(self, command)" />
        <scope doc="Find as many configuration files as should be processed for&#10;this platform, and return a list of filenames in the order&#10;in which they should be parsed." ilk="function" name="find_config_files" signature="find_config_files(self)" />
        <scope doc="Return the class that implements the Distutils command named&#10;by 'command'." ilk="function" name="get_command_class" signature="get_command_class(self, command)" />
        <scope doc="Do whatever it takes to run a command (including nothing at&#10;all, if the command has already been run)." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope ilk="function" name="is_pure" signature="is_pure(self)" />
        <scope doc="Set the options for 'command_obj' from 'option_dict'." ilk="function" name="_set_command_options" signature="_set_command_options(self, command_obj, option_dict=None)" />
        <scope ilk="function" name="has_scripts" signature="has_scripts(self)" />
        <scope doc="Set final values for all the options on the Distribution&#10;instance, analogous to the .finalize_options() method of&#10;Command objects." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="has_data_files" signature="has_data_files(self)" />
        <scope doc="Parse the setup script's command line, taken from the&#10;'script_args' instance attribute (which defaults to&#10;'sys.argv[1:]' -- see 'setup()' in core.py)." ilk="function" name="parse_command_line" signature="parse_command_line(self)" />
        <scope doc="Construct a new Distribution instance: initialize all the&#10;attributes of a Distribution, and then use 'attrs' (a&#10;dictionary mapping attribute names to values) to assign some&#10;of those attributes their &quot;real&quot; values." ilk="function" name="__init__" signature="__init__(self, attrs=None)" />
        <scope ilk="function" name="dump_option_dicts" signature="dump_option_dicts(self, header=None, commands=None, indent='')" />
        <scope doc="Get a list of (command, description) tuples." ilk="function" name="get_command_list" signature="get_command_list(self)" />
        <scope doc="Show help for the setup script command-line in the form of&#10;several lists of command-line options." ilk="function" name="_show_help" signature="_show_help(self, parser, global_options=1, display_options=1, commands=[])" />
        <scope doc="Run each command that was seen on the setup script command&#10;line." ilk="function" name="run_commands" signature="run_commands(self)" />
        <scope ilk="function" name="has_modules" signature="has_modules(self)" />
        <scope doc="Return a list of packages from which commands are loaded." ilk="function" name="get_command_packages" signature="get_command_packages(self)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=2)" />
        <scope doc="Print a subset of the list of all commands -- used by&#10;'print_commands()'." ilk="function" name="print_command_list" signature="print_command_list(self, commands, header, max_length)" />
        <scope doc="Parse the command-line options for a single command." ilk="function" name="_parse_command_opts" signature="_parse_command_opts(self, parser, args)" />
        <scope ilk="function" name="has_ext_modules" signature="has_ext_modules(self)" />
        <scope doc="Return the non-display options recognized at the top level." ilk="function" name="_get_toplevel_options" signature="_get_toplevel_options(self)" />
      </scope>
      <scope classrefs="object" doc="Dummy class to hold the distribution meta-data: name, version,&#10;author, and so forth." ilk="class" name="DistributionMetadata">
        <scope ilk="function" name="get_contact" signature="get_contact(self)" />
        <scope ilk="function" name="set_provides" signature="set_provides(self, value)" />
        <scope ilk="function" name="get_obsoletes" signature="get_obsoletes(self)" />
        <scope ilk="function" name="get_download_url" signature="get_download_url(self)" />
        <scope ilk="function" name="get_long_description" signature="get_long_description(self)" />
        <scope ilk="function" name="get_license" signature="get_license(self)" />
        <scope doc="# PEP 314" ilk="function" name="get_requires" signature="get_requires(self)" />
        <scope ilk="function" name="get_url" signature="get_url(self)" />
        <scope ilk="function" name="get_platforms" signature="get_platforms(self)" />
        <scope ilk="function" name="get_keywords" signature="get_keywords(self)" />
        <scope ilk="function" name="get_author" signature="get_author(self)" />
        <scope ilk="function" name="set_requires" signature="set_requires(self, value)" />
        <scope ilk="function" name="_write_list" signature="_write_list(self, file, name, values)" />
        <scope ilk="function" name="get_description" signature="get_description(self)" />
        <scope ilk="function" name="get_maintainer_email" signature="get_maintainer_email(self)" />
        <scope doc="Write the PKG-INFO format data to a file object." ilk="function" name="write_pkg_file" signature="write_pkg_file(self, file)" />
        <scope ilk="function" name="get_name" signature="get_name(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, path=None)" />
        <scope doc="Reads the metadata values from a file object." ilk="function" name="read_pkg_file" signature="read_pkg_file(self, file)" />
        <scope ilk="function" name="get_fullname" signature="get_fullname(self)" />
        <scope ilk="function" name="get_contact_email" signature="get_contact_email(self)" />
        <scope ilk="function" name="get_licence" signature="get_licence(self)" />
        <scope ilk="function" name="get_author_email" signature="get_author_email(self)" />
        <scope ilk="function" name="get_classifiers" signature="get_classifiers(self)" />
        <scope doc="Write the PKG-INFO file into the release tree." ilk="function" name="write_pkg_info" signature="write_pkg_info(self, base_dir)" />
        <scope ilk="function" name="get_version" signature="get_version(self)" />
        <scope ilk="function" name="get_maintainer" signature="get_maintainer(self)" />
        <scope ilk="function" name="get_provides" signature="get_provides(self)" />
        <scope ilk="function" name="set_obsoletes" signature="set_obsoletes(self, value)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Wrapper around the standard 'getopt()' module that provides some&#10;handy extra functionality: * short and long options are tied together * options have help strings, and help text can be assembled from them * options set attributes of a passed-in object * boolean options can have &quot;negative aliases&quot; -- eg. if --quiet is the &quot;negative alias&quot; of --verbose, then &quot;--quiet&quot; on the command line sets 'verbose' to false" ilk="class" name="FancyGetopt">
        <scope ilk="function" name="add_option" signature="add_option(self, long_option, short_option=None, help_string=None)" />
        <scope ilk="function" name="_build_index" signature="_build_index(self)" />
        <scope doc="Returns the list of (option, value) tuples processed by the&#10;previous run of 'getopt()'." ilk="function" name="get_option_order" signature="get_option_order(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option_table=None)" />
        <scope doc="Set the aliases for this option parser." ilk="function" name="set_aliases" signature="set_aliases(self, alias)" />
        <scope ilk="function" name="print_help" signature="print_help(self, header=None, file=None)" />
        <scope ilk="function" name="set_option_table" signature="set_option_table(self, option_table)" />
        <scope doc="Parse command-line options in args." ilk="function" name="getopt" signature="getopt(self, args=None, object=None)" />
        <scope doc="Return true if the option table for this parser has an&#10;option with long name 'long_option'." ilk="function" name="has_option" signature="has_option(self, long_option)" />
        <scope doc="Translate long option name 'long_option' to the form it has&#10;as an attribute of some object: ie., translate hyphens to&#10;underscores." ilk="function" name="get_attr_name" signature="get_attr_name(self, long_option)" />
        <scope doc="Populate the various data structures that keep tabs on the&#10;option table." ilk="function" name="_grok_option_table" signature="_grok_option_table(self)" />
        <scope doc="Set the negative aliases for this option parser." ilk="function" name="set_negative_aliases" signature="set_negative_aliases(self, negative_alias)" />
        <scope doc="Generate help text (a list of strings, one per suggested&#10;line of output) from the option table for this FancyGetopt&#10;object." ilk="function" name="generate_help" signature="generate_help(self, header=None)" />
        <scope ilk="function" name="_check_alias_dict" signature="_check_alias_dict(self, aliases, what)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope doc="Ensure that 'os.environ' has all the environment variables&#10;we guarantee that users can use in config files, command-&#10;line options, etc." ilk="function" name="check_environ" signature="check_environ()" />
      <variable citdl="SRE_Pattern" name="command_re" />
      <scope doc="Convert a 4-tuple 'help_options' list as found in various&#10;command classes to the 3-tuple form required by FancyGetopt." ilk="function" name="fix_help_options" signature="fix_help_options(options)" />
      <import module="log" />
      <scope doc="Read a file and parse its contents into a Message object&#10;model." ilk="function" name="message_from_file" signature="message_from_file(fp, *args, **kws)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Return a version of the string escaped for inclusion in an&#10;RFC-822 header, by ensuring there are 8 spaces space after&#10;each newline." ilk="function" name="rfc822_escape" signature="rfc822_escape(header)" />
      <scope doc="Convert a string representation of truth to true (1) or&#10;false (0)." ilk="function" name="strtobool" signature="strtobool(val)" />
      <import module="sys" />
      <scope doc="Convert a long option name to a valid Python identifier by&#10;changing &quot;-&quot; to &quot;_&quot;." ilk="function" name="translate_longopt" signature="translate_longopt(opt)" />
      <import module="warnings" />
    </scope>
    <scope doc="Configuration file parser.&#10;A configuration file consists of sections, lead by a &quot;[section]&quot; header, and followed by &quot;name: value&quot; entries, with continuations and such in the style of RFC 822.  Intrinsic defaults can be specified by passing them into the ConfigParser constructor as a dictionary.  class:  ConfigParser -- responsible for parsing a list of" ilk="blob" lang="Python3" name="configparser">
      <scope classrefs="Interpolation" doc="Interpolation as implemented in the classic ConfigParser.&#10;The option values can contain format strings which refer to other values in the same section, or values in the special default section.  For example:  something: %(dir)s/whatever  would resolve the &quot;%(dir)s&quot; to the value of dir.  All reference expansions are done late, on demand. If a user needs to use a bare % in a configuration file, she can escape it by writing %%. Other % usage" ilk="class" name="BasicInterpolation">
        <scope ilk="function" name="before_get" signature="before_get(self, parser, section, option, value, defaults)" />
        <scope ilk="function" name="_interpolate_some" signature="_interpolate_some(self, parser, option, accum, rest, section, map, depth)" />
        <scope ilk="function" name="before_set" signature="before_set(self, parser, section, option, value)" />
      </scope>
      <scope classrefs="RawConfigParser" doc="ConfigParser implementing interpolation.&#10;" ilk="class" name="ConfigParser">
        <scope doc="Set an option." ilk="function" name="set" signature="set(self, section, option, value=None)" />
        <scope doc="Create a new section in the configuration." ilk="function" name="add_section" signature="add_section(self, section)" />
      </scope>
      <scope classrefs="MutableMapping" doc="Enables reuse of get*() methods between the parser and section proxies.&#10;If a parser class implements a getter directly, the value for the given key will be ``None``. The presence of the converter name here enables section proxies to find and use the implementation on the parser class." ilk="class" name="ConverterMapping">
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, parser)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <variable citdl="str" name="DEFAULTSECT" />
      <scope classrefs="Error" doc="Raised by strict parsers when an option is repeated in an input source.&#10;Current implementation raises this exception only when an option is found more than once in a single file, string or dictionary." ilk="class" name="DuplicateOptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, section, option, source=None, lineno=None)" />
      </scope>
      <scope classrefs="Error" doc="Raised when a section is repeated in an input source.&#10;Possible repetitions that raise this exception are: multiple creation using the API or in strict parsers when a section is found more than once in a single input file, string or dictionary." ilk="class" name="DuplicateSectionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, section, source=None, lineno=None)" />
      </scope>
      <scope classrefs="Exception" doc="Base class for ConfigParser exceptions.&#10;" ilk="class" name="Error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg='')" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Interpolation" doc="Advanced variant of interpolation, supports the syntax used by&#10;`zc.buildout'. Enables interpolation between sections." ilk="class" name="ExtendedInterpolation">
        <scope ilk="function" name="before_get" signature="before_get(self, parser, section, option, value, defaults)" />
        <scope ilk="function" name="_interpolate_some" signature="_interpolate_some(self, parser, option, accum, rest, section, map, depth)" />
        <scope ilk="function" name="before_set" signature="before_set(self, parser, section, option, value)" />
      </scope>
      <scope classrefs="object" doc="Dummy interpolation that passes the value through with no changes.&#10;" ilk="class" name="Interpolation">
        <scope ilk="function" name="before_get" signature="before_get(self, parser, section, option, value, defaults)" />
        <scope ilk="function" name="before_read" signature="before_read(self, parser, section, option, value)" />
        <scope ilk="function" name="before_set" signature="before_set(self, parser, section, option, value)" />
        <scope ilk="function" name="before_write" signature="before_write(self, parser, section, option, value)" />
      </scope>
      <scope classrefs="InterpolationError" doc="Raised when substitutions are nested too deeply.&#10;" ilk="class" name="InterpolationDepthError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option, section, rawval)" />
      </scope>
      <scope classrefs="Error" doc="Base class for interpolation-related exceptions.&#10;" ilk="class" name="InterpolationError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option, section, msg)" />
      </scope>
      <scope classrefs="InterpolationError" doc="A string substitution required a setting which was not available.&#10;" ilk="class" name="InterpolationMissingOptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option, section, rawval, reference)" />
      </scope>
      <scope classrefs="InterpolationError" doc="Raised when the source text contains invalid syntax.&#10;Current implementation raises this exception when the source text into which substitutions are made does not conform to the required syntax." ilk="class" name="InterpolationSyntaxError" />
      <scope classrefs="Interpolation" doc="Deprecated interpolation used in old versions of ConfigParser.&#10;Use BasicInterpolation or ExtendedInterpolation instead." ilk="class" name="LegacyInterpolation">
        <scope ilk="function" name="before_get" signature="before_get(self, parser, section, option, value, vars)" />
        <scope ilk="function" name="before_set" signature="before_set(self, parser, section, option, value)" />
        <scope ilk="function" name="_interpolation_replace" signature="_interpolation_replace(match, parser)" />
      </scope>
      <variable citdl="int" name="MAX_INTERPOLATION_DEPTH" />
      <scope classrefs="ParsingError" doc="Raised when a key-value pair is found before any section header.&#10;" ilk="class" name="MissingSectionHeaderError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filename, lineno, line)" />
      </scope>
      <scope classrefs="Mapping" doc="&#10;" ilk="class" name="MutableMapping">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
      </scope>
      <scope classrefs="Error" doc="A requested option was not found.&#10;" ilk="class" name="NoOptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option, section)" />
      </scope>
      <scope classrefs="Error" doc="Raised when no section matches a requested option.&#10;" ilk="class" name="NoSectionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, section)" />
      </scope>
      <scope classrefs="Error" doc="Raised when a configuration file does not follow legal syntax.&#10;" ilk="class" name="ParsingError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, source=None, filename=None)" />
        <scope ilk="function" name="append" signature="append(self, lineno, line)" />
      </scope>
      <scope classrefs="MutableMapping" doc="ConfigParser that does not do interpolation.&#10;" ilk="class" name="RawConfigParser">
        <scope doc="Set an option." ilk="function" name="set" signature="set(self, section, option, value=None)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Indicate whether the named section is present in the&#10;configuration." ilk="function" name="has_section" signature="has_section(self, section)" />
        <scope ilk="function" name="_get" signature="_get(self, section, conv, option, **kwargs)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="getboolean" signature="getboolean(self, section, option, *, raw=False, vars=None, fallback=&lt;object object at 0x7f11880dc1b0&gt;, **kwargs)" />
        <scope ilk="function" name="_get_conv" signature="_get_conv(self, section, option, conv, *, raw=False, vars=None, fallback=&lt;object object at 0x7f11880dc1b0&gt;, **kwargs)" />
        <scope doc="Remove a section from the parser and return it as a&#10;(section_name, section_proxy) tuple." ilk="function" name="popitem" signature="popitem(self)" />
        <scope ilk="function" name="defaults" signature="defaults(self)" />
        <scope doc="Read configuration from a dictionary." ilk="function" name="read_dict" signature="read_dict(self, dictionary, source='&lt;dict&gt;')" />
        <scope doc="Return a list of section names, excluding [DEFAULT]" ilk="function" name="sections" signature="sections(self)" />
        <scope doc="Remove a file section." ilk="function" name="remove_section" signature="remove_section(self, section)" />
        <scope doc="Create a new section in the configuration." ilk="function" name="add_section" signature="add_section(self, section)" />
        <scope doc="Read and parse a filename or a list of filenames." ilk="function" name="read" signature="read(self, filenames, encoding=None)" />
        <scope ilk="function" name="_join_multiline_values" signature="_join_multiline_values(self)" />
        <scope ilk="function" name="_handle_error" signature="_handle_error(self, exc, fpname, lineno, line)" />
        <scope doc="Return a list of option names for the given section name." ilk="function" name="options" signature="options(self, section)" />
        <scope doc="# getint, getfloat and getboolean provided directly for&#10;backwards compat" ilk="function" name="getint" signature="getint(self, section, option, *, raw=False, vars=None, fallback=&lt;object object at 0x7f11880dc1b0&gt;, **kwargs)" />
        <scope doc="Deprecated, use read_file instead." ilk="function" name="readfp" signature="readfp(self, fp, filename=None)" />
        <scope doc="Write a single section to the specified `fp'." ilk="function" name="_write_section" signature="_write_section(self, fp, section_name, section_items, delimiter)" />
        <scope doc="Return a boolean value translating from other types if&#10;necessary." ilk="function" name="_convert_to_boolean" signature="_convert_to_boolean(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="Read configuration from a given string." ilk="function" name="read_string" signature="read_string(self, string, source='&lt;string&gt;')" />
        <scope doc="Parse a sectioned configuration file." ilk="function" name="_read" signature="_read(self, fp, fpname)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, defaults=None, dict_type=&lt;class 'collections.OrderedDict'&gt;, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT', interpolation=&lt;object object at 0x7f11880dc1b0&gt;, converters=&lt;object object at 0x7f11880dc1b0&gt;)" />
        <scope ilk="function" name="getfloat" signature="getfloat(self, section, option, *, raw=False, vars=None, fallback=&lt;object object at 0x7f11880dc1b0&gt;, **kwargs)" />
        <scope ilk="function" name="optionxform" signature="optionxform(self, optionstr)" />
        <scope doc="Return a list of (name, value) tuples for each option in a&#10;section." ilk="function" name="items" signature="items(self, section=&lt;object object at 0x7f11880dc1b0&gt;, raw=False, vars=None)" />
        <scope doc="Raises a TypeError for non-string values." ilk="function" name="_validate_value_types" signature="_validate_value_types(self, *, section='', option='', value='')" />
        <scope doc="Like read() but the argument must be a file-like object." ilk="function" name="read_file" signature="read_file(self, f, source=None)" />
        <scope doc="Get an option value for a given section." ilk="function" name="get" signature="get(self, section, option, *, raw=False, vars=None, fallback=&lt;object object at 0x7f11880dc1b0&gt;)" />
        <scope doc="Remove an option." ilk="function" name="remove_option" signature="remove_option(self, section, option)" />
        <scope doc="Write an .ini-format representation of the configuration&#10;state." ilk="function" name="write" signature="write(self, fp, space_around_delimiters=True)" />
        <scope doc="Check for the existence of a given option in a given&#10;section." ilk="function" name="has_option" signature="has_option(self, section, option)" />
        <scope doc="Create a sequence of lookups with 'vars' taking priority&#10;over the 'section' which takes priority over the&#10;DEFAULTSECT." ilk="function" name="_unify_values" signature="_unify_values(self, section, vars)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="ConfigParser" doc="ConfigParser alias for backwards compatibility purposes.&#10;" ilk="class" name="SafeConfigParser">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
      </scope>
      <scope classrefs="MutableMapping" doc="A proxy for a single section from a parser.&#10;" ilk="class" name="SectionProxy">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Creates a view on a section of the specified `name` in&#10;`parser`." ilk="function" name="__init__" signature="__init__(self, parser, name)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Get an option value." ilk="function" name="get" signature="get(self, option, fallback=None, *, raw=False, vars=None, _impl=None, **kwargs)" />
        <scope ilk="function" name="_options" signature="_options(self)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="functools" />
      <import module="io" />
      <import module="itertools" />
      <import module="re" />
      <import module="sys" />
      <import module="warnings" />
    </scope>
    <scope doc="Python part of the warnings subsystem.&#10;" ilk="blob" lang="Python3" name="warnings">
      <scope classrefs="object" doc="Holds the result of a single showwarning() call.&#10;" ilk="class" name="WarningMessage">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, message, category, filename, lineno, file=None, line=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="A context manager that copies and restores the warnings filter upon&#10;exiting the context.  The 'record' argument specifies whether warnings should be captured by a custom implementation of warnings.showwarning() and be appended to a list returned by the context manager. Otherwise None is returned by the context manager. The objects appended to the list are arguments whose attributes mirror the arguments to showwarning().  The 'module' argument is to specify an alternative module to the module named 'warnings' and imported under that name. This argument is only useful" ilk="class" name="catch_warnings">
        <scope doc="Specify whether to record warnings and if an alternative&#10;module should be used other than sys.modules['warnings']." ilk="function" name="__init__" signature="__init__(self, *, record=False, module=None)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *exc_info)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="str" name="defaultaction" />
      <variable citdl="list" name="filters" />
      <scope doc="Insert an entry into the list of warnings filters (at the&#10;front)." ilk="function" name="filterwarnings" signature="filterwarnings(action, message='', category=&lt;class 'Warning'&gt;, module='', lineno=0, append=False)" />
      <scope doc="Function to format a warning the standard way." ilk="function" name="formatwarning" signature="formatwarning(message, category, filename, lineno, line=None)" />
      <variable citdl="dict" name="onceregistry" />
      <scope doc="Clear the list of warning filters, so that no filters are&#10;active." ilk="function" name="resetwarnings" signature="resetwarnings()" />
      <scope doc="Hook to write a warning to a file; replace if you like." ilk="function" name="showwarning" signature="showwarning(message, category, filename, lineno, file=None, line=None)" />
      <scope doc="Insert a simple entry into the list of warnings filters (at&#10;the front)." ilk="function" name="simplefilter" signature="simplefilter(action, category=&lt;class 'Warning'&gt;, lineno=0, append=False)" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Low-level inferface to warnings functionality." ilk="function" name="warn_explicit" />
    </scope>
    <scope doc="This module makes available standard errno system symbols.&#10;The value of each symbol is the corresponding integer value, e.g., on most systems, errno.ENOENT equals the integer 2.  The dictionary errno.errorcode maps numeric codes to symbol names, e.g., errno.errorcode[2] could be the string 'ENOENT'.  Symbols that are not relevant to the underlying system are not defined.  To map error codes to error messages, use the function os.strerror(), e.g. os.strerror(2) could return 'No such file or directory'." ilk="blob" lang="Python3" name="errno">
      <variable citdl="int" name="E2BIG" />
      <variable citdl="int" name="EACCES" />
      <variable citdl="int" name="EADDRINUSE" />
      <variable citdl="int" name="EADDRNOTAVAIL" />
      <variable citdl="int" name="EADV" />
      <variable citdl="int" name="EAFNOSUPPORT" />
      <variable citdl="int" name="EAGAIN" />
      <variable citdl="int" name="EALREADY" />
      <variable citdl="int" name="EBADE" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="EBADFD" />
      <variable citdl="int" name="EBADMSG" />
      <variable citdl="int" name="EBADR" />
      <variable citdl="int" name="EBADRQC" />
      <variable citdl="int" name="EBADSLT" />
      <variable citdl="int" name="EBFONT" />
      <variable citdl="int" name="EBUSY" />
      <variable citdl="int" name="ECANCELED" />
      <variable citdl="int" name="ECHILD" />
      <variable citdl="int" name="ECHRNG" />
      <variable citdl="int" name="ECOMM" />
      <variable citdl="int" name="ECONNABORTED" />
      <variable citdl="int" name="ECONNREFUSED" />
      <variable citdl="int" name="ECONNRESET" />
      <variable citdl="int" name="EDEADLK" />
      <variable citdl="int" name="EDEADLOCK" />
      <variable citdl="int" name="EDESTADDRREQ" />
      <variable citdl="int" name="EDOM" />
      <variable citdl="int" name="EDOTDOT" />
      <variable citdl="int" name="EDQUOT" />
      <variable citdl="int" name="EEXIST" />
      <variable citdl="int" name="EFAULT" />
      <variable citdl="int" name="EFBIG" />
      <variable citdl="int" name="EHOSTDOWN" />
      <variable citdl="int" name="EHOSTUNREACH" />
      <variable citdl="int" name="EIDRM" />
      <variable citdl="int" name="EILSEQ" />
      <variable citdl="int" name="EINPROGRESS" />
      <variable citdl="int" name="EINTR" />
      <variable citdl="int" name="EINVAL" />
      <variable citdl="int" name="EIO" />
      <variable citdl="int" name="EISCONN" />
      <variable citdl="int" name="EISDIR" />
      <variable citdl="int" name="EISNAM" />
      <variable citdl="int" name="EKEYEXPIRED" />
      <variable citdl="int" name="EKEYREJECTED" />
      <variable citdl="int" name="EKEYREVOKED" />
      <variable citdl="int" name="EL2HLT" />
      <variable citdl="int" name="EL2NSYNC" />
      <variable citdl="int" name="EL3HLT" />
      <variable citdl="int" name="EL3RST" />
      <variable citdl="int" name="ELIBACC" />
      <variable citdl="int" name="ELIBBAD" />
      <variable citdl="int" name="ELIBEXEC" />
      <variable citdl="int" name="ELIBMAX" />
      <variable citdl="int" name="ELIBSCN" />
      <variable citdl="int" name="ELNRNG" />
      <variable citdl="int" name="ELOOP" />
      <variable citdl="int" name="EMEDIUMTYPE" />
      <variable citdl="int" name="EMFILE" />
      <variable citdl="int" name="EMLINK" />
      <variable citdl="int" name="EMSGSIZE" />
      <variable citdl="int" name="EMULTIHOP" />
      <variable citdl="int" name="ENAMETOOLONG" />
      <variable citdl="int" name="ENAVAIL" />
      <variable citdl="int" name="ENETDOWN" />
      <variable citdl="int" name="ENETRESET" />
      <variable citdl="int" name="ENETUNREACH" />
      <variable citdl="int" name="ENFILE" />
      <variable citdl="int" name="ENOANO" />
      <variable citdl="int" name="ENOBUFS" />
      <variable citdl="int" name="ENOCSI" />
      <variable citdl="int" name="ENODATA" />
      <variable citdl="int" name="ENODEV" />
      <variable citdl="int" name="ENOENT" />
      <variable citdl="int" name="ENOEXEC" />
      <variable citdl="int" name="ENOKEY" />
      <variable citdl="int" name="ENOLCK" />
      <variable citdl="int" name="ENOLINK" />
      <variable citdl="int" name="ENOMEDIUM" />
      <variable citdl="int" name="ENOMEM" />
      <variable citdl="int" name="ENOMSG" />
      <variable citdl="int" name="ENONET" />
      <variable citdl="int" name="ENOPKG" />
      <variable citdl="int" name="ENOPROTOOPT" />
      <variable citdl="int" name="ENOSPC" />
      <variable citdl="int" name="ENOSR" />
      <variable citdl="int" name="ENOSTR" />
      <variable citdl="int" name="ENOSYS" />
      <variable citdl="int" name="ENOTBLK" />
      <variable citdl="int" name="ENOTCONN" />
      <variable citdl="int" name="ENOTDIR" />
      <variable citdl="int" name="ENOTEMPTY" />
      <variable citdl="int" name="ENOTNAM" />
      <variable citdl="int" name="ENOTRECOVERABLE" />
      <variable citdl="int" name="ENOTSOCK" />
      <variable citdl="int" name="ENOTSUP" />
      <variable citdl="int" name="ENOTTY" />
      <variable citdl="int" name="ENOTUNIQ" />
      <variable citdl="int" name="ENXIO" />
      <variable citdl="int" name="EOPNOTSUPP" />
      <variable citdl="int" name="EOVERFLOW" />
      <variable citdl="int" name="EOWNERDEAD" />
      <variable citdl="int" name="EPERM" />
      <variable citdl="int" name="EPFNOSUPPORT" />
      <variable citdl="int" name="EPIPE" />
      <variable citdl="int" name="EPROTO" />
      <variable citdl="int" name="EPROTONOSUPPORT" />
      <variable citdl="int" name="EPROTOTYPE" />
      <variable citdl="int" name="ERANGE" />
      <variable citdl="int" name="EREMCHG" />
      <variable citdl="int" name="EREMOTE" />
      <variable citdl="int" name="EREMOTEIO" />
      <variable citdl="int" name="ERESTART" />
      <variable citdl="int" name="ERFKILL" />
      <variable citdl="int" name="EROFS" />
      <variable citdl="int" name="ESHUTDOWN" />
      <variable citdl="int" name="ESOCKTNOSUPPORT" />
      <variable citdl="int" name="ESPIPE" />
      <variable citdl="int" name="ESRCH" />
      <variable citdl="int" name="ESRMNT" />
      <variable citdl="int" name="ESTALE" />
      <variable citdl="int" name="ESTRPIPE" />
      <variable citdl="int" name="ETIME" />
      <variable citdl="int" name="ETIMEDOUT" />
      <variable citdl="int" name="ETOOMANYREFS" />
      <variable citdl="int" name="ETXTBSY" />
      <variable citdl="int" name="EUCLEAN" />
      <variable citdl="int" name="EUNATCH" />
      <variable citdl="int" name="EUSERS" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <variable citdl="int" name="EXDEV" />
      <variable citdl="int" name="EXFULL" />
      <variable citdl="dict" name="errorcode" />
    </scope>
    <scope doc="The io module provides the Python interfaces to stream handling. The&#10;builtin open function is defined in this module.  At the top of the I/O hierarchy is the abstract base class IOBase. It defines the basic interface to a stream. Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise an OSError if they do not support a given operation.  Extending IOBase is RawIOBase which deals simply with the reading and writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide an interface to OS files." ilk="blob" lang="Python3" name="io">
      <scope classrefs="OSError" doc="I/O operation would block.&#10;" ilk="class" name="BlockingIOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_BufferedIOBase IOBase" doc="Base class for buffered IO objects.&#10;The main difference with RawIOBase is that the read() method supports omitting the size argument, and does not have a default implementation that defers to readinto().  In addition, read(), readinto() and write() may raise BlockingIOError if the underlying raw stream is in non-blocking mode and not ready; unlike their raw counterparts, they will never return None.  A typical implementation should not inherit from a RawIOBase" ilk="class" name="BufferedIOBase" />
      <scope classrefs="_BufferedIOBase" doc="A buffered reader and writer object together.&#10;A buffered reader object and buffered writer object put together to form a sequential IO object that can read and write. This is typically used with a socket or two-way pipe.  reader and writer are RawIOBase objects that are readable and writeable respectively. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRWPair">
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="peek" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="__getstate__" />
        <scope ilk="function" name="readinto" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="A buffered interface to random access streams.&#10;The constructor creates a reader and writer for a seekable stream, raw, given in the first argument. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRandom">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope ilk="function" name="readinto" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope ilk="function" name="peek" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Create a new buffered reader using the given readable raw IO object.&#10;" ilk="class" name="BufferedReader">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope ilk="function" name="readinto" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope ilk="function" name="peek" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="A buffer for a writeable sequential RawIO object.&#10;The constructor creates a BufferedWriter for the given writeable raw stream. If the buffer_size is not given, it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedWriter">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="_RawIOBase" doc="Open a file.&#10;The mode can be 'r' (default), 'w', 'x' or 'a' for reading, writing, exclusive creation or appending.  The file will be created if it doesn't exist when opened for writing or appending; it will be truncated when opened for writing.  A FileExistsError will be raised if it already exists when opened for creating. Opening a file for creating implies writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode to allow simultaneous reading and writing. A custom opener can be used by passing a callable as *opener*. The underlying file descriptor for the file object is then obtained by calling opener with (*name*, *flags*). *opener* must return an open file descriptor (passing os.open as *opener*" ilk="class" name="FileIO">
        <scope doc="True if file was opened in a read mode." ilk="function" name="readable" />
        <scope doc="Truncate the file to at most size bytes and return the&#10;truncated size." ilk="function" name="truncate" />
        <scope doc="Move to new file position and return the file position." ilk="function" name="seek" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the underlying file descriptor (an integer)." ilk="function" name="fileno" />
        <scope doc="Same as RawIOBase.readinto()." ilk="function" name="readinto" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="True if file was opened in a write mode." ilk="function" name="writable" />
        <scope doc="Read at most size bytes, returned as bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="True if the file is connected to a TTY device." ilk="function" name="isatty" />
        <scope doc="Close the file." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="True if file supports random-access." ilk="function" name="seekable" />
        <scope doc="Write bytes b to file, return number written." ilk="function" name="write" />
        <scope doc="Read all data from the file, returned as bytes." ilk="function" name="readall" />
        <scope doc="Current file position." ilk="function" name="tell" />
      </scope>
      <scope classrefs="_IOBase" doc="The abstract base class for all I/O classes, acting on streams of&#10;bytes. There is no public constructor.  This class provides dummy implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked.  Even though IOBase does not declare read, readinto, or write because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise UnsupportedOperation when operations they do not support are" ilk="class" name="IOBase" />
      <scope classrefs="object" doc="Codec used when reading a file in universal newlines mode.&#10;It wraps another incremental decoder, translating \r\n and \r into \n. It also records the types of newlines encountered.  When used with translate=False, it ensures that the newline sequence is returned in one piece. When used with decoder=None, it expects unicode strings as decode input and translates newlines without first invoking an external decoder." ilk="class" name="IncrementalNewlineDecoder">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="getstate" />
        <scope ilk="function" name="reset" />
        <scope ilk="function" name="setstate" />
        <scope ilk="function" name="decode" />
      </scope>
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="OpenWrapper" />
      <scope classrefs="_RawIOBase IOBase" doc="Base class for raw binary I/O.&#10;" ilk="class" name="RawIOBase" />
      <variable citdl="int" name="SEEK_CUR" />
      <variable citdl="int" name="SEEK_END" />
      <variable citdl="int" name="SEEK_SET" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="_TextIOBase IOBase" doc="Base class for text I/O.&#10;This class provides a character and line based interface to stream I/O. There is no readinto method because Python's character strings are immutable. There is no public constructor." ilk="class" name="TextIOBase" />
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see help(codecs.Codec) or the documentation for codecs.register) and defaults to &quot;strict&quot;.  newline controls how line endings are handled. It can be None, '', '\n', '\r', and '\r\n'.  It works as follows: " ilk="class" name="TextIOWrapper">
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read at most n characters from stream." ilk="function" name="read" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write string to stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="ValueError OSError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="UnsupportedOperation" />
      <variable citdl="list" name="__all__" />
      <import module="_io" />
      <import module="abc" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
    </scope>
    <scope doc="Enough Mach-O to make your head spin.&#10;See the relevant header files in /usr/include/mach-o  And also Apple's documentation." ilk="blob" lang="Python3" name="ctypes.macholib" />
    <scope doc="&#10;" ilk="blob" lang="Python3" name="ctypes._endian">
      <scope doc="# XXX Deprecated" ilk="function" name="ARRAY" signature="ARRAY(typ, len)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ArgumentError" />
      <scope classrefs="_CData" doc="XXX to be provided&#10;" ilk="class" name="Array">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope classrefs="Structure" doc="Structure with big endian byte order&#10;" ilk="class" name="BigEndianStructure" />
      <scope classrefs="object" doc="An instance of this class represents a loaded dll/shared&#10;library, exporting functions using the standard C calling convention (named 'cdecl' on Windows).  The exported functions can be accessed as attributes, or by indexing with the function name.  Examples:  &lt;obj&gt;.qsort -&gt; callable object &lt;obj&gt;['qsort'] -&gt; callable object  Calling the functions releases the Python GIL during the call and" ilk="class" name="CDLL">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name_or_ordinal)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, mode=0, handle=None, use_errno=False, use_last_error=False)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope doc="CFUNCTYPE(restype, *argtypes, use_errno=False,&#10;use_last_error=False) -&gt; function prototype." ilk="function" name="CFUNCTYPE" signature="CFUNCTYPE(restype, *argtypes, **kw)" />
      <variable citdl="int" name="DEFAULT_MODE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="LibraryLoader">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dlltype)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="LoadLibrary" signature="LoadLibrary(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
      </scope>
      <scope classrefs="_CData" doc="Structure base class&#10;" ilk="class" name="LittleEndianStructure">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope ilk="function" name="POINTER" />
      <scope ilk="function" name="PYFUNCTYPE" signature="PYFUNCTYPE(restype, *argtypes)" />
      <scope classrefs="CDLL" doc="This class represents the Python library itself.  It allows to&#10;access Python API functions.  The GIL is not released, and Python exceptions are handled correctly." ilk="class" name="PyDLL" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <scope doc="# XXX Deprecated" ilk="function" name="SetPointerType" signature="SetPointerType(pointer, cls)" />
      <scope classrefs="_CData" doc="Structure base class&#10;" ilk="class" name="Structure">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_CData" doc="Union base class&#10;" ilk="class" name="Union">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="Return the address of the C instance internal buffer" ilk="function" name="addressof" returns="int" signature="addressof(C instance) -&gt; integer" />
      <scope doc="Return the alignment requirements of a C instance" ilk="function" name="alignment" signature="alignment(C type) -&gt; integer&#10;alignment(C instance) -&gt; integer" />
      <scope doc="Return a pointer lookalike to a C instance, only usable as&#10;function argument" ilk="function" name="byref" signature="byref(C instance[, offset=0]) -&gt; byref-object" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_bool" />
      <scope ilk="function" name="c_buffer" signature="c_buffer(init, size=None)" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_byte" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_char" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_char_p">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_double" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_float" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_int" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_long" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_longdouble" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_longlong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_short" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_size_t" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ssize_t" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ubyte" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_uint" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ulong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ulonglong" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_ushort" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_void_p" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_voidp" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_wchar" />
      <scope classrefs="_SimpleCData" doc="XXX to be provided&#10;" ilk="class" name="c_wchar_p">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="cast" signature="cast(obj, typ)" />
    </scope>
    <scope doc="Python implementation of the io module.&#10;" ilk="blob" lang="Python3" name="_pyio">
      <scope classrefs="OSError" doc="I/O operation would block.&#10;" ilk="class" name="BlockingIOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="IOBase" doc="Base class for buffered IO objects.&#10;The main difference with RawIOBase is that the read() method supports omitting the size argument, and does not have a default implementation that defers to readinto().  In addition, read(), readinto() and write() may raise BlockingIOError if the underlying raw stream is in non-blocking mode and not ready; unlike their raw counterparts, they will never return None.  A typical implementation should not inherit from a RawIOBase" ilk="class" name="BufferedIOBase">
        <scope doc="Read and return up to size bytes, where size is an int." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Read up to len(b) bytes into *b*, using at most one system&#10;call" ilk="function" name="readinto1" signature="readinto1(self, b)" />
        <scope doc="Read up to size bytes with at most one read() system call,&#10;where size is an int." ilk="function" name="read1" signature="read1(self, size=None)" />
        <scope doc="Write the given bytes buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Separate the underlying raw stream from the buffer and&#10;return it." ilk="function" name="detach" signature="detach(self)" />
        <scope doc="Read up to len(b) bytes into bytearray b." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope ilk="function" name="_readinto" signature="_readinto(self, b, read1)" />
      </scope>
      <scope classrefs="BufferedIOBase" doc="A buffered reader and writer object together.&#10;A buffered reader object and buffered writer object put together to form a sequential IO object that can read and write. This is typically used with a socket or two-way pipe.  reader and writer are RawIOBase objects that are readable and writeable respectively. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRWPair">
        <scope doc="Return a bool indicating whether object was opened for&#10;reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Read up to size bytes with at most one read() system call,&#10;where size is an int." ilk="function" name="read1" signature="read1(self, size)" />
        <scope doc="Constructor." ilk="function" name="__init__" signature="__init__(self, reader, writer, buffer_size=8192)" />
        <scope doc="Read up to len(b) bytes into bytearray b." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read and return up to size bytes, where size is an int." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Return a bool indicating whether this is an 'interactive'&#10;stream." ilk="function" name="isatty" signature="isatty(self)" />
        <scope doc="Read up to len(b) bytes into *b*, using at most one system&#10;call" ilk="function" name="readinto1" signature="readinto1(self, b)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Write the given bytes buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope ilk="function" name="peek" signature="peek(self, size=0)" />
      </scope>
      <scope classrefs="BufferedWriter BufferedReader" doc="A buffered interface to random access streams.&#10;The constructor creates a reader and writer for a seekable stream, raw, given in the first argument. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRandom">
        <scope doc="Read and return up to size bytes, where size is an int." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Create a new buffered reader using the given readable raw IO&#10;object." ilk="function" name="__init__" signature="__init__(self, raw, buffer_size=8192)" />
        <scope doc="Read up to len(b) bytes into *b*, using at most one system&#10;call" ilk="function" name="readinto1" signature="readinto1(self, b)" />
        <scope doc="Read up to size bytes with at most one read() system call,&#10;where size is an int." ilk="function" name="read1" signature="read1(self, size)" />
        <scope doc="Write the given bytes buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Returns buffered bytes without advancing the position." ilk="function" name="peek" signature="peek(self, size=0)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Read up to len(b) bytes into bytearray b." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
      <scope classrefs="_BufferedIOMixin" doc="BufferedReader(raw[, buffer_size])&#10;A buffer for a readable, sequential BaseRawIO object.  The constructor creates a BufferedReader for the given readable raw stream and buffer_size. If buffer_size is omitted, DEFAULT_BUFFER_SIZE is used." ilk="class" name="BufferedReader">
        <scope doc="Read size bytes." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Create a new buffered reader using the given readable raw IO&#10;object." ilk="function" name="__init__" signature="__init__(self, raw, buffer_size=8192)" />
        <scope ilk="function" name="_read_unlocked" signature="_read_unlocked(self, n=None)" />
        <scope ilk="function" name="_reset_read_buf" signature="_reset_read_buf(self)" />
        <scope doc="Read data into *buf* with at most one system call." ilk="function" name="_readinto" signature="_readinto(self, buf, read1)" />
        <scope doc="Reads up to size bytes, with at most one read() system call." ilk="function" name="read1" signature="read1(self, size)" />
        <scope ilk="function" name="_peek_unlocked" signature="_peek_unlocked(self, n=0)" />
        <scope doc="Returns buffered bytes without advancing the position." ilk="function" name="peek" signature="peek(self, size=0)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
      <scope classrefs="_BufferedIOMixin" doc="A buffer for a writeable sequential RawIO object.&#10;The constructor creates a BufferedWriter for the given writeable raw stream. If the buffer_size is not given, it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedWriter">
        <scope ilk="function" name="_flush_unlocked" signature="_flush_unlocked(self)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Write the given bytes buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, raw, buffer_size=8192)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
      <scope classrefs="BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Return a bool indicating whether object was opened for&#10;reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Return the bytes value (contents) of the buffer" ilk="function" name="getvalue" signature="getvalue(self)" />
        <scope doc="This is the same as read." ilk="function" name="read1" signature="read1(self, size)" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, initial_bytes=None)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read and return up to size bytes, where size is an int." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope doc="Return a bool indicating whether object supports random&#10;access." ilk="function" name="seekable" signature="seekable(self)" />
        <scope doc="Write the given bytes buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Return a readable and writable view of the buffer." ilk="function" name="getbuffer" signature="getbuffer(self)" />
      </scope>
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="object" doc="Helper for builtins.open.__doc__&#10;" ilk="class" name="DocDescriptor">
        <scope ilk="function" name="__get__" signature="__get__(self, obj, typ)" />
      </scope>
      <scope classrefs="RawIOBase" doc="Base class for raw binary I/O.&#10;" ilk="class" name="FileIO">
        <scope doc="Destructor. Calls close()." ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="True if file was opened in a read mode." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" signature="truncate(self, size=None)" />
        <scope doc="Internal: raise UnsupportedOperation if file is not writable" ilk="function" name="_checkWritable" signature="_checkWritable(self, msg=None)" />
        <scope doc="Open a file." ilk="function" name="__init__" signature="__init__(self, file, mode='r', closefd=True, opener=None)" />
        <scope doc="Same as RawIOBase.readinto()." ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="True if file was opened in a write mode." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read at most size bytes, returned as bytes." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Internal: raise UnsupportedOperation if file is not readable" ilk="function" name="_checkReadable" signature="_checkReadable(self)" />
        <scope doc="True if the file is connected to a TTY device." ilk="function" name="isatty" signature="isatty(self)" />
        <scope doc="Close the file." ilk="function" name="close" signature="close(self)" />
        <scope doc="Move to new file position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
        <scope doc="True if file supports random-access." ilk="function" name="seekable" signature="seekable(self)" />
        <scope doc="Write bytes b to file, return number written." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Can raise OSError for non seekable files." ilk="function" name="tell" signature="tell() -&gt; int.  Current file position." />
        <scope doc="Read all data from the file, returned as bytes." ilk="function" name="readall" signature="readall(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope doc="Return the underlying file descriptor (an integer)." ilk="function" name="fileno" signature="fileno(self)" />
      </scope>
      <scope classrefs="object" doc="The abstract base class for all I/O classes, acting on streams of&#10;bytes. There is no public constructor.  This class provides dummy implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked.  Even though IOBase does not declare read, readinto, or write because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise UnsupportedOperation when operations they do not support are" ilk="class" name="IOBase">
        <scope doc="Destructor. Calls close()." ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Internal: raise an OSError exception for unsupported&#10;operations." ilk="function" name="_unsupported" signature="_unsupported(self, name)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope doc="Context management protocol." ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Internal: raise UnsupportedOperation if file is not writable" ilk="function" name="_checkWritable" signature="_checkWritable(self, msg=None)" />
        <scope doc="Return a bool indicating whether this is an 'interactive'&#10;stream." ilk="function" name="isatty" signature="isatty(self)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read and return a line of bytes from the stream." ilk="function" name="readline" signature="readline(self, size=-1)" />
        <scope doc="Internal: raise UnsupportedOperation if file is not readable" ilk="function" name="_checkReadable" signature="_checkReadable(self, msg=None)" />
        <scope doc="Context management protocol." ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return a list of lines from the stream." ilk="function" name="readlines" signature="readlines(self, hint=None)" />
        <scope doc="Internal: raise an ValueError if file is closed" ilk="function" name="_checkClosed" signature="_checkClosed(self, msg=None)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Returns underlying file descriptor (an int) if one exists." ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Internal: raise UnsupportedOperation if file is not seekable" ilk="function" name="_checkSeekable" signature="_checkSeekable(self, msg=None)" />
        <scope ilk="function" name="writelines" signature="writelines(self, lines)" />
        <scope doc="Return a bool indicating whether object supports random&#10;access." ilk="function" name="seekable" signature="seekable(self)" />
      </scope>
      <scope classrefs="IncrementalDecoder" doc="Codec used when reading a file in universal newlines mode.  It wraps&#10;another incremental decoder, translating \r\n and \r into \n.  It also records the types of newlines encountered.  When used with translate=False, it ensures that the newline sequence is returned in one piece." ilk="class" name="IncrementalNewlineDecoder">
        <scope doc="Set the current state of the decoder." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Reset the decoder to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Create an IncrementalDecoder instance." ilk="function" name="__init__" signature="__init__(self, decoder, translate, errors='strict')" />
        <scope doc="Return the current state of the decoder." ilk="function" name="getstate" signature="getstate(self)" />
        <scope doc="Decode input and returns the resulting object." ilk="function" name="decode" signature="decode(self, input, final=False)" />
      </scope>
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope classrefs="object" doc="open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True)&#10;Open file and return a stream.  Raise OSError upon failure.  file is either a text or byte string giving the name (and the path if the file isn't in the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed, unless closefd is set to False.)  mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open for reading in text mode. Other" ilk="class" name="OpenWrapper">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwargs)" />
      </scope>
      <scope classrefs="IOBase" doc="Base class for raw binary I/O.&#10;" ilk="class" name="RawIOBase">
        <scope doc="Read and return up to size bytes, where size is an int." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" signature="write(self, b)" />
        <scope doc="Read until EOF, using multiple read() call." ilk="function" name="readall" signature="readall(self)" />
        <scope doc="Read up to len(b) bytes into bytearray b." ilk="function" name="readinto" signature="readinto(self, b)" />
      </scope>
      <variable citdl="int" name="SEEK_CUR" />
      <variable citdl="int" name="SEEK_END" />
      <variable citdl="int" name="SEEK_SET" />
      <scope classrefs="TextIOWrapper" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope ilk="function" name="getvalue" signature="getvalue(self)" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" signature="detach(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, initial_value='', newline='\n')" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="IOBase" doc="Base class for text I/O.&#10;This class provides a character and line based interface to stream I/O. There is no readinto method because Python's character strings are immutable. There is no public constructor." ilk="class" name="TextIOBase">
        <scope doc="Read at most size characters from stream, where size is an&#10;int." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Write string s to stream and returning an int." ilk="function" name="write" signature="write(self, s)" />
        <scope doc="Truncate size to pos, where pos is an int." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" signature="detach(self)" />
      </scope>
      <scope classrefs="TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see the codecs.register) and defaults to &quot;strict&quot;.  newline can be None, '', '\n', '\r', or '\r\n'.  It controls the handling of line endings. If it is None, universal newlines is enabled.  With this enabled, on input, the lines endings '\n', '\r', or '\r\n' are translated to '\n' before being returned to the" ilk="class" name="TextIOWrapper">
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope doc="Rewind the _decoded_chars buffer." ilk="function" name="_rewind_decoded_chars" signature="_rewind_decoded_chars(self, n)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, cookie, whence=0)" />
        <scope doc="Read at most size characters from stream, where size is an&#10;int." ilk="function" name="read" signature="read(self, size=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_unpack_cookie" signature="_unpack_cookie(self, bigint)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Return an int indicating the current stream position." ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Read and decode the next chunk of data from the&#10;BufferedReader." ilk="function" name="_read_chunk" signature="_read_chunk(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self)" />
        <scope doc="Truncate size to pos, where pos is an int." ilk="function" name="truncate" signature="truncate(self, pos=None)" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" signature="detach(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)" />
        <scope doc="Returns underlying file descriptor (an int) if one exists." ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="_pack_cookie" signature="_pack_cookie(self, position, dec_flags=0, bytes_to_feed=0, need_eof=0, chars_to_skip=0)" />
        <scope doc="Return a bool indicating whether object was opened for&#10;writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" signature="readline(self, size=None)" />
        <scope doc="Return a bool indicating whether this is an 'interactive'&#10;stream." ilk="function" name="isatty" signature="isatty(self)" />
        <scope doc="Set the _decoded_chars buffer." ilk="function" name="_set_decoded_chars" signature="_set_decoded_chars(self, chars)" />
        <scope doc="Return a bool indicating whether object supports random&#10;access." ilk="function" name="seekable" signature="seekable(self)" />
        <scope doc="Write data, where s is a str" ilk="function" name="write" signature="write(self, s)" />
        <scope ilk="function" name="_get_decoder" signature="_get_decoder(self)" />
        <scope doc="Advance into the _decoded_chars buffer." ilk="function" name="_get_decoded_chars" signature="_get_decoded_chars(self, n=None)" />
      </scope>
      <scope classrefs="ValueError OSError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="UnsupportedOperation" />
      <variable citdl="list" name="__all__" />
      <import module="abc" />
      <import module="array" />
      <import module="codecs" />
      <import module="errno" />
      <import module="io" />
      <scope doc="Open file and return a stream. Raise OSError upon failure." ilk="function" name="open" signature="open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)" />
      <import module="os" />
      <import module="stat" />
      <import module="sys" />
      <variable citdl="set" name="valid_seek_flags" />
    </scope>
    <scope doc="Manage HTTP Response Headers&#10;Much of this module is red-handedly pilfered from email.message in the stdlib, so portions are Copyright (C) 2001,2002 Python Software Foundation, and were written by Barry Warsaw." ilk="blob" lang="Python3" name="wsgiref.headers">
      <scope classrefs="object" doc="Manage a collection of HTTP response headers&#10;" ilk="class" name="Headers">
        <scope doc="Return true if the message contains the header." ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope doc="Get the first header value for 'name'" ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Return a list of all header values." ilk="function" name="values" signature="values(self)" />
        <scope doc="Delete all occurrences of a header, if present." ilk="function" name="__delitem__" signature="__delitem__(self, name)" />
        <scope doc="Extended header setting." ilk="function" name="add_header" signature="add_header(self, _name, _value, **_params)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, headers=None)" />
        <scope doc="Set the value of a header." ilk="function" name="__setitem__" signature="__setitem__(self, name, val)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__bytes__" signature="__bytes__(self)" />
        <scope doc="Get all the header fields and values." ilk="function" name="items" signature="items(self)" />
        <scope doc="Convert/check value type." ilk="function" name="_convert_string_type" signature="_convert_string_type(self, value)" />
        <scope doc="Get the first header value for 'name', or return 'default'" ilk="function" name="get" signature="get(self, name, default=None)" />
        <scope doc="Return a list of all the header field names." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Return a list of all the values for the named field." ilk="function" name="get_all" signature="get_all(self, name)" />
        <scope doc="Return first matching header value for 'name', or 'value'" ilk="function" name="setdefault" signature="setdefault(self, name, value)" />
        <scope doc="suitable for direct HTTP transmission." ilk="function" name="__str__" signature="str() returns the formatted headers, complete with end line," />
        <scope doc="Return the total number of headers, including duplicates." ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <import module="re" />
      <variable citdl="SRE_Pattern" name="tspecials" />
    </scope>
    <scope doc="distutils.command.install_data&#10;Implements the Distutils 'install_data' command, for installing platform-independent data files." ilk="blob" lang="Python3" name="distutils.command.install_data">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope doc="Return 'pathname' with 'new_root' prepended." ilk="function" name="change_root" signature="change_root(new_root, pathname)" />
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="install_data">
        <scope ilk="function" name="get_inputs" signature="get_inputs(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <import module="os" />
    </scope>
    <scope doc="Export the Python grammar and symbols.&#10;" ilk="blob" lang="Python3" name="lib2to3.pygram">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Symbols">
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, grammar)" />
      </scope>
      <import module="driver" />
      <import module="os" />
      <variable citdl="PgenGrammar" name="pattern_grammar" />
      <variable citdl="Symbols" name="pattern_symbols" />
      <variable citdl="PgenGrammar" name="python_grammar" />
      <variable citdl="PgenGrammar" name="python_grammar_no_print_statement" />
      <variable citdl="Symbols" name="python_symbols" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="# Module providing the `Pool` class for managing a process pool&#10;# # multiprocessing/pool.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.pool">
      <scope classrefs="object" doc="&#10;" ilk="class" name="ApplyResult">
        <scope ilk="function" name="get" signature="get(self, timeout=None)" />
        <scope ilk="function" name="ready" signature="ready(self)" />
        <scope ilk="function" name="_set" signature="_set(self, i, obj)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cache, callback, error_callback)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="successful" signature="successful(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="AsyncResult">
        <scope ilk="function" name="get" signature="get(self, timeout=None)" />
        <scope ilk="function" name="ready" signature="ready(self)" />
        <scope ilk="function" name="_set" signature="_set(self, i, obj)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cache, callback, error_callback)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="successful" signature="successful(self)" />
      </scope>
      <variable citdl="int" name="CLOSE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ExceptionWithTraceback">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, exc, tb)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="IMapIterator">
        <scope ilk="function" name="next" signature="next(self, timeout=None)" />
        <scope ilk="function" name="__next__" signature="__next__(self, timeout=None)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="_set" signature="_set(self, i, obj)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cache)" />
        <scope ilk="function" name="_set_length" signature="_set_length(self, length)" />
      </scope>
      <scope classrefs="IMapIterator" doc="&#10;" ilk="class" name="IMapUnorderedIterator">
        <scope ilk="function" name="_set" signature="_set(self, i, obj)" />
      </scope>
      <scope classrefs="ApplyResult" doc="&#10;" ilk="class" name="MapResult">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cache, chunksize, length, callback, error_callback)" />
        <scope ilk="function" name="_set" signature="_set(self, i, success_result)" />
      </scope>
      <scope classrefs="Exception" doc="Wraps possible unpickleable errors, so they can be&#10;safely sent through the socket." ilk="class" name="MaybeEncodingError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, exc, value)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="Class which supports an async version of applying functions to arguments.&#10;" ilk="class" name="Pool">
        <scope doc="Like `imap()` method but ordering of results is arbitrary." ilk="function" name="imap_unordered" signature="imap_unordered(self, func, iterable, chunksize=1)" />
        <scope doc="Asynchronous version of `starmap()` method." ilk="function" name="starmap_async" signature="starmap_async(self, func, iterable, chunksize=None, callback=None, error_callback=None)" />
        <scope doc="Asynchronous version of `apply()` method." ilk="function" name="apply_async" signature="apply_async(self, func, args=(), kwds={}, callback=None, error_callback=None)" />
        <scope ilk="function" name="_handle_results" signature="_handle_results(outqueue, get, cache)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope doc="Equivalent of `func(*args, **kwds)`." ilk="function" name="apply" signature="apply(self, func, args=(), kwds={})" />
        <scope doc="Bring the number of pool processes up to the specified&#10;number, for use after reaping workers which have exited." ilk="function" name="_repopulate_pool" signature="_repopulate_pool(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, processes=None, initializer=None, initargs=(), maxtasksperchild=None, context=None)" />
        <scope ilk="function" name="_handle_tasks" signature="_handle_tasks(taskqueue, put, outqueue, pool, cache)" />
        <scope ilk="function" name="_handle_workers" signature="_handle_workers(pool)" />
        <scope doc="Like `map()` method but the elements of the `iterable` are&#10;expected to be iterables as well and will be unpacked as&#10;arguments." ilk="function" name="starmap" signature="starmap(self, func, iterable, chunksize=None)" />
        <scope ilk="function" name="_setup_queues" signature="_setup_queues(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="_help_stuff_finish" signature="_help_stuff_finish(inqueue, task_handler, size)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="join" signature="join(self)" />
        <scope doc="Clean up any exited workers and start replacements for them." ilk="function" name="_maintain_pool" signature="_maintain_pool(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Apply `func` to each element in `iterable`, collecting the&#10;results in a list that is returned." ilk="function" name="map" signature="map(self, func, iterable, chunksize=None)" />
        <scope doc="Equivalent of `map()` -- can be MUCH slower than&#10;`Pool.map()`." ilk="function" name="imap" signature="imap(self, func, iterable, chunksize=1)" />
        <scope ilk="function" name="_terminate_pool" />
        <scope doc="Asynchronous version of `map()` method." ilk="function" name="map_async" signature="map_async(self, func, iterable, chunksize=None, callback=None, error_callback=None)" />
        <scope doc="Helper function to implement map, starmap and their async&#10;counterparts." ilk="function" name="_map_async" signature="_map_async(self, func, iterable, mapper, chunksize=None, callback=None, error_callback=None)" />
        <scope ilk="function" name="_get_tasks" signature="_get_tasks(func, it, size)" />
        <scope ilk="function" name="Process" signature="Process(self, *args, **kwds)" />
        <scope doc="Cleanup after any worker processes which have exited due to&#10;reaching their specified lifetime." ilk="function" name="_join_exited_workers" signature="_join_exited_workers(self)" />
      </scope>
      <variable citdl="int" name="RUN" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="RemoteTraceback">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tb)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="int" name="TERMINATE" />
      <scope classrefs="Pool" doc="Class which supports an async version of applying functions to arguments.&#10;" ilk="class" name="ThreadPool">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, processes=None, initializer=None, initargs=())" />
        <scope ilk="function" name="_help_stuff_finish" signature="_help_stuff_finish(inqueue, task_handler, size)" />
        <scope ilk="function" name="Process" signature="Process(*args, **kwds)" />
        <scope ilk="function" name="_setup_queues" signature="_setup_queues(self)" />
      </scope>
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="TimeoutError" />
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <scope ilk="function" name="get_context" />
      <import module="itertools" />
      <variable citdl="count" name="job_counter" />
      <scope ilk="function" name="mapstar" signature="mapstar(args)" />
      <import module="os" />
      <import module="queue" />
      <scope ilk="function" name="rebuild_exc" signature="rebuild_exc(exc, tb)" />
      <scope ilk="function" name="starmapstar" signature="starmapstar(args)" />
      <import module="threading" />
      <import module="time" />
      <import module="traceback" />
      <import module="util" />
      <scope ilk="function" name="worker" signature="worker(inqueue, outqueue, initializer=None, initargs=(), maxtasks=None, wrap_exception=False)" />
    </scope>
    <scope doc="distutils.unixccompiler&#10;Contains the UnixCCompiler class, a subclass of CCompiler that handles the &quot;typical&quot; Unix-style command-line C compiler: * macros defined with -Dname[=value] * macros undefined with -Uname * include search directories specified with -Idir * libraries specified with -lllib * library search directories specified with -Ldir * compile handled by 'cc' (or similar) executable with -c option: compiles .c to .o * link static library handled by 'ar' command (possibly with 'ranlib')" ilk="blob" lang="Python3" name="distutils.unixccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="CCompiler">
        <scope doc="Add 'libname' to the list of libraries that will be included&#10;in all links driven by this compiler object." ilk="function" name="add_library" signature="add_library(self, libname)" />
        <scope doc="Define the executables (and options for them) that will be&#10;run to perform the various stages of compilation." ilk="function" name="set_executables" signature="set_executables(self, **kwargs)" />
        <scope doc="Add 'object' to the list of object files (or analogues, such&#10;as explicitly named library files or the output of &quot;resource&#10;compilers&quot;) to be included in every link driven by this&#10;compiler object." ilk="function" name="add_link_object" signature="add_link_object(self, object)" />
        <scope doc="Detect the language of a given file, or list of files." ilk="function" name="detect_language" signature="detect_language(self, sources)" />
        <scope ilk="function" name="shared_object_filename" signature="shared_object_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for libraries specified to 'add_library()' and&#10;'set_libraries()'." ilk="function" name="add_library_dir" signature="add_library_dir(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope ilk="function" name="link_shared_lib" signature="link_shared_lib(self, objects, output_libname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope ilk="function" name="move_file" signature="move_file(self, src, dst)" />
        <scope doc="Return true if we need to relink the files listed in&#10;'objects' to recreate 'output_file'." ilk="function" name="_need_link" signature="_need_link(self, objects, output_file)" />
        <scope ilk="function" name="_find_macro" signature="_find_macro(self, name)" />
        <scope doc="Set the list of directories that will be searched to 'dirs'&#10;(a list of strings)." ilk="function" name="set_include_dirs" signature="set_include_dirs(self, dirs)" />
        <scope doc="Typecheck and fix up some arguments supplied to various&#10;methods." ilk="function" name="_fix_object_args" signature="_fix_object_args(self, objects, output_dir)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
        <scope ilk="function" name="_get_cc_args" signature="_get_cc_args(self, pp_opts, debug, before)" />
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="set_executable" signature="set_executable(self, key, value)" />
        <scope doc="Typecheck and fix-up some of the arguments to the&#10;'compile()' method, and return fixed-up values." ilk="function" name="_fix_compile_args" signature="_fix_compile_args(self, output_dir, macros, include_dirs)" />
        <scope ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope ilk="function" name="executable_filename" signature="executable_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Set the list of libraries to be included in all links driven&#10;by this compiler object to 'libnames' (a list of strings)." ilk="function" name="set_libraries" signature="set_libraries(self, libnames)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Set the list of library search directories to 'dirs' (a list&#10;of strings)." ilk="function" name="set_library_dirs" signature="set_library_dirs(self, dirs)" />
        <scope doc="Undefine a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="undefine_macro" signature="undefine_macro(self, name)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for shared libraries at runtime." ilk="function" name="add_runtime_library_dir" signature="add_runtime_library_dir(self, dir)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope ilk="function" name="library_filename" signature="library_filename(self, libname, lib_type='static', strip_dir=0, output_dir='')" />
        <scope ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Typecheck and fix up some of the arguments supplied to the&#10;'link_*' methods." ilk="function" name="_fix_lib_args" signature="_fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)" />
        <scope doc="Set the list of object files (or analogues) to be included&#10;in every link to 'objects'." ilk="function" name="set_link_objects" signature="set_link_objects(self, objects)" />
        <scope doc="Return a boolean indicating whether funcname is supported on&#10;the current platform." ilk="function" name="has_function" signature="has_function(self, funcname, includes=None, include_dirs=None, libraries=None, library_dirs=None)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Set the list of directories to search for shared libraries&#10;at runtime to 'dirs' (a list of strings)." ilk="function" name="set_runtime_library_dirs" signature="set_runtime_library_dirs(self, dirs)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Process arguments and decide which source files to compile." ilk="function" name="_setup_compile" signature="_setup_compile(self, outdir, macros, incdirs, sources, depends, extra)" />
        <scope ilk="function" name="spawn" signature="spawn(self, cmd)" />
        <scope ilk="function" name="link_executable" signature="link_executable(self, objects, output_progname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None)" />
        <scope doc="Decide which souce files must be recompiled." ilk="function" name="_prep_compile" signature="_prep_compile(self, sources, output_dir, depends=None)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="link_shared_object" signature="link_shared_object(self, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Define a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="define_macro" signature="define_macro(self, name, value=None)" />
        <scope doc="Ensures that every element of 'definitions' is a valid macro&#10;definition, ie." ilk="function" name="_check_macro_definitions" signature="_check_macro_definitions(self, definitions)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for header files." ilk="function" name="add_include_dir" signature="add_include_dir(self, dir)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompiler" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="UnixCCompiler">
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="_is_gcc" signature="_is_gcc(self, compiler_name)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
      </scope>
      <scope doc="Generate linker options for searching library directories&#10;and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at&#10;least two types of compilers: the typical Unix compiler and&#10;Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <import module="log" />
      <scope doc="Return true if 'source' exists and is more recently modified&#10;than 'target', or if 'source' exists and 'target' doesn't." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="sysconfig" />
    </scope>
    <scope doc="W3C Document Object Model implementation for Python.&#10;The Python mapping of the Document Object Model is documented in the Python Library Reference in the section on the xml.dom package.  This package contains the following modules:  minidom -- A simple implementation of the Level 1 DOM with namespace support added (based on the Level 2 specification) and other minor Level 2 functionality.  pulldom -- DOM builder supporting on-demand tree-building for selected" ilk="blob" lang="Python3" name="xml.dom">
      <scope classrefs="Exception" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="DOMException">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kw)" />
        <scope ilk="function" name="_get_code" signature="_get_code(self)" />
      </scope>
      <variable citdl="int" name="DOMSTRING_SIZE_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="DomstringSizeErr" />
      <variable citdl="NoneType" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" name="EMPTY_PREFIX" />
      <variable citdl="int" name="HIERARCHY_REQUEST_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="HierarchyRequestErr" />
      <variable citdl="int" name="INDEX_SIZE_ERR" />
      <variable citdl="int" name="INUSE_ATTRIBUTE_ERR" />
      <variable citdl="int" name="INVALID_ACCESS_ERR" />
      <variable citdl="int" name="INVALID_CHARACTER_ERR" />
      <variable citdl="int" name="INVALID_MODIFICATION_ERR" />
      <variable citdl="int" name="INVALID_STATE_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="IndexSizeErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="InuseAttributeErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="InvalidAccessErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="InvalidCharacterErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="InvalidModificationErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="InvalidStateErr" />
      <variable citdl="int" name="NAMESPACE_ERR" />
      <variable citdl="int" name="NOT_FOUND_ERR" />
      <variable citdl="int" name="NOT_SUPPORTED_ERR" />
      <variable citdl="int" name="NO_DATA_ALLOWED_ERR" />
      <variable citdl="int" name="NO_MODIFICATION_ALLOWED_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="NamespaceErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="NoDataAllowedErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="NoModificationAllowedErr" />
      <scope classrefs="object" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Node" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="NotFoundErr" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="NotSupportedErr" />
      <variable citdl="int" name="SYNTAX_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="SyntaxErr" />
      <scope classrefs="object" doc="Class giving the operation constants for UserDataHandler.handle().&#10;" ilk="class" name="UserDataHandler" />
      <variable citdl="int" name="VALIDATION_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="ValidationErr" />
      <variable citdl="int" name="WRONG_DOCUMENT_ERR" />
      <scope classrefs="DOMException" doc="Abstract base class for DOM exceptions.&#10;Exceptions with specific codes are specializations of this class." ilk="class" name="WrongDocumentErr" />
      <variable citdl="str" name="XHTML_NAMESPACE" />
      <variable citdl="str" name="XMLNS_NAMESPACE" />
      <variable citdl="str" name="XML_NAMESPACE" />
      <import module="domreg" />
      <scope doc="Return a suitable DOM implementation." ilk="function" name="getDOMImplementation" signature="getDOMImplementation(name = None, features = ()) -&gt; DOM implementation." />
      <scope doc="Register the factory function with the name." ilk="function" name="registerDOMImplementation" signature="registerDOMImplementation(name, factory)" />
    </scope>
    <scope doc="distutils.command.install_scripts&#10;Implements the Distutils 'install_scripts' command, for installing Python scripts." ilk="blob" lang="Python3" name="distutils.command.install_scripts">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <variable citdl="int" name="ST_MODE" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="install_scripts">
        <scope ilk="function" name="get_inputs" signature="get_inputs(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <import module="log" />
      <import module="os" />
    </scope>
    <scope doc="Python unit testing framework, based on Erich Gamma's JUnit and Kent Beck's&#10;Smalltalk testing framework.  This module contains the core framework classes that form the basis of specific test cases and suites (TestCase, TestSuite etc.), and also a text-based utility class for running the tests and reporting the results (TextTestRunner).  Simple usage:  import unittest" ilk="blob" lang="Python3" name="unittest">
      <scope classrefs="object" doc="A simple test suite that doesn't provide class or module shared fixtures.&#10;" ilk="class" name="BaseTestSuite">
        <scope ilk="function" name="countTestCases" signature="countTestCases(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="addTests" signature="addTests(self, tests)" />
        <scope ilk="function" name="run" signature="run(self, result)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tests=())" />
        <scope doc="Stop holding a reference to the TestCase at index." ilk="function" name="_removeTestAtIndex" signature="_removeTestAtIndex(self, index)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope ilk="function" name="addTest" signature="addTest(self, test)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Run the tests without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
      </scope>
      <scope classrefs="TestCase" doc="A test case that wraps a test function.&#10;This is useful for slipping pre-existing test functions into the unittest framework. Optionally, set-up and tidy-up functions can be supplied. As with TestCase, the tidy-up ('tearDown') function will always be called if the set-up ('setUp') function ran successfully." ilk="class" name="FunctionTestCase">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="runTest" signature="runTest(self)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, testFunc, setUp=None, tearDown=None, description=None)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="id" signature="id(self)" />
      </scope>
      <scope classrefs="Exception" doc="Raise this exception in a test to skip it.&#10;Usually you can use TestCase.skipTest() or one of the skipping decorators instead of raising this directly." ilk="class" name="SkipTest" />
      <scope classrefs="object" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="TestCase">
        <scope ilk="function" name="assert_" signature="assert_(*args, **kwargs)" />
        <scope doc="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta." ilk="function" name="assertAlmostEqual" signature="assertAlmostEqual(self, first, second, places=None, msg=None, delta=None)" />
        <scope ilk="function" name="defaultTestResult" signature="defaultTestResult(self)" />
        <scope doc="Return a context manager that will return the enclosed block&#10;of code in a subtest identified by the optional message and&#10;keyword parameters." ilk="function" name="subTest" signature="subTest(*args, **kwds)" />
        <scope ilk="function" name="_deprecate" signature="_deprecate(original_func)" />
        <scope doc="Fail if the two objects are equal as determined by the '!='&#10;operator." ilk="function" name="assertNotEqual" signature="assertNotEqual(self, first, second, msg=None)" />
        <scope doc="Fail the test if the text matches the regular expression." ilk="function" name="assertNotRegex" signature="assertNotRegex(self, text, unexpected_regex, msg=None)" />
        <scope ilk="function" name="assertEquals" signature="assertEquals(*args, **kwargs)" />
        <scope ilk="function" name="_feedErrorsToResult" signature="_feedErrorsToResult(self, result, errors)" />
        <scope doc="Fail unless an exception of class expected_exception is&#10;raised by the callable when invoked with specified&#10;positional and keyword arguments." ilk="function" name="assertRaises" signature="assertRaises(self, expected_exception, *args, **kwargs)" />
        <scope doc="Just like self.assertTrue(a &lt; b), but with a nicer default&#10;message." ilk="function" name="assertLess" signature="assertLess(self, a, b, msg=None)" />
        <scope doc="Just like self.assertTrue(a is not b), but with a nicer&#10;default message." ilk="function" name="assertIsNot" signature="assertIsNot(self, expr1, expr2, msg=None)" />
        <scope ilk="function" name="failIf" signature="failIf(*args, **kwargs)" />
        <scope doc="Included for symmetry with assertIsNone." ilk="function" name="assertIsNotNone" signature="assertIsNotNone(self, obj, msg=None)" />
        <scope doc="Assert that two multi-line strings are equal." ilk="function" name="assertMultiLineEqual" signature="assertMultiLineEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="assertNotRegexpMatches" signature="assertNotRegexpMatches(*args, **kwargs)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Run the test without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
        <scope doc="The default assertEqual implementation, not type specific." ilk="function" name="_baseAssertEqual" signature="_baseAssertEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="countTestCases" signature="countTestCases(self)" />
        <scope doc="Fail immediately, with the given message." ilk="function" name="fail" signature="fail(self, msg=None)" />
        <scope ilk="function" name="assertNotAlmostEquals" signature="assertNotAlmostEquals(*args, **kwargs)" />
        <scope ilk="function" name="_truncateMessage" signature="_truncateMessage(self, message, diff)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
        <scope ilk="function" name="assertNotEquals" signature="assertNotEquals(*args, **kwargs)" />
        <scope doc="Asserts that the message in a triggered warning matches a&#10;regexp." ilk="function" name="assertWarnsRegex" signature="assertWarnsRegex(self, expected_warning, expected_regex, *args, **kwargs)" />
        <scope doc="Add a type specific assertEqual style function to compare a&#10;type." ilk="function" name="addTypeEqualityFunc" signature="addTypeEqualityFunc(self, typeobj, function)" />
        <scope ilk="function" name="failUnlessEqual" signature="failUnlessEqual(*args, **kwargs)" />
        <scope ilk="function" name="_addExpectedFailure" signature="_addExpectedFailure(self, result, exc_info)" />
        <scope doc="A set-specific equality assertion." ilk="function" name="assertSetEqual" signature="assertSetEqual(self, set1, set2, msg=None)" />
        <scope doc="Fail unless a log message of level *level* or higher is&#10;emitted on *logger_name* or its children." ilk="function" name="assertLogs" signature="assertLogs(self, logger=None, level=None)" />
        <scope doc="Skip this test." ilk="function" name="skipTest" signature="skipTest(self, reason)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope ilk="function" name="_addUnexpectedSuccess" signature="_addUnexpectedSuccess(self, result)" />
        <scope ilk="function" name="failUnless" signature="failUnless(*args, **kwargs)" />
        <scope doc="A tuple-specific equality assertion." ilk="function" name="assertTupleEqual" signature="assertTupleEqual(self, tuple1, tuple2, msg=None)" />
        <scope doc="Just like self.assertTrue(a &gt;= b), but with a nicer default&#10;message." ilk="function" name="assertGreaterEqual" signature="assertGreaterEqual(self, a, b, msg=None)" />
        <scope doc="Fail unless a warning of class warnClass is triggered by the&#10;callable when invoked with specified positional and keyword&#10;arguments." ilk="function" name="assertWarns" signature="assertWarns(self, expected_warning, *args, **kwargs)" />
        <scope doc="Add a function, with arguments, to be called when the test&#10;is completed." ilk="function" name="addCleanup" signature="addCleanup(self, function, *args, **kwargs)" />
        <scope ilk="function" name="failIfEqual" signature="failIfEqual(*args, **kwargs)" />
        <scope doc="Check that the expression is true." ilk="function" name="assertTrue" signature="assertTrue(self, expr, msg=None)" />
        <scope doc="Check that the expression is false." ilk="function" name="assertFalse" signature="assertFalse(self, expr, msg=None)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope ilk="function" name="failIfAlmostEqual" signature="failIfAlmostEqual(*args, **kwargs)" />
        <scope ilk="function" name="assertRaisesRegexp" signature="assertRaisesRegexp(*args, **kwargs)" />
        <scope doc="Just like self.assertTrue(a not in b), but with a nicer&#10;default message." ilk="function" name="assertNotIn" signature="assertNotIn(self, member, container, msg=None)" />
        <scope ilk="function" name="assertDictEqual" signature="assertDictEqual(self, d1, d2, msg=None)" />
        <scope doc="Hook method for setting up class fixture before running&#10;tests in the class." ilk="function" name="setUpClass" />
        <scope doc="An unordered sequence comparison asserting that the same&#10;elements, regardless of order." ilk="function" name="assertCountEqual" signature="assertCountEqual(self, first, second, msg=None)" />
        <scope doc="Fail the test unless the text matches the regular&#10;expression." ilk="function" name="assertRegex" signature="assertRegex(self, text, expected_regex, msg=None)" />
        <scope doc="Hook method for deconstructing the class fixture after&#10;running all tests in the class." ilk="function" name="tearDownClass" />
        <scope doc="Asserts that the message in a raised exception matches a&#10;regex." ilk="function" name="assertRaisesRegex" signature="assertRaisesRegex(self, expected_exception, expected_regex, *args, **kwargs)" />
        <scope doc="Execute all cleanup functions." ilk="function" name="doCleanups" signature="doCleanups(self)" />
        <scope ilk="function" name="id" signature="id(self)" />
        <scope ilk="function" name="assertRegexpMatches" signature="assertRegexpMatches(*args, **kwargs)" />
        <scope doc="Same as self.assertTrue(obj is None), with a nicer default&#10;message." ilk="function" name="assertIsNone" signature="assertIsNone(self, obj, msg=None)" />
        <scope doc="An equality assertion for ordered sequences (like lists and&#10;tuples)." ilk="function" name="assertSequenceEqual" signature="assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None)" />
        <scope doc="A list-specific equality assertion." ilk="function" name="assertListEqual" signature="assertListEqual(self, list1, list2, msg=None)" />
        <scope doc="Included for symmetry with assertIsInstance." ilk="function" name="assertNotIsInstance" signature="assertNotIsInstance(self, obj, cls, msg=None)" />
        <scope doc="Just like self.assertTrue(a in b), but with a nicer default&#10;message." ilk="function" name="assertIn" signature="assertIn(self, member, container, msg=None)" />
        <scope doc="Get a detailed comparison function for the types of the two&#10;args." ilk="function" name="_getAssertEqualityFunc" signature="_getAssertEqualityFunc(self, first, second)" />
        <scope doc="Just like self.assertTrue(a &lt;= b), but with a nicer default&#10;message." ilk="function" name="assertLessEqual" signature="assertLessEqual(self, a, b, msg=None)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Just like self.assertTrue(a is b), but with a nicer default&#10;message." ilk="function" name="assertIs" signature="assertIs(self, expr1, expr2, msg=None)" />
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, methodName='runTest')" />
        <scope ilk="function" name="failUnlessAlmostEqual" signature="failUnlessAlmostEqual(*args, **kwargs)" />
        <scope ilk="function" name="_addSkip" signature="_addSkip(self, result, test_case, reason)" />
        <scope ilk="function" name="run" signature="run(self, result=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Same as self.assertTrue(isinstance(obj, cls)), with a nicer&#10;default message." ilk="function" name="assertIsInstance" signature="assertIsInstance(self, obj, cls, msg=None)" />
        <scope doc="Checks whether dictionary is a superset of subset." ilk="function" name="assertDictContainsSubset" signature="assertDictContainsSubset(self, subset, dictionary, msg=None)" />
        <scope doc="Fail if the two objects are unequal as determined by the&#10;'==' operator." ilk="function" name="assertEqual" signature="assertEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="assertAlmostEquals" signature="assertAlmostEquals(*args, **kwargs)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
        <scope doc="Honour the longMessage attribute when generating failure&#10;messages." ilk="function" name="_formatMessage" signature="_formatMessage(self, msg, standardMsg)" />
        <scope doc="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta." ilk="function" name="assertNotAlmostEqual" signature="assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None)" />
        <scope doc="Just like self.assertTrue(a &gt; b), but with a nicer default&#10;message." ilk="function" name="assertGreater" signature="assertGreater(self, a, b, msg=None)" />
        <scope ilk="function" name="failUnlessRaises" signature="failUnlessRaises(*args, **kwargs)" />
      </scope>
      <scope classrefs="object" doc="This class is responsible for loading tests according to various criteria&#10;and returning them wrapped in a TestSuite" ilk="class" name="TestLoader">
        <scope doc="Used by discovery." ilk="function" name="_find_test_path" signature="_find_test_path(self, full_path, pattern, namespace=False)" />
        <scope doc="Return a suite of all tests cases found using the given&#10;sequence of string specifiers." ilk="function" name="loadTestsFromNames" signature="loadTestsFromNames(self, names, module=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return a sorted sequence of method names found within&#10;testCaseClass" ilk="function" name="getTestCaseNames" signature="getTestCaseNames(self, testCaseClass)" />
        <scope doc="Return a suite of all tests cases contained in testCaseClass" ilk="function" name="loadTestsFromTestCase" signature="loadTestsFromTestCase(self, testCaseClass)" />
        <scope ilk="function" name="_match_path" signature="_match_path(self, path, full_path, pattern)" />
        <scope doc="Return a suite of all tests cases given a string specifier." ilk="function" name="loadTestsFromName" signature="loadTestsFromName(self, name, module=None)" />
        <scope doc="Used by discovery. Yields test suites it loads." ilk="function" name="_find_tests" signature="_find_tests(self, start_dir, pattern, namespace=False)" />
        <scope doc="Find and return all test modules from the specified start&#10;directory, recursing into subdirectories to find them and&#10;return all tests found within them." ilk="function" name="discover" signature="discover(self, start_dir, pattern='test*.py', top_level_dir=None)" />
        <scope ilk="function" name="_get_directory_containing_module" signature="_get_directory_containing_module(self, module_name)" />
        <scope doc="Return a suite of all tests cases contained in the given&#10;module" ilk="function" name="loadTestsFromModule" signature="loadTestsFromModule(self, module, *args, pattern=None, **kws)" />
        <scope ilk="function" name="_get_module_from_name" signature="_get_module_from_name(self, name)" />
        <scope ilk="function" name="_get_name_from_path" signature="_get_name_from_path(self, path)" />
        <scope doc="Return -1 if x &lt; y, 0 if x == y and 1 if x &gt; y" ilk="function" name="sortTestMethodsUsing" signature="sortTestMethodsUsing(x, y)" />
      </scope>
      <scope classrefs="object" doc="A command-line program that runs a set of tests; this is primarily&#10;for making test modules conveniently executable." ilk="class" name="TestProgram">
        <scope ilk="function" name="_do_discovery" signature="_do_discovery(self, argv, Loader=None)" />
        <scope ilk="function" name="usageExit" signature="usageExit(self, msg=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=&lt;unittest.loader.TestLoader object at 0x7f117fe3aa58&gt;, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None, *, tb_locals=False)" />
        <scope ilk="function" name="runTests" signature="runTests(self)" />
        <scope ilk="function" name="_print_help" signature="_print_help(self, *args, **kwargs)" />
        <scope ilk="function" name="_getParentArgParser" signature="_getParentArgParser(self)" />
        <scope ilk="function" name="createTests" signature="createTests(self)" />
        <scope ilk="function" name="_initArgParsers" signature="_initArgParsers(self)" />
        <scope ilk="function" name="_getMainArgParser" signature="_getMainArgParser(self, parent)" />
        <scope ilk="function" name="parseArgs" signature="parseArgs(self, argv)" />
        <scope ilk="function" name="_getDiscoveryArgParser" signature="_getDiscoveryArgParser(self, parent)" />
      </scope>
      <scope classrefs="object" doc="Holder for test result information.&#10;Test results are automatically managed by the TestCase and TestSuite classes, and do not need to be explicitly manipulated by writers of tests.  Each instance holds the total number of tests run, and collections of failures and errors that occurred among those test runs. The collections contain tuples of (testcase, exceptioninfo), where exceptioninfo is the formatted traceback of the error that occurred." ilk="class" name="TestResult">
        <scope doc="Called once before any tests are executed." ilk="function" name="startTestRun" signature="startTestRun(self)" />
        <scope ilk="function" name="_setupStdout" signature="_setupStdout(self)" />
        <scope ilk="function" name="_restoreStdout" signature="_restoreStdout(self)" />
        <scope doc="Called by TestRunner after test run" ilk="function" name="printErrors" signature="printErrors(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream=None, descriptions=None, verbosity=None)" />
        <scope doc="Called once after all tests are executed." ilk="function" name="stopTestRun" signature="stopTestRun(self)" />
        <scope doc="Called when a test has completed successfully" ilk="function" name="addSuccess" signature="addSuccess(self, test)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addFailure" signature="addFailure(self, *args, **kw)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_is_relevant_tb_level" signature="_is_relevant_tb_level(self, tb)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addError" signature="addError(self, *args, **kw)" />
        <scope doc="Called when a test was expected to fail, but succeed." ilk="function" name="addUnexpectedSuccess" signature="addUnexpectedSuccess(self, *args, **kw)" />
        <scope doc="Indicates that the tests should be aborted." ilk="function" name="stop" signature="stop(self)" />
        <scope doc="Tells whether or not this result was a success." ilk="function" name="wasSuccessful" signature="wasSuccessful(self)" />
        <scope doc="Called when an expected failure/error occured." ilk="function" name="addExpectedFailure" signature="addExpectedFailure(self, test, err)" />
        <scope doc="Converts a sys.exc_info()-style tuple of values into a&#10;string." ilk="function" name="_exc_info_to_string" signature="_exc_info_to_string(self, err, test)" />
        <scope ilk="function" name="_count_relevant_tb_levels" signature="_count_relevant_tb_levels(self, tb)" />
        <scope doc="Called when a test is skipped." ilk="function" name="addSkip" signature="addSkip(self, test, reason)" />
        <scope doc="Called when the given test has been run" ilk="function" name="stopTest" signature="stopTest(self, test)" />
        <scope doc="Called when the given test is about to be run" ilk="function" name="startTest" signature="startTest(self, test)" />
        <scope doc="Called at the end of a subtest." ilk="function" name="addSubTest" signature="addSubTest(self, test, subtest, err)" />
      </scope>
      <scope classrefs="BaseTestSuite" doc="A test suite is a composite test consisting of a number of TestCases.&#10;For use, create an instance of TestSuite, then add test case instances. When all tests have been added, the suite can be passed to a test runner, such as TextTestRunner. It will run the individual test cases in the order in which they were added, aggregating the results. When subclassing, do not forget to call the base class constructor." ilk="class" name="TestSuite">
        <scope ilk="function" name="_tearDownPreviousClass" signature="_tearDownPreviousClass(self, test, result)" />
        <scope ilk="function" name="_handleClassSetUp" signature="_handleClassSetUp(self, test, result)" />
        <scope ilk="function" name="run" signature="run(self, result, debug=False)" />
        <scope ilk="function" name="_handleModuleTearDown" signature="_handleModuleTearDown(self, result)" />
        <scope ilk="function" name="_get_previous_module" signature="_get_previous_module(self, result)" />
        <scope ilk="function" name="_handleModuleFixture" signature="_handleModuleFixture(self, test, result)" />
        <scope doc="Run the tests without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
        <scope ilk="function" name="_addClassOrModuleLevelException" signature="_addClassOrModuleLevelException(self, result, exception, errorName)" />
      </scope>
      <scope classrefs="TestResult" doc="A test result class that can print formatted text results to a stream.&#10;Used by TextTestRunner." ilk="class" name="TextTestResult">
        <scope ilk="function" name="printErrorList" signature="printErrorList(self, flavour, errors)" />
        <scope ilk="function" name="getDescription" signature="getDescription(self, test)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream, descriptions, verbosity)" />
        <scope doc="Called when a test has completed successfully" ilk="function" name="addSuccess" signature="addSuccess(self, test)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addFailure" signature="addFailure(self, test, err)" />
        <scope doc="Called by TestRunner after test run" ilk="function" name="printErrors" signature="printErrors(self)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addError" signature="addError(self, test, err)" />
        <scope doc="Called when a test was expected to fail, but succeed." ilk="function" name="addUnexpectedSuccess" signature="addUnexpectedSuccess(self, test)" />
        <scope doc="Called when an expected failure/error occured." ilk="function" name="addExpectedFailure" signature="addExpectedFailure(self, test, err)" />
        <scope doc="Called when the given test is about to be run" ilk="function" name="startTest" signature="startTest(self, test)" />
        <scope doc="Called when a test is skipped." ilk="function" name="addSkip" signature="addSkip(self, test, reason)" />
      </scope>
      <scope classrefs="object" doc="A test runner class that displays results in textual form.&#10;It prints out the names of tests as they are run, errors as they occur, and a summary of the results at the end of the test run." ilk="class" name="TextTestRunner">
        <scope doc="Construct a TextTestRunner." ilk="function" name="__init__" signature="__init__(self, stream=None, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False)" />
        <scope ilk="function" name="_makeResult" signature="_makeResult(self)" />
        <scope doc="Run the given test case or test suite." ilk="function" name="run" signature="run(self, test)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="case" />
      <variable citdl="TestLoader" name="defaultTestLoader" />
      <scope ilk="function" name="expectedFailure" signature="expectedFailure(test_item)" />
      <scope ilk="function" name="findTestCases" signature="findTestCases(module, prefix='test', sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;, suiteClass=&lt;class 'unittest.suite.TestSuite'&gt;)" />
      <scope ilk="function" name="getTestCaseNames" signature="getTestCaseNames(testCaseClass, prefix, sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;)" />
      <scope ilk="function" name="installHandler" signature="installHandler()" />
      <scope doc="# There are no tests here, so don't try to run anything&#10;discovered from # introspecting the symbols (e.g." ilk="function" name="load_tests" signature="load_tests(loader, tests, pattern)" />
      <import module="loader" />
      <scope classrefs="object" doc="A command-line program that runs a set of tests; this is primarily&#10;for making test modules conveniently executable." ilk="class" name="main">
        <scope ilk="function" name="_do_discovery" signature="_do_discovery(self, argv, Loader=None)" />
        <scope ilk="function" name="usageExit" signature="usageExit(self, msg=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=&lt;unittest.loader.TestLoader object at 0x7f117fe3aa58&gt;, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None, *, tb_locals=False)" />
        <scope ilk="function" name="runTests" signature="runTests(self)" />
        <scope ilk="function" name="_print_help" signature="_print_help(self, *args, **kwargs)" />
        <scope ilk="function" name="_getParentArgParser" signature="_getParentArgParser(self)" />
        <scope ilk="function" name="createTests" signature="createTests(self)" />
        <scope ilk="function" name="_initArgParsers" signature="_initArgParsers(self)" />
        <scope ilk="function" name="_getMainArgParser" signature="_getMainArgParser(self, parent)" />
        <scope ilk="function" name="parseArgs" signature="parseArgs(self, argv)" />
        <scope ilk="function" name="_getDiscoveryArgParser" signature="_getDiscoveryArgParser(self, parent)" />
      </scope>
      <scope ilk="function" name="makeSuite" signature="makeSuite(testCaseClass, prefix='test', sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;, suiteClass=&lt;class 'unittest.suite.TestSuite'&gt;)" />
      <import module="mock" />
      <scope ilk="function" name="registerResult" signature="registerResult(result)" />
      <scope ilk="function" name="removeHandler" signature="removeHandler(method=None)" />
      <scope ilk="function" name="removeResult" signature="removeResult(result)" />
      <import module="result" />
      <import module="runner" />
      <import module="signals" />
      <scope doc="Unconditionally skip a test." ilk="function" name="skip" signature="skip(reason)" />
      <scope doc="Skip a test if the condition is true." ilk="function" name="skipIf" signature="skipIf(condition, reason)" />
      <scope doc="Skip a test unless the condition is true." ilk="function" name="skipUnless" signature="skipUnless(condition, reason)" />
      <import module="suite" />
      <import module="util" />
    </scope>
    <scope doc="Fast implementation of the datetime type.&#10;" ilk="blob" lang="Python3" name="datetime">
      <variable citdl="int" name="MAXYEAR" />
      <variable citdl="int" name="MINYEAR" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object&#10;" ilk="class" name="date">
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return a 3-tuple containing ISO year, week number, and&#10;weekday." ilk="function" name="isocalendar" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="weekday" />
        <scope doc="Return date with new specified fields." ilk="function" name="replace" />
        <scope doc="Return proleptic Gregorian ordinal." ilk="function" name="toordinal" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="isoweekday" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, YYYY-MM-DD." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="datetime">
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Return time object with same time but with tzinfo=None." ilk="function" name="time" />
        <scope doc="Return UTC time tuple, compatible with time.localtime()." ilk="function" name="utctimetuple" />
        <scope doc="tz -&gt; convert to local time in new timezone tz" ilk="function" name="astimezone" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return POSIX timestamp as float." ilk="function" name="timestamp" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return date object with same year, month and day." ilk="function" name="date" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return datetime with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return time object with same time and tzinfo." ilk="function" name="timetz" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="[sep] -&gt; string in ISO 8601 format, YYYY-MM-&#10;DDTHH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <variable citdl="PyCapsule" name="datetime_CAPI" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object&#10;All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="time">
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return time with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="object" doc="Difference between two datetime values.&#10;" ilk="class" name="timedelta">
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Total seconds in the duration." ilk="function" name="total_seconds" />
      </scope>
      <scope classrefs="tzinfo" doc="Fixed offset from UTC implementation of tzinfo.&#10;" ilk="class" name="timezone">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="If name is specified when timezone is created, returns the&#10;name." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return fixed offset." ilk="function" name="utcoffset" />
        <scope doc="datetime in UTC -&gt; datetime in local time." ilk="function" name="fromutc" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return None." ilk="function" name="dst" />
        <scope doc="pickle support" ilk="function" name="__getinitargs__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for time zone info objects.&#10;" ilk="class" name="tzinfo">
        <scope doc="datetime -&gt; timedelta showing offset from UTC, negative&#10;values indicating West of UTC" ilk="function" name="utcoffset" />
        <scope doc="datetime in UTC -&gt; datetime in local time." ilk="function" name="fromutc" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="datetime -&gt; string name of time zone." ilk="function" name="tzname" />
        <scope doc="datetime -&gt; DST offset in minutes east of UTC." ilk="function" name="dst" />
        <scope doc="-&gt; (cls, state)" ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Fixer that changes filter(F, X) into list(filter(F, X)).&#10;We avoid the transformation if the filter() call is directly contained in iter(&lt;&gt;), list(&lt;&gt;), tuple(&lt;&gt;), sorted(&lt;&gt;), ...join(&lt;&gt;), or for V in &lt;&gt;:.  NOTE: This is still not correct if the original code was depending on filter(F, X) to return a string if X is a string and a tuple if X is a tuple.  That would require type inference, which we don't do.  Let Python 2.6 figure it out." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_filter">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" doc="Base class for fixers which not execute if an import is found.&#10;" ilk="class" name="FixFilter">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" name="ListComp" signature="ListComp(xp, fp, it, test=None)" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is&#10;required of it is being iterable (ie, it doesn't matter if&#10;it returns a list or an iterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
      <import module="token" />
    </scope>
    <scope doc="distutils.command.build_ext&#10;Implements the Distutils 'build_ext' command, for building extension modules (currently limited to C extensions, should accommodate C++ extensions ASAP)." ilk="blob" lang="Python3" name="distutils.command.build_ext">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension&#10;module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need).  Instance attributes: name : string the full name of the extension, including any packages -- ie. *not* a filename or pathname, but Python dotted name sources : [string] list of source filenames, relative to the distribution root (where the setup script lives), in Unix form (slash-separated)" ilk="class" name="Extension">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, optional=None, **kw)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <variable citdl="str" name="USER_BASE" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_ext">
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Returns the fullname of a given extension name." ilk="function" name="get_ext_fullname" signature="get_ext_fullname(self, ext_name)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Returns the path of the filename for a given extension." ilk="function" name="get_ext_fullpath" signature="get_ext_fullpath(self, ext_name)" />
        <scope ilk="function" name="_build_extensions_serial" signature="_build_extensions_serial(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="get_source_files" signature="get_source_files(self)" />
        <scope doc="Walk the list of source files in 'sources', looking for SWIG&#10;interface (.i) files." ilk="function" name="swig_sources" signature="swig_sources(self, sources, extension)" />
        <scope doc="Return the name of the SWIG executable." ilk="function" name="find_swig" signature="find_swig(self)" />
        <scope ilk="function" name="build_extensions" signature="build_extensions(self)" />
        <scope doc="Return the list of symbols that a shared extension has to&#10;export." ilk="function" name="get_export_symbols" signature="get_export_symbols(self, ext)" />
        <scope doc="Return the list of libraries to link against when building a&#10;shared extension." ilk="function" name="get_libraries" signature="get_libraries(self, ext)" />
        <scope doc="Ensure that the list of extensions (presumably provided as a&#10;command option 'extensions') is valid, i.e." ilk="function" name="check_extensions_list" signature="check_extensions_list(self, extensions)" />
        <scope ilk="function" name="_build_extensions_parallel" signature="_build_extensions_parallel(self)" />
        <scope ilk="function" name="_filter_build_errors" signature="_filter_build_errors(*args, **kwds)" />
        <scope ilk="function" name="build_extension" signature="build_extension(self, ext)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Convert the name of an extension (eg." ilk="function" name="get_ext_filename" signature="get_ext_filename(self, ext_name)" />
      </scope>
      <import module="contextlib" />
      <scope doc="Do any platform-specific customization of a CCompiler&#10;instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <variable citdl="SRE_Pattern" name="extension_name_re" />
      <scope doc="Return full pathname of installed pyconfig.h file." ilk="function" name="get_config_h_filename" signature="get_config_h_filename()" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python&#10;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <scope doc="Return true if 'target' is out-of-date with respect to any&#10;file listed in 'sources'." ilk="function" name="newer_group" signature="newer_group(sources, target, missing='error')" />
      <import module="os" />
      <import module="re" />
      <scope ilk="function" name="show_compilers" signature="show_compilers()" />
      <import module="sys" />
    </scope>
    <scope doc="An extensible library for opening URLs using a variety of protocols&#10;The simplest way to use this module is to call the urlopen function, which accepts a string containing a URL or a Request object (described below).  It opens the URL and returns the results as file-like object; the returned object has some extra methods described below.  The OpenerDirector manages a collection of Handler objects that do all the actual work.  Each Handler implements a particular protocol or option.  The OpenerDirector is a composite object that invokes the Handlers needed to open the requested URL.  For example, the HTTPHandler performs HTTP GET and POST requests and deals with" ilk="blob" lang="Python3" name="urllib.request">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AbstractBasicAuthHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, password_mgr=None)" />
        <scope ilk="function" name="http_response" signature="http_response(self, req, response)" />
        <scope ilk="function" name="https_request" signature="https_request(self, req)" />
        <scope ilk="function" name="http_error_auth_reqed" signature="http_error_auth_reqed(self, authreq, host, req, headers)" />
        <scope ilk="function" name="https_response" signature="https_response(self, req, response)" />
        <scope ilk="function" name="retry_http_basic_auth" signature="retry_http_basic_auth(self, host, req, realm)" />
        <scope ilk="function" name="http_request" signature="http_request(self, req)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="AbstractDigestAuthHandler">
        <scope ilk="function" name="get_authorization" signature="get_authorization(self, req, chal)" />
        <scope ilk="function" name="get_algorithm_impls" signature="get_algorithm_impls(self, algorithm)" />
        <scope ilk="function" name="http_error_auth_reqed" signature="http_error_auth_reqed(self, auth_header, host, req, headers)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, passwd=None)" />
        <scope ilk="function" name="retry_http_digest_auth" signature="retry_http_digest_auth(self, req, auth)" />
        <scope ilk="function" name="get_entity_digest" signature="get_entity_digest(self, data, chal)" />
        <scope ilk="function" name="reset_retry_count" signature="reset_retry_count(self)" />
        <scope ilk="function" name="get_cnonce" signature="get_cnonce(self, nonce)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="AbstractHTTPHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, debuglevel=0)" />
        <scope ilk="function" name="set_http_debuglevel" signature="set_http_debuglevel(self, level)" />
        <scope doc="Return an HTTPResponse object for the request, using&#10;http_class." ilk="function" name="do_open" signature="do_open(self, http_class, req, **http_conn_args)" />
        <scope ilk="function" name="do_request_" signature="do_request_(self, request)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="BaseHandler">
        <scope ilk="function" name="add_parent" signature="add_parent(self, parent)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
      </scope>
      <scope classrefs="FTPHandler" doc="&#10;" ilk="class" name="CacheFTPHandler">
        <scope ilk="function" name="setTimeout" signature="setTimeout(self, t)" />
        <scope ilk="function" name="connect_ftp" signature="connect_ftp(self, user, passwd, host, port, dirs, timeout)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="setMaxConns" signature="setMaxConns(self, m)" />
        <scope ilk="function" name="check_cache" signature="check_cache(self)" />
        <scope ilk="function" name="clear_cache" signature="clear_cache(self)" />
      </scope>
      <scope classrefs="URLError" doc="Exception raised when downloaded size does not match content-length.&#10;" ilk="class" name="ContentTooShortError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, message, content)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="DataHandler">
        <scope ilk="function" name="data_open" signature="data_open(self, req)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="FTPHandler">
        <scope ilk="function" name="connect_ftp" signature="connect_ftp(self, user, passwd, host, port, dirs, timeout)" />
        <scope ilk="function" name="ftp_open" signature="ftp_open(self, req)" />
      </scope>
      <scope classrefs="URLopener" doc="Derived class with handlers for errors we can handle (perhaps).&#10;" ilk="class" name="FancyURLopener">
        <scope doc="Error 401 -- authentication required." ilk="function" name="http_error_401" signature="http_error_401(self, url, fp, errcode, errmsg, headers, data=None, retry=False)" />
        <scope doc="Override this in a GUI environment!" ilk="function" name="prompt_user_passwd" signature="prompt_user_passwd(self, host, realm)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
        <scope ilk="function" name="retry_proxy_http_basic_auth" signature="retry_proxy_http_basic_auth(self, url, realm, data=None)" />
        <scope ilk="function" name="retry_http_basic_auth" signature="retry_http_basic_auth(self, url, realm, data=None)" />
        <scope ilk="function" name="redirect_internal" signature="redirect_internal(self, url, fp, errcode, errmsg, headers, data)" />
        <scope ilk="function" name="get_user_passwd" signature="get_user_passwd(self, host, realm, clear_cache=0)" />
        <scope doc="Error 307 -- relocated, but turn POST into error." ilk="function" name="http_error_307" signature="http_error_307(self, url, fp, errcode, errmsg, headers, data=None)" />
        <scope doc="Error 302 -- relocated (temporarily)." ilk="function" name="http_error_302" signature="http_error_302(self, url, fp, errcode, errmsg, headers, data=None)" />
        <scope doc="Error 303 -- also relocated (essentially identical to 302)." ilk="function" name="http_error_303" signature="http_error_303(self, url, fp, errcode, errmsg, headers, data=None)" />
        <scope ilk="function" name="retry_proxy_https_basic_auth" signature="retry_proxy_https_basic_auth(self, url, realm, data=None)" />
        <scope doc="Error 407 -- proxy authentication required." ilk="function" name="http_error_407" signature="http_error_407(self, url, fp, errcode, errmsg, headers, data=None, retry=False)" />
        <scope ilk="function" name="retry_https_basic_auth" signature="retry_https_basic_auth(self, url, realm, data=None)" />
        <scope doc="Default error handling -- don't raise an exception." ilk="function" name="http_error_default" signature="http_error_default(self, url, fp, errcode, errmsg, headers)" />
        <scope doc="Error 301 -- also relocated (permanently)." ilk="function" name="http_error_301" signature="http_error_301(self, url, fp, errcode, errmsg, headers, data=None)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="FileHandler">
        <scope ilk="function" name="get_names" signature="get_names(self)" />
        <scope doc="# not entirely sure what the rules are here" ilk="function" name="open_local_file" signature="open_local_file(self, req)" />
        <scope doc="# Use local file or FTP depending on form of URL" ilk="function" name="file_open" signature="file_open(self, req)" />
      </scope>
      <scope classrefs="AbstractBasicAuthHandler BaseHandler" doc="&#10;" ilk="class" name="HTTPBasicAuthHandler">
        <scope ilk="function" name="http_error_401" signature="http_error_401(self, req, fp, code, msg, headers)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="HTTPCookieProcessor">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, cookiejar=None)" />
        <scope ilk="function" name="https_request" signature="https_request(self, request)" />
        <scope ilk="function" name="http_response" signature="http_response(self, request, response)" />
        <scope ilk="function" name="http_request" signature="http_request(self, request)" />
        <scope ilk="function" name="https_response" signature="https_response(self, request, response)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="HTTPDefaultErrorHandler">
        <scope ilk="function" name="http_error_default" signature="http_error_default(self, req, fp, code, msg, hdrs)" />
      </scope>
      <scope classrefs="BaseHandler AbstractDigestAuthHandler" doc="An authentication protocol defined by RFC 2069&#10;Digest authentication improves on basic authentication because it does not transmit passwords in the clear." ilk="class" name="HTTPDigestAuthHandler">
        <scope ilk="function" name="http_error_401" signature="http_error_401(self, req, fp, code, msg, headers)" />
      </scope>
      <scope classrefs="URLError addinfourl" doc="Raised when HTTP error occurs, but also acts like non-error return&#10;" ilk="class" name="HTTPError">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="_HTTPError__super_init" signature="_HTTPError__super_init(self, fp, headers, url, code=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, code, msg, hdrs, fp)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="BaseHandler" doc="Process HTTP error responses.&#10;" ilk="class" name="HTTPErrorProcessor">
        <scope ilk="function" name="http_response" signature="http_response(self, request, response)" />
        <scope ilk="function" name="https_response" signature="https_response(self, request, response)" />
      </scope>
      <scope classrefs="AbstractHTTPHandler" doc="&#10;" ilk="class" name="HTTPHandler">
        <scope ilk="function" name="http_open" signature="http_open(self, req)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="HTTPPasswordMgr">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="add_password" signature="add_password(self, realm, uri, user, passwd)" />
        <scope doc="Accept authority or URI and extract only the authority and&#10;path." ilk="function" name="reduce_uri" signature="reduce_uri(self, uri, default_port=True)" />
        <scope ilk="function" name="find_user_password" signature="find_user_password(self, realm, authuri)" />
        <scope doc="Check if test is below base in a URI tree" ilk="function" name="is_suburi" signature="is_suburi(self, base, test)" />
      </scope>
      <scope classrefs="HTTPPasswordMgr" doc="&#10;" ilk="class" name="HTTPPasswordMgrWithDefaultRealm">
        <scope ilk="function" name="find_user_password" signature="find_user_password(self, realm, authuri)" />
      </scope>
      <scope classrefs="HTTPPasswordMgrWithDefaultRealm" doc="&#10;" ilk="class" name="HTTPPasswordMgrWithPriorAuth">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
        <scope ilk="function" name="add_password" signature="add_password(self, realm, uri, user, passwd, is_authenticated=False)" />
        <scope ilk="function" name="update_authenticated" signature="update_authenticated(self, uri, is_authenticated=False)" />
        <scope ilk="function" name="is_authenticated" signature="is_authenticated(self, authuri)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="HTTPRedirectHandler">
        <scope doc="# Implementation note: To avoid the server sending us into&#10;an # infinite loop, the request object needs to track what&#10;URLs we # have already seen." ilk="function" name="http_error_303" signature="http_error_303(self, req, fp, code, msg, headers)" />
        <scope doc="Return a Request or None in response to a redirect." ilk="function" name="redirect_request" signature="redirect_request(self, req, fp, code, msg, headers, newurl)" />
        <scope doc="# Implementation note: To avoid the server sending us into&#10;an # infinite loop, the request object needs to track what&#10;URLs we # have already seen." ilk="function" name="http_error_301" signature="http_error_301(self, req, fp, code, msg, headers)" />
        <scope doc="# Implementation note: To avoid the server sending us into&#10;an # infinite loop, the request object needs to track what&#10;URLs we # have already seen." ilk="function" name="http_error_307" signature="http_error_307(self, req, fp, code, msg, headers)" />
        <scope doc="# Implementation note: To avoid the server sending us into&#10;an # infinite loop, the request object needs to track what&#10;URLs we # have already seen." ilk="function" name="http_error_302" signature="http_error_302(self, req, fp, code, msg, headers)" />
      </scope>
      <scope classrefs="AbstractHTTPHandler" doc="&#10;" ilk="class" name="HTTPSHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, debuglevel=0, context=None, check_hostname=None)" />
        <scope ilk="function" name="https_open" signature="https_open(self, req)" />
      </scope>
      <variable citdl="int" name="MAXFTPCACHE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="OpenerDirector">
        <scope ilk="function" name="add_handler" signature="add_handler(self, handler)" />
        <scope ilk="function" name="open" signature="open(self, fullurl, data=None, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_call_chain" signature="_call_chain(self, chain, kind, meth_name, *args)" />
        <scope ilk="function" name="_open" signature="_open(self, req, data=None)" />
        <scope ilk="function" name="error" signature="error(self, proto, *args)" />
      </scope>
      <scope classrefs="AbstractBasicAuthHandler BaseHandler" doc="&#10;" ilk="class" name="ProxyBasicAuthHandler">
        <scope ilk="function" name="http_error_407" signature="http_error_407(self, req, fp, code, msg, headers)" />
      </scope>
      <scope classrefs="BaseHandler AbstractDigestAuthHandler" doc="&#10;" ilk="class" name="ProxyDigestAuthHandler">
        <scope ilk="function" name="http_error_407" signature="http_error_407(self, req, fp, code, msg, headers)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="ProxyHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, proxies=None)" />
        <scope ilk="function" name="proxy_open" signature="proxy_open(self, req, proxy, type)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Request">
        <scope ilk="function" name="get_full_url" signature="get_full_url(self)" />
        <scope ilk="function" name="add_header" signature="add_header(self, key, val)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)" />
        <scope ilk="function" name="set_proxy" signature="set_proxy(self, host, type)" />
        <scope ilk="function" name="add_unredirected_header" signature="add_unredirected_header(self, key, val)" />
        <scope ilk="function" name="remove_header" signature="remove_header(self, header_name)" />
        <scope doc="Return a string indicating the HTTP request method." ilk="function" name="get_method" signature="get_method(self)" />
        <scope ilk="function" name="get_header" signature="get_header(self, header_name, default=None)" />
        <scope ilk="function" name="_parse" signature="_parse(self)" />
        <scope ilk="function" name="header_items" signature="header_items(self)" />
        <scope ilk="function" name="has_proxy" signature="has_proxy(self)" />
        <scope ilk="function" name="has_header" signature="has_header(self, header_name)" />
      </scope>
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="URLError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, reason, filename=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Class to open URLs.&#10;This is a class rather than just a subroutine because we may need more than one set of global protocol-specific options. Note -- this is a base class for those who don't want the automatic handling of errors type 302 (relocated) and 401 (authorization needed)." ilk="class" name="URLopener">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Overridable interface to open unknown URL type." ilk="function" name="open_unknown_proxy" signature="open_unknown_proxy(self, proxy, fullurl, data=None)" />
        <scope doc="Handle http errors." ilk="function" name="http_error" signature="http_error(self, url, fp, errcode, errmsg, headers, data=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, proxies=None, **x509)" />
        <scope doc="Use FTP protocol." ilk="function" name="open_ftp" signature="open_ftp(self, url)" />
        <scope doc="Use local file." ilk="function" name="open_local_file" signature="open_local_file(self, url)" />
        <scope ilk="function" name="cleanup" signature="cleanup(self)" />
        <scope doc="Overridable interface to open unknown URL type." ilk="function" name="open_unknown" signature="open_unknown(self, fullurl, data=None)" />
        <scope doc="Use HTTPS protocol." ilk="function" name="open_https" signature="open_https(self, url, data=None)" />
        <scope doc="Use HTTP protocol." ilk="function" name="open_http" signature="open_http(self, url, data=None)" />
        <scope doc="Use &quot;data&quot; URL." ilk="function" name="open_data" signature="open_data(self, url, data=None)" />
        <scope doc="Use URLopener().open(file) instead of open(file, 'r')." ilk="function" name="open" signature="open(self, fullurl, data=None)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Use local file or FTP depending on form of URL." ilk="function" name="open_file" signature="open_file(self, url)" />
        <scope doc="retrieve(url) returns (filename, headers) for a local object&#10;or (tempfilename, headers) for a remote object." ilk="function" name="retrieve" signature="retrieve(url) returns (filename, headers) for a local object&#10;or (tempfilename, headers) for a remote object." />
        <scope doc="Add a header to be used by the HTTP interface only e.g." ilk="function" name="addheader" signature="addheader(self, *args)" />
        <scope doc="Default error handler: close the connection and raise&#10;OSError." ilk="function" name="http_error_default" signature="http_error_default(self, url, fp, errcode, errmsg, headers)" />
        <scope ilk="function" name="_https_connection" signature="_https_connection(self, host)" />
        <scope doc="Make an HTTP connection using connection_class." ilk="function" name="_open_generic_http" signature="_open_generic_http(self, connection_factory, url, data)" />
      </scope>
      <scope classrefs="BaseHandler" doc="&#10;" ilk="class" name="UnknownHandler">
        <scope ilk="function" name="unknown_open" signature="unknown_open(self, req)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="addbase" doc="Class to add a close hook to an open file.&#10;" ilk="class" name="addclosehook">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, closehook, *hookargs)" />
        <scope doc="Close the temporary file, possibly deleting it." ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="addinfo" doc="class to add info() and geturl() methods to an open file.&#10;" ilk="class" name="addinfourl">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, headers, url, code=None)" />
        <scope ilk="function" name="getcode" signature="getcode(self)" />
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <import module="base64" />
      <import module="bisect" />
      <scope doc="Create an opener object from a list of handlers." ilk="function" name="build_opener" signature="build_opener(*handlers)" />
      <import module="collections" />
      <import module="contextlib" />
      <import module="email" />
      <variable citdl="dict" name="ftpcache" />
      <scope doc="Return the set of errors raised by the FTP class." ilk="function" name="ftperrors" signature="ftperrors()" />
      <scope classrefs="object" doc="Class used by open_ftp() for cache of open FTP connections.&#10;" ilk="class" name="ftpwrapper">
        <scope ilk="function" name="retrfile" signature="retrfile(self, file, type)" />
        <scope ilk="function" name="init" signature="init(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="file_close" signature="file_close(self)" />
        <scope ilk="function" name="real_close" signature="real_close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, user, passwd, host, port, dirs, timeout=None, persistent=True)" />
        <scope ilk="function" name="endtransfer" signature="endtransfer(self)" />
      </scope>
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" name="getproxies" signature="getproxies()" />
      <scope doc="Return a dictionary of scheme -&gt; proxy server URL mappings." ilk="function" name="getproxies_environment" signature="getproxies_environment()" />
      <import module="hashlib" />
      <import module="http" />
      <scope ilk="function" name="install_opener" signature="install_opener(opener)" />
      <import module="io" />
      <scope doc="Return the IP address of the magic hostname 'localhost'." ilk="function" name="localhost" signature="localhost()" />
      <scope doc="Return an empty email Message object." ilk="function" name="noheaders" signature="noheaders()" />
      <import module="os" />
      <scope doc="Parse lists as described by RFC 2068 Section 2." ilk="function" name="parse_http_list" signature="parse_http_list(s)" />
      <scope doc="Parse list of key=value strings where keys are not&#10;duplicated." ilk="function" name="parse_keqv_list" signature="parse_keqv_list(l)" />
      <scope doc="OS-specific conversion from a file system path to a relative&#10;URL of the 'file' scheme; not recommended for general use." ilk="function" name="pathname2url" signature="pathname2url(pathname)" />
      <import module="posixpath" />
      <scope doc="Test if proxies should not be used for a particular host." ilk="function" name="proxy_bypass" signature="proxy_bypass(host)" />
      <scope doc="Test if proxies should not be used for a particular host." ilk="function" name="proxy_bypass_environment" signature="proxy_bypass_environment(host)" />
      <scope doc="Each part of a URL, e.g." ilk="function" name="quote" signature="quote('abc def') -&gt; 'abc%20def'" />
      <import module="re" />
      <scope doc="Return request-host, as defined by RFC 2965." ilk="function" name="request_host" signature="request_host(request)" />
      <import module="socket" />
      <scope doc="'/path', ['attr1=value1', 'attr2=value2', ...]." ilk="function" name="splitattr" signature="splitattr('/path;attr1=value1;attr2=value2;...') -&gt;" />
      <scope doc="splithost('//host[:port]/path') --&gt; 'host[:port]', '/path'." ilk="function" name="splithost" signature="splithost('//host[:port]/path') --&gt; 'host[:port]', '/path'." />
      <scope doc="splitpasswd('user:passwd') -&gt; 'user', 'passwd'." ilk="function" name="splitpasswd" signature="splitpasswd('user:passwd') -&gt; 'user', 'passwd'." />
      <scope doc="splitport('host:port') --&gt; 'host', 'port'." ilk="function" name="splitport" signature="splitport('host:port') --&gt; 'host', 'port'." />
      <scope doc="splitquery('/path?query') --&gt; '/path', 'query'." ilk="function" name="splitquery" signature="splitquery('/path?query') --&gt; '/path', 'query'." />
      <scope doc="splittag('/path#tag') --&gt; '/path', 'tag'." ilk="function" name="splittag" signature="splittag('/path#tag') --&gt; '/path', 'tag'." />
      <scope doc="splittype('type:opaquestring') --&gt; 'type', 'opaquestring'." ilk="function" name="splittype" signature="splittype('type:opaquestring') --&gt; 'type', 'opaquestring'." />
      <scope doc="splituser('user[:passwd]@host[:port]') --&gt; 'user[:passwd]', 'host[:port]'." ilk="function" name="splituser" signature="splituser('user[:passwd]@host[:port]') --&gt; 'user[:passwd]', 'host[:port]'." />
      <scope doc="splitvalue('attr=value') --&gt; 'attr', 'value'." ilk="function" name="splitvalue" signature="splitvalue('attr=value') --&gt; 'attr', 'value'." />
      <import module="ssl" />
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Return the IP addresses of the current host." ilk="function" name="thishost" signature="thishost()" />
      <import module="time" />
      <scope doc="to_bytes(u&quot;URL&quot;) --&gt; 'URL'." ilk="function" name="to_bytes" signature="to_bytes(u&quot;URL&quot;) --&gt; 'URL'." />
      <scope doc="Replace %xx escapes by their single-character equivalent." ilk="function" name="unquote" signature="unquote(string, encoding='utf-8', errors='replace')" />
      <scope doc="unquote_to_bytes('abc%20def') -&gt; b'abc def'." ilk="function" name="unquote_to_bytes" signature="unquote_to_bytes('abc%20def') -&gt; b'abc def'." />
      <scope doc="unwrap('&lt;URL:type://host/path&gt;') --&gt; 'type://host/path'." ilk="function" name="unwrap" signature="unwrap('&lt;URL:type://host/path&gt;') --&gt; 'type://host/path'." />
      <scope doc="OS-specific conversion from a relative URL of the 'file'&#10;scheme to a file system path; not recommended for general&#10;use." ilk="function" name="url2pathname" signature="url2pathname(pathname)" />
      <scope doc="Clean up temporary files from urlretrieve calls." ilk="function" name="urlcleanup" signature="urlcleanup()" />
      <scope doc="Join a base URL and a possibly relative URL to form an&#10;absolute interpretation of the latter." ilk="function" name="urljoin" signature="urljoin(base, url, allow_fragments=True)" />
      <scope ilk="function" name="urlopen" signature="urlopen(url, data=None, timeout=&lt;object object at 0x7f11880dc170&gt;, *, cafile=None, capath=None, cadefault=False, context=None)" />
      <scope doc="Parse a URL into 6 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt;&#10;Return a 6-tuple: (scheme, netloc, path, params, query,&#10;fragment)." ilk="function" name="urlparse" signature="urlparse(url, scheme='', allow_fragments=True)" />
      <scope doc="Retrieve a URL into a temporary location on disk." ilk="function" name="urlretrieve" signature="urlretrieve(url, filename=None, reporthook=None, data=None)" />
      <scope doc="Parse a URL into 5 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a&#10;5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme='', allow_fragments=True)" />
      <scope doc="Put a parsed URL back together again." ilk="function" name="urlunparse" signature="urlunparse(components)" />
      <import module="warnings" />
    </scope>
    <scope doc="A simple log mechanism styled after PEP 282.&#10;" ilk="blob" lang="Python3" name="distutils.log">
      <variable citdl="int" name="DEBUG" />
      <variable citdl="int" name="ERROR" />
      <variable citdl="int" name="FATAL" />
      <variable citdl="int" name="INFO" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Log">
        <scope ilk="function" name="log" signature="log(self, level, msg, *args)" />
        <scope ilk="function" name="warn" signature="warn(self, msg, *args)" />
        <scope ilk="function" name="info" signature="info(self, msg, *args)" />
        <scope ilk="function" name="fatal" signature="fatal(self, msg, *args)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, threshold=3)" />
        <scope ilk="function" name="_log" signature="_log(self, level, msg, args)" />
        <scope ilk="function" name="error" signature="error(self, msg, *args)" />
        <scope ilk="function" name="debug" signature="debug(self, msg, *args)" />
      </scope>
      <variable citdl="int" name="WARN" />
      <scope ilk="function" name="debug" />
      <scope ilk="function" name="error" />
      <scope ilk="function" name="fatal" />
      <scope ilk="function" name="info" />
      <scope ilk="function" name="log" />
      <scope ilk="function" name="set_threshold" signature="set_threshold(level)" />
      <scope ilk="function" name="set_verbosity" signature="set_verbosity(v)" />
      <import module="sys" />
      <scope ilk="function" name="warn" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="urllib">
      <import module="error" />
      <import module="parse" />
      <import module="request" />
      <import module="response" />
    </scope>
    <scope doc="Locale support.&#10;The module provides low-level access to the C lib's locale APIs and adds high level number formatting APIs as well as a locale aliasing engine to complement these.  The aliasing engine includes support for many commonly used locale names and maps them to values suitable for passing to the C lib's setlocale() function. It also includes default encodings for all supported locale names." ilk="blob" lang="Python3" name="locale">
      <variable citdl="int" name="ABDAY_1" />
      <variable citdl="int" name="ABDAY_2" />
      <variable citdl="int" name="ABDAY_3" />
      <variable citdl="int" name="ABDAY_4" />
      <variable citdl="int" name="ABDAY_5" />
      <variable citdl="int" name="ABDAY_6" />
      <variable citdl="int" name="ABDAY_7" />
      <variable citdl="int" name="ABMON_1" />
      <variable citdl="int" name="ABMON_10" />
      <variable citdl="int" name="ABMON_11" />
      <variable citdl="int" name="ABMON_12" />
      <variable citdl="int" name="ABMON_2" />
      <variable citdl="int" name="ABMON_3" />
      <variable citdl="int" name="ABMON_4" />
      <variable citdl="int" name="ABMON_5" />
      <variable citdl="int" name="ABMON_6" />
      <variable citdl="int" name="ABMON_7" />
      <variable citdl="int" name="ABMON_8" />
      <variable citdl="int" name="ABMON_9" />
      <variable citdl="int" name="ALT_DIGITS" />
      <variable citdl="int" name="AM_STR" />
      <variable citdl="int" name="CHAR_MAX" />
      <variable citdl="int" name="CODESET" />
      <variable citdl="int" name="CRNCYSTR" />
      <variable citdl="int" name="DAY_1" />
      <variable citdl="int" name="DAY_2" />
      <variable citdl="int" name="DAY_3" />
      <variable citdl="int" name="DAY_4" />
      <variable citdl="int" name="DAY_5" />
      <variable citdl="int" name="DAY_6" />
      <variable citdl="int" name="DAY_7" />
      <variable citdl="int" name="D_FMT" />
      <variable citdl="int" name="D_T_FMT" />
      <variable citdl="int" name="ERA" />
      <variable citdl="int" name="ERA_D_FMT" />
      <variable citdl="int" name="ERA_D_T_FMT" />
      <variable citdl="int" name="ERA_T_FMT" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="int" name="LC_ALL" />
      <variable citdl="int" name="LC_COLLATE" />
      <variable citdl="int" name="LC_CTYPE" />
      <variable citdl="int" name="LC_MESSAGES" />
      <variable citdl="int" name="LC_MONETARY" />
      <variable citdl="int" name="LC_NUMERIC" />
      <variable citdl="int" name="LC_TIME" />
      <variable citdl="int" name="MON_1" />
      <variable citdl="int" name="MON_10" />
      <variable citdl="int" name="MON_11" />
      <variable citdl="int" name="MON_12" />
      <variable citdl="int" name="MON_2" />
      <variable citdl="int" name="MON_3" />
      <variable citdl="int" name="MON_4" />
      <variable citdl="int" name="MON_5" />
      <variable citdl="int" name="MON_6" />
      <variable citdl="int" name="MON_7" />
      <variable citdl="int" name="MON_8" />
      <variable citdl="int" name="MON_9" />
      <variable citdl="int" name="NOEXPR" />
      <variable citdl="int" name="PM_STR" />
      <variable citdl="int" name="RADIXCHAR" />
      <variable citdl="int" name="THOUSEP" />
      <variable citdl="int" name="T_FMT" />
      <variable citdl="int" name="T_FMT_AMPM" />
      <variable citdl="int" name="YESEXPR" />
      <variable citdl="list" name="__all__" />
      <scope doc="Parses a string as a float according to the locale settings." ilk="function" name="atof" signature="atof(string, func=&lt;class 'float'&gt;)" />
      <scope doc="Converts a string to an integer according to the locale&#10;settings." ilk="function" name="atoi" signature="atoi(string)" />
      <scope doc="Bind the C library's domain to codeset." ilk="function" name="bind_textdomain_codeset" returns="str" signature="bind_textdomain_codeset(domain, codeset) -&gt; string" />
      <scope doc="Bind the C library's domain to dir." ilk="function" name="bindtextdomain" returns="str" signature="bindtextdomain(domain, dir) -&gt; string" />
      <import module="collections" />
      <scope doc="Formats val according to the currency settings in the&#10;current locale." ilk="function" name="currency" signature="currency(val, symbol=True, grouping=False, international=False)" />
      <scope doc="Return translation of msg in domain and category." ilk="function" name="dcgettext" returns="str" signature="dcgettext(domain, msg, category) -&gt; string" />
      <scope doc="Parses a string as a normalized number according to the&#10;locale settings." ilk="function" name="delocalize" signature="delocalize(string)" />
      <scope doc="Return translation of msg in domain." ilk="function" name="dgettext" returns="str" signature="dgettext(domain, msg) -&gt; string" />
      <import module="encodings" />
      <scope doc="Returns the locale-aware substitution of a %? specifier&#10;(percent)." ilk="function" name="format" signature="format(percent, value, grouping=False, monetary=False, *additional)" />
      <scope doc="Formats a string in the same way that the % formatting would&#10;use, but takes the current locale into account." ilk="function" name="format_string" signature="format_string(f, val, grouping=False)" />
      <import module="functools" />
      <scope doc="Tries to determine the default locale settings and returns&#10;them as tuple (language code, encoding)." ilk="function" name="getdefaultlocale" signature="getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE'))" />
      <scope doc="Returns the current setting for the given locale category as&#10;tuple (language code, encoding)." ilk="function" name="getlocale" signature="getlocale(category=0)" />
      <scope doc="Return the charset that the user is likely using, according&#10;to the system configuration." ilk="function" name="getpreferredencoding" signature="getpreferredencoding(do_setlocale=True)" />
      <scope doc="Return translation of msg." ilk="function" name="gettext" returns="str" signature="gettext(msg) -&gt; string" />
      <variable citdl="str" name="k" />
      <variable citdl="dict" name="locale_alias" />
      <variable citdl="dict" name="locale_encoding_alias" />
      <scope doc="() -&gt; dict." ilk="function" name="localeconv" signature="localeconv()" />
      <scope doc="Return the value for the locale information associated with&#10;key." ilk="function" name="nl_langinfo" returns="str" signature="nl_langinfo(key) -&gt; string" />
      <scope doc="Returns a normalized locale code for the given locale name." ilk="function" name="normalize" signature="normalize(localename)" />
      <import module="re" />
      <scope doc="Sets the locale for category to the default setting." ilk="function" name="resetlocale" signature="resetlocale(category=6)" />
      <scope doc="Set the locale for the given category." ilk="function" name="setlocale" signature="setlocale(category, locale=None)" />
      <scope doc="Convert float to integer, taking the locale into account." ilk="function" name="str" signature="str(val)" />
      <scope doc="string,string -&gt; int." ilk="function" name="strcoll" />
      <scope doc="Return a string that can be used as a key for locale-aware&#10;comparisons." ilk="function" name="strxfrm" signature="strxfrm(string) -&gt; string." />
      <import module="sys" />
      <scope doc="Set the C library's textdmain to domain, returning the new&#10;domain." ilk="function" name="textdomain" returns="str" signature="textdomain(domain) -&gt; string" />
      <variable citdl="str" name="v" />
      <variable citdl="dict" name="windows_locale" />
    </scope>
    <scope doc="Cache lines from Python source files.&#10;This is intended to read lines from modules imported -- hence if a filename is not found, it will look down the module search path for a file by that name." ilk="blob" lang="Python3" name="linecache">
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="cache" />
      <scope doc="Discard cache entries that are out of date." ilk="function" name="checkcache" signature="checkcache(filename=None)" />
      <scope doc="Clear the cache entirely." ilk="function" name="clearcache" signature="clearcache()" />
      <import module="functools" />
      <scope ilk="function" name="getline" signature="getline(filename, lineno, module_globals=None)" />
      <scope doc="Get the lines for a Python source file from the cache." ilk="function" name="getlines" signature="getlines(filename, module_globals=None)" />
      <scope doc="Seed the cache for filename with module_globals." ilk="function" name="lazycache" signature="lazycache(filename, module_globals)" />
      <import module="os" />
      <import module="sys" />
      <import module="tokenize" />
      <scope doc="Update a cache entry and return its list of lines." ilk="function" name="updatecache" signature="updatecache(filename, module_globals=None)" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/dlfcn.h&#10;" ilk="blob" lang="Python3" name="plat-sunos5.DLFCN">
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="CLK_TCK" />
      <variable citdl="int" name="CLOCKS_PER_SEC" />
      <variable citdl="int" name="CLOCK_PROCESS_CPUTIME_ID" />
      <variable citdl="int" name="CLOCK_REALTIME" />
      <variable citdl="int" name="CLOCK_THREAD_CPUTIME_ID" />
      <variable citdl="int" name="CLONE_FILES" />
      <variable citdl="int" name="CLONE_FS" />
      <variable citdl="int" name="CLONE_PID" />
      <variable citdl="int" name="CLONE_PTRACE" />
      <variable citdl="int" name="CLONE_SIGHAND" />
      <variable citdl="int" name="CLONE_VFORK" />
      <variable citdl="int" name="CLONE_VM" />
      <variable citdl="int" name="CSIGNAL" />
      <variable citdl="int" name="FD_SETSIZE" />
      <scope ilk="function" name="FD_ZERO" signature="FD_ZERO(fdsetp)" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="RTLD_CONFGEN" />
      <variable citdl="int" name="RTLD_CONFSET" />
      <variable citdl="int" name="RTLD_DI_CONFIGADDR" />
      <variable citdl="int" name="RTLD_DI_LINKMAP" />
      <variable citdl="int" name="RTLD_DI_LMID" />
      <variable citdl="int" name="RTLD_DI_MAX" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_GROUP" />
      <variable citdl="int" name="RTLD_LAZY" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <variable citdl="int" name="RTLD_MEMORY" />
      <variable citdl="int" name="RTLD_NODELETE" />
      <variable citdl="int" name="RTLD_NOHEAP" />
      <variable citdl="int" name="RTLD_NOLOAD" />
      <variable citdl="int" name="RTLD_NOW" />
      <variable citdl="int" name="RTLD_PARENT" />
      <variable citdl="int" name="RTLD_REL_ALL" />
      <variable citdl="int" name="RTLD_REL_DEPENDS" />
      <variable citdl="int" name="RTLD_REL_EXEC" />
      <variable citdl="int" name="RTLD_REL_PRELOAD" />
      <variable citdl="int" name="RTLD_REL_RELATIVE" />
      <variable citdl="int" name="RTLD_REL_SELF" />
      <variable citdl="int" name="RTLD_REL_WEAK" />
      <variable citdl="int" name="RTLD_STRIP" />
      <variable citdl="int" name="RTLD_WORLD" />
      <variable citdl="int" name="SCHED_FIFO" />
      <variable citdl="int" name="SCHED_OTHER" />
      <variable citdl="int" name="SCHED_RR" />
      <variable citdl="int" name="TIMER_ABSTIME" />
      <scope ilk="function" name="major" signature="major(dev)" />
      <scope ilk="function" name="minor" signature="minor(dev)" />
    </scope>
    <scope doc="Test case implementation&#10;" ilk="blob" lang="Python3" name="unittest.case">
      <variable citdl="str" name="DIFF_OMITTED" />
      <scope classrefs="TestCase" doc="A test case that wraps a test function.&#10;This is useful for slipping pre-existing test functions into the unittest framework. Optionally, set-up and tidy-up functions can be supplied. As with TestCase, the tidy-up ('tearDown') function will always be called if the set-up ('setUp') function ran successfully." ilk="class" name="FunctionTestCase">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="runTest" signature="runTest(self)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, testFunc, setUp=None, tearDown=None, description=None)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="id" signature="id(self)" />
      </scope>
      <scope classrefs="Exception" doc="Raise this exception in a test to skip it.&#10;Usually you can use TestCase.skipTest() or one of the skipping decorators instead of raising this directly." ilk="class" name="SkipTest" />
      <scope classrefs="object" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="TestCase">
        <scope ilk="function" name="assert_" signature="assert_(*args, **kwargs)" />
        <scope doc="Fail if the two objects are unequal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is more than the given delta." ilk="function" name="assertAlmostEqual" signature="assertAlmostEqual(self, first, second, places=None, msg=None, delta=None)" />
        <scope ilk="function" name="defaultTestResult" signature="defaultTestResult(self)" />
        <scope doc="Return a context manager that will return the enclosed block&#10;of code in a subtest identified by the optional message and&#10;keyword parameters." ilk="function" name="subTest" signature="subTest(*args, **kwds)" />
        <scope ilk="function" name="_deprecate" signature="_deprecate(original_func)" />
        <scope doc="Fail if the two objects are equal as determined by the '!='&#10;operator." ilk="function" name="assertNotEqual" signature="assertNotEqual(self, first, second, msg=None)" />
        <scope doc="Fail the test if the text matches the regular expression." ilk="function" name="assertNotRegex" signature="assertNotRegex(self, text, unexpected_regex, msg=None)" />
        <scope ilk="function" name="assertEquals" signature="assertEquals(*args, **kwargs)" />
        <scope ilk="function" name="_feedErrorsToResult" signature="_feedErrorsToResult(self, result, errors)" />
        <scope doc="Fail unless an exception of class expected_exception is&#10;raised by the callable when invoked with specified&#10;positional and keyword arguments." ilk="function" name="assertRaises" signature="assertRaises(self, expected_exception, *args, **kwargs)" />
        <scope doc="Just like self.assertTrue(a &lt; b), but with a nicer default&#10;message." ilk="function" name="assertLess" signature="assertLess(self, a, b, msg=None)" />
        <scope doc="Just like self.assertTrue(a is not b), but with a nicer&#10;default message." ilk="function" name="assertIsNot" signature="assertIsNot(self, expr1, expr2, msg=None)" />
        <scope ilk="function" name="failIf" signature="failIf(*args, **kwargs)" />
        <scope doc="Included for symmetry with assertIsNone." ilk="function" name="assertIsNotNone" signature="assertIsNotNone(self, obj, msg=None)" />
        <scope doc="Assert that two multi-line strings are equal." ilk="function" name="assertMultiLineEqual" signature="assertMultiLineEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="assertNotRegexpMatches" signature="assertNotRegexpMatches(*args, **kwargs)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Run the test without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
        <scope doc="The default assertEqual implementation, not type specific." ilk="function" name="_baseAssertEqual" signature="_baseAssertEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="countTestCases" signature="countTestCases(self)" />
        <scope doc="Fail immediately, with the given message." ilk="function" name="fail" signature="fail(self, msg=None)" />
        <scope ilk="function" name="assertNotAlmostEquals" signature="assertNotAlmostEquals(*args, **kwargs)" />
        <scope ilk="function" name="_truncateMessage" signature="_truncateMessage(self, message, diff)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
        <scope ilk="function" name="assertNotEquals" signature="assertNotEquals(*args, **kwargs)" />
        <scope doc="Asserts that the message in a triggered warning matches a&#10;regexp." ilk="function" name="assertWarnsRegex" signature="assertWarnsRegex(self, expected_warning, expected_regex, *args, **kwargs)" />
        <scope doc="Add a type specific assertEqual style function to compare a&#10;type." ilk="function" name="addTypeEqualityFunc" signature="addTypeEqualityFunc(self, typeobj, function)" />
        <scope ilk="function" name="failUnlessEqual" signature="failUnlessEqual(*args, **kwargs)" />
        <scope ilk="function" name="_addExpectedFailure" signature="_addExpectedFailure(self, result, exc_info)" />
        <scope doc="A set-specific equality assertion." ilk="function" name="assertSetEqual" signature="assertSetEqual(self, set1, set2, msg=None)" />
        <scope doc="Fail unless a log message of level *level* or higher is&#10;emitted on *logger_name* or its children." ilk="function" name="assertLogs" signature="assertLogs(self, logger=None, level=None)" />
        <scope doc="Skip this test." ilk="function" name="skipTest" signature="skipTest(self, reason)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope ilk="function" name="_addUnexpectedSuccess" signature="_addUnexpectedSuccess(self, result)" />
        <scope ilk="function" name="failUnless" signature="failUnless(*args, **kwargs)" />
        <scope doc="A tuple-specific equality assertion." ilk="function" name="assertTupleEqual" signature="assertTupleEqual(self, tuple1, tuple2, msg=None)" />
        <scope doc="Just like self.assertTrue(a &gt;= b), but with a nicer default&#10;message." ilk="function" name="assertGreaterEqual" signature="assertGreaterEqual(self, a, b, msg=None)" />
        <scope doc="Fail unless a warning of class warnClass is triggered by the&#10;callable when invoked with specified positional and keyword&#10;arguments." ilk="function" name="assertWarns" signature="assertWarns(self, expected_warning, *args, **kwargs)" />
        <scope doc="Add a function, with arguments, to be called when the test&#10;is completed." ilk="function" name="addCleanup" signature="addCleanup(self, function, *args, **kwargs)" />
        <scope ilk="function" name="failIfEqual" signature="failIfEqual(*args, **kwargs)" />
        <scope doc="Check that the expression is true." ilk="function" name="assertTrue" signature="assertTrue(self, expr, msg=None)" />
        <scope doc="Check that the expression is false." ilk="function" name="assertFalse" signature="assertFalse(self, expr, msg=None)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope ilk="function" name="failIfAlmostEqual" signature="failIfAlmostEqual(*args, **kwargs)" />
        <scope ilk="function" name="assertRaisesRegexp" signature="assertRaisesRegexp(*args, **kwargs)" />
        <scope doc="Just like self.assertTrue(a not in b), but with a nicer&#10;default message." ilk="function" name="assertNotIn" signature="assertNotIn(self, member, container, msg=None)" />
        <scope ilk="function" name="assertDictEqual" signature="assertDictEqual(self, d1, d2, msg=None)" />
        <scope doc="Hook method for setting up class fixture before running&#10;tests in the class." ilk="function" name="setUpClass" />
        <scope doc="An unordered sequence comparison asserting that the same&#10;elements, regardless of order." ilk="function" name="assertCountEqual" signature="assertCountEqual(self, first, second, msg=None)" />
        <scope doc="Fail the test unless the text matches the regular&#10;expression." ilk="function" name="assertRegex" signature="assertRegex(self, text, expected_regex, msg=None)" />
        <scope doc="Hook method for deconstructing the class fixture after&#10;running all tests in the class." ilk="function" name="tearDownClass" />
        <scope doc="Asserts that the message in a raised exception matches a&#10;regex." ilk="function" name="assertRaisesRegex" signature="assertRaisesRegex(self, expected_exception, expected_regex, *args, **kwargs)" />
        <scope doc="Execute all cleanup functions." ilk="function" name="doCleanups" signature="doCleanups(self)" />
        <scope ilk="function" name="id" signature="id(self)" />
        <scope ilk="function" name="assertRegexpMatches" signature="assertRegexpMatches(*args, **kwargs)" />
        <scope doc="Same as self.assertTrue(obj is None), with a nicer default&#10;message." ilk="function" name="assertIsNone" signature="assertIsNone(self, obj, msg=None)" />
        <scope doc="An equality assertion for ordered sequences (like lists and&#10;tuples)." ilk="function" name="assertSequenceEqual" signature="assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None)" />
        <scope doc="A list-specific equality assertion." ilk="function" name="assertListEqual" signature="assertListEqual(self, list1, list2, msg=None)" />
        <scope doc="Included for symmetry with assertIsInstance." ilk="function" name="assertNotIsInstance" signature="assertNotIsInstance(self, obj, cls, msg=None)" />
        <scope doc="Just like self.assertTrue(a in b), but with a nicer default&#10;message." ilk="function" name="assertIn" signature="assertIn(self, member, container, msg=None)" />
        <scope doc="Get a detailed comparison function for the types of the two&#10;args." ilk="function" name="_getAssertEqualityFunc" signature="_getAssertEqualityFunc(self, first, second)" />
        <scope doc="Just like self.assertTrue(a &lt;= b), but with a nicer default&#10;message." ilk="function" name="assertLessEqual" signature="assertLessEqual(self, a, b, msg=None)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Just like self.assertTrue(a is b), but with a nicer default&#10;message." ilk="function" name="assertIs" signature="assertIs(self, expr1, expr2, msg=None)" />
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, methodName='runTest')" />
        <scope ilk="function" name="failUnlessAlmostEqual" signature="failUnlessAlmostEqual(*args, **kwargs)" />
        <scope ilk="function" name="_addSkip" signature="_addSkip(self, result, test_case, reason)" />
        <scope ilk="function" name="run" signature="run(self, result=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Same as self.assertTrue(isinstance(obj, cls)), with a nicer&#10;default message." ilk="function" name="assertIsInstance" signature="assertIsInstance(self, obj, cls, msg=None)" />
        <scope doc="Checks whether dictionary is a superset of subset." ilk="function" name="assertDictContainsSubset" signature="assertDictContainsSubset(self, subset, dictionary, msg=None)" />
        <scope doc="Fail if the two objects are unequal as determined by the&#10;'==' operator." ilk="function" name="assertEqual" signature="assertEqual(self, first, second, msg=None)" />
        <scope ilk="function" name="assertAlmostEquals" signature="assertAlmostEquals(*args, **kwargs)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
        <scope doc="Honour the longMessage attribute when generating failure&#10;messages." ilk="function" name="_formatMessage" signature="_formatMessage(self, msg, standardMsg)" />
        <scope doc="Fail if the two objects are equal as determined by their&#10;difference rounded to the given number of decimal places&#10;(default 7) and comparing to zero, or by comparing that the&#10;between the two objects is less than the given delta." ilk="function" name="assertNotAlmostEqual" signature="assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None)" />
        <scope doc="Just like self.assertTrue(a &gt; b), but with a nicer default&#10;message." ilk="function" name="assertGreater" signature="assertGreater(self, a, b, msg=None)" />
        <scope ilk="function" name="failUnlessRaises" signature="failUnlessRaises(*args, **kwargs)" />
      </scope>
      <import module="collections" />
      <import module="contextlib" />
      <import module="difflib" />
      <scope ilk="function" name="expectedFailure" signature="expectedFailure(test_item)" />
      <import module="functools" />
      <import module="logging" />
      <import module="pprint" />
      <import module="re" />
      <import module="result" />
      <scope ilk="function" name="safe_repr" signature="safe_repr(obj, short=False)" />
      <scope doc="Unconditionally skip a test." ilk="function" name="skip" signature="skip(reason)" />
      <scope doc="Skip a test if the condition is true." ilk="function" name="skipIf" signature="skipIf(condition, reason)" />
      <scope doc="Skip a test unless the condition is true." ilk="function" name="skipUnless" signature="skipUnless(condition, reason)" />
      <scope ilk="function" name="strclass" signature="strclass(cls)" />
      <import module="sys" />
      <import module="traceback" />
      <import module="warnings" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="distutils.debug">
      <variable citdl="NoneType" name="DEBUG" />
      <import module="os" />
    </scope>
    <scope doc="This module contains the core classes of version 2.0 of SAX for Python.&#10;This file provides only default classes with absolutely minimum functionality, from which drivers and applications can be subclassed.  Many of these classes are empty and are included only as documentation of the interfaces.  $Id$" ilk="blob" lang="Python3" name="xml.sax.handler">
      <scope classrefs="object" doc="Interface for receiving logical document content events.&#10;This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document." ilk="class" name="ContentHandler">
        <scope doc="Begin the scope of a prefix-URI Namespace mapping." ilk="function" name="startPrefixMapping" signature="startPrefixMapping(self, prefix, uri)" />
        <scope doc="Signals the end of an element in non-namespace mode." ilk="function" name="endElement" signature="endElement(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Receive notification of ignorable whitespace in element&#10;content." ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, whitespace)" />
        <scope doc="Signals the end of an element in namespace mode." ilk="function" name="endElementNS" signature="endElementNS(self, name, qname)" />
        <scope doc="Receive notification of the end of a document." ilk="function" name="endDocument" signature="endDocument(self)" />
        <scope doc="End the scope of a prefix-URI mapping." ilk="function" name="endPrefixMapping" signature="endPrefixMapping(self, prefix)" />
        <scope doc="Receive notification of the beginning of a document." ilk="function" name="startDocument" signature="startDocument(self)" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
        <scope doc="Receive notification of a processing instruction." ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope doc="Called by the parser to give the application a locator for&#10;locating the origin of document events." ilk="function" name="setDocumentLocator" signature="setDocumentLocator(self, locator)" />
        <scope doc="Receive notification of character data." ilk="function" name="characters" signature="characters(self, content)" />
        <scope doc="Signals the start of an element in namespace mode." ilk="function" name="startElementNS" signature="startElementNS(self, name, qname, attrs)" />
        <scope doc="Receive notification of a skipped entity." ilk="function" name="skippedEntity" signature="skippedEntity(self, name)" />
      </scope>
      <scope classrefs="object" doc="Handle DTD events.&#10;This interface specifies only those DTD events required for basic parsing (unparsed entities and attributes)." ilk="class" name="DTDHandler">
        <scope doc="Handle an unparsed entity declaration event." ilk="function" name="unparsedEntityDecl" signature="unparsedEntityDecl(self, name, publicId, systemId, ndata)" />
        <scope doc="Handle a notation declaration event." ilk="function" name="notationDecl" signature="notationDecl(self, name, publicId, systemId)" />
      </scope>
      <scope classrefs="object" doc="Basic interface for resolving entities. If you create an object&#10;implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities. Note that DefaultHandler implements this interface with the default behaviour." ilk="class" name="EntityResolver">
        <scope doc="Resolve the system identifier of an entity and return either&#10;the system identifier to read from as a string, or an&#10;InputSource to read from." ilk="function" name="resolveEntity" signature="resolveEntity(self, publicId, systemId)" />
      </scope>
      <scope classrefs="object" doc="Basic interface for SAX error handlers.&#10;If you create an object that implements this interface, then register the object with your XMLReader, the parser will call the methods in your object to report all warnings and errors. There are three levels of errors available: warnings, (possibly) recoverable errors, and unrecoverable errors. All methods take a SAXParseException as the only parameter." ilk="class" name="ErrorHandler">
        <scope doc="Handle a warning." ilk="function" name="warning" signature="warning(self, exception)" />
        <scope doc="Handle a recoverable error." ilk="function" name="error" signature="error(self, exception)" />
        <scope doc="Handle a non-recoverable error." ilk="function" name="fatalError" signature="fatalError(self, exception)" />
      </scope>
      <variable citdl="list" name="all_features" />
      <variable citdl="list" name="all_properties" />
      <variable citdl="str" name="feature_external_ges" />
      <variable citdl="str" name="feature_external_pes" />
      <variable citdl="str" name="feature_namespace_prefixes" />
      <variable citdl="str" name="feature_namespaces" />
      <variable citdl="str" name="feature_string_interning" />
      <variable citdl="str" name="feature_validation" />
      <variable citdl="str" name="property_declaration_handler" />
      <variable citdl="str" name="property_dom_node" />
      <variable citdl="str" name="property_encoding" />
      <variable citdl="str" name="property_interning_dict" />
      <variable citdl="str" name="property_lexical_handler" />
      <variable citdl="str" name="property_xml_string" />
      <variable citdl="str" name="version" />
    </scope>
    <scope doc="distutils.command.install&#10;Implements the Distutils 'install' command." ilk="blob" lang="Python3" name="distutils.command.install">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="bool" name="HAS_USER_SITE" />
      <variable citdl="dict" name="INSTALL_SCHEMES" />
      <variable citdl="tuple" name="SCHEME_KEYS" />
      <variable citdl="str" name="USER_BASE" />
      <variable citdl="str" name="USER_SITE" />
      <variable citdl="dict" name="WINDOWS_SCHEME" />
      <scope doc="Return 'pathname' with 'new_root' prepended." ilk="function" name="change_root" signature="change_root(new_root, pathname)" />
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="With no arguments, return a dictionary of all configuration&#10;variables relevant for the current platform." ilk="function" name="get_config_vars" signature="get_config_vars(*args)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="install">
        <scope doc="Call `convert_path` over `names`." ilk="function" name="convert_paths" signature="convert_paths(self, *names)" />
        <scope doc="Returns true if the current distribution has any Python&#10;modules to install." ilk="function" name="has_lib" signature="has_lib(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Finalizes options for non-posix platforms" ilk="function" name="finalize_other" signature="finalize_other(self)" />
        <scope doc="Runs the command." ilk="function" name="run" signature="run(self)" />
        <scope doc="Creates the .pth file" ilk="function" name="create_path_file" signature="create_path_file(self)" />
        <scope doc="Initializes options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Create directories under ~." ilk="function" name="create_home_path" signature="create_home_path(self)" />
        <scope doc="Calls `os.path.expanduser` on install dirs." ilk="function" name="expand_dirs" signature="expand_dirs(self)" />
        <scope ilk="function" name="_expand_attrs" signature="_expand_attrs(self, attrs)" />
        <scope doc="Sets the install directories by applying the install&#10;schemes." ilk="function" name="select_scheme" signature="select_scheme(self, name)" />
        <scope doc="Returns true if the current distribution has any headers to&#10;install." ilk="function" name="has_headers" signature="has_headers(self)" />
        <scope doc="Calls `os.path.expanduser` on install_base, install_platbase&#10;and root." ilk="function" name="expand_basedirs" signature="expand_basedirs(self)" />
        <scope doc="Change the install directories pointed by name using root." ilk="function" name="change_roots" signature="change_roots(self, *names)" />
        <scope doc="Dumps the list of user options." ilk="function" name="dump_dirs" signature="dump_dirs(self, msg)" />
        <scope doc="Returns the inputs of all the sub-commands" ilk="function" name="get_inputs" signature="get_inputs(self)" />
        <scope doc="Finalizes options for posix platforms." ilk="function" name="finalize_unix" signature="finalize_unix(self)" />
        <scope doc="Set `path_file` and `extra_dirs` using `extra_path`." ilk="function" name="handle_extra_path" signature="handle_extra_path(self)" />
        <scope doc="Returns true if the current distribution has any scripts to." ilk="function" name="has_scripts" signature="has_scripts(self)" />
        <scope doc="Assembles the outputs of all the sub-commands." ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Returns true if the current distribution has any data to." ilk="function" name="has_data" signature="has_data(self)" />
      </scope>
      <import module="log" />
      <import module="os" />
      <scope doc="Perform shell/Perl-style variable substitution on 'string'." ilk="function" name="subst_vars" signature="subst_vars(s, local_vars)" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write 'contents'&#10;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="Fixer that changes zip(seq0, seq1, ...) into list(zip(seq0, seq1, ...)&#10;unless there exists a 'from future_builtins import zip' statement in the top-level namespace.  We avoid the transformation if the zip() call is directly contained in iter(&lt;&gt;), list(&lt;&gt;), tuple(&lt;&gt;), sorted(&lt;&gt;), ...join(&lt;&gt;), or for V in &lt;&gt;:." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_zip">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" doc="Base class for fixers which not execute if an import is found.&#10;" ilk="class" name="FixZip">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is&#10;required of it is being iterable (ie, it doesn't matter if&#10;it returns a list or an iterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
    </scope>
    <scope doc="The machinery of importlib: finders, loaders, hooks, etc.&#10;" ilk="blob" lang="Python3" name="importlib.machinery">
      <variable citdl="list" name="BYTECODE_SUFFIXES" />
      <scope classrefs="object" doc="Meta path import for built-in modules.&#10;All methods are either class or static methods to avoid the need to instantiate the class." ilk="class" name="BuiltinImporter">
        <scope doc="Return False as built-in modules are never packages." ilk="function" name="is_package" />
        <scope doc="Return repr for the module." ilk="function" name="module_repr" signature="module_repr(module)" />
        <scope doc="Exec a built-in module" ilk="function" name="exec_module" />
        <scope doc="Return None as built-in modules do not have source code." ilk="function" name="get_source" />
        <scope doc="Create a built-in module" ilk="function" name="create_module" />
        <scope doc="Find the built-in module." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
        <scope doc="Return None as built-in modules do not have code objects." ilk="function" name="get_code" />
        <scope doc="Load the specified module into sys.modules and return it." ilk="function" name="load_module" />
      </scope>
      <variable citdl="list" name="DEBUG_BYTECODE_SUFFIXES" />
      <variable citdl="list" name="EXTENSION_SUFFIXES" />
      <scope classrefs="FileLoader _LoaderBasics" doc="Loader for extension modules.&#10;The constructor is designed to work with FileFinder." ilk="class" name="ExtensionFileLoader">
        <scope doc="Return True if the extension module is a package." ilk="function" name="is_package" signature="is_package(self, fullname)" />
        <scope doc="Return the path to the source file as found by the finder." ilk="function" name="get_filename" signature="get_filename(self, name=None, *args, **kwargs)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize an extension module" ilk="function" name="exec_module" signature="exec_module(self, module)" />
        <scope doc="Cache the module name and the path to the file found by the&#10;finder." ilk="function" name="__init__" signature="__init__(self, name, path)" />
        <scope doc="Return None as extension modules have no source code." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope doc="Create an unitialized extension module" ilk="function" name="create_module" signature="create_module(self, spec)" />
        <scope doc="Return None as an extension module cannot create a code&#10;object." ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="File-based finder.&#10;Interactions with the file system are cached for performance, being refreshed when the directory the finder is handling has been modified." ilk="class" name="FileFinder">
        <scope doc="Initialize with the path to search on and a variable number&#10;of 2-tuples containing the loader and the file suffixes the&#10;loader recognizes." ilk="function" name="__init__" signature="__init__(self, path, *loader_details)" />
        <scope doc="Fill the cache of potential modules and packages for this&#10;directory." ilk="function" name="_fill_cache" signature="_fill_cache(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_spec" signature="find_spec(self, fullname, target=None)" />
        <scope doc="Invalidate the directory mtime." ilk="function" name="invalidate_caches" signature="invalidate_caches(self)" />
        <scope doc="A class method which returns a closure to use on&#10;sys.path_hook which will return an instance using the&#10;specified loaders and the path called on the closure." ilk="function" name="path_hook" />
        <scope ilk="function" name="_get_spec" signature="_get_spec(self, loader_class, fullname, path, smsl, target)" />
        <scope doc="Try to find a loader for the specified module by delegating&#10;to self.find_loader()." ilk="function" name="find_module" signature="find_module(self, fullname)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_loader" signature="find_loader(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Meta path import for frozen modules.&#10;All methods are either class or static methods to avoid the need to instantiate the class." ilk="class" name="FrozenImporter">
        <scope doc="Return True if the frozen module is a package." ilk="function" name="is_package" />
        <scope doc="Return repr for the module." ilk="function" name="module_repr" signature="module_repr(m)" />
        <scope ilk="function" name="exec_module" signature="exec_module(module)" />
        <scope doc="Return None as frozen modules do not have source code." ilk="function" name="get_source" />
        <scope doc="Use default semantics for module creation." ilk="function" name="create_module" />
        <scope doc="Find a frozen module." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
        <scope doc="Return the code object for the frozen module." ilk="function" name="get_code" />
        <scope doc="Load a frozen module." ilk="function" name="load_module" />
      </scope>
      <scope classrefs="object" doc="The specification for a module, used for loading.&#10;A module's spec is the source for information about the module.  For data associated with the module, including source, use the spec's loader.  `name` is the absolute name of the module.  `loader` is the loader to use when loading the module.  `parent` is the name of the package the module is in.  The parent is derived from the name.  `is_package` determines if the module is considered a package or not.  On modules this is reflected by the `__path__` attribute." ilk="class" name="ModuleSpec">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, loader, *, origin=None, loader_state=None, is_package=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="list" name="OPTIMIZED_BYTECODE_SUFFIXES" />
      <scope classrefs="object" doc="Meta path finder for sys.path and package __path__ attributes.&#10;" ilk="class" name="PathFinder">
        <scope ilk="function" name="_legacy_get_spec" />
        <scope doc="Get the finder for the path entry from&#10;sys.path_importer_cache." ilk="function" name="_path_importer_cache" />
        <scope doc="Call the invalidate_caches() method on all path entry&#10;finders stored in sys.path_importer_caches (where&#10;implemented)." ilk="function" name="invalidate_caches" />
        <scope doc="Find the loader or namespace_path for this module/package&#10;name." ilk="function" name="_get_spec" />
        <scope doc="find the module on sys.path or 'path' based on&#10;sys.path_hooks and sys.path_importer_cache." ilk="function" name="find_module" />
        <scope doc="find the module on sys.path or 'path' based on&#10;sys.path_hooks and sys.path_importer_cache." ilk="function" name="find_spec" />
        <scope doc="Search sequence of hooks for a finder for 'path'." ilk="function" name="_path_hooks" />
      </scope>
      <variable citdl="list" name="SOURCE_SUFFIXES" />
      <scope classrefs="FileLoader SourceLoader" doc="Concrete implementation of SourceLoader using the file system.&#10;" ilk="class" name="SourceFileLoader">
        <scope doc="Optional method which writes data (bytes) to a file path (a&#10;str)." ilk="function" name="_cache_bytecode" signature="_cache_bytecode(self, source_path, bytecode_path, data)" />
        <scope doc="Write bytes data to a file." ilk="function" name="set_data" signature="set_data(self, path, data, *, _mode=438)" />
        <scope doc="Return the metadata for the path." ilk="function" name="path_stats" signature="path_stats(self, path)" />
      </scope>
      <scope classrefs="FileLoader _LoaderBasics" doc="Loader which handles sourceless file imports.&#10;" ilk="class" name="SourcelessFileLoader">
        <scope doc="Return None as there is no source code." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Meta path finder for modules declared in the Windows registry.&#10;" ilk="class" name="WindowsRegistryFinder">
        <scope ilk="function" name="_open_registry" />
        <scope ilk="function" name="_search_registry" />
        <scope doc="Find module named in the registry." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
      </scope>
      <import module="_imp" />
      <scope doc="Returns a list of all recognized module suffixes for this&#10;process" ilk="function" name="all_suffixes" signature="all_suffixes()" />
    </scope>
    <scope doc="Fixer that changes os.getcwdu() to os.getcwd().&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_getcwdu">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixGetcwdu">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Common pathname manipulations, WindowsNT/95 version.&#10;Instead of importing this module directly, import os and refer to this module as os.path." ilk="blob" lang="Python3" name="ntpath">
      <variable citdl="list" name="__all__" />
      <scope doc="Return the absolute version of a path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="str" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" name="basename" signature="basename(p)" />
      <scope doc="Given a sequence of path names, returns the longest common&#10;sub-path." ilk="function" name="commonpath" signature="commonpath(paths)" />
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructs." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Expand shell variables of the forms $var, ${var} and %var%." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by&#10;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#10;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#10;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test whether a path is a symbolic link." ilk="function" name="islink" signature="islink(path)" />
      <scope doc="Test whether a path is a mount point (a drive root, the root&#10;of a share, or a mounted volume)" ilk="function" name="ismount" signature="ismount(path)" />
      <scope doc="# Join two (or more) paths." ilk="function" name="join" signature="join(path, *paths)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" name="normcase" signature="normcase(s)" />
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" name="normpath" signature="normpath(path)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Return the absolute version of a path." ilk="function" name="realpath" signature="realpath(path)" />
      <scope doc="Return a relative version of a path" ilk="function" name="relpath" signature="relpath(path, start=None)" />
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" name="samefile" signature="samefile(f1, f2)" />
      <scope doc="Test whether two open file objects reference the same file" ilk="function" name="sameopenfile" signature="sameopenfile(fp1, fp2)" />
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" name="samestat" signature="samestat(s1, s2)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Split a pathname into drive/UNC sharepoint and relative path&#10;specifiers." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <scope doc="Deprecated since Python 3.1." ilk="function" name="splitunc" signature="splitunc(p)" />
      <import module="stat" />
      <variable citdl="bool" name="supports_unicode_filenames" />
      <import module="sys" />
    </scope>
    <scope doc="Temporary files.&#10;This module provides generic, low- and high-level interfaces for creating temporary files and directories.  All of the interfaces provided by this module can be used without fear of race conditions except for 'mktemp'.  'mktemp' is subject to race conditions and should not be used; it is provided for backward compatibility only.  The default path names are returned as str.  If you supply bytes as input, all return values will be in bytes.  Ex:  &gt;&gt;&gt; tempfile.mkstemp()" ilk="blob" lang="Python3" name="tempfile">
      <scope doc="Create and return a temporary file." ilk="function" name="NamedTemporaryFile" signature="NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None, delete=True)" />
      <scope classrefs="object" doc="Temporary file wrapper, specialized to switch from BytesIO&#10;or StringIO to a real file when it exceeds a certain size or when a fileno is needed." ilk="class" name="SpooledTemporaryFile">
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc, value, tb)" />
        <scope doc="# file protocol" ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="truncate" signature="truncate(self, size=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, max_size=0, mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None)" />
        <scope ilk="function" name="rollover" signature="rollover(self)" />
        <scope ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="isatty" signature="isatty(self)" />
        <scope ilk="function" name="seek" signature="seek(self, *args)" />
        <scope ilk="function" name="readline" signature="readline(self, *args)" />
        <scope doc="# Context management protocol" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="readlines" signature="readlines(self, *args)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="write" signature="write(self, s)" />
        <scope ilk="function" name="read" signature="read(self, *args)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="_check" signature="_check(self, file)" />
        <scope ilk="function" name="writelines" signature="writelines(self, iterable)" />
      </scope>
      <variable citdl="int" name="TMP_MAX" />
      <scope classrefs="object" doc="Create and return a temporary directory.  This has the same&#10;behavior as mkdtemp but can be used as a context manager.  For example:  with TemporaryDirectory() as tmpdir: ...  Upon exiting the context, the directory and everything contained in it are removed." ilk="class" name="TemporaryDirectory">
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc, value, tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="_cleanup" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, suffix=None, prefix=None, dir=None)" />
        <scope ilk="function" name="cleanup" signature="cleanup(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope doc="Create and return a temporary file." ilk="function" name="TemporaryFile" signature="TemporaryFile(mode='w+b', buffering=-1, encoding=None, newline=None, suffix=None, prefix=None, dir=None)" />
      <variable citdl="list" name="__all__" />
      <import module="_errno" />
      <import module="_functools" />
      <import module="_io" />
      <import module="_os" />
      <import module="_shutil" />
      <import module="_thread" />
      <import module="_warnings" />
      <import module="_weakref" />
      <scope doc="Accessor for tempfile.tempdir." ilk="function" name="gettempdir" signature="gettempdir()" />
      <scope doc="A bytes version of tempfile.gettempdir()." ilk="function" name="gettempdirb" signature="gettempdirb()" />
      <scope doc="The default prefix for temporary directories." ilk="function" name="gettempprefix" signature="gettempprefix()" />
      <scope doc="The default prefix for temporary directories as bytes." ilk="function" name="gettempprefixb" signature="gettempprefixb()" />
      <scope doc="User-callable function to create and return a unique&#10;temporary directory." ilk="function" name="mkdtemp" signature="mkdtemp(suffix=None, prefix=None, dir=None)" />
      <scope doc="User-callable function to create and return a unique&#10;temporary file." ilk="function" name="mkstemp" signature="mkstemp(suffix=None, prefix=None, dir=None, text=False)" />
      <scope doc="User-callable function to return a unique temporary file&#10;name." ilk="function" name="mktemp" signature="mktemp(suffix='', prefix='tmp', dir=None)" />
      <variable citdl="NoneType" name="tempdir" />
      <variable citdl="str" name="template" />
    </scope>
    <scope doc="Conversion pipeline templates.&#10;The problem: ------------  Suppose you have some data that you want to convert to another format, such as from GIF image format to PPM image format.  Maybe the conversion involves several steps (e.g. piping it through compress or uuencode).  Some of the conversion steps may require that their input is a disk file, others may be able to read standard input; similar for their output.  The input to the entire conversion may also be read from a disk file or from an open file, and similar for its output." ilk="blob" lang="Python3" name="pipes">
      <variable citdl="str" name="FILEIN_FILEOUT" />
      <variable citdl="str" name="FILEIN_STDOUT" />
      <variable citdl="str" name="SINK" />
      <variable citdl="str" name="SOURCE" />
      <variable citdl="str" name="STDIN_FILEOUT" />
      <variable citdl="str" name="STDIN_STDOUT" />
      <scope classrefs="object" doc="Class representing a pipeline template.&#10;" ilk="class" name="Template">
        <scope doc="t.reset() restores a pipeline template to its initial state." ilk="function" name="reset" signature="t.reset() restores a pipeline template to its initial state." />
        <scope doc="reading or writing; the file is the other end of the&#10;pipeline." ilk="function" name="open" signature="t.open(file, rw) returns a pipe or file object open for" />
        <scope doc="initial state as the current one." ilk="function" name="clone" signature="t.clone() returns a new pipeline template with identical" />
        <scope doc="t.debug(flag) turns debugging on or off." ilk="function" name="debug" signature="t.debug(flag) turns debugging on or off." />
        <scope doc="Template() returns a fresh pipeline template." ilk="function" name="__init__" signature="Template() returns a fresh pipeline template." />
        <scope ilk="function" name="open_w" signature="open_w(self, file)" />
        <scope doc="t.append(cmd, kind) adds a new step at the end." ilk="function" name="append" signature="t.append(cmd, kind) adds a new step at the end." />
        <scope ilk="function" name="copy" signature="copy(self, infile, outfile)" />
        <scope ilk="function" name="makepipeline" signature="makepipeline(self, infile, outfile)" />
        <scope doc="t.__repr__() implements repr(t)." ilk="function" name="__repr__" signature="t.__repr__() implements repr(t)." />
        <scope doc="t.open_r(file) and t.open_w(file) implement&#10;t.open(file, 'r') and t.open(file, 'w') respectively." ilk="function" name="open_r" signature="t.open_r(file) and t.open_w(file) implement&#10;t.open(file, 'r') and t.open(file, 'w') respectively." />
        <scope doc="t.prepend(cmd, kind) adds a new step at the front." ilk="function" name="prepend" signature="t.prepend(cmd, kind) adds a new step at the front." />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="makepipeline" signature="makepipeline(infile, steps, outfile)" />
      <import module="os" />
      <scope doc="Return a shell-escaped version of the string *s*." ilk="function" name="quote" signature="quote(s)" />
      <import module="re" />
      <variable citdl="list" name="stepkinds" />
      <import module="tempfile" />
    </scope>
    <scope doc="Guess the MIME type of a file.&#10;This module defines two useful functions:  guess_type(url, strict=True) -- guess the MIME type and encoding of a URL.  guess_extension(type, strict=True) -- guess the extension for a given MIME type.  It also contains the following, for tuning the behavior:  Data: " ilk="blob" lang="Python3" name="mimetypes">
      <scope classrefs="object" doc="MIME-types datastore.&#10;This datastore can handle information from mime.types-style files and supports basic determination of MIME type from a filename or URL, and can guess a reasonable extension given a MIME type." ilk="class" name="MimeTypes">
        <scope doc="Read a single mime.types-format file, specified by pathname." ilk="function" name="read" signature="read(self, filename, strict=True)" />
        <scope doc="Guess the extension for a file based on its MIME type." ilk="function" name="guess_extension" signature="guess_extension(self, type, strict=True)" />
        <scope doc="Guess the type of a file based on its URL." ilk="function" name="guess_type" signature="guess_type(self, url, strict=True)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filenames=(), strict=True)" />
        <scope doc="Add a mapping between a type and an extension." ilk="function" name="add_type" signature="add_type(self, type, ext, strict=True)" />
        <scope doc="Read a single mime.types-format file." ilk="function" name="readfp" signature="readfp(self, fp, strict=True)" />
        <scope doc="Guess the extensions for a file based on its MIME type." ilk="function" name="guess_all_extensions" signature="guess_all_extensions(self, type, strict=True)" />
        <scope doc="Load the MIME types database from Windows registry." ilk="function" name="read_windows_registry" signature="read_windows_registry(self, strict=True)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Add a mapping between a type and an extension." ilk="function" name="add_type" signature="add_type(type, ext, strict=True)" />
      <variable citdl="dict" name="common_types" />
      <variable citdl="dict" name="encodings_map" />
      <scope doc="Guess the extensions for a file based on its MIME type." ilk="function" name="guess_all_extensions" signature="guess_all_extensions(type, strict=True)" />
      <scope doc="Guess the extension for a file based on its MIME type." ilk="function" name="guess_extension" signature="guess_extension(type, strict=True)" />
      <scope doc="Guess the type of a file based on its URL." ilk="function" name="guess_type" signature="guess_type(url, strict=True)" />
      <scope ilk="function" name="init" signature="init(files=None)" />
      <variable citdl="bool" name="inited" />
      <variable citdl="list" name="knownfiles" />
      <import module="os" />
      <import module="posixpath" />
      <scope ilk="function" name="read_mime_types" signature="read_mime_types(file)" />
      <variable citdl="dict" name="suffix_map" />
      <import module="sys" />
      <variable citdl="dict" name="types_map" />
      <import module="urllib" />
    </scope>
    <scope doc="Constants.&#10;" ilk="blob" lang="Python3" name="asyncio.constants">
      <variable citdl="int" name="ACCEPT_RETRY_DELAY" />
      <variable citdl="int" name="LOG_THRESHOLD_FOR_CONNLOST_WRITES" />
    </scope>
    <scope doc="# Copyright (C) 2001-2007 Python Software Foundation&#10;# Author: Ben Gertzfield, Barry Warsaw # Contact: email-sig@python.org" ilk="blob" lang="Python3" name="email.charset">
      <variable citdl="dict" name="ALIASES" />
      <variable citdl="int" name="BASE64" />
      <variable citdl="dict" name="CHARSETS" />
      <variable citdl="dict" name="CODEC_MAP" />
      <scope classrefs="object" doc="Map character sets to their email properties.&#10;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" name="Charset">
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode_lines" signature="header_encode_lines(self, string, maxlengths)" />
        <scope doc="Return the output character set." ilk="function" name="get_output_charset" signature="get_output_charset(self)" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" name="get_body_encoding" signature="get_body_encoding(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self, header_bytes)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input_charset='us-ascii')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" name="body_encode" signature="body_encode(self, string)" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode" signature="header_encode(self, string)" />
      </scope>
      <variable citdl="str" name="DEFAULT_CHARSET" />
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="int" name="QP" />
      <variable citdl="int" name="RFC2047_CHROME_LEN" />
      <variable citdl="int" name="SHORTEST" />
      <variable citdl="str" name="UNKNOWN8BIT" />
      <variable citdl="list" name="__all__" />
      <scope doc="Add a character set alias." ilk="function" name="add_alias" signature="add_alias(alias, canonical)" />
      <scope doc="Add character set properties to the global registry." ilk="function" name="add_charset" signature="add_charset(charset, header_enc=None, body_enc=None, output_charset=None)" />
      <scope doc="Add a codec that map characters in the given charset to/from&#10;Unicode." ilk="function" name="add_codec" signature="add_codec(charset, codecname)" />
      <import module="email" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
      <import module="errors" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="asyncio.coroutines">
      <scope classrefs="object" doc="&#10;" ilk="class" name="CoroWrapper">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, gen, func=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="throw" signature="throw(self, exc)" />
        <scope ilk="function" name="send" signature="send(self, value)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__await__" signature="__await__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="compat" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <scope ilk="function" name="debug_wrapper" signature="debug_wrapper(gen)" />
      <import module="events" />
      <import module="functools" />
      <import module="futures" />
      <import module="inspect" />
      <scope doc="Return True if obj is a coroutine object." ilk="function" name="iscoroutine" signature="iscoroutine(obj)" />
      <scope doc="Return True if func is a decorated coroutine function." ilk="function" name="iscoroutinefunction" signature="iscoroutinefunction(func)" />
      <variable citdl="Logger" name="logger" />
      <import module="opcode" />
      <import module="os" />
      <import module="sys" />
      <import module="traceback" />
      <import module="types" />
    </scope>
    <scope doc="Utility functions for copying and archiving files and directory trees.&#10;XXX The functions here don't copy the resource fork or other metadata on Mac." ilk="blob" lang="Python3" name="shutil">
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="Error" />
      <scope classrefs="OSError" doc="Raised when a command could not be executed&#10;" ilk="class" name="ExecError" />
      <scope classrefs="OSError" doc="Raised when an archive cannot be read&#10;" ilk="class" name="ReadError" />
      <scope classrefs="Exception" doc="Raised when a registry operation with the archiving&#10;and unpacking registeries fails" ilk="class" name="RegistryError" />
      <scope classrefs="Error" doc="Raised when source and destination are the same file.&#10;" ilk="class" name="SameFileError" />
      <scope classrefs="OSError" doc="Raised when trying to do a kind of operation (e.g. copying) which is&#10;not supported on a special file (e.g. a named pipe)" ilk="class" name="SpecialFileError" />
      <variable citdl="list" name="__all__" />
      <scope doc="Change owner user and group of the given path." ilk="function" name="chown" signature="chown(path, user=None, group=None)" />
      <import module="collections" />
      <scope doc="Copy data and mode bits (&quot;cp src dst&quot;)." ilk="function" name="copy" signature="copy(src, dst, *, follow_symlinks=True)" />
      <scope doc="Copy data and all stat info (&quot;cp -p src dst&quot;)." ilk="function" name="copy2" signature="copy2(src, dst, *, follow_symlinks=True)" />
      <scope doc="Copy data from src to dst." ilk="function" name="copyfile" signature="copyfile(src, dst, *, follow_symlinks=True)" />
      <scope doc="copy data from file-like object fsrc to file-like object&#10;fdst" ilk="function" name="copyfileobj" signature="copyfileobj(fsrc, fdst, length=16384)" />
      <scope doc="Copy mode bits from src to dst." ilk="function" name="copymode" signature="copymode(src, dst, *, follow_symlinks=True)" />
      <scope doc="Copy all stat info (mode bits, atime, mtime, flags) from src&#10;to dst." ilk="function" name="copystat" signature="copystat(src, dst, *, follow_symlinks=True)" />
      <scope doc="Recursively copy a directory tree." ilk="function" name="copytree" signature="copytree(src, dst, symlinks=False, ignore=None, copy_function=&lt;function copy2 at 0x7f1181d090d0&gt;, ignore_dangling_symlinks=False)" />
      <scope doc="Return disk usage statistics about the given path." ilk="function" name="disk_usage" signature="disk_usage(path)" />
      <import module="errno" />
      <import module="fnmatch" />
      <scope doc="Returns a list of supported formats for archiving and&#10;unarchiving." ilk="function" name="get_archive_formats" signature="get_archive_formats()" />
      <scope doc="Get the size of the terminal window." ilk="function" name="get_terminal_size" signature="get_terminal_size(fallback=(80, 24))" />
      <scope doc="Returns a list of supported formats for unpacking." ilk="function" name="get_unpack_formats" signature="get_unpack_formats()" />
      <scope doc="Return the group database entry for the given group name." ilk="function" name="getgrnam" />
      <scope doc="Return the password database entry for the given user name." ilk="function" name="getpwnam" />
      <scope doc="Function that can be used as copytree() ignore parameter." ilk="function" name="ignore_patterns" signature="ignore_patterns(*patterns)" />
      <scope doc="Create an archive file (eg. zip or tar)." ilk="function" name="make_archive" signature="make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None)" />
      <scope doc="Recursively move a file or directory to another location." ilk="function" name="move" signature="move(src, dst, copy_function=&lt;function copy2 at 0x7f1181d090d0&gt;)" />
      <import module="os" />
      <scope doc="Registers an archive format." ilk="function" name="register_archive_format" signature="register_archive_format(name, function, extra_args=None, description='')" />
      <scope doc="Registers an unpack format." ilk="function" name="register_unpack_format" signature="register_unpack_format(name, extensions, function, extra_args=None, description='')" />
      <scope doc="Recursively delete a directory tree." ilk="function" name="rmtree" signature="rmtree(path, ignore_errors=False, onerror=None)" />
      <import module="stat" />
      <import module="sys" />
      <import module="tarfile" />
      <scope doc="Unpack an archive." ilk="function" name="unpack_archive" signature="unpack_archive(filename, extract_dir=None, format=None)" />
      <scope ilk="function" name="unregister_archive_format" signature="unregister_archive_format(name)" />
      <scope doc="Removes the pack format from the registery." ilk="function" name="unregister_unpack_format" signature="unregister_unpack_format(name)" />
      <scope doc="Given a command, mode, and a PATH string, return the path&#10;which conforms to the given mode on the PATH, or None if&#10;there is no such file." ilk="function" name="which" signature="which(cmd, mode=1, path=None)" />
    </scope>
    <scope doc="Token constants (from &quot;token.h&quot;).&#10;" ilk="blob" lang="Python3" name="token">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="ASYNC" />
      <variable citdl="int" name="AT" />
      <variable citdl="int" name="ATEQUAL" />
      <variable citdl="int" name="AWAIT" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="int" name="ELLIPSIS" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="int" name="OP" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="int" name="TILDE" />
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="tok_name" />
    </scope>
    <scope doc="Internal support module for sre&#10;" ilk="blob" lang="Python3" name="sre_parse">
      <variable citdl="_NamedIntConstant" name="ANY" />
      <variable citdl="_NamedIntConstant" name="ANY_ALL" />
      <variable citdl="frozenset" name="ASCIILETTERS" />
      <variable citdl="_NamedIntConstant" name="ASSERT" />
      <variable citdl="_NamedIntConstant" name="ASSERT_NOT" />
      <variable citdl="_NamedIntConstant" name="AT" />
      <variable citdl="list" name="ATCODES" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_STRING" />
      <variable citdl="_NamedIntConstant" name="AT_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_END" />
      <variable citdl="_NamedIntConstant" name="AT_END_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_END_STRING" />
      <variable citdl="dict" name="AT_LOCALE" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_MULTILINE" />
      <variable citdl="_NamedIntConstant" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_UNICODE" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="BIGCHARSET" />
      <variable citdl="_NamedIntConstant" name="BRANCH" />
      <variable citdl="_NamedIntConstant" name="CALL" />
      <variable citdl="dict" name="CATEGORIES" />
      <variable citdl="_NamedIntConstant" name="CATEGORY" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_WORD" />
      <variable citdl="_NamedIntConstant" name="CHARSET" />
      <variable citdl="list" name="CHCODES" />
      <variable citdl="dict" name="CH_LOCALE" />
      <variable citdl="dict" name="CH_UNICODE" />
      <variable citdl="frozenset" name="DIGITS" />
      <variable citdl="dict" name="ESCAPES" />
      <variable citdl="_NamedIntConstant" name="FAILURE" />
      <variable citdl="dict" name="FLAGS" />
      <variable citdl="_NamedIntConstant" name="GROUPREF" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_EXISTS" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_IGNORE" />
      <variable citdl="frozenset" name="HEXDIGITS" />
      <variable citdl="_NamedIntConstant" name="IN" />
      <variable citdl="_NamedIntConstant" name="INFO" />
      <variable citdl="_NamedIntConstant" name="IN_IGNORE" />
      <variable citdl="_NamedIntConstant" name="JUMP" />
      <variable citdl="_NamedIntConstant" name="LITERAL" />
      <variable citdl="_NamedIntConstant" name="LITERAL_IGNORE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="_NamedIntConstant" name="MARK" />
      <variable citdl="int" name="MAXGROUPS" />
      <variable citdl="_NamedIntConstant" name="MAXREPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_UNTIL" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT_ONE" />
      <variable citdl="_NamedIntConstant" name="MIN_UNTIL" />
      <variable citdl="_NamedIntConstant" name="NEGATE" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL_IGNORE" />
      <variable citdl="frozenset" name="OCTDIGITS" />
      <variable citdl="list" name="OPCODES" />
      <variable citdl="dict" name="OP_IGNORE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Pattern">
        <scope ilk="function" name="closegroup" signature="closegroup(self, gid, p)" />
        <scope ilk="function" name="checklookbehindgroup" signature="checklookbehindgroup(self, gid, source)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="opengroup" signature="opengroup(self, name=None)" />
        <scope ilk="function" name="checkgroup" signature="checkgroup(self, gid)" />
      </scope>
      <variable citdl="_NamedIntConstant" name="RANGE" />
      <variable citdl="_NamedIntConstant" name="RANGE_IGNORE" />
      <variable citdl="_NamedIntConstant" name="REPEAT" />
      <variable citdl="str" name="REPEAT_CHARS" />
      <variable citdl="_NamedIntConstant" name="REPEAT_ONE" />
      <variable citdl="str" name="SPECIAL_CHARS" />
      <variable citdl="int" name="SRE_FLAG_ASCII" />
      <variable citdl="int" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" name="SRE_INFO_CHARSET" />
      <variable citdl="int" name="SRE_INFO_LITERAL" />
      <variable citdl="int" name="SRE_INFO_PREFIX" />
      <variable citdl="_NamedIntConstant" name="SUBPATTERN" />
      <variable citdl="_NamedIntConstant" name="SUCCESS" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="SubPattern">
        <scope ilk="function" name="dump" signature="dump(self, level=0)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, index)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, pattern, data=None)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, index, code)" />
        <scope ilk="function" name="getwidth" signature="getwidth(self)" />
        <scope ilk="function" name="append" signature="append(self, code)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="insert" signature="insert(self, index, code)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Tokenizer">
        <scope ilk="function" name="getwhile" signature="getwhile(self, n, charset)" />
        <scope ilk="function" name="get" signature="get(self)" />
        <scope ilk="function" name="error" signature="error(self, msg, offset=0)" />
        <scope ilk="function" name="match" signature="match(self, char)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="getuntil" signature="getuntil(self, terminator)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, string)" />
        <scope ilk="function" name="_Tokenizer__next" signature="_Tokenizer__next(self)" />
        <scope ilk="function" name="seek" signature="seek(self, index)" />
      </scope>
      <variable citdl="frozenset" name="WHITESPACE" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, pattern=None, pos=None)" />
      </scope>
      <scope ilk="function" name="expand_template" signature="expand_template(template, match)" />
      <scope ilk="function" name="fix_flags" signature="fix_flags(src, flags)" />
      <scope ilk="function" name="isdigit" signature="isdigit(char)" />
      <scope ilk="function" name="isident" signature="isident(char)" />
      <scope ilk="function" name="isname" signature="isname(name)" />
      <scope ilk="function" name="parse" signature="parse(str, flags=0, pattern=None)" />
      <scope ilk="function" name="parse_template" signature="parse_template(source, pattern)" />
    </scope>
    <scope doc="runpy.py - locating and running Python code using the module namespace&#10;Provides support for locating and running Python scripts using the Python module namespace instead of the native filesystem.  This allows Python code to play nicely with non-filesystem based PEP 302 importers when locating support scripts as well as when importing modules." ilk="blob" lang="Python3" name="runpy">
      <variable citdl="list" name="__all__" />
      <scope doc="Retrieve a PEP 302 importer for the given path item" ilk="function" name="get_importer" signature="get_importer(path_item)" />
      <import module="importlib" />
      <scope ilk="function" name="read_code" signature="read_code(stream)" />
      <scope doc="Execute a module's code without importing it" ilk="function" name="run_module" signature="run_module(mod_name, init_globals=None, run_name=None, alter_sys=False)" />
      <scope doc="Execute code located at the specified filesystem location" ilk="function" name="run_path" signature="run_path(path_name, init_globals=None, run_name=None)" />
      <import module="sys" />
      <import module="types" />
    </scope>
    <scope doc="Logging configuration.&#10;" ilk="blob" lang="Python3" name="asyncio.log">
      <variable citdl="Logger" name="logger" />
      <import module="logging" />
    </scope>
    <scope doc="Random variable generators.&#10;integers -------- uniform within range  sequences --------- pick random element pick random sample generate random permutation " ilk="blob" lang="Python3" name="random">
      <variable citdl="int" name="BPF" />
      <variable citdl="float" name="LOG4" />
      <variable citdl="float" name="NV_MAGICCONST" />
      <variable citdl="float" name="RECIP_BPF" />
      <scope classrefs="Random" doc="Random number generator base class used by bound module functions.&#10;Used to instantiate instances of Random to get generators that don't share state.  Class Random can also be subclassed if you want to use a different basic generator of your own devising: in that case, override the following methods:  random(), seed(), getstate(), and setstate(). Optionally, implement a getrandbits() method so that randrange() can cover arbitrarily large ranges." ilk="class" name="Random">
        <scope doc="Return a random int in the range [0,n)." ilk="function" name="_randbelow" signature="_randbelow(self, n, int=&lt;class 'int'&gt;, maxsize=9007199254740992, type=&lt;class 'type'&gt;, Method=&lt;class 'method'&gt;, BuiltinMethod=&lt;class 'builtin_function_or_method'&gt;)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Initialize internal state from hashable object." ilk="function" name="seed" signature="seed(self, a=None, version=2)" />
        <scope doc="Restore internal state from object returned by getstate()." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Get a random number in the range [a, b) or [a, b] depending&#10;on rounding." ilk="function" name="uniform" signature="uniform(self, a, b)" />
        <scope doc="Choose a random item from range(start, stop[, step])." ilk="function" name="randrange" signature="randrange(self, start, stop=None, step=1, _int=&lt;class 'int'&gt;)" />
        <scope doc="Initialize an instance." ilk="function" name="__init__" signature="__init__(self, x=None)" />
        <scope doc="Gamma distribution." ilk="function" name="gammavariate" signature="gammavariate(self, alpha, beta)" />
        <scope doc="Log normal distribution." ilk="function" name="lognormvariate" signature="lognormvariate(self, mu, sigma)" />
        <scope doc="Chooses k unique random elements from a population sequence&#10;or set." ilk="function" name="sample" signature="sample(self, population, k)" />
        <scope doc="Shuffle list x in place, and return None." ilk="function" name="shuffle" signature="shuffle(self, x, random=None)" />
        <scope doc="Triangular distribution." ilk="function" name="triangular" signature="triangular(self, low=0.0, high=1.0, mode=None)" />
        <scope doc="Choose a random element from a non-empty sequence." ilk="function" name="choice" signature="choice(self, seq)" />
        <scope doc="# Issue 17489: Since __reduce__ was defined to fix #759889&#10;this is no # longer called; we leave it here because it has&#10;been here since random was # rewritten back in 2001 and why&#10;risk breaking something." ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope doc="Exponential distribution." ilk="function" name="expovariate" signature="expovariate(self, lambd)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Weibull distribution." ilk="function" name="weibullvariate" signature="weibullvariate(self, alpha, beta)" />
        <scope doc="Pareto distribution. alpha is the shape parameter." ilk="function" name="paretovariate" signature="paretovariate(self, alpha)" />
        <scope doc="Normal distribution." ilk="function" name="normalvariate" signature="normalvariate(self, mu, sigma)" />
        <scope doc="Return internal state; can be passed to setstate() later." ilk="function" name="getstate" signature="getstate(self)" />
        <scope doc="Beta distribution." ilk="function" name="betavariate" signature="betavariate(self, alpha, beta)" />
        <scope doc="Return random integer in range [a, b], including both end&#10;points." ilk="function" name="randint" signature="randint(self, a, b)" />
        <scope doc="Gaussian distribution." ilk="function" name="gauss" signature="gauss(self, mu, sigma)" />
        <scope doc="Circular data distribution." ilk="function" name="vonmisesvariate" signature="vonmisesvariate(self, mu, kappa)" />
      </scope>
      <variable citdl="float" name="SG_MAGICCONST" />
      <scope classrefs="Random" doc="Alternate random number generator using sources provided&#10;by the operating system (such as /dev/urandom on Unix or CryptGenRandom on Windows).  Not available on all systems (see os.urandom() for details)." ilk="class" name="SystemRandom">
        <scope doc="Method should not be called for a system random number&#10;generator." ilk="function" name="setstate" signature="setstate(self, *args, **kwds)" />
        <scope doc="getrandbits(k) -&gt; x.  Generates an int with k random bits." ilk="function" name="getrandbits" signature="getrandbits(k) -&gt; x.  Generates an int with k random bits." />
        <scope doc="Method should not be called for a system random number&#10;generator." ilk="function" name="_notimplemented" signature="_notimplemented(self, *args, **kwds)" />
        <scope doc="Stub method. Not used for a system random number generator." ilk="function" name="seed" signature="seed(self, *args, **kwds)" />
        <scope doc="Method should not be called for a system random number&#10;generator." ilk="function" name="getstate" signature="getstate(self, *args, **kwds)" />
        <scope doc="Get the next random number in the range [0.0, 1.0)." ilk="function" name="random" signature="random(self)" />
      </scope>
      <variable citdl="float" name="TWOPI" />
      <variable citdl="list" name="__all__" />
      <import module="_random" />
      <scope doc="Beta distribution." ilk="function" name="betavariate" />
      <scope doc="Choose a random element from a non-empty sequence." ilk="function" name="choice" />
      <scope doc="Exponential distribution." ilk="function" name="expovariate" />
      <scope doc="Gamma distribution." ilk="function" name="gammavariate" />
      <scope doc="Gaussian distribution." ilk="function" name="gauss" />
      <scope doc="getrandbits(k) -&gt; x.  Generates an int with k random bits." ilk="function" name="getrandbits" signature="getrandbits(k) -&gt; x.  Generates an int with k random bits." />
      <scope doc="Return internal state; can be passed to setstate() later." ilk="function" name="getstate" />
      <scope doc="Log normal distribution." ilk="function" name="lognormvariate" />
      <scope doc="Normal distribution." ilk="function" name="normalvariate" />
      <scope doc="Pareto distribution. alpha is the shape parameter." ilk="function" name="paretovariate" />
      <scope doc="Return random integer in range [a, b], including both end&#10;points." ilk="function" name="randint" />
      <scope doc="random() -&gt; x in the interval [0, 1)." ilk="function" name="random" signature="random() -&gt; x in the interval [0, 1)." />
      <scope doc="Choose a random item from range(start, stop[, step])." ilk="function" name="randrange" />
      <scope doc="Chooses k unique random elements from a population sequence&#10;or set." ilk="function" name="sample" />
      <scope doc="Initialize internal state from hashable object." ilk="function" name="seed" />
      <scope doc="Restore internal state from object returned by getstate()." ilk="function" name="setstate" />
      <scope doc="Shuffle list x in place, and return None." ilk="function" name="shuffle" />
      <scope doc="Triangular distribution." ilk="function" name="triangular" />
      <scope doc="Get a random number in the range [a, b) or [a, b] depending&#10;on rounding." ilk="function" name="uniform" />
      <scope doc="Circular data distribution." ilk="function" name="vonmisesvariate" />
      <scope doc="Weibull distribution." ilk="function" name="weibullvariate" />
    </scope>
    <scope doc="Thread-local objects.&#10;(Note that this module provides a Python version of the threading.local class.  Depending on the version of Python you're using, there may be a faster one available.  You should always import the `local` class from `threading`.)  Thread-local objects support the management of thread-local data. If you have data that you want to be local to a thread, simply create a thread-local object and use its attributes:  &gt;&gt;&gt; mydata = local()" ilk="blob" lang="Python3" name="_threading_local">
      <scope doc="Factory function that returns a new reentrant lock." ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <variable citdl="list" name="__all__" />
      <scope doc="@contextmanager decorator." ilk="function" name="contextmanager" signature="contextmanager(func)" />
      <scope doc="Return the current Thread object, corresponding to the&#10;caller's thread of control." ilk="function" name="current_thread" signature="current_thread()" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="local">
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" signature="__setattr__(self, name, value)" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" signature="__getattribute__(self, name)" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" signature="__delattr__(self, name)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kw)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ref">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
    </scope>
    <scope doc="This module tries to retrieve as much platform-identifying data as&#10;possible. It makes this information available via function APIs.  If called from the command line, it prints the platform information concatenated as single string to stdout. The output format is useable as part of a filename." ilk="blob" lang="Python3" name="platform">
      <variable citdl="str" name="DEV_NULL" />
      <variable citdl="str" name="__copyright__" />
      <scope doc="Queries the given executable (defaults to the Python&#10;interpreter binary) for various architecture information." ilk="function" name="architecture" signature="architecture(executable='/tmp/Python-3.5.1/python', bits='', linkage='')" />
      <import module="collections" />
      <scope doc="Tries to determine the name of the Linux OS distribution&#10;name." ilk="function" name="dist" signature="dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'arch', 'mageia'))" />
      <scope doc="Version interface for Jython." ilk="function" name="java_ver" signature="java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))" />
      <scope doc="Tries to determine the libc version that the file executable&#10;(which defaults to the Python interpreter) is linked&#10;against." ilk="function" name="libc_ver" signature="libc_ver(executable='/tmp/Python-3.5.1/python', lib='', version='', chunksize=16384)" />
      <scope ilk="function" name="linux_distribution" signature="linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'arch', 'mageia'), full_distribution_name=1)" />
      <scope doc="Get MacOS version information and return it as tuple&#10;(release, versioninfo, machine) with versioninfo being a&#10;tuple (version, dev_stage, non_release_version)." ilk="function" name="mac_ver" signature="mac_ver(release='', versioninfo=('', '', ''), machine='')" />
      <scope doc="Returns the machine type, e.g." ilk="function" name="machine" signature="machine()" />
      <scope doc="Returns the computer's network name (which may not be fully&#10;qualified)" ilk="function" name="node" signature="node()" />
      <import module="os" />
      <scope doc="Returns a single string identifying the underlying platform&#10;with as much useful information as possible (but no more :)." ilk="function" name="platform" signature="platform(aliased=0, terse=0)" />
      <scope doc="Portable popen() interface." ilk="function" name="popen" signature="popen(cmd, mode='r', bufsize=-1)" />
      <scope doc="Returns the (true) processor name, e.g." ilk="function" name="processor" signature="processor()" />
      <scope doc="Returns a string identifying the Python implementation&#10;branch." ilk="function" name="python_branch" signature="python_branch()" />
      <scope doc="Returns a tuple (buildno, builddate) stating the Python&#10;build number and date as strings." ilk="function" name="python_build" signature="python_build()" />
      <scope doc="Returns a string identifying the compiler used for compiling&#10;Python." ilk="function" name="python_compiler" signature="python_compiler()" />
      <scope doc="Returns a string identifying the Python implementation." ilk="function" name="python_implementation" signature="python_implementation()" />
      <scope doc="Returns a string identifying the Python implementation&#10;revision." ilk="function" name="python_revision" signature="python_revision()" />
      <scope doc="Returns the Python version as string&#10;'major.minor.patchlevel'" ilk="function" name="python_version" signature="python_version()" />
      <scope doc="Returns the Python version as tuple (major, minor,&#10;patchlevel) of strings." ilk="function" name="python_version_tuple" signature="python_version_tuple()" />
      <import module="re" />
      <scope doc="Returns the system's release, e.g." ilk="function" name="release" signature="release()" />
      <import module="subprocess" />
      <import module="sys" />
      <scope doc="Returns the system/OS name, e.g." ilk="function" name="system" signature="system()" />
      <scope doc="marketing names used for some systems." ilk="function" name="system_alias" signature="Returns (system, release, version) aliased to common" />
      <scope doc="Fairly portable uname interface." ilk="function" name="uname" signature="uname()" />
      <scope classrefs="tuple" doc="uname_result(system, node, release, version, machine, processor)&#10;" ilk="class" name="uname_result">
        <scope doc="Return a new uname_result object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new uname_result object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Create new instance of uname_result(system, node, release,&#10;version, machine, processor)" ilk="function" name="__new__" signature="__new__(_cls, system, node, release, version, machine, processor)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <scope doc="Returns the system's release version, e.g." ilk="function" name="version" signature="version()" />
      <import module="warnings" />
      <scope ilk="function" name="win32_ver" signature="win32_ver(release='', version='', csd='', ptype='')" />
    </scope>
    <scope doc="An NNTP client class based on:&#10;- RFC 977: Network News Transfer Protocol - RFC 2980: Common NNTP Extensions - RFC 3977: Network News Transfer Protocol (version 2)  Example:  &gt;&gt;&gt; from nntplib import NNTP &gt;&gt;&gt; s = NNTP('news') &gt;&gt;&gt; resp, count, first, last, name = s.group('comp.lang.python') &gt;&gt;&gt; print('Group', name, 'has', count, 'articles, range', first, 'to', last)" ilk="blob" lang="Python3" name="nntplib">
      <scope classrefs="tuple" doc="ArticleInfo(number, message_id, lines)&#10;" ilk="class" name="ArticleInfo">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new ArticleInfo object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of ArticleInfo(number, message_id,&#10;lines)" ilk="function" name="__new__" signature="__new__(_cls, number, message_id, lines)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new ArticleInfo object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="tuple" doc="GroupInfo(group, last, first, flag)&#10;" ilk="class" name="GroupInfo">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new GroupInfo object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of GroupInfo(group, last, first, flag)" ilk="function" name="__new__" signature="__new__(_cls, group, last, first, flag)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new GroupInfo object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_NNTPBase" doc="&#10;" ilk="class" name="NNTP">
        <scope doc="Initialize an instance." ilk="function" name="__init__" signature="__init__(self, host, port=119, user=None, password=None, readermode=None, usenetrc=False, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope ilk="function" name="_close" signature="_close(self)" />
      </scope>
      <scope classrefs="NNTPError" doc="Error in response data&#10;" ilk="class" name="NNTPDataError" />
      <scope classrefs="Exception" doc="Base class for all nntplib exceptions&#10;" ilk="class" name="NNTPError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <scope classrefs="NNTPError" doc="5xx errors&#10;" ilk="class" name="NNTPPermanentError" />
      <scope classrefs="NNTPError" doc="Response does not begin with [1-5]&#10;" ilk="class" name="NNTPProtocolError" />
      <scope classrefs="NNTPError" doc="Unexpected [123]xx reply&#10;" ilk="class" name="NNTPReplyError" />
      <scope classrefs="NNTPError" doc="4xx errors&#10;" ilk="class" name="NNTPTemporaryError" />
      <variable citdl="int" name="NNTP_PORT" />
      <scope classrefs="_NNTPBase" doc="&#10;" ilk="class" name="NNTP_SSL">
        <scope doc="This works identically to NNTP.__init__, except for the&#10;change in default port and the `ssl_context` argument for&#10;SSL connections." ilk="function" name="__init__" signature="__init__(self, host, port=563, user=None, password=None, ssl_context=None, readermode=None, usenetrc=False, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope ilk="function" name="_close" signature="_close(self)" />
      </scope>
      <variable citdl="int" name="NNTP_SSL_PORT" />
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="datetime" />
      <scope doc="Takes an unicode string representing a munged header value&#10;and decodes it as a (possibly non-ASCII) readable value." ilk="function" name="decode_header" signature="decode_header(header_str)" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <import module="warnings" />
    </scope>
    <scope doc="Fix incompatible renames&#10;Fixes: * sys.maxint -&gt; sys.maxsize" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_renames">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixRenames">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <variable citdl="dict" name="LOOKUP" />
      <variable citdl="dict" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <scope ilk="function" name="build_pattern" signature="build_pattern()" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Pathname and path-related operations for the Macintosh.&#10;" ilk="blob" lang="Python3" name="macpath">
      <variable citdl="int" name="FILE_ATTRIBUTE_ARCHIVE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_COMPRESSED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_DEVICE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_DIRECTORY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_ENCRYPTED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_HIDDEN" />
      <variable citdl="int" name="FILE_ATTRIBUTE_INTEGRITY_STREAM" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NORMAL" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NO_SCRUB_DATA" />
      <variable citdl="int" name="FILE_ATTRIBUTE_OFFLINE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_READONLY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_REPARSE_POINT" />
      <variable citdl="int" name="FILE_ATTRIBUTE_SPARSE_FILE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_SYSTEM" />
      <variable citdl="int" name="FILE_ATTRIBUTE_TEMPORARY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_VIRTUAL" />
      <variable citdl="int" name="SF_APPEND" />
      <variable citdl="int" name="SF_ARCHIVED" />
      <variable citdl="int" name="SF_IMMUTABLE" />
      <variable citdl="int" name="SF_NOUNLINK" />
      <variable citdl="int" name="SF_SNAPSHOT" />
      <variable citdl="int" name="ST_ATIME" />
      <variable citdl="int" name="ST_CTIME" />
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_GID" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" name="ST_NLINK" />
      <variable citdl="int" name="ST_SIZE" />
      <variable citdl="int" name="ST_UID" />
      <variable citdl="int" name="S_ENFMT" />
      <variable citdl="int" name="S_IEXEC" />
      <variable citdl="int" name="S_IFBLK" />
      <variable citdl="int" name="S_IFCHR" />
      <variable citdl="int" name="S_IFDIR" />
      <variable citdl="int" name="S_IFDOOR" />
      <variable citdl="int" name="S_IFIFO" />
      <variable citdl="int" name="S_IFLNK" />
      <scope doc="Return the portion of the file's mode that describes the&#10;file type." ilk="function" name="S_IFMT" />
      <variable citdl="int" name="S_IFPORT" />
      <variable citdl="int" name="S_IFREG" />
      <variable citdl="int" name="S_IFSOCK" />
      <variable citdl="int" name="S_IFWHT" />
      <scope doc="Return the portion of the file's mode that can be set by&#10;os.chmod()." ilk="function" name="S_IMODE" />
      <variable citdl="int" name="S_IREAD" />
      <variable citdl="int" name="S_IRGRP" />
      <variable citdl="int" name="S_IROTH" />
      <variable citdl="int" name="S_IRUSR" />
      <variable citdl="int" name="S_IRWXG" />
      <variable citdl="int" name="S_IRWXO" />
      <variable citdl="int" name="S_IRWXU" />
      <scope doc="Return True if mode is from a block special device file." ilk="function" name="S_ISBLK" returns="bool" signature="S_ISBLK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a character special device file." ilk="function" name="S_ISCHR" returns="bool" signature="S_ISCHR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a directory." ilk="function" name="S_ISDIR" returns="bool" signature="S_ISDIR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a door." ilk="function" name="S_ISDOOR" returns="bool" signature="S_ISDOOR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a FIFO (named pipe)." ilk="function" name="S_ISFIFO" returns="bool" signature="S_ISFIFO(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISGID" />
      <scope doc="Return True if mode is from a symbolic link." ilk="function" name="S_ISLNK" returns="bool" signature="S_ISLNK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from an event port." ilk="function" name="S_ISPORT" returns="bool" signature="S_ISPORT(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a regular file." ilk="function" name="S_ISREG" returns="bool" signature="S_ISREG(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a socket." ilk="function" name="S_ISSOCK" returns="bool" signature="S_ISSOCK(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISUID" />
      <variable citdl="int" name="S_ISVTX" />
      <scope doc="Return True if mode is from a whiteout." ilk="function" name="S_ISWHT" returns="bool" signature="S_ISWHT(mode) -&gt; bool" />
      <variable citdl="int" name="S_IWGRP" />
      <variable citdl="int" name="S_IWOTH" />
      <variable citdl="int" name="S_IWRITE" />
      <variable citdl="int" name="S_IWUSR" />
      <variable citdl="int" name="S_IXGRP" />
      <variable citdl="int" name="S_IXOTH" />
      <variable citdl="int" name="S_IXUSR" />
      <variable citdl="int" name="UF_APPEND" />
      <variable citdl="int" name="UF_COMPRESSED" />
      <variable citdl="int" name="UF_HIDDEN" />
      <variable citdl="int" name="UF_IMMUTABLE" />
      <variable citdl="int" name="UF_NODUMP" />
      <variable citdl="int" name="UF_NOUNLINK" />
      <variable citdl="int" name="UF_OPAQUE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="NoneType" name="altsep" />
      <scope ilk="function" name="basename" signature="basename(s)" />
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope ilk="function" name="dirname" signature="dirname(s)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Dummy to retain interface-compatibility with other operating&#10;systems." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Dummy to retain interface-compatibility with other operating&#10;systems." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <scope doc="Convert a file's mode to a string of the form '-rwxrwxrwx'" ilk="function" name="filemode" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by&#10;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#10;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#10;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Return true if a path is absolute." ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Return true if the pathname refers to a symbolic link." ilk="function" name="islink" signature="islink(s)" />
      <scope ilk="function" name="ismount" signature="ismount(s)" />
      <scope ilk="function" name="join" signature="join(s, *p)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope classrefs="Exception" doc="Path cannot be normalized&#10;" ilk="class" name="norm_error" />
      <scope ilk="function" name="normcase" signature="normcase(path)" />
      <scope doc="Normalize a pathname." ilk="function" name="normpath" signature="normpath(s)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="# realpath is a no-op on systems without islink support" ilk="function" name="realpath" signature="realpath(path)" />
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" name="samefile" signature="samefile(f1, f2)" />
      <scope doc="Test whether two open file objects reference the same file" ilk="function" name="sameopenfile" signature="sameopenfile(fp1, fp2)" />
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" name="samestat" signature="samestat(s1, s2)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname into two parts: the directory leading up to&#10;the final bit, and the basename (the filename, without&#10;colons, in that directory)." ilk="function" name="split" signature="split(s)" />
      <scope doc="Split a pathname into a drive specification and the rest of&#10;the path." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <variable citdl="bool" name="supports_unicode_filenames" />
    </scope>
    <scope doc="Fixer for function definitions with tuple parameters.&#10;def func(((a, b), c), d): ...  -&gt;  def func(x, d): ((a, b), c) = x ...  It will also support lambdas:" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_tuple_params">
      <scope doc="Build an assignment statement" ilk="function" name="Assign" signature="Assign(target, source)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixTupleParams">
        <scope ilk="function" name="transform_lambda" signature="transform_lambda(self, node, results)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <scope doc="A numeric or string subscript" ilk="function" name="Subscript" signature="Subscript(index_node)" />
      <scope ilk="function" name="find_params" signature="find_params(node)" />
      <import module="fixer_base" />
      <scope ilk="function" name="is_docstring" signature="is_docstring(stmt)" />
      <scope ilk="function" name="map_to_index" signature="map_to_index(param_list, prefix=[], d=None)" />
      <import module="pytree" />
      <scope ilk="function" name="simplify_args" signature="simplify_args(node)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope ilk="function" name="tuple_name" signature="tuple_name(param_list)" />
    </scope>
    <scope doc="Functions that read and write gzipped files.&#10;The user of the file doesn't have to worry about the compression, but random access is not allowed." ilk="blob" lang="Python3" name="gzip">
      <variable citdl="int" name="FCOMMENT" />
      <variable citdl="int" name="FEXTRA" />
      <variable citdl="int" name="FHCRC" />
      <variable citdl="int" name="FNAME" />
      <variable citdl="int" name="FTEXT" />
      <scope classrefs="BaseStream" doc="The GzipFile class simulates most of the methods of a file object with&#10;the exception of the truncate() method.  This class only supports opening files in binary mode. If you need to open a compressed file in text mode, use the gzip.open() function." ilk="class" name="GzipFile">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Implements BufferedIOBase.read1()" ilk="function" name="read1" signature="read1(self, size=-1)" />
        <scope ilk="function" name="_write_gzip_header" signature="_write_gzip_header(self)" />
        <scope doc="Invoke the underlying file object's fileno() method." ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="_init_write" signature="_init_write(self, filename)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" signature="writable(self)" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" signature="readline(self, size=-1)" />
        <scope doc="Constructor for the GzipFile class." ilk="function" name="__init__" signature="__init__(self, filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, offset, whence=0)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self, zlib_mode=2)" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Return the uncompressed stream file position indicator to&#10;the beginning of the file" ilk="function" name="rewind" signature="rewind(self)" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope ilk="function" name="peek" signature="peek(self, n)" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" signature="seekable(self)" />
      </scope>
      <variable citdl="int" name="READ" />
      <variable citdl="int" name="WRITE" />
      <variable citdl="list" name="__all__" />
      <import module="_compression" />
      <import module="builtins" />
      <scope doc="Compress data in one shot and return the compressed string." ilk="function" name="compress" signature="compress(data, compresslevel=9)" />
      <scope doc="Decompress a gzip compressed string in one shot." ilk="function" name="decompress" signature="decompress(data)" />
      <import module="io" />
      <scope doc="Open a gzip-compressed file in binary or text mode." ilk="function" name="open" signature="open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)" />
      <import module="os" />
      <import module="struct" />
      <import module="sys" />
      <import module="time" />
      <scope ilk="function" name="write32u" signature="write32u(output, value)" />
      <import module="zlib" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="unittest.signals">
      <scope ilk="function" name="installHandler" signature="installHandler()" />
      <scope ilk="function" name="registerResult" signature="registerResult(result)" />
      <scope ilk="function" name="removeHandler" signature="removeHandler(method=None)" />
      <scope ilk="function" name="removeResult" signature="removeResult(result)" />
      <import module="signal" />
      <import module="weakref" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="Class representing message/* MIME documents.&#10;" ilk="blob" lang="Python3" name="email.mime.message">
      <scope classrefs="MIMENonMultipart" doc="Class representing message/* MIME documents.&#10;" ilk="class" name="MIMEMessage">
        <scope doc="Create a message/* type MIME document." ilk="function" name="__init__" signature="__init__(self, _msg, _subtype='rfc822')" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="message" />
    </scope>
    <scope doc="distutils.pypirc&#10;Provides the PyPIRCCommand class, the base class for the command classes that uses .pypirc in the distutils.command package." ilk="blob" lang="Python3" name="distutils.config">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="RawConfigParser" doc="ConfigParser implementing interpolation.&#10;" ilk="class" name="ConfigParser">
        <scope doc="Set an option." ilk="function" name="set" signature="set(self, section, option, value=None)" />
        <scope doc="Create a new section in the configuration." ilk="function" name="add_section" signature="add_section(self, section)" />
      </scope>
      <variable citdl="str" name="DEFAULT_PYPIRC" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="PyPIRCCommand">
        <scope doc="Reads the .pypirc file." ilk="function" name="_read_pypirc" signature="_read_pypirc(self)" />
        <scope doc="Creates a default .pypirc file." ilk="function" name="_store_pypirc" signature="_store_pypirc(self, username, password)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Returns rc file path." ilk="function" name="_get_rc_file" signature="_get_rc_file(self)" />
        <scope doc="Read and decode a PyPI HTTP response." ilk="function" name="_read_pypi_response" signature="_read_pypi_response(self, response)" />
      </scope>
      <import module="os" />
    </scope>
    <scope doc="Constants/functions for interpreting results of os.stat() and os.lstat().&#10;Suggested usage: from stat import *" ilk="blob" lang="Python3" name="stat">
      <variable citdl="int" name="FILE_ATTRIBUTE_ARCHIVE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_COMPRESSED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_DEVICE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_DIRECTORY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_ENCRYPTED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_HIDDEN" />
      <variable citdl="int" name="FILE_ATTRIBUTE_INTEGRITY_STREAM" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NORMAL" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NOT_CONTENT_INDEXED" />
      <variable citdl="int" name="FILE_ATTRIBUTE_NO_SCRUB_DATA" />
      <variable citdl="int" name="FILE_ATTRIBUTE_OFFLINE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_READONLY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_REPARSE_POINT" />
      <variable citdl="int" name="FILE_ATTRIBUTE_SPARSE_FILE" />
      <variable citdl="int" name="FILE_ATTRIBUTE_SYSTEM" />
      <variable citdl="int" name="FILE_ATTRIBUTE_TEMPORARY" />
      <variable citdl="int" name="FILE_ATTRIBUTE_VIRTUAL" />
      <variable citdl="int" name="SF_APPEND" />
      <variable citdl="int" name="SF_ARCHIVED" />
      <variable citdl="int" name="SF_IMMUTABLE" />
      <variable citdl="int" name="SF_NOUNLINK" />
      <variable citdl="int" name="SF_SNAPSHOT" />
      <variable citdl="int" name="ST_ATIME" />
      <variable citdl="int" name="ST_CTIME" />
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_GID" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" name="ST_NLINK" />
      <variable citdl="int" name="ST_SIZE" />
      <variable citdl="int" name="ST_UID" />
      <variable citdl="int" name="S_ENFMT" />
      <variable citdl="int" name="S_IEXEC" />
      <variable citdl="int" name="S_IFBLK" />
      <variable citdl="int" name="S_IFCHR" />
      <variable citdl="int" name="S_IFDIR" />
      <variable citdl="int" name="S_IFDOOR" />
      <variable citdl="int" name="S_IFIFO" />
      <variable citdl="int" name="S_IFLNK" />
      <scope doc="Return the portion of the file's mode that describes the&#10;file type." ilk="function" name="S_IFMT" />
      <variable citdl="int" name="S_IFPORT" />
      <variable citdl="int" name="S_IFREG" />
      <variable citdl="int" name="S_IFSOCK" />
      <variable citdl="int" name="S_IFWHT" />
      <scope doc="Return the portion of the file's mode that can be set by&#10;os.chmod()." ilk="function" name="S_IMODE" />
      <variable citdl="int" name="S_IREAD" />
      <variable citdl="int" name="S_IRGRP" />
      <variable citdl="int" name="S_IROTH" />
      <variable citdl="int" name="S_IRUSR" />
      <variable citdl="int" name="S_IRWXG" />
      <variable citdl="int" name="S_IRWXO" />
      <variable citdl="int" name="S_IRWXU" />
      <scope doc="Return True if mode is from a block special device file." ilk="function" name="S_ISBLK" returns="bool" signature="S_ISBLK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a character special device file." ilk="function" name="S_ISCHR" returns="bool" signature="S_ISCHR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a directory." ilk="function" name="S_ISDIR" returns="bool" signature="S_ISDIR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a door." ilk="function" name="S_ISDOOR" returns="bool" signature="S_ISDOOR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a FIFO (named pipe)." ilk="function" name="S_ISFIFO" returns="bool" signature="S_ISFIFO(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISGID" />
      <scope doc="Return True if mode is from a symbolic link." ilk="function" name="S_ISLNK" returns="bool" signature="S_ISLNK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from an event port." ilk="function" name="S_ISPORT" returns="bool" signature="S_ISPORT(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a regular file." ilk="function" name="S_ISREG" returns="bool" signature="S_ISREG(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a socket." ilk="function" name="S_ISSOCK" returns="bool" signature="S_ISSOCK(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISUID" />
      <variable citdl="int" name="S_ISVTX" />
      <scope doc="Return True if mode is from a whiteout." ilk="function" name="S_ISWHT" returns="bool" signature="S_ISWHT(mode) -&gt; bool" />
      <variable citdl="int" name="S_IWGRP" />
      <variable citdl="int" name="S_IWOTH" />
      <variable citdl="int" name="S_IWRITE" />
      <variable citdl="int" name="S_IWUSR" />
      <variable citdl="int" name="S_IXGRP" />
      <variable citdl="int" name="S_IXOTH" />
      <variable citdl="int" name="S_IXUSR" />
      <variable citdl="int" name="UF_APPEND" />
      <variable citdl="int" name="UF_COMPRESSED" />
      <variable citdl="int" name="UF_HIDDEN" />
      <variable citdl="int" name="UF_IMMUTABLE" />
      <variable citdl="int" name="UF_NODUMP" />
      <variable citdl="int" name="UF_NOUNLINK" />
      <variable citdl="int" name="UF_OPAQUE" />
      <scope doc="Convert a file's mode to a string of the form '-rwxrwxrwx'" ilk="function" name="filemode" />
    </scope>
    <scope doc="zipimport provides support for importing Python modules from Zip archives.&#10;This module exports three objects: - zipimporter: a class; its constructor takes a path to a Zip archive. - ZipImportError: exception raised by zipimporter objects. It's a subclass of ImportError, so it can be caught as ImportError, too. - _zip_directory_cache: a dict, mapping archive paths to zip directory info dicts, as used in zipimporter._files.  It is usually not needed to use the zipimport module explicitly; it is used by the builtin import mechanism for sys.path items that are paths to Zip archives." ilk="blob" lang="Python3" name="zipimport">
      <scope classrefs="ImportError" doc="Import can't find module, or can't find name in module.&#10;" ilk="class" name="ZipImportError" />
      <scope classrefs="object" doc="zipimporter(archivepath) -&gt; zipimporter object&#10;Create a new zipimporter instance. 'archivepath' must be a path to a zipfile, or to a specific path inside a zipfile. For example, it can be '/tmp/myimport.zip', or '/tmp/myimport.zip/mydirectory', if mydirectory is a valid directory inside the archive.  'ZipImportError is raised if 'archivepath' doesn't point to a valid Zip archive.  The 'archive' attribute of zipimporter objects contains the name of the zipfile targeted." ilk="class" name="zipimporter">
        <scope doc="Return the data associated with 'pathname'." ilk="function" name="get_data" returns="str" signature="get_data(pathname) -&gt; string with file data." />
        <scope doc="Return True if the module specified by fullname is a&#10;package." ilk="function" name="is_package" signature="is_package(fullname) -&gt; bool." />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return the filename for the specified module." ilk="function" name="get_filename" signature="get_filename(fullname) -&gt; filename string." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the source code for the specified module." ilk="function" name="get_source" signature="get_source(fullname) -&gt; source string." />
        <scope doc="Search for a module specified by 'fullname'." ilk="function" name="find_module" signature="find_module(fullname, path=None) -&gt; self or None." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Search for a module specified by 'fullname'." ilk="function" name="find_loader" signature="find_loader(fullname, path=None) -&gt; self, str or None." />
        <scope doc="Return the code object for the specified module." ilk="function" name="get_code" returns="code" signature="get_code(fullname) -&gt; code object." />
        <scope doc="Load the module specified by 'fullname'." ilk="function" name="load_module" signature="load_module(fullname) -&gt; module." />
      </scope>
    </scope>
    <scope doc="Logging package for Python. Based on PEP 282 and comments thereto in&#10;comp.lang.python.  Copyright (C) 2001-2015 Vinay Sajip. All Rights Reserved.  To use, simply 'import logging' and log away!" ilk="blob" lang="Python3" name="logging">
      <variable citdl="str" name="BASIC_FORMAT" />
      <scope classrefs="object" doc="A formatter suitable for formatting a number of records.&#10;" ilk="class" name="BufferingFormatter">
        <scope doc="Optionally specify a formatter which will be used to format&#10;each individual record." ilk="function" name="__init__" signature="__init__(self, linefmt=None)" />
        <scope doc="Return the header string for the specified records." ilk="function" name="formatHeader" signature="formatHeader(self, records)" />
        <scope doc="Return the footer string for the specified records." ilk="function" name="formatFooter" signature="formatFooter(self, records)" />
        <scope doc="Format the specified records and return the result as a&#10;string." ilk="function" name="format" signature="format(self, records)" />
      </scope>
      <variable citdl="int" name="CRITICAL" />
      <variable citdl="int" name="DEBUG" />
      <variable citdl="int" name="ERROR" />
      <variable citdl="int" name="FATAL" />
      <scope classrefs="StreamHandler" doc="A handler class which writes formatted logging records to disk files.&#10;" ilk="class" name="FileHandler">
        <scope doc="Open the specified file and use it as the stream for&#10;logging." ilk="function" name="__init__" signature="__init__(self, filename, mode='a', encoding=None, delay=False)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Closes the stream." ilk="function" name="close" signature="close(self)" />
        <scope doc="Open the current base file with the (original) mode and&#10;encoding." ilk="function" name="_open" signature="_open(self)" />
      </scope>
      <scope classrefs="object" doc="Filter instances are used to perform arbitrary filtering of LogRecords.&#10;Loggers and Handlers can optionally use Filter instances to filter records as desired. The base filter class only allows events which are below a certain point in the logger hierarchy. For example, a filter initialized with &quot;A.B&quot; will allow events logged by loggers &quot;A.B&quot;, &quot;A.B.C&quot;, &quot;A.B.C.D&quot;, &quot;A.B.D&quot; etc. but not &quot;A.BB&quot;, &quot;B.A.B&quot; etc. If initialized with the empty string, all events are passed." ilk="class" name="Filter">
        <scope doc="Initialize a filter." ilk="function" name="__init__" signature="__init__(self, name='')" />
        <scope doc="Determine if the specified record is to be logged." ilk="function" name="filter" signature="filter(self, record)" />
      </scope>
      <scope classrefs="object" doc="A base class for loggers and handlers which allows them to share&#10;common code." ilk="class" name="Filterer">
        <scope doc="Initialize the list of filters to be an empty list." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Determine if a record is loggable by consulting all the&#10;filters." ilk="function" name="filter" signature="filter(self, record)" />
        <scope doc="Add the specified filter to this handler." ilk="function" name="addFilter" signature="addFilter(self, filter)" />
        <scope doc="Remove the specified filter from this handler." ilk="function" name="removeFilter" signature="removeFilter(self, filter)" />
      </scope>
      <scope classrefs="object" doc="Formatter instances are used to convert a LogRecord to text.&#10;Formatters need to know how a LogRecord is constructed. They are responsible for converting a LogRecord to (usually) a string which can be interpreted by either a human or an external system. The base Formatter allows a formatting string to be specified. If none is supplied, the default value of &quot;%s(message)&quot; is used.  The Formatter can be initialized with a format string which makes use of knowledge of the LogRecord attributes - e.g. the default value mentioned above makes use of the fact that the user's message and arguments are pre- formatted into a LogRecord's message attribute. Currently, the useful" ilk="class" name="Formatter">
        <scope doc="Format and return the specified exception information as a&#10;string." ilk="function" name="formatException" signature="formatException(self, ei)" />
        <scope ilk="function" name="formatMessage" signature="formatMessage(self, record)" />
        <scope doc="This method is provided as an extension point for&#10;specialized formatting of stack information." ilk="function" name="formatStack" signature="formatStack(self, stack_info)" />
        <scope doc="Initialize the formatter with specified format strings." ilk="function" name="__init__" signature="__init__(self, fmt=None, datefmt=None, style='%')" />
        <scope doc="Return the creation time of the specified LogRecord as&#10;formatted text." ilk="function" name="formatTime" signature="formatTime(self, record, datefmt=None)" />
        <scope doc="Check if the format uses the creation time of the record." ilk="function" name="usesTime" signature="usesTime(self)" />
        <scope doc="Format the specified record as text." ilk="function" name="format" signature="format(self, record)" />
      </scope>
      <scope classrefs="Filterer" doc="Handler instances dispatch logging events to specific destinations.&#10;The base handler class. Acts as a placeholder which defines the Handler interface. Handlers can optionally use Formatter instances to format records as desired. By default, no formatter is specified; in this case, the 'raw' message as determined by record.message is logged." ilk="class" name="Handler">
        <scope doc="Acquire the I/O thread lock." ilk="function" name="acquire" signature="acquire(self)" />
        <scope doc="Conditionally emit the specified logging record." ilk="function" name="handle" signature="handle(self, record)" />
        <scope ilk="function" name="get_name" signature="get_name(self)" />
        <scope doc="Acquire a thread lock for serializing access to the&#10;underlying I/O." ilk="function" name="createLock" signature="createLock(self)" />
        <scope ilk="function" name="set_name" signature="set_name(self, name)" />
        <scope doc="Do whatever it takes to actually log the specified logging&#10;record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Initializes the instance - basically setting the formatter&#10;to None and the filter list to empty." ilk="function" name="__init__" signature="__init__(self, level=0)" />
        <scope doc="Set the formatter for this handler." ilk="function" name="setFormatter" signature="setFormatter(self, fmt)" />
        <scope doc="Ensure all logging output has been flushed." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Release the I/O thread lock." ilk="function" name="release" signature="release(self)" />
        <scope doc="Set the logging level of this handler." ilk="function" name="setLevel" signature="setLevel(self, level)" />
        <scope doc="Tidy up any resources used by the handler." ilk="function" name="close" signature="close(self)" />
        <scope doc="Format the specified record." ilk="function" name="format" signature="format(self, record)" />
        <scope doc="Handle errors which occur during an emit() call." ilk="function" name="handleError" signature="handleError(self, record)" />
      </scope>
      <variable citdl="int" name="INFO" />
      <scope classrefs="object" doc="A LogRecord instance represents an event being logged.&#10;LogRecord instances are created every time something is logged. They contain all the information pertinent to the event being logged. The main information passed in is in msg and args, which are combined using str(msg) % args to create the message field of the record. The record also includes information such as when the record was created, the source line where the logging call was made, and any exception information to be logged." ilk="class" name="LogRecord">
        <scope doc="Initialize a logging record with interesting information." ilk="function" name="__init__" signature="__init__(self, name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None, **kwargs)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return the message for this LogRecord." ilk="function" name="getMessage" signature="getMessage(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Filterer" doc="Instances of the Logger class represent a single logging channel. A&#10;&quot;logging channel&quot; indicates an area of an application. Exactly how an &quot;area&quot; is defined is up to the application developer. Since an application can have any number of areas, logging channels are identified by a unique string. Application areas can be nested (e.g. an area of &quot;input processing&quot; might include sub-areas &quot;read CSV files&quot;, &quot;read XLS files&quot; and &quot;read Gnumeric files&quot;). To cater for this natural nesting, channel names are organized into a namespace hierarchy where levels are separated by periods, much like the Java or Python package namespace. So in the instance given above, channel names might be &quot;input&quot; for the upper level, and &quot;input.csv&quot;, &quot;input.xls&quot; and &quot;input.gnu&quot; for the sub-levels." ilk="class" name="Logger">
        <scope doc="Convenience method for logging an ERROR with exception&#10;information." ilk="function" name="exception" signature="exception(self, msg, *args, exc_info=True, **kwargs)" />
        <scope doc="Call the handlers for the specified record." ilk="function" name="handle" signature="handle(self, record)" />
        <scope ilk="function" name="warn" signature="warn(self, msg, *args, **kwargs)" />
        <scope doc="Get a logger which is a descendant to this one." ilk="function" name="getChild" signature="getChild(self, suffix)" />
        <scope doc="Remove the specified handler from this logger." ilk="function" name="removeHandler" signature="removeHandler(self, hdlr)" />
        <scope doc="Log 'msg % args' with severity 'CRITICAL'." ilk="function" name="fatal" signature="fatal(self, msg, *args, **kwargs)" />
        <scope doc="Get the effective level for this logger." ilk="function" name="getEffectiveLevel" signature="getEffectiveLevel(self)" />
        <scope doc="Initialize the logger with a name and an optional level." ilk="function" name="__init__" signature="__init__(self, name, level=0)" />
        <scope doc="Low-level logging routine which creates a LogRecord and then&#10;calls all the handlers of this logger to handle the record." ilk="function" name="_log" signature="_log(self, level, msg, args, exc_info=None, extra=None, stack_info=False)" />
        <scope doc="Log 'msg % args' with severity 'ERROR'." ilk="function" name="error" signature="error(self, msg, *args, **kwargs)" />
        <scope doc="Pass a record to all relevant handlers." ilk="function" name="callHandlers" signature="callHandlers(self, record)" />
        <scope doc="Is this logger enabled for level 'level'?" ilk="function" name="isEnabledFor" signature="isEnabledFor(self, level)" />
        <scope doc="Log 'msg % args' with the integer severity 'level'." ilk="function" name="log" signature="log(self, level, msg, *args, **kwargs)" />
        <scope doc="Add the specified handler to this logger." ilk="function" name="addHandler" signature="addHandler(self, hdlr)" />
        <scope doc="Log 'msg % args' with severity 'INFO'." ilk="function" name="info" signature="info(self, msg, *args, **kwargs)" />
        <scope doc="Log 'msg % args' with severity 'CRITICAL'." ilk="function" name="critical" signature="critical(self, msg, *args, **kwargs)" />
        <scope doc="Set the logging level of this logger." ilk="function" name="setLevel" signature="setLevel(self, level)" />
        <scope doc="Find the stack frame of the caller so that we can note the&#10;source file name, line number and function name." ilk="function" name="findCaller" signature="findCaller(self, stack_info=False)" />
        <scope doc="See if this logger has any handlers configured." ilk="function" name="hasHandlers" signature="hasHandlers(self)" />
        <scope doc="Log 'msg % args' with severity 'WARNING'." ilk="function" name="warning" signature="warning(self, msg, *args, **kwargs)" />
        <scope doc="Log 'msg % args' with severity 'DEBUG'." ilk="function" name="debug" signature="debug(self, msg, *args, **kwargs)" />
        <scope doc="A factory method which can be overridden in subclasses to&#10;create specialized LogRecords." ilk="function" name="makeRecord" signature="makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)" />
      </scope>
      <scope classrefs="object" doc="An adapter for loggers which makes it easier to specify contextual&#10;information in logging output." ilk="class" name="LoggerAdapter">
        <scope doc="Delegate an exception call to the underlying logger." ilk="function" name="exception" signature="exception(self, msg, *args, exc_info=True, **kwargs)" />
        <scope ilk="function" name="warn" signature="warn(self, msg, *args, **kwargs)" />
        <scope doc="Delegate an info call to the underlying logger." ilk="function" name="info" signature="info(self, msg, *args, **kwargs)" />
        <scope doc="Get the effective level for the underlying logger." ilk="function" name="getEffectiveLevel" signature="getEffectiveLevel(self)" />
        <scope doc="Is this logger enabled for level 'level'?" ilk="function" name="isEnabledFor" signature="isEnabledFor(self, level)" />
        <scope doc="Delegate an error call to the underlying logger." ilk="function" name="error" signature="error(self, msg, *args, **kwargs)" />
        <scope doc="Initialize the adapter with a logger and a dict-like object&#10;which provides contextual information." ilk="function" name="__init__" signature="__init__(self, logger, extra)" />
        <scope doc="Process the logging message and keyword arguments passed in&#10;to a logging call to insert contextual information." ilk="function" name="process" signature="process(self, msg, kwargs)" />
        <scope doc="Delegate a log call to the underlying logger, after adding&#10;contextual information from this adapter instance." ilk="function" name="log" signature="log(self, level, msg, *args, **kwargs)" />
        <scope doc="Delegate a critical call to the underlying logger." ilk="function" name="critical" signature="critical(self, msg, *args, **kwargs)" />
        <scope doc="Set the specified level on the underlying logger." ilk="function" name="setLevel" signature="setLevel(self, level)" />
        <scope doc="See if the underlying logger has any handlers." ilk="function" name="hasHandlers" signature="hasHandlers(self)" />
        <scope doc="Delegate a warning call to the underlying logger." ilk="function" name="warning" signature="warning(self, msg, *args, **kwargs)" />
        <scope doc="Delegate a debug call to the underlying logger." ilk="function" name="debug" signature="debug(self, msg, *args, **kwargs)" />
      </scope>
      <scope classrefs="object" doc="There is [under normal circumstances] just one Manager instance, which&#10;holds the hierarchy of loggers." ilk="class" name="Manager">
        <scope doc="Ensure that children of the placeholder ph are connected to&#10;the specified logger." ilk="function" name="_fixupChildren" signature="_fixupChildren(self, ph, alogger)" />
        <scope doc="Get a logger with the specified name (channel name),&#10;creating it if it doesn't yet exist." ilk="function" name="getLogger" signature="getLogger(self, name)" />
        <scope doc="Initialize the manager with the root node of the logger&#10;hierarchy." ilk="function" name="__init__" signature="__init__(self, rootnode)" />
        <scope doc="Ensure that there are either loggers or placeholders all the&#10;way from the specified logger to the root of the logger&#10;hierarchy." ilk="function" name="_fixupParents" signature="_fixupParents(self, alogger)" />
        <scope doc="Set the class to be used when instantiating a logger with&#10;this Manager." ilk="function" name="setLoggerClass" signature="setLoggerClass(self, klass)" />
        <scope doc="Set the factory to be used when instantiating a log record&#10;with this Manager." ilk="function" name="setLogRecordFactory" signature="setLogRecordFactory(self, factory)" />
      </scope>
      <variable citdl="int" name="NOTSET" />
      <scope classrefs="Handler" doc="This handler does nothing. It's intended to be used to avoid the&#10;&quot;No handlers could be found for logger XXX&quot; one-off warning. This is important for library code, which may contain code to log events. If a user of the library does not configure logging, the one-off warning might be produced; to avoid this, the library developer simply needs to instantiate a NullHandler and add it to the top-level logger of the library module or package." ilk="class" name="NullHandler">
        <scope doc="Stub." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Stub." ilk="function" name="handle" signature="handle(self, record)" />
        <scope doc="Acquire a thread lock for serializing access to the&#10;underlying I/O." ilk="function" name="createLock" signature="createLock(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="PercentStyle">
        <scope ilk="function" name="usesTime" signature="usesTime(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fmt)" />
        <scope ilk="function" name="format" signature="format(self, record)" />
      </scope>
      <scope classrefs="object" doc="PlaceHolder instances are used in the Manager logger hierarchy to take&#10;the place of nodes for which no loggers have been defined. This class is intended for internal use only and not as part of the public API." ilk="class" name="PlaceHolder">
        <scope doc="Initialize with the specified logger being a child of this&#10;placeholder." ilk="function" name="__init__" signature="__init__(self, alogger)" />
        <scope doc="Add the specified logger as a child of this placeholder." ilk="function" name="append" signature="append(self, alogger)" />
      </scope>
      <scope classrefs="Logger" doc="A root logger is not that different to any other logger, except that&#10;it must have a logging level and there is only one instance of it in the hierarchy." ilk="class" name="RootLogger">
        <scope doc="Initialize the logger with the name &quot;root&quot;." ilk="function" name="__init__" signature="__init__(self, level)" />
      </scope>
      <scope classrefs="PercentStyle" doc="&#10;" ilk="class" name="StrFormatStyle">
        <scope ilk="function" name="format" signature="format(self, record)" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which writes logging records, appropriately formatted,&#10;to a stream. Note that this class does not close the stream, as sys.stdout or sys.stderr may be used." ilk="class" name="StreamHandler">
        <scope doc="Initialize the handler." ilk="function" name="__init__" signature="__init__(self, stream=None)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Flushes the stream." ilk="function" name="flush" signature="flush(self)" />
      </scope>
      <scope classrefs="PercentStyle" doc="&#10;" ilk="class" name="StringTemplateStyle">
        <scope ilk="function" name="usesTime" signature="usesTime(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fmt)" />
        <scope ilk="function" name="format" signature="format(self, record)" />
      </scope>
      <scope classrefs="object" doc="A string class for supporting $-substitutions.&#10;" ilk="class" name="Template">
        <scope ilk="function" name="_invalid" signature="_invalid(self, mo)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, template)" />
        <scope ilk="function" name="safe_substitute" signature="safe_substitute(*args, **kws)" />
        <scope ilk="function" name="substitute" signature="substitute(*args, **kws)" />
      </scope>
      <variable citdl="int" name="WARN" />
      <variable citdl="int" name="WARNING" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__status__" />
      <scope doc="Associate 'levelName' with 'level'." ilk="function" name="addLevelName" signature="addLevelName(level, levelName)" />
      <import module="atexit" />
      <scope doc="Do basic configuration for the logging system." ilk="function" name="basicConfig" signature="basicConfig(**kwargs)" />
      <scope doc="If capture is true, redirect all warnings to the logging&#10;package." ilk="function" name="captureWarnings" signature="captureWarnings(capture)" />
      <import module="collections" />
      <scope doc="Log a message with severity 'CRITICAL' on the root logger." ilk="function" name="critical" signature="critical(msg, *args, **kwargs)" />
      <scope ilk="function" name="currentframe" signature="currentframe()" />
      <scope doc="Log a message with severity 'DEBUG' on the root logger." ilk="function" name="debug" signature="debug(msg, *args, **kwargs)" />
      <scope doc="Disable all logging calls of severity 'level' and below." ilk="function" name="disable" signature="disable(level)" />
      <scope doc="Log a message with severity 'ERROR' on the root logger." ilk="function" name="error" signature="error(msg, *args, **kwargs)" />
      <scope doc="Log a message with severity 'ERROR' on the root logger, with&#10;exception information." ilk="function" name="exception" signature="exception(msg, *args, exc_info=True, **kwargs)" />
      <scope doc="Log a message with severity 'CRITICAL' on the root logger." ilk="function" name="fatal" signature="fatal(msg, *args, **kwargs)" />
      <scope doc="Return the textual representation of logging level 'level'." ilk="function" name="getLevelName" signature="getLevelName(level)" />
      <scope doc="Return the factory to be used when instantiating a log&#10;record." ilk="function" name="getLogRecordFactory" signature="getLogRecordFactory()" />
      <scope doc="Return a logger with the specified name, creating it if&#10;necessary." ilk="function" name="getLogger" signature="getLogger(name=None)" />
      <scope doc="Return the class to be used when instantiating a logger." ilk="function" name="getLoggerClass" signature="getLoggerClass()" />
      <scope doc="Log a message with severity 'INFO' on the root logger." ilk="function" name="info" signature="info(msg, *args, **kwargs)" />
      <import module="io" />
      <variable citdl="_StderrHandler" name="lastResort" />
      <scope doc="Log 'msg % args' with the integer severity 'level' on the&#10;root logger." ilk="function" name="log" signature="log(level, msg, *args, **kwargs)" />
      <variable citdl="bool" name="logMultiprocessing" />
      <variable citdl="bool" name="logProcesses" />
      <variable citdl="bool" name="logThreads" />
      <scope doc="Make a LogRecord whose attributes are defined by the&#10;specified dictionary, This function is useful for converting&#10;a logging event received over a socket connection (which is&#10;sent as a dictionary) into a LogRecord instance." ilk="function" name="makeLogRecord" signature="makeLogRecord(dict)" />
      <import module="os" />
      <variable citdl="bool" name="raiseExceptions" />
      <variable citdl="RootLogger" name="root" />
      <scope doc="Set the factory to be used when instantiating a log record." ilk="function" name="setLogRecordFactory" signature="setLogRecordFactory(factory)" />
      <scope doc="Set the class to be used when instantiating a logger." ilk="function" name="setLoggerClass" signature="setLoggerClass(klass)" />
      <scope doc="Perform any cleanup actions in the logging system (e.g." ilk="function" name="shutdown" signature="shutdown(handlerList=[&lt;weakref at 0x7f1186ac7188; to '_StderrHandler' at 0x7f1186abd748&gt;])" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="traceback" />
      <scope ilk="function" name="warn" signature="warn(msg, *args, **kwargs)" />
      <scope doc="Log a message with severity 'WARNING' on the root logger." ilk="function" name="warning" signature="warning(msg, *args, **kwargs)" />
      <import module="warnings" />
      <import module="weakref" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-freebsd4.IN">
      <scope ilk="function" name="CIRCLEQ_ENTRY" signature="CIRCLEQ_ENTRY(type)" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_LINKLOCAL" signature="IN6_IS_SCOPE_LINKLOCAL(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_BINDV6ONLY" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_ADDR_INT16_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_ULL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_USL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MNL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_ONE" />
      <variable citdl="int" name="IPV6_ADDR_INT32_SMP" />
      <variable citdl="int" name="IPV6_ADDR_INT32_TWO" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_GLOBAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_SITELOCAL" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <scope ilk="function" name="LIST_ENTRY" signature="LIST_ENTRY(type)" />
      <scope ilk="function" name="LIST_HEAD_INITIALIZER" signature="LIST_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="SLIST_ENTRY" signature="SLIST_ENTRY(type)" />
      <scope doc="# Included from sys/queue.h" ilk="function" name="SLIST_HEAD_INITIALIZER" signature="SLIST_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="STAILQ_ENTRY" signature="STAILQ_ENTRY(type)" />
      <scope ilk="function" name="STAILQ_HEAD_INITIALIZER" signature="STAILQ_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="TAILQ_ENTRY" signature="TAILQ_ENTRY(type)" />
      <scope ilk="function" name="TAILQ_HEAD_INITIALIZER" signature="TAILQ_HEAD_INITIALIZER(head)" />
    </scope>
    <scope doc="distutils.command.bdist_rpm&#10;Implements the Distutils 'bdist_rpm' command (create RPM source and binary distributions)." ilk="blob" lang="Python3" name="distutils.command.bdist_rpm">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="bdist_rpm">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="finalize_package_data" signature="finalize_package_data(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="_dist_path" signature="_dist_path(self, path)" />
        <scope doc="Format the changelog correctly and convert it to a list of&#10;strings" ilk="function" name="_format_changelog" signature="_format_changelog(self, changelog)" />
        <scope doc="Generate the text of an RPM spec file and return it as a&#10;list of strings (one per line)." ilk="function" name="_make_spec_file" signature="_make_spec_file(self)" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python&#10;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <import module="subprocess" />
      <import module="sys" />
      <scope doc="Create a file with the specified name and write 'contents'&#10;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="A parser of RFC 2822 and MIME email messages.&#10;" ilk="blob" lang="Python3" name="email.parser">
      <scope classrefs="FeedParser" doc="Like FeedParser, but feed accepts bytes.&#10;" ilk="class" name="BytesFeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
      </scope>
      <scope classrefs="BytesParser" doc="&#10;" ilk="class" name="BytesHeaderParser">
        <scope doc="Create a message structure from a byte string." ilk="function" name="parsebytes" signature="parsebytes(self, text, headersonly=True)" />
        <scope doc="Create a message structure from the data in a binary file." ilk="function" name="parse" signature="parse(self, fp, headersonly=True)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="BytesParser">
        <scope doc="Parser of binary RFC 2822 and MIME email messages." ilk="function" name="__init__" signature="__init__(self, *args, **kw)" />
        <scope doc="Create a message structure from a byte string." ilk="function" name="parsebytes" signature="parsebytes(self, text, headersonly=False)" />
        <scope doc="Create a message structure from the data in a binary file." ilk="function" name="parse" signature="parse(self, fp, headersonly=False)" />
      </scope>
      <scope classrefs="object" doc="A feed-style parser of email.&#10;" ilk="class" name="FeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope doc="# Non-public interface for supporting Parser's headersonly&#10;flag" ilk="function" name="_set_headersonly" signature="_set_headersonly(self)" />
        <scope doc="Parse all remaining data and return the root message object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_call_parse" signature="_call_parse(self)" />
        <scope ilk="function" name="_parse_headers" signature="_parse_headers(self, lines)" />
        <scope ilk="function" name="_parsegen" signature="_parsegen(self)" />
        <scope doc="_factory is called with no arguments to create a new message&#10;obj" ilk="function" name="__init__" signature="__init__(self, _factory=None, *, policy=Compat32())" />
        <scope ilk="function" name="_pop_message" signature="_pop_message(self)" />
        <scope ilk="function" name="_new_message" signature="_new_message(self)" />
      </scope>
      <scope classrefs="Parser" doc="&#10;" ilk="class" name="HeaderParser">
        <scope doc="Create a message structure from a string." ilk="function" name="parsestr" signature="parsestr(self, text, headersonly=True)" />
        <scope doc="Create a message structure from the data in a file." ilk="function" name="parse" signature="parse(self, fp, headersonly=True)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Parser">
        <scope doc="Parser of RFC 2822 and MIME email messages." ilk="function" name="__init__" signature="__init__(self, _class=None, *, policy=Compat32())" />
        <scope doc="Create a message structure from a string." ilk="function" name="parsestr" signature="parsestr(self, text, headersonly=False)" />
        <scope doc="Create a message structure from the data in a file." ilk="function" name="parse" signature="parse(self, fp, headersonly=False)" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see help(codecs.Codec) or the documentation for codecs.register) and defaults to &quot;strict&quot;.  newline controls how line endings are handled. It can be None, '', '\n', '\r', and '\r\n'.  It works as follows: " ilk="class" name="TextIOWrapper">
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read at most n characters from stream." ilk="function" name="read" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write string to stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="Compat32" name="compat32" />
    </scope>
    <scope doc="A library of useful helper classes to the SAX classes, for the&#10;convenience of application and driver writers." ilk="blob" lang="Python3" name="xml.sax.saxutils">
      <scope classrefs="XMLReader" doc="This class is designed to sit between an XMLReader and the&#10;client application's event handlers.  By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through." ilk="class" name="XMLFilterBase">
        <scope ilk="function" name="unparsedEntityDecl" signature="unparsedEntityDecl(self, name, publicId, systemId, ndata)" />
        <scope ilk="function" name="resolveEntity" signature="resolveEntity(self, publicId, systemId)" />
        <scope doc="Sets the value of a SAX2 property." ilk="function" name="setProperty" signature="setProperty(self, name, value)" />
        <scope doc="Allow an application to set the locale for errors and&#10;warnings." ilk="function" name="setLocale" signature="setLocale(self, locale)" />
        <scope ilk="function" name="startPrefixMapping" signature="startPrefixMapping(self, prefix, uri)" />
        <scope ilk="function" name="notationDecl" signature="notationDecl(self, name, publicId, systemId)" />
        <scope ilk="function" name="getParent" signature="getParent(self)" />
        <scope ilk="function" name="endElement" signature="endElement(self, name)" />
        <scope ilk="function" name="setParent" signature="setParent(self, parent)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, parent=None)" />
        <scope ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, chars)" />
        <scope doc="Sets the state of a SAX2 feature." ilk="function" name="setFeature" signature="setFeature(self, name, state)" />
        <scope ilk="function" name="error" signature="error(self, exception)" />
        <scope ilk="function" name="endElementNS" signature="endElementNS(self, name, qname)" />
        <scope ilk="function" name="setDocumentLocator" signature="setDocumentLocator(self, locator)" />
        <scope ilk="function" name="endDocument" signature="endDocument(self)" />
        <scope ilk="function" name="endPrefixMapping" signature="endPrefixMapping(self, prefix)" />
        <scope ilk="function" name="startDocument" signature="startDocument(self)" />
        <scope ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
        <scope doc="Looks up and returns the state of a SAX2 feature." ilk="function" name="getFeature" signature="getFeature(self, name)" />
        <scope ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope ilk="function" name="fatalError" signature="fatalError(self, exception)" />
        <scope doc="Parse an XML document from a system identifier or an&#10;InputSource." ilk="function" name="parse" signature="parse(self, source)" />
        <scope ilk="function" name="characters" signature="characters(self, content)" />
        <scope ilk="function" name="warning" signature="warning(self, exception)" />
        <scope doc="Looks up and returns the value of a SAX2 property." ilk="function" name="getProperty" signature="getProperty(self, name)" />
        <scope ilk="function" name="startElementNS" signature="startElementNS(self, name, qname, attrs)" />
        <scope ilk="function" name="skippedEntity" signature="skippedEntity(self, name)" />
      </scope>
      <scope classrefs="ContentHandler" doc="Interface for receiving logical document content events.&#10;This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document." ilk="class" name="XMLGenerator">
        <scope doc="Begin the scope of a prefix-URI Namespace mapping." ilk="function" name="startPrefixMapping" signature="startPrefixMapping(self, prefix, uri)" />
        <scope doc="Signals the end of an element in non-namespace mode." ilk="function" name="endElement" signature="endElement(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, out=None, encoding='iso-8859-1', short_empty_elements=False)" />
        <scope doc="Receive notification of ignorable whitespace in element&#10;content." ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, content)" />
        <scope doc="Signals the end of an element in namespace mode." ilk="function" name="endElementNS" signature="endElementNS(self, name, qname)" />
        <scope doc="Receive notification of the end of a document." ilk="function" name="endDocument" signature="endDocument(self)" />
        <scope doc="End the scope of a prefix-URI mapping." ilk="function" name="endPrefixMapping" signature="endPrefixMapping(self, prefix)" />
        <scope doc="Receive notification of the beginning of a document." ilk="function" name="startDocument" signature="startDocument(self)" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
        <scope doc="Receive notification of a processing instruction." ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope doc="Receive notification of character data." ilk="function" name="characters" signature="characters(self, content)" />
        <scope doc="Builds a qualified name from a (ns_url, localname) pair" ilk="function" name="_qname" signature="_qname(self, name)" />
        <scope ilk="function" name="_finish_pending_start_element" signature="_finish_pending_start_element(self, endElement=False)" />
        <scope doc="Signals the start of an element in namespace mode." ilk="function" name="startElementNS" signature="startElementNS(self, name, qname, attrs)" />
      </scope>
      <import module="codecs" />
      <scope doc="Escape &amp;, &lt;, and &gt; in a string of data." ilk="function" name="escape" signature="escape(data, entities={})" />
      <import module="handler" />
      <import module="io" />
      <import module="os" />
      <scope doc="This function takes an InputSource and an optional base URL&#10;and returns a fully resolved InputSource object ready for&#10;reading." ilk="function" name="prepare_input_source" signature="prepare_input_source(source, base='')" />
      <scope doc="Escape and quote an attribute value." ilk="function" name="quoteattr" signature="quoteattr(data, entities={})" />
      <scope doc="Unescape &amp;amp;, &amp;lt;, and &amp;gt; in a string of data." ilk="function" name="unescape" signature="unescape(data, entities={})" />
      <import module="urllib" />
      <import module="xmlreader" />
    </scope>
    <scope doc="Module implements the Mersenne Twister random number generator.&#10;" ilk="blob" lang="Python3" name="_random">
      <scope classrefs="object" doc="Random() -&gt; create a random number generator with its own internal state.&#10;" ilk="class" name="Random">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="getstate() -&gt; tuple containing the current state." ilk="function" name="getstate" returns="tuple" signature="getstate() -&gt; tuple containing the current state." />
        <scope doc="getrandbits(k) -&gt; x.  Generates an int with k random bits." ilk="function" name="getrandbits" signature="getrandbits(k) -&gt; x.  Generates an int with k random bits." />
        <scope doc="setstate(state) -&gt; None.  Restores generator state." ilk="function" name="setstate" signature="setstate(state) -&gt; None.  Restores generator state." />
        <scope doc="seed([n]) -&gt; None.  Defaults to current time." ilk="function" name="seed" signature="seed([n]) -&gt; None.  Defaults to current time." />
        <scope doc="random() -&gt; x in the interval [0, 1)." ilk="function" name="random" signature="random() -&gt; x in the interval [0, 1)." />
      </scope>
    </scope>
    <scope doc="This module provides the components needed to build your own __import__&#10;function.  Undocumented functions are obsolete.  In most cases it is preferred you consider using the importlib module's functionality over this module." ilk="blob" lang="Python3" name="imp">
      <variable citdl="int" name="C_BUILTIN" />
      <variable citdl="int" name="C_EXTENSION" />
      <variable citdl="int" name="IMP_HOOK" />
      <scope classrefs="object" doc="**DEPRECATED**&#10;Null import object." ilk="class" name="NullImporter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, path)" />
        <scope doc="Always returns None." ilk="function" name="find_module" signature="find_module(self, fullname)" />
      </scope>
      <variable citdl="int" name="PKG_DIRECTORY" />
      <variable citdl="int" name="PY_CODERESOURCE" />
      <variable citdl="int" name="PY_COMPILED" />
      <variable citdl="int" name="PY_FROZEN" />
      <variable citdl="int" name="PY_RESOURCE" />
      <variable citdl="int" name="PY_SOURCE" />
      <variable citdl="int" name="SEARCH_ERROR" />
      <scope classrefs="FileLoader _LoaderBasics" doc="Loader which handles sourceless file imports.&#10;" ilk="class" name="SourcelessFileLoader">
        <scope doc="Return None as there is no source code." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope doc="Acquires the interpreter's import lock for the current&#10;thread." ilk="function" name="acquire_lock" />
      <scope doc="**DEPRECATED**" ilk="function" name="cache_from_source" signature="cache_from_source(path, debug_override=None)" />
      <scope doc="Create an extension module." ilk="function" name="create_dynamic" />
      <scope doc="**DEPRECATED**" ilk="function" name="find_module" signature="find_module(name, path=None)" />
      <scope doc="Create a code object for a frozen module." ilk="function" name="get_frozen_object" />
      <scope doc="**DEPRECATED**" ilk="function" name="get_magic" signature="get_magic()" />
      <scope doc="**DEPRECATED**" ilk="function" name="get_suffixes" signature="get_suffixes()" />
      <scope doc="Return the magic tag for .pyc files." ilk="function" name="get_tag" signature="get_tag()" />
      <import module="importlib" />
      <scope doc="**DEPRECATED**" ilk="function" name="init_builtin" signature="init_builtin(name)" />
      <scope doc="Initializes a frozen module." ilk="function" name="init_frozen" />
      <scope doc="Returns True if the module name corresponds to a built-in&#10;module." ilk="function" name="is_builtin" />
      <scope doc="Returns True if the module name corresponds to a frozen&#10;module." ilk="function" name="is_frozen" />
      <scope doc="Returns True if the module name is of a frozen package." ilk="function" name="is_frozen_package" />
      <scope doc="**DEPRECATED**" ilk="function" name="load_compiled" signature="load_compiled(name, pathname, file=None)" />
      <scope doc="**DEPRECATED**" ilk="function" name="load_dynamic" signature="load_dynamic(name, path, file=None)" />
      <scope doc="**DEPRECATED**" ilk="function" name="load_module" signature="load_module(name, file, filename, details)" />
      <scope doc="**DEPRECATED**" ilk="function" name="load_package" signature="load_package(name, path)" />
      <scope ilk="function" name="load_source" signature="load_source(name, pathname, file=None)" />
      <scope doc="Return True if the import lock is currently held, else&#10;False." ilk="function" name="lock_held" />
      <import module="machinery" />
      <scope doc="**DEPRECATED**" ilk="function" name="new_module" signature="new_module(name)" />
      <import module="os" />
      <scope doc="Release the interpreter's import lock." ilk="function" name="release_lock" />
      <scope doc="**DEPRECATED**" ilk="function" name="reload" signature="reload(module)" />
      <scope doc="**DEPRECATED**" ilk="function" name="source_from_cache" signature="source_from_cache(path)" />
      <import module="sys" />
      <import module="tokenize" />
      <import module="types" />
      <import module="util" />
      <import module="warnings" />
    </scope>
    <scope doc="SAX driver for the pyexpat C module.  This driver works with&#10;pyexpat.__version__ == '2.22'." ilk="blob" lang="Python3" name="xml.sax.expatreader">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AttributesImpl">
        <scope ilk="function" name="getValue" signature="getValue(self, name)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope ilk="function" name="getType" signature="getType(self, name)" />
        <scope ilk="function" name="getQNameByName" signature="getQNameByName(self, name)" />
        <scope doc="Non-NS-aware implementation." ilk="function" name="__init__" signature="__init__(self, attrs)" />
        <scope ilk="function" name="getNames" signature="getNames(self)" />
        <scope ilk="function" name="items" signature="items(self)" />
        <scope ilk="function" name="get" signature="get(self, name, alternative=None)" />
        <scope ilk="function" name="getNameByQName" signature="getNameByQName(self, name)" />
        <scope ilk="function" name="keys" signature="keys(self)" />
        <scope ilk="function" name="values" signature="values(self)" />
        <scope ilk="function" name="getLength" signature="getLength(self)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="getValueByQName" signature="getValueByQName(self, name)" />
        <scope ilk="function" name="getQNames" signature="getQNames(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="AttributesImpl" doc="&#10;" ilk="class" name="AttributesNSImpl">
        <scope ilk="function" name="getNameByQName" signature="getNameByQName(self, name)" />
        <scope ilk="function" name="getQNameByName" signature="getQNameByName(self, name)" />
        <scope ilk="function" name="getValueByQName" signature="getValueByQName(self, name)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope doc="NS-aware implementation." ilk="function" name="__init__" signature="__init__(self, attrs, qnames)" />
        <scope ilk="function" name="getQNames" signature="getQNames(self)" />
      </scope>
      <scope classrefs="Locator" doc="Locator for use with the ExpatParser class.&#10;This uses a weak reference to the parser object to avoid creating a circular reference between the parser and the content handler." ilk="class" name="ExpatLocator">
        <scope doc="Return the system identifier for the current event." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Return the line number where the current event ends." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Return the public identifier for the current event." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, parser)" />
        <scope doc="Return the column number where the current event ends." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
      </scope>
      <scope classrefs="IncrementalParser Locator" doc="SAX driver for the pyexpat C module.&#10;" ilk="class" name="ExpatParser">
        <scope doc="Sets the value of a SAX2 property." ilk="function" name="setProperty" signature="setProperty(self, name, value)" />
        <scope doc="This method is called after close has been called to reset&#10;the parser so that it is ready to parse new documents." ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="notation_decl" signature="notation_decl(self, name, base, sysid, pubid)" />
        <scope doc="# event handlers" ilk="function" name="start_element" signature="start_element(self, name, attrs)" />
        <scope doc="Registers a new object to receive document content events." ilk="function" name="setContentHandler" signature="setContentHandler(self, handler)" />
        <scope ilk="function" name="_reset_lex_handler_prop" signature="_reset_lex_handler_prop(self)" />
        <scope ilk="function" name="start_doctype_decl" signature="start_doctype_decl(self, name, sysid, pubid, has_internal_subset)" />
        <scope doc="This method is called by the parse implementation to allow&#10;the SAX 2.0 driver to prepare itself for parsing." ilk="function" name="prepareParser" signature="prepareParser(self, source)" />
        <scope doc="# this is not used (call directly to ContentHandler)" ilk="function" name="character_data" signature="character_data(self, data)" />
        <scope doc="This method is called when the entire XML document has been&#10;passed to the parser through the feed method, to notify the&#10;parser that there are no more data." ilk="function" name="close" signature="close(self)" />
        <scope doc="Looks up and returns the state of a SAX2 feature." ilk="function" name="getFeature" signature="getFeature(self, name)" />
        <scope ilk="function" name="external_entity_ref" signature="external_entity_ref(self, context, base, sysid, pubid)" />
        <scope ilk="function" name="start_namespace_decl" signature="start_namespace_decl(self, prefix, uri)" />
        <scope doc="Return the public identifier for the current event." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Looks up and returns the value of a SAX2 property." ilk="function" name="getProperty" signature="getProperty(self, name)" />
        <scope ilk="function" name="skipped_entity_handler" signature="skipped_entity_handler(self, name, is_pe)" />
        <scope doc="This method gives the raw XML data in the data parameter to&#10;the parser and makes it parse the data, emitting the&#10;corresponding events." ilk="function" name="feed" signature="feed(self, data, isFinal=0)" />
        <scope ilk="function" name="unparsed_entity_decl" signature="unparsed_entity_decl(self, name, base, sysid, pubid, notation_name)" />
        <scope doc="# this is not used (call directly to ContentHandler)" ilk="function" name="processing_instruction" signature="processing_instruction(self, target, data)" />
        <scope ilk="function" name="end_element_ns" signature="end_element_ns(self, name)" />
        <scope ilk="function" name="_reset_cont_handler" signature="_reset_cont_handler(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, namespaceHandling=0, bufsize=65516)" />
        <scope ilk="function" name="end_namespace_decl" signature="end_namespace_decl(self, prefix)" />
        <scope doc="Sets the state of a SAX2 feature." ilk="function" name="setFeature" signature="setFeature(self, name, state)" />
        <scope doc="Return the column number where the current event ends." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
        <scope doc="Return the system identifier for the current event." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope ilk="function" name="start_element_ns" signature="start_element_ns(self, name, attrs)" />
        <scope doc="Return the line number where the current event ends." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Parse an XML document from a URL or an InputSource." ilk="function" name="parse" signature="parse(self, source)" />
        <scope ilk="function" name="end_element" signature="end_element(self, name)" />
      </scope>
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain&#10;basic error or warning information from either the XML parser or the application: you can subclass it to provide additional functionality, or to add localization. Note that although you will receive a SAXException as the argument to the handlers in the ErrorHandler interface, you are not actually required to raise the exception; instead, you can simply read the information in it." ilk="class" name="SAXException">
        <scope doc="Return a message for this exception." ilk="function" name="getMessage" signature="getMessage(self)" />
        <scope doc="Avoids weird error messages if someone does exception[ix] by&#10;mistake, since Exception has __getitem__ defined." ilk="function" name="__getitem__" signature="__getitem__(self, ix)" />
        <scope doc="Creates an exception." ilk="function" name="__init__" signature="__init__(self, msg, exception=None)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return the embedded exception, or None if there was none." ilk="function" name="getException" signature="getException(self)" />
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.&#10;An XMLReader will raise this exception when it is confronted with an unrecognized feature or property. SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.&#10;An XMLReader will raise this exception when a service it cannot perform is requested (specifically setting a state or value). SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.&#10;This exception will include information for locating the error in the original XML document. Note that although the application will receive a SAXParseException as the argument to the handlers in the ErrorHandler interface, the application is not actually required to raise the exception; instead, it can simply read the information in it and take a different action.  Since this exception is a subclass of SAXException, it inherits the ability to wrap another exception." ilk="class" name="SAXParseException">
        <scope doc="Get the system identifier of the entity where the exception&#10;occurred." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="The line number of the end of the text where the exception&#10;occurred." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Get the public identifier of the entity where the exception&#10;occurred." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Creates the exception." ilk="function" name="__init__" signature="__init__(self, msg, exception, locator)" />
        <scope doc="The column number of the end of the text where the exception&#10;occurred." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
      </scope>
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.&#10;An XMLReader module (driver) should raise this exception when it is first imported, e.g. when a support module cannot be imported. It also may be raised during parsing, e.g. if executing an external program is not permitted." ilk="class" name="SAXReaderNotAvailable" />
      <scope ilk="function" name="create_parser" signature="create_parser(*args, **kwargs)" />
      <import module="expat" />
      <variable citdl="str" name="feature_external_ges" />
      <variable citdl="str" name="feature_external_pes" />
      <variable citdl="str" name="feature_namespace_prefixes" />
      <variable citdl="str" name="feature_namespaces" />
      <variable citdl="str" name="feature_string_interning" />
      <variable citdl="str" name="feature_validation" />
      <import module="handler" />
      <variable citdl="str" name="property_interning_dict" />
      <variable citdl="str" name="property_xml_string" />
      <import module="saxutils" />
      <variable citdl="str" name="version" />
      <import module="xmlreader" />
    </scope>
    <scope doc="Path operations common to more than one OS&#10;Do not use directly.  The OS specific modules import the appropriate functions from this module themselves." ilk="blob" lang="Python3" name="genericpath">
      <variable citdl="list" name="__all__" />
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Return the last access time of a file, reported by&#10;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#10;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#10;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <import module="os" />
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" name="samefile" signature="samefile(f1, f2)" />
      <scope doc="Test whether two open file objects reference the same file" ilk="function" name="sameopenfile" signature="sameopenfile(fp1, fp2)" />
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" name="samestat" signature="samestat(s1, s2)" />
      <import module="stat" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="signal">
      <scope classrefs="IntEnum" doc="An enumeration.&#10;" ilk="class" name="Handlers">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <variable citdl="int" name="ITIMER_PROF" />
      <variable citdl="int" name="ITIMER_REAL" />
      <variable citdl="int" name="ITIMER_VIRTUAL" />
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="ItimerError" />
      <variable citdl="int" name="NSIG" />
      <variable citdl="Signals" name="SIGABRT" />
      <variable citdl="Signals" name="SIGALRM" />
      <variable citdl="Signals" name="SIGBUS" />
      <variable citdl="Signals" name="SIGCHLD" />
      <variable citdl="Signals" name="SIGCLD" />
      <variable citdl="Signals" name="SIGCONT" />
      <variable citdl="Signals" name="SIGFPE" />
      <variable citdl="Signals" name="SIGHUP" />
      <variable citdl="Signals" name="SIGILL" />
      <variable citdl="Signals" name="SIGINT" />
      <variable citdl="Signals" name="SIGIO" />
      <variable citdl="Signals" name="SIGIOT" />
      <variable citdl="Signals" name="SIGKILL" />
      <variable citdl="Signals" name="SIGPIPE" />
      <variable citdl="Signals" name="SIGPOLL" />
      <variable citdl="Signals" name="SIGPROF" />
      <variable citdl="Signals" name="SIGPWR" />
      <variable citdl="Signals" name="SIGQUIT" />
      <variable citdl="Signals" name="SIGRTMAX" />
      <variable citdl="Signals" name="SIGRTMIN" />
      <variable citdl="Signals" name="SIGSEGV" />
      <variable citdl="Signals" name="SIGSTOP" />
      <variable citdl="Signals" name="SIGSYS" />
      <variable citdl="Signals" name="SIGTERM" />
      <variable citdl="Signals" name="SIGTRAP" />
      <variable citdl="Signals" name="SIGTSTP" />
      <variable citdl="Signals" name="SIGTTIN" />
      <variable citdl="Signals" name="SIGTTOU" />
      <variable citdl="Signals" name="SIGURG" />
      <variable citdl="Signals" name="SIGUSR1" />
      <variable citdl="Signals" name="SIGUSR2" />
      <variable citdl="Signals" name="SIGVTALRM" />
      <variable citdl="Signals" name="SIGWINCH" />
      <variable citdl="Signals" name="SIGXCPU" />
      <variable citdl="Signals" name="SIGXFSZ" />
      <variable citdl="Sigmasks" name="SIG_BLOCK" />
      <variable citdl="Handlers" name="SIG_DFL" />
      <variable citdl="Handlers" name="SIG_IGN" />
      <variable citdl="Sigmasks" name="SIG_SETMASK" />
      <variable citdl="Sigmasks" name="SIG_UNBLOCK" />
      <scope classrefs="IntEnum" doc="An enumeration.&#10;" ilk="class" name="Sigmasks">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <scope classrefs="IntEnum" doc="An enumeration.&#10;" ilk="class" name="Signals">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <import module="_signal" />
      <scope doc="Arrange for SIGALRM to arrive after the given number of&#10;seconds." ilk="function" name="alarm" />
      <scope doc="The default handler for SIGINT installed by Python." ilk="function" name="default_int_handler" signature="default_int_handler(...)" />
      <scope doc="Returns current value of given itimer." ilk="function" name="getitimer" />
      <scope doc="Return the current action for the given signal." ilk="function" name="getsignal" signature="getsignal(signalnum)" />
      <scope doc="Wait until a signal arrives." ilk="function" name="pause" />
      <scope doc="Send a signal to a thread." ilk="function" name="pthread_kill" />
      <scope doc="Fetch and/or change the signal mask of the calling thread." ilk="function" name="pthread_sigmask" signature="pthread_sigmask(how, mask)" />
      <scope doc="Sets the fd to be written to (with the signal number) when a&#10;signal comes in." ilk="function" name="set_wakeup_fd" signature="set_wakeup_fd(fd) -&gt; fd" />
      <scope doc="Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL or&#10;ITIMER_PROF)." ilk="function" name="setitimer" />
      <scope doc="Change system call restart behaviour." ilk="function" name="siginterrupt" />
      <scope doc="Set the action for the given signal." ilk="function" name="signal" signature="signal(signalnum, handler)" />
      <scope doc="Examine pending signals." ilk="function" name="sigpending" signature="sigpending()" />
      <scope doc="Like sigwaitinfo(), but with a timeout." ilk="function" name="sigtimedwait" />
      <scope ilk="function" name="sigwait" signature="sigwait(sigset)" />
      <scope doc="Wait synchronously until one of the signals in *sigset* is&#10;delivered." ilk="function" name="sigwaitinfo" />
      <scope classrefs="tuple" doc="struct_siginfo: Result from sigwaitinfo or sigtimedwait.&#10;This object may be accessed either as a tuple of (si_signo, si_code, si_errno, si_pid, si_uid, si_status, si_band), or via the attributes si_signo, si_code, and so on." ilk="class" name="struct_siginfo">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Append module search paths for third-party packages to sys.path.&#10;**************************************************************** * This module is automatically imported during initialization. * ****************************************************************  This will append site-specific paths to the module search path.  On Unix (including Mac OSX), it starts with sys.prefix and sys.exec_prefix (if different) and appends lib/python&lt;version&gt;/site-packages. On other platforms (such as Windows), it tries each of the prefixes directly, as well as with lib/site-packages appended.  The" ilk="blob" lang="Python3" name="site">
      <variable citdl="str" name="CONFIG_LINE" />
      <variable citdl="bool" name="ENABLE_USER_SITE" />
      <variable citdl="list" name="PREFIXES" />
      <variable citdl="str" name="USER_BASE" />
      <variable citdl="str" name="USER_SITE" />
      <import module="_sitebuiltins" />
      <scope doc="Set all module __file__ and __cached__ attributes to an&#10;absolute path" ilk="function" name="abs_paths" signature="abs_paths()" />
      <scope doc="Process a .pth file within the site-packages directory: For&#10;each line in the file, either combine it with sitedir to a&#10;path and add that to known_paths, or execute it if it starts&#10;with 'import '." ilk="function" name="addpackage" signature="addpackage(sitedir, name, known_paths)" />
      <scope doc="Add 'sitedir' argument to sys.path if missing and handle&#10;.pth files in 'sitedir'" ilk="function" name="addsitedir" signature="addsitedir(sitedir, known_paths=None)" />
      <scope doc="Add site-packages to sys.path" ilk="function" name="addsitepackages" signature="addsitepackages(known_paths, prefixes=None)" />
      <scope doc="Add a per user site-package to sys.path" ilk="function" name="addusersitepackages" signature="addusersitepackages(known_paths)" />
      <scope doc="On Windows, some default encodings are not provided by&#10;Python, while they are always available as &quot;mbcs&quot; in each&#10;locale." ilk="function" name="aliasmbcs" signature="aliasmbcs()" />
      <import module="builtins" />
      <scope doc="Check if user site directory is safe for inclusion" ilk="function" name="check_enableusersite" signature="check_enableusersite()" />
      <scope doc="Enable default readline configuration on interactive&#10;prompts, by registering a sys.__interactivehook__." ilk="function" name="enablerlcompleter" signature="enablerlcompleter()" />
      <scope doc="Run custom site specific code, if available." ilk="function" name="execsitecustomize" signature="execsitecustomize()" />
      <scope doc="Run custom user specific code, if available." ilk="function" name="execusercustomize" signature="execusercustomize()" />
      <scope doc="Returns a list containing all global site-packages&#10;directories." ilk="function" name="getsitepackages" signature="getsitepackages(prefixes=None)" />
      <scope doc="Returns the `user base` directory path." ilk="function" name="getuserbase" signature="getuserbase()" />
      <scope doc="Returns the user-specific site-packages directory path." ilk="function" name="getusersitepackages" signature="getusersitepackages()" />
      <scope doc="Add standard site-specific directories to the module search&#10;path." ilk="function" name="main" signature="main()" />
      <scope ilk="function" name="makepath" signature="makepath(*paths)" />
      <import module="os" />
      <scope doc="Remove duplicate entries from sys.path along with making&#10;them absolute" ilk="function" name="removeduppaths" signature="removeduppaths()" />
      <scope doc="Set 'copyright' and 'credits' in builtins" ilk="function" name="setcopyright" signature="setcopyright()" />
      <scope ilk="function" name="sethelper" signature="sethelper()" />
      <scope doc="Define new builtins 'quit' and 'exit'." ilk="function" name="setquit" signature="setquit()" />
      <import module="sys" />
      <scope ilk="function" name="venv" signature="venv(known_paths)" />
    </scope>
    <scope doc="# Module which supports allocation of ctypes objects from shared memory&#10;# # multiprocessing/sharedctypes.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.sharedctypes">
      <scope doc="Return a synchronization wrapper for a RawArray" ilk="function" name="Array" signature="Array(typecode_or_type, size_or_initializer, *, lock=True, ctx=None)" />
      <scope classrefs="Pickler" doc="Pickler subclass used by multiprocessing.&#10;" ilk="class" name="ForkingPickler">
        <scope doc="Register a reduce function for a type." ilk="function" name="register" />
        <scope ilk="function" name="dumps" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <scope doc="Returns a ctypes array allocated from shared memory" ilk="function" name="RawArray" signature="RawArray(typecode_or_type, size_or_initializer)" />
      <scope doc="Returns a ctypes object allocated from shared memory" ilk="function" name="RawValue" signature="RawValue(typecode_or_type, *args)" />
      <scope classrefs="SynchronizedBase" doc="&#10;" ilk="class" name="Synchronized" />
      <scope classrefs="SynchronizedBase" doc="&#10;" ilk="class" name="SynchronizedArray">
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, i, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, i)" />
        <scope ilk="function" name="__getslice__" signature="__getslice__(self, start, stop)" />
        <scope ilk="function" name="__setslice__" signature="__setslice__(self, start, stop, values)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="SynchronizedBase">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="get_lock" signature="get_lock(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, obj, lock=None, ctx=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="get_obj" signature="get_obj(self)" />
      </scope>
      <scope classrefs="SynchronizedArray" doc="&#10;" ilk="class" name="SynchronizedString" />
      <scope doc="Return a synchronization wrapper for a Value" ilk="function" name="Value" signature="Value(typecode_or_type, *args, lock=True, ctx=None)" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(obj)" />
      <variable citdl="WeakKeyDictionary" name="class_cache" />
      <scope ilk="function" name="copy" signature="copy(obj)" />
      <import module="ctypes" />
      <scope ilk="function" name="get_context" />
      <import module="heap" />
      <scope ilk="function" name="make_property" signature="make_property(name)" />
      <variable citdl="dict" name="prop_cache" />
      <scope ilk="function" name="rebuild_ctype" signature="rebuild_ctype(type_, wrapper, length)" />
      <scope ilk="function" name="reduce_ctype" signature="reduce_ctype(obj)" />
      <scope ilk="function" name="synchronized" signature="synchronized(obj, lock=None, ctx=None)" />
      <variable citdl="str" name="template" />
      <variable citdl="dict" name="typecode_to_type" />
      <import module="weakref" />
    </scope>
    <scope doc="Fixer for print.&#10;Change: 'print'          into 'print()' 'print ...'      into 'print(...)' 'print ... ,'    into 'print(..., end=&quot; &quot;)' 'print &gt;&gt;x, ...' into 'print(..., file=x)'  No changes are applied if print_function is imported from __future__" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_print">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixPrint">
        <scope ilk="function" name="add_kwarg" signature="add_kwarg(self, l_nodes, s_kwd, n_expr)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <variable citdl="NodePattern" name="parend_expr" />
      <import module="patcomp" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="ctypes.util">
      <import module="contextlib" />
      <scope ilk="function" name="find_library" signature="find_library(name)" />
      <import module="os" />
      <import module="re" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="tempfile" />
      <scope ilk="function" name="test" signature="test()" />
    </scope>
    <scope doc="Constants and membership tests for ASCII characters&#10;" ilk="blob" lang="Python3" name="curses.ascii">
      <variable citdl="int" name="ACK" />
      <variable citdl="int" name="BEL" />
      <variable citdl="int" name="BS" />
      <variable citdl="int" name="CAN" />
      <variable citdl="int" name="CR" />
      <variable citdl="int" name="DC1" />
      <variable citdl="int" name="DC2" />
      <variable citdl="int" name="DC3" />
      <variable citdl="int" name="DC4" />
      <variable citdl="int" name="DEL" />
      <variable citdl="int" name="DLE" />
      <variable citdl="int" name="EM" />
      <variable citdl="int" name="ENQ" />
      <variable citdl="int" name="EOT" />
      <variable citdl="int" name="ESC" />
      <variable citdl="int" name="ETB" />
      <variable citdl="int" name="ETX" />
      <variable citdl="int" name="FF" />
      <variable citdl="int" name="FS" />
      <variable citdl="int" name="GS" />
      <variable citdl="int" name="HT" />
      <variable citdl="int" name="LF" />
      <variable citdl="int" name="NAK" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NUL" />
      <variable citdl="int" name="RS" />
      <variable citdl="int" name="SI" />
      <variable citdl="int" name="SO" />
      <variable citdl="int" name="SOH" />
      <variable citdl="int" name="SP" />
      <variable citdl="int" name="STX" />
      <variable citdl="int" name="SUB" />
      <variable citdl="int" name="SYN" />
      <variable citdl="int" name="TAB" />
      <variable citdl="int" name="US" />
      <variable citdl="int" name="VT" />
      <scope ilk="function" name="alt" signature="alt(c)" />
      <scope ilk="function" name="ascii" signature="ascii(c)" />
      <variable citdl="list" name="controlnames" />
      <scope ilk="function" name="ctrl" signature="ctrl(c)" />
      <scope ilk="function" name="isalnum" signature="isalnum(c)" />
      <scope ilk="function" name="isalpha" signature="isalpha(c)" />
      <scope ilk="function" name="isascii" signature="isascii(c)" />
      <scope ilk="function" name="isblank" signature="isblank(c)" />
      <scope ilk="function" name="iscntrl" signature="iscntrl(c)" />
      <scope ilk="function" name="isctrl" signature="isctrl(c)" />
      <scope ilk="function" name="isdigit" signature="isdigit(c)" />
      <scope ilk="function" name="isgraph" signature="isgraph(c)" />
      <scope ilk="function" name="islower" signature="islower(c)" />
      <scope ilk="function" name="ismeta" signature="ismeta(c)" />
      <scope ilk="function" name="isprint" signature="isprint(c)" />
      <scope ilk="function" name="ispunct" signature="ispunct(c)" />
      <scope ilk="function" name="isspace" signature="isspace(c)" />
      <scope ilk="function" name="isupper" signature="isupper(c)" />
      <scope ilk="function" name="isxdigit" signature="isxdigit(c)" />
      <scope ilk="function" name="unctrl" signature="unctrl(c)" />
    </scope>
    <scope doc="A POP3 client class.&#10;Based on the J. Myers POP3 draft, Jan. 96" ilk="blob" lang="Python3" name="poplib">
      <variable citdl="bytes" name="CR" />
      <variable citdl="bytes" name="CRLF" />
      <variable citdl="bool" name="HAVE_SSL" />
      <variable citdl="bytes" name="LF" />
      <scope classrefs="object" doc="This class supports both the minimal and optional command sets.&#10;Arguments can be strings or integers (where appropriate) (e.g.: retr(1) and retr('1') both work equally well.  Minimal Command Set: USER name               user(name) PASS string             pass_(string) STAT                    stat() LIST [msg]              list(msg = None) RETR msg                retr(msg) DELE msg                dele(msg)" ilk="class" name="POP3">
        <scope doc="Not sure what this does." ilk="function" name="rpop" signature="rpop(self, user)" />
        <scope doc="Request listing, return result." ilk="function" name="list" signature="list(self, which=None)" />
        <scope ilk="function" name="getwelcome" signature="getwelcome(self)" />
        <scope ilk="function" name="_putline" signature="_putline(self, line)" />
        <scope ilk="function" name="_getresp" signature="_getresp(self)" />
        <scope doc="Close the connection without assuming anything about it." ilk="function" name="close" signature="close(self)" />
        <scope doc="Delete message number 'which'." ilk="function" name="dele" signature="dele(self, which)" />
        <scope ilk="function" name="_putcmd" signature="_putcmd(self, line)" />
        <scope ilk="function" name="_getlongresp" signature="_getlongresp(self)" />
        <scope ilk="function" name="_getline" signature="_getline(self)" />
        <scope ilk="function" name="_longcmd" signature="_longcmd(self, line)" />
        <scope doc="Authorisation" ilk="function" name="apop" signature="apop(self, user, password)" />
        <scope ilk="function" name="_create_socket" signature="_create_socket(self, timeout)" />
        <scope doc="Does nothing." ilk="function" name="noop" signature="noop(self)" />
        <scope doc="Signoff: commit changes on server, unlock mailbox, close&#10;connection." ilk="function" name="quit" signature="quit(self)" />
        <scope doc="Send password, return response" ilk="function" name="pass_" signature="pass_(self, pswd)" />
        <scope doc="Get mailbox status." ilk="function" name="stat" signature="stat(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host, port=110, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope doc="Return server capabilities (RFC 2449) as a dictionary &gt;&gt;&gt;&#10;c=poplib.POP3('localhost') &gt;&gt;&gt; c.capa() {'IMPLEMENTATION':&#10;['Cyrus', 'POP3', 'server', 'v2.2.12']," ilk="function" name="capa" signature="capa(self)" />
        <scope doc="Retrieve whole message number 'which'." ilk="function" name="retr" signature="retr(self, which)" />
        <scope doc="Retrieve message header of message number 'which' and first&#10;'howmuch' lines of message body." ilk="function" name="top" signature="top(self, which, howmuch)" />
        <scope ilk="function" name="set_debuglevel" signature="set_debuglevel(self, level)" />
        <scope doc="Send user name, return response" ilk="function" name="user" signature="user(self, user)" />
        <scope doc="Try to enter UTF-8 mode (see RFC 6856)." ilk="function" name="utf8" signature="utf8(self)" />
        <scope doc="Unmark all messages marked for deletion." ilk="function" name="rset" signature="rset(self)" />
        <scope doc="Return message digest (unique id) list." ilk="function" name="uidl" signature="uidl(self, which=None)" />
        <scope doc="Start a TLS session on the active connection as specified in&#10;RFC 2595." ilk="function" name="stls" signature="stls(self, context=None)" />
        <scope ilk="function" name="_shortcmd" signature="_shortcmd(self, line)" />
      </scope>
      <variable citdl="int" name="POP3_PORT" />
      <scope classrefs="POP3" doc="POP3 client class over SSL connection&#10;Instantiate with: POP3_SSL(hostname, port=995, keyfile=None, certfile=None, context=None)  hostname - the hostname of the pop3 over ssl server port - port number keyfile - PEM formatted file that contains your private key certfile - PEM formatted certificate chain file context - a ssl.SSLContext  See the methods of the parent class POP3 for more documentation." ilk="class" name="POP3_SSL">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host, port=995, keyfile=None, certfile=None, timeout=&lt;object object at 0x7f11880dc170&gt;, context=None)" />
        <scope doc="The method unconditionally raises an exception since the&#10;STLS command doesn't make any sense on an already&#10;established SSL/TLS session." ilk="function" name="stls" signature="stls(self, keyfile=None, certfile=None, context=None)" />
        <scope ilk="function" name="_create_socket" signature="_create_socket(self, timeout)" />
      </scope>
      <variable citdl="int" name="POP3_SSL_PORT" />
      <variable citdl="list" name="__all__" />
      <import module="errno" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error_proto" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-freebsd7.IN">
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IFA6_IS_DEPRECATED" signature="IFA6_IS_DEPRECATED(a)" />
      <scope ilk="function" name="IFA6_IS_INVALID" signature="IFA6_IS_INVALID(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_INTFACELOCAL" signature="IN6_IS_ADDR_MC_INTFACELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_EMBED" signature="IN6_IS_SCOPE_EMBED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_LINKLOCAL" signature="IN6_IS_SCOPE_LINKLOCAL(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <scope ilk="function" name="IN_LINKLOCAL" signature="IN_LINKLOCAL(i)" />
      <scope ilk="function" name="IN_LOCAL_GROUP" signature="IN_LOCAL_GROUP(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_MAX" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CARP" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MOBILE" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OLD_DIVERT" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PFSYNC" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SCTP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SKIP" />
      <variable citdl="int" name="IPPROTO_SPACER" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TLSP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_ADDRCTLPOLICY" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_AUTO_LINKLOCAL" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_IFQ" />
      <variable citdl="int" name="IPV6CTL_ISATAPRTR" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MCAST_PMTU" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6CTL_RIP6STATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_STEALTH" />
      <variable citdl="int" name="IPV6CTL_TEMPPLTIME" />
      <variable citdl="int" name="IPV6CTL_TEMPVLTIME" />
      <variable citdl="int" name="IPV6CTL_USETEMPADDR" />
      <variable citdl="int" name="IPV6CTL_USE_DEFAULTZONE" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6CTL_V6ONLY" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_2292DSTOPTS" />
      <variable citdl="int" name="IPV6_2292HOPLIMIT" />
      <variable citdl="int" name="IPV6_2292HOPOPTS" />
      <variable citdl="int" name="IPV6_2292NEXTHOP" />
      <variable citdl="int" name="IPV6_2292PKTINFO" />
      <variable citdl="int" name="IPV6_2292PKTOPTIONS" />
      <variable citdl="int" name="IPV6_2292RTHDR" />
      <variable citdl="int" name="IPV6_ADDR_INT16_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_ULL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_USL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MNL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_ONE" />
      <variable citdl="int" name="IPV6_ADDR_INT32_SMP" />
      <variable citdl="int" name="IPV6_ADDR_INT32_TWO" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_GLOBAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_INTFACELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_SITELOCAL" />
      <variable citdl="int" name="IPV6_AUTOFLOWLABEL" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MSFILTER" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PATHMTU" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6_REACHCONF" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVHOPLIMIT" />
      <variable citdl="int" name="IPV6_RECVHOPOPTS" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVPATHMTU" />
      <variable citdl="int" name="IPV6_RECVPKTINFO" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVRTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_USE_MIN_MTU" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_ADD_SOURCE_MEMBERSHIP" />
      <variable citdl="int" name="IP_BLOCK_SOURCE" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DONTFRAG" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DROP_SOURCE_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_NAT_CFG" />
      <variable citdl="int" name="IP_FW_NAT_DEL" />
      <variable citdl="int" name="IP_FW_NAT_GET_CONFIG" />
      <variable citdl="int" name="IP_FW_NAT_GET_LOG" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_TABLE_ADD" />
      <variable citdl="int" name="IP_FW_TABLE_DEL" />
      <variable citdl="int" name="IP_FW_TABLE_FLUSH" />
      <variable citdl="int" name="IP_FW_TABLE_GETSIZE" />
      <variable citdl="int" name="IP_FW_TABLE_LIST" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MAX_SOURCE_FILTER" />
      <variable citdl="int" name="IP_MINTTL" />
      <variable citdl="int" name="IP_MIN_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MSFILTER" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_ONESBCAST" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RECVTTL" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_SENDSRCADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="IP_UNBLOCK_SOURCE" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="MCAST_BLOCK_SOURCE" />
      <variable citdl="int" name="MCAST_EXCLUDE" />
      <variable citdl="int" name="MCAST_INCLUDE" />
      <variable citdl="int" name="MCAST_JOIN_GROUP" />
      <variable citdl="int" name="MCAST_JOIN_SOURCE_GROUP" />
      <variable citdl="int" name="MCAST_LEAVE_GROUP" />
      <variable citdl="int" name="MCAST_LEAVE_SOURCE_GROUP" />
      <variable citdl="int" name="MCAST_UNBLOCK_SOURCE" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="__CC_SUPPORTS___FUNC__" />
      <variable citdl="int" name="__CC_SUPPORTS___INLINE__" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="in_nullhost" signature="in_nullhost(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
    </scope>
    <scope doc="distutils.command.bdist_dumb&#10;Implements the Distutils 'bdist_dumb' command (create a &quot;dumb&quot; built distribution -- i.e., just an archive to be unpacked under $prefix or $exec_prefix)." ilk="blob" lang="Python3" name="distutils.command.bdist_dumb">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="bdist_dumb">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope doc="Take the full path 'path', and make it a relative path." ilk="function" name="ensure_relative" signature="ensure_relative(path)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python&#10;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
    </scope>
    <scope doc="Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.&#10;The module ``_dummy_threading`` is added to ``sys.modules`` in order to not have ``threading`` considered imported.  Had ``threading`` been directly imported it would have made all subsequent imports succeed regardless of whether ``_thread`` was available which is not desired." ilk="blob" lang="Python3" name="dummy_threading">
      <scope classrefs="object" doc="Implements a Barrier.&#10;Useful for synchronizing a fixed number of threads at known synchronization points.  Threads block on 'wait()' and are simultaneously once they have all made that call." ilk="class" name="Barrier">
        <scope doc="Reset the barrier to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="# Optionally run the 'action' and release the threads&#10;waiting # in the barrier." ilk="function" name="_release" signature="_release(self)" />
        <scope ilk="function" name="_break" signature="_break(self)" />
        <scope doc="# Wait in the barrier until we are relased." ilk="function" name="_wait" signature="_wait(self, timeout)" />
        <scope doc="Create a barrier, initialised to 'parties' threads." ilk="function" name="__init__" signature="__init__(self, parties, action=None, timeout=None)" />
        <scope doc="Wait for the barrier." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="# If we are the last thread to exit the barrier, signal any&#10;threads # waiting for the barrier to drain." ilk="function" name="_exit" signature="_exit(self)" />
        <scope doc="Place the barrier into a 'broken' state." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="# Block until the barrier is ready for us, or raise an&#10;exception # if it is broken." ilk="function" name="_enter" signature="_enter(self)" />
      </scope>
      <scope classrefs="Semaphore" doc="Implements a bounded semaphore.&#10;A bounded semaphore checks to make sure its current value doesn't exceed its initial value. If it does, ValueError is raised. In most situations semaphores are used to guard resources with limited capacity.  If the semaphore is released too many times it's a sign of a bug. If not given, value defaults to 1.  Like regular semaphores, bounded semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return" ilk="class" name="BoundedSemaphore">
        <scope ilk="function" name="__init__" signature="__init__(self, value=1)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope classrefs="object" doc="Class that implements a condition variable.&#10;A condition variable allows one or more threads to wait until they are notified by another thread.  If the lock argument is given and not None, it must be a Lock or RLock object, and it is used as the underlying lock. Otherwise, a new RLock object is created and used as the underlying lock." ilk="class" name="Condition">
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notifyAll" signature="notifyAll(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Wait until a condition evaluates to True." ilk="function" name="wait_for" signature="wait_for(self, predicate, timeout=None)" />
        <scope ilk="function" name="_release_save" signature="_release_save(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, lock=None)" />
        <scope doc="Wait until notified or until a timeout occurs." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="Wake up one or more threads waiting on this condition, if&#10;any." ilk="function" name="notify" signature="notify(self, n=1)" />
        <scope ilk="function" name="_acquire_restore" signature="_acquire_restore(self, x)" />
        <scope ilk="function" name="_is_owned" signature="_is_owned(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="object" doc="Class implementing event objects.&#10;Events manage a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true.  The flag is initially false." ilk="class" name="Event">
        <scope doc="Reset the internal flag to false." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Set the internal flag to true." ilk="function" name="set" signature="set(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="isSet" signature="isSet(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Block until the internal flag is true." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="_reset_internal_locks" signature="_reset_internal_locks(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope doc="Dummy implementation of _thread.allocate_lock()." ilk="function" name="Lock" signature="Lock()" />
      <scope doc="Factory function that returns a new reentrant lock." ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <scope classrefs="object" doc="This class implements semaphore objects.&#10;Semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return without making the counter negative. If not given, value defaults to 1." ilk="class" name="Semaphore">
        <scope ilk="function" name="__exit__" signature="__exit__(self, t, v, tb)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="acquire" signature="acquire(self, blocking=True, timeout=None)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="__enter__" signature="__enter__(self, blocking=True, timeout=None)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
        <scope ilk="function" name="__init__" signature="__init__(self, value=1)" />
      </scope>
      <scope classrefs="object" doc="A class that represents a thread of control.&#10;This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass." ilk="class" name="Thread">
        <scope doc="Return whether the thread is alive." ilk="function" name="is_alive" signature="is_alive(self)" />
        <scope ilk="function" name="getName" signature="getName(self)" />
        <scope doc="Return whether the thread is alive." ilk="function" name="isAlive" signature="isAlive(self)" />
        <scope doc="Method representing the thread's activity." ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="_stop" signature="_stop(self)" />
        <scope ilk="function" name="_bootstrap" signature="_bootstrap(self)" />
        <scope doc="Set a lock object which will be released by the interpreter&#10;when the underlying thread state (see pystate.h) gets&#10;deleted." ilk="function" name="_set_tstate_lock" signature="_set_tstate_lock(self)" />
        <scope ilk="function" name="_wait_for_tstate_lock" signature="_wait_for_tstate_lock(self, block=True, timeout=-1)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_reset_internal_locks" signature="_reset_internal_locks(self, is_alive)" />
        <scope ilk="function" name="setDaemon" signature="setDaemon(self, daemonic)" />
        <scope doc="This constructor should always be called with keyword&#10;arguments." ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)" />
        <scope doc="Wait until the thread terminates." ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope ilk="function" name="setName" signature="setName(self, name)" />
        <scope ilk="function" name="_set_ident" signature="_set_ident(self)" />
        <scope ilk="function" name="isDaemon" signature="isDaemon(self)" />
        <scope ilk="function" name="_bootstrap_inner" signature="_bootstrap_inner(self)" />
        <scope doc="Start the thread's activity." ilk="function" name="start" signature="start(self)" />
        <scope doc="Remove current thread from the dict of currently running&#10;threads." ilk="function" name="_delete" signature="_delete(self)" />
      </scope>
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="ThreadError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Thread" doc="Call a function after a specified number of seconds:&#10;t = Timer(30.0, f, args=None, kwargs=None) t.start() t.cancel()     # stop the timer's action if it's still waiting" ilk="class" name="Timer">
        <scope ilk="function" name="__init__" signature="__init__(self, interval, function, args=None, kwargs=None)" />
        <scope doc="Stop the timer if it hasn't finished yet." ilk="function" name="cancel" signature="cancel(self)" />
        <scope ilk="function" name="run" signature="run(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return the number of Thread objects currently alive." ilk="function" name="active_count" signature="active_count()" />
      <scope doc="Return the current Thread object, corresponding to the&#10;caller's thread of control." ilk="function" name="current_thread" signature="current_thread()" />
      <scope doc="Return a list of all Thread objects currently alive." ilk="function" name="enumerate" signature="enumerate()" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="local">
        <scope ilk="function" name="__setattr__" signature="__setattr__(self, name, value)" />
        <scope ilk="function" name="__getattribute__" signature="__getattribute__(self, name)" />
        <scope ilk="function" name="__delattr__" signature="__delattr__(self, name)" />
        <scope ilk="function" name="__new__" signature="__new__(cls, *args, **kw)" />
      </scope>
      <scope doc="Set a profile function for all threads started from the&#10;threading module." ilk="function" name="setprofile" signature="setprofile(func)" />
      <scope doc="Set a trace function for all threads started from the&#10;threading module." ilk="function" name="settrace" signature="settrace(func)" />
      <scope doc="Dummy implementation of _thread.stack_size()." ilk="function" name="stack_size" signature="stack_size(size=None)" />
      <import module="threading" />
    </scope>
    <scope doc="# Dummy file to make this directory a package.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes" />
    <scope doc="&#10;" ilk="blob" lang="Python3" name="multiprocessing.context">
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="AuthenticationError" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="BaseContext">
        <scope doc="Returns a queue object" ilk="function" name="JoinableQueue" signature="JoinableQueue(self, maxsize=0)" />
        <scope doc="Returns a synchronized shared object" ilk="function" name="Value" signature="Value(self, typecode_or_type, *args, lock=True)" />
        <scope doc="Returns an event object" ilk="function" name="Event" signature="Event(self)" />
        <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
        <scope doc="Return list of process objects corresponding to live child&#10;processes" ilk="function" name="active_children" signature="active_children()" />
        <scope ilk="function" name="_check_available" signature="_check_available(self)" />
        <scope doc="Return package logger -- if it does not already exist then&#10;it is created." ilk="function" name="get_logger" signature="get_logger(self)" />
        <scope doc="Returns a queue object" ilk="function" name="SimpleQueue" signature="SimpleQueue(self)" />
        <scope doc="Returns a synchronized shared array" ilk="function" name="Array" signature="Array(self, typecode_or_type, size_or_initializer, *, lock=True)" />
        <scope ilk="function" name="set_start_method" signature="set_start_method(self, method=None)" />
        <scope doc="Check whether this is a fake forked process in a frozen&#10;executable." ilk="function" name="freeze_support" signature="freeze_support(self)" />
        <scope doc="Returns a shared array" ilk="function" name="RawArray" signature="RawArray(self, typecode_or_type, size_or_initializer)" />
        <scope doc="Returns two connection object connected by a pipe" ilk="function" name="Pipe" signature="Pipe(self, duplex=True)" />
        <scope doc="Returns a shared object" ilk="function" name="RawValue" signature="RawValue(self, typecode_or_type, *args)" />
        <scope doc="Returns a non-recursive lock object" ilk="function" name="Lock" signature="Lock(self)" />
        <scope doc="Returns a barrier object" ilk="function" name="Barrier" signature="Barrier(self, parties, action=None, timeout=None)" />
        <scope doc="Returns the number of CPUs in the system" ilk="function" name="cpu_count" signature="cpu_count(self)" />
        <scope doc="Returns a semaphore object" ilk="function" name="Semaphore" signature="Semaphore(self, value=1)" />
        <scope doc="Returns a recursive lock object" ilk="function" name="RLock" signature="RLock(self)" />
        <scope doc="Sets the path to a python.exe or pythonw.exe binary used to&#10;run child processes instead of sys.executable when using the&#10;'spawn' start method." ilk="function" name="set_executable" signature="set_executable(self, executable)" />
        <scope doc="Returns a condition object" ilk="function" name="Condition" signature="Condition(self, lock=None)" />
        <scope doc="Set list of module names to try to load in forkserver&#10;process." ilk="function" name="set_forkserver_preload" signature="set_forkserver_preload(self, module_names)" />
        <scope doc="Returns a bounded semaphore object" ilk="function" name="BoundedSemaphore" signature="BoundedSemaphore(self, value=1)" />
        <scope ilk="function" name="get_context" signature="get_context(self, method=None)" />
        <scope doc="Returns a manager associated with a running server process" ilk="function" name="Manager" signature="Manager(self)" />
        <scope doc="Install support for sending connections and sockets between&#10;processes" ilk="function" name="allow_connection_pickling" signature="allow_connection_pickling(self)" />
        <scope doc="Returns a queue object" ilk="function" name="Queue" signature="Queue(self, maxsize=0)" />
        <scope ilk="function" name="get_start_method" signature="get_start_method(self, allow_none=False)" />
        <scope doc="Turn on logging and add a handler which prints to stderr" ilk="function" name="log_to_stderr" signature="log_to_stderr(self, level=None)" />
        <scope doc="Returns a process pool object" ilk="function" name="Pool" signature="Pool(self, processes=None, initializer=None, initargs=(), maxtasksperchild=None)" />
      </scope>
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BufferTooShort" />
      <scope classrefs="BaseContext" doc="&#10;" ilk="class" name="DefaultContext">
        <scope ilk="function" name="get_start_method" signature="get_start_method(self, allow_none=False)" />
        <scope ilk="function" name="set_start_method" signature="set_start_method(self, method, force=False)" />
        <scope ilk="function" name="get_context" signature="get_context(self, method=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, context)" />
        <scope ilk="function" name="get_all_start_methods" signature="get_all_start_methods(self)" />
      </scope>
      <scope classrefs="BaseContext" doc="&#10;" ilk="class" name="ForkContext" />
      <scope classrefs="BaseProcess" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="ForkProcess">
        <scope ilk="function" name="_Popen" signature="_Popen(process_obj)" />
      </scope>
      <scope classrefs="BaseContext" doc="&#10;" ilk="class" name="ForkServerContext">
        <scope ilk="function" name="_check_available" signature="_check_available(self)" />
      </scope>
      <scope classrefs="BaseProcess" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="ForkServerProcess">
        <scope ilk="function" name="_Popen" signature="_Popen(process_obj)" />
      </scope>
      <scope classrefs="BaseProcess" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="Process">
        <scope ilk="function" name="_Popen" signature="_Popen(process_obj)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ProcessError" />
      <scope classrefs="BaseContext" doc="&#10;" ilk="class" name="SpawnContext" />
      <scope classrefs="BaseProcess" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="SpawnProcess">
        <scope ilk="function" name="_Popen" signature="_Popen(process_obj)" />
      </scope>
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="TimeoutError" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="assert_spawning" signature="assert_spawning(obj)" />
      <scope ilk="function" name="get_spawning_popen" signature="get_spawning_popen()" />
      <import module="os" />
      <import module="process" />
      <scope ilk="function" name="set_spawning_popen" signature="set_spawning_popen(popen)" />
      <import module="sys" />
      <import module="threading" />
    </scope>
    <scope doc="Support for POSIX locales.&#10;" ilk="blob" lang="Python3" name="_locale">
      <variable citdl="int" name="ABDAY_1" />
      <variable citdl="int" name="ABDAY_2" />
      <variable citdl="int" name="ABDAY_3" />
      <variable citdl="int" name="ABDAY_4" />
      <variable citdl="int" name="ABDAY_5" />
      <variable citdl="int" name="ABDAY_6" />
      <variable citdl="int" name="ABDAY_7" />
      <variable citdl="int" name="ABMON_1" />
      <variable citdl="int" name="ABMON_10" />
      <variable citdl="int" name="ABMON_11" />
      <variable citdl="int" name="ABMON_12" />
      <variable citdl="int" name="ABMON_2" />
      <variable citdl="int" name="ABMON_3" />
      <variable citdl="int" name="ABMON_4" />
      <variable citdl="int" name="ABMON_5" />
      <variable citdl="int" name="ABMON_6" />
      <variable citdl="int" name="ABMON_7" />
      <variable citdl="int" name="ABMON_8" />
      <variable citdl="int" name="ABMON_9" />
      <variable citdl="int" name="ALT_DIGITS" />
      <variable citdl="int" name="AM_STR" />
      <variable citdl="int" name="CHAR_MAX" />
      <variable citdl="int" name="CODESET" />
      <variable citdl="int" name="CRNCYSTR" />
      <variable citdl="int" name="DAY_1" />
      <variable citdl="int" name="DAY_2" />
      <variable citdl="int" name="DAY_3" />
      <variable citdl="int" name="DAY_4" />
      <variable citdl="int" name="DAY_5" />
      <variable citdl="int" name="DAY_6" />
      <variable citdl="int" name="DAY_7" />
      <variable citdl="int" name="D_FMT" />
      <variable citdl="int" name="D_T_FMT" />
      <variable citdl="int" name="ERA" />
      <variable citdl="int" name="ERA_D_FMT" />
      <variable citdl="int" name="ERA_D_T_FMT" />
      <variable citdl="int" name="ERA_T_FMT" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="int" name="LC_ALL" />
      <variable citdl="int" name="LC_COLLATE" />
      <variable citdl="int" name="LC_CTYPE" />
      <variable citdl="int" name="LC_MESSAGES" />
      <variable citdl="int" name="LC_MONETARY" />
      <variable citdl="int" name="LC_NUMERIC" />
      <variable citdl="int" name="LC_TIME" />
      <variable citdl="int" name="MON_1" />
      <variable citdl="int" name="MON_10" />
      <variable citdl="int" name="MON_11" />
      <variable citdl="int" name="MON_12" />
      <variable citdl="int" name="MON_2" />
      <variable citdl="int" name="MON_3" />
      <variable citdl="int" name="MON_4" />
      <variable citdl="int" name="MON_5" />
      <variable citdl="int" name="MON_6" />
      <variable citdl="int" name="MON_7" />
      <variable citdl="int" name="MON_8" />
      <variable citdl="int" name="MON_9" />
      <variable citdl="int" name="NOEXPR" />
      <variable citdl="int" name="PM_STR" />
      <variable citdl="int" name="RADIXCHAR" />
      <variable citdl="int" name="THOUSEP" />
      <variable citdl="int" name="T_FMT" />
      <variable citdl="int" name="T_FMT_AMPM" />
      <variable citdl="int" name="YESEXPR" />
      <scope doc="Bind the C library's domain to codeset." ilk="function" name="bind_textdomain_codeset" returns="str" signature="bind_textdomain_codeset(domain, codeset) -&gt; string" />
      <scope doc="Bind the C library's domain to dir." ilk="function" name="bindtextdomain" returns="str" signature="bindtextdomain(domain, dir) -&gt; string" />
      <scope doc="Return translation of msg in domain and category." ilk="function" name="dcgettext" returns="str" signature="dcgettext(domain, msg, category) -&gt; string" />
      <scope doc="Return translation of msg in domain." ilk="function" name="dgettext" returns="str" signature="dgettext(domain, msg) -&gt; string" />
      <scope doc="Return translation of msg." ilk="function" name="gettext" returns="str" signature="gettext(msg) -&gt; string" />
      <scope doc="() -&gt; dict." ilk="function" name="localeconv" />
      <scope doc="Return the value for the locale information associated with&#10;key." ilk="function" name="nl_langinfo" returns="str" signature="nl_langinfo(key) -&gt; string" />
      <scope doc="(integer,string=None) -&gt; string." ilk="function" name="setlocale" />
      <scope doc="string,string -&gt; int." ilk="function" name="strcoll" />
      <scope doc="Return a string that can be used as a key for locale-aware&#10;comparisons." ilk="function" name="strxfrm" signature="strxfrm(string) -&gt; string." />
      <scope doc="Set the C library's textdmain to domain, returning the new&#10;domain." ilk="function" name="textdomain" returns="str" signature="textdomain(domain) -&gt; string" />
    </scope>
    <scope doc="Selector event loop for Unix with signal handling.&#10;" ilk="blob" lang="Python3" name="asyncio.unix_events">
      <scope classrefs="object" doc="Abstract base class for monitoring child processes.&#10;Objects derived from this class monitor a collection of subprocesses and report their termination or interruption by a signal.  New callbacks are registered with .add_child_handler(). Starting a new process must be done within a 'with' block to allow the watcher to suspend its activity until the new process if fully registered (this is needed to prevent a race condition in some implementations).  Example: with watcher:" ilk="class" name="AbstractChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Attach the watcher to an event loop." ilk="function" name="attach_loop" signature="attach_loop(self, loop)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="AbstractChildWatcher" doc="Abstract base class for monitoring child processes.&#10;Objects derived from this class monitor a collection of subprocesses and report their termination or interruption by a signal.  New callbacks are registered with .add_child_handler(). Starting a new process must be done within a 'with' block to allow the watcher to suspend its activity until the new process if fully registered (this is needed to prevent a race condition in some implementations).  Example: with watcher:" ilk="class" name="BaseChildWatcher">
        <scope ilk="function" name="_compute_returncode" signature="_compute_returncode(self, status)" />
        <scope doc="Attach the watcher to an event loop." ilk="function" name="attach_loop" signature="attach_loop(self, loop)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_do_waitpid" signature="_do_waitpid(self, expected_pid)" />
        <scope ilk="function" name="_sig_chld" signature="_sig_chld(self)" />
        <scope ilk="function" name="_do_waitpid_all" signature="_do_waitpid_all(self)" />
      </scope>
      <scope classrefs="BaseDefaultEventLoopPolicy" doc="UNIX event loop policy with a watcher for child processes.&#10;" ilk="class" name="DefaultEventLoopPolicy">
        <scope ilk="function" name="_init_watcher" signature="_init_watcher(self)" />
        <scope doc="Set the watcher for child processes." ilk="function" name="set_child_watcher" signature="set_child_watcher(self, watcher)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Set the event loop." ilk="function" name="set_event_loop" signature="set_event_loop(self, loop)" />
        <scope doc="Get the watcher for child processes." ilk="function" name="get_child_watcher" signature="get_child_watcher(self)" />
      </scope>
      <scope classrefs="BaseChildWatcher" doc="'Fast' child watcher implementation.&#10;This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.  There is no noticeable overhead when handling a big number of children (O(1) each time a child terminates)." ilk="class" name="FastChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_do_waitpid_all" signature="_do_waitpid_all(self)" />
      </scope>
      <scope classrefs="BaseChildWatcher" doc="'Safe' child watcher implementation.&#10;This implementation avoids disrupting other code spawning processes by polling explicitly each process in the SIGCHLD handler instead of calling os.waitpid(-1).  This is a safe solution but it has a significant overhead when handling a big number of children (O(n) each time SIGCHLD is raised)" ilk="class" name="SafeChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_do_waitpid" signature="_do_waitpid(self, expected_pid)" />
        <scope ilk="function" name="_do_waitpid_all" signature="_do_waitpid_all(self)" />
      </scope>
      <scope classrefs="BaseSelectorEventLoop" doc="Unix event loop.&#10;Adds signal handling and UNIX Domain Socket support to SelectorEventLoop." ilk="class" name="SelectorEventLoop">
        <scope doc="Create write pipe transport." ilk="function" name="_make_write_pipe_transport" signature="_make_write_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, selector=None)" />
        <scope doc="Create read pipe transport." ilk="function" name="_make_read_pipe_transport" signature="_make_read_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Remove a handler for a signal. UNIX only." ilk="function" name="remove_signal_handler" signature="remove_signal_handler(self, sig)" />
        <scope doc="Internal helper that is the actual signal handler." ilk="function" name="_handle_signal" signature="_handle_signal(self, sig)" />
        <scope ilk="function" name="_child_watcher_callback" signature="_child_watcher_callback(self, pid, returncode, transp)" />
        <scope doc="Internal helper to validate a signal." ilk="function" name="_check_signal" signature="_check_signal(self, sig)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_socketpair" signature="_socketpair(self)" />
        <scope ilk="function" name="create_unix_connection" signature="create_unix_connection(self, protocol_factory, path, *, ssl=None, sock=None, server_hostname=None)" />
        <scope doc="Add a handler for a signal. UNIX only." ilk="function" name="add_signal_handler" signature="add_signal_handler(self, sig, callback, *args)" />
        <scope doc="A coroutine which creates a UNIX Domain Socket server." ilk="function" name="create_unix_server" signature="create_unix_server(*args, **kw)" />
        <scope ilk="function" name="_process_self_data" signature="_process_self_data(self, data)" />
        <scope doc="Create subprocess transport." ilk="function" name="_make_subprocess_transport" signature="_make_subprocess_transport(self, protocol, args, shell, stdin, stdout, stderr, bufsize, extra=None, **kwargs)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="base_events" />
      <import module="base_subprocess" />
      <import module="compat" />
      <import module="constants" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="coroutines" />
      <import module="errno" />
      <import module="events" />
      <import module="futures" />
      <variable citdl="Logger" name="logger" />
      <import module="os" />
      <import module="selector_events" />
      <import module="selectors" />
      <import module="signal" />
      <import module="socket" />
      <import module="stat" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="threading" />
      <import module="transports" />
      <import module="warnings" />
    </scope>
    <scope doc="A pure Python implementation of import.&#10;" ilk="blob" lang="Python3" name="importlib">
      <variable citdl="list" name="__all__" />
      <scope doc="Import a module." ilk="function" name="__import__" signature="__import__(name, globals=None, locals=None, fromlist=(), level=0)" />
      <import module="_bootstrap" />
      <import module="_bootstrap_external" />
      <import module="_imp" />
      <import module="abc" />
      <scope doc="Return the loader for the specified module." ilk="function" name="find_loader" signature="find_loader(name, path=None)" />
      <scope doc="Import a module." ilk="function" name="import_module" signature="import_module(name, package=None)" />
      <scope doc="Call the invalidate_caches() method on all meta path finders&#10;stored in sys.meta_path (where implemented)." ilk="function" name="invalidate_caches" signature="invalidate_caches()" />
      <import module="machinery" />
      <scope doc="Reload the module and return it." ilk="function" name="reload" signature="reload(module)" />
      <import module="sys" />
      <import module="types" />
      <import module="util" />
      <import module="warnings" />
    </scope>
    <scope doc="A minimal subset of the locale module used at interpreter startup&#10;(imported by the _io module), in order to reduce startup time.  Don't import directly from third-party code; use the `locale` module instead!" ilk="blob" lang="Python3" name="_bootlocale">
      <import module="_locale" />
      <scope ilk="function" name="getpreferredencoding" signature="getpreferredencoding(do_setlocale=True)" />
      <import module="sys" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) for numbers, according to PEP 3141.&#10;TODO: Fill out more detailed documentation on the operators." ilk="blob" lang="Python3" name="numbers">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).&#10;Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super())." ilk="class" name="ABCMeta">
        <scope doc="Register a virtual subclass of an ABC." ilk="function" name="register" signature="register(cls, subclass)" />
        <scope doc="Override for issubclass(subclass, cls)." ilk="function" name="__subclasscheck__" signature="__subclasscheck__(cls, subclass)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(mcls, name, bases, namespace)" />
        <scope doc="Debug helper to print the ABC registry." ilk="function" name="_dump_registry" signature="_dump_registry(cls, file=None)" />
        <scope doc="Override for isinstance(instance, cls)." ilk="function" name="__instancecheck__" signature="__instancecheck__(cls, instance)" />
      </scope>
      <scope classrefs="Number" doc="Complex defines the operations that work on the builtin complex type.&#10;In short, those are: a conversion to complex, .real, .imag, +, -, *, /, abs(), .conjugate, ==, and !=.  If it is given heterogenous arguments, and doesn't have special knowledge about them, it should fall back to the builtin complex type as described below." ilk="class" name="Complex">
        <scope doc="base ** self" ilk="function" name="__rpow__" signature="__rpow__(self, base)" />
        <scope doc="-self" ilk="function" name="__neg__" signature="__neg__(self)" />
        <scope doc="+self" ilk="function" name="__pos__" signature="__pos__(self)" />
        <scope doc="self == other" ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="other + self" ilk="function" name="__radd__" signature="__radd__(self, other)" />
        <scope doc="other * self" ilk="function" name="__rmul__" signature="__rmul__(self, other)" />
        <scope doc="self * other" ilk="function" name="__mul__" signature="__mul__(self, other)" />
        <scope doc="other / self" ilk="function" name="__rtruediv__" signature="__rtruediv__(self, other)" />
        <scope doc="Return a builtin complex instance. Called for complex(self)." ilk="function" name="__complex__" signature="__complex__(self)" />
        <scope doc="self - other" ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="self**exponent; should promote to float or complex when&#10;necessary." ilk="function" name="__pow__" signature="__pow__(self, exponent)" />
        <scope doc="self / other: Should promote to float when necessary." ilk="function" name="__truediv__" signature="__truediv__(self, other)" />
        <scope doc="(x+y*i).conjugate() returns (x-y*i)." ilk="function" name="conjugate" signature="conjugate(self)" />
        <scope doc="True if self != 0. Called for bool(self)." ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="self + other" ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope doc="Returns the Real distance from 0. Called for abs(self)." ilk="function" name="__abs__" signature="__abs__(self)" />
        <scope doc="other - self" ilk="function" name="__rsub__" signature="__rsub__(self, other)" />
      </scope>
      <scope classrefs="Rational" doc="Integral adds a conversion to int and the bit-string operations.&#10;" ilk="class" name="Integral">
        <scope doc="Called whenever an index is needed, such as in slicing" ilk="function" name="__index__" signature="__index__(self)" />
        <scope doc="float(self) == float(int(self))" ilk="function" name="__float__" signature="float(self) == float(int(self))" />
        <scope doc="self ^ other" ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope doc="~self" ilk="function" name="__invert__" signature="__invert__(self)" />
        <scope doc="self &lt;&lt; other" ilk="function" name="__lshift__" signature="__lshift__(self, other)" />
        <scope doc="other &lt;&lt; self" ilk="function" name="__rlshift__" signature="__rlshift__(self, other)" />
        <scope doc="other ^ self" ilk="function" name="__rxor__" signature="__rxor__(self, other)" />
        <scope doc="other &amp; self" ilk="function" name="__rand__" signature="__rand__(self, other)" />
        <scope doc="self &amp; other" ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self ** exponent % modulus, but maybe faster." ilk="function" name="__pow__" signature="__pow__(self, exponent, modulus=None)" />
        <scope doc="other &gt;&gt; self" ilk="function" name="__rrshift__" signature="__rrshift__(self, other)" />
        <scope doc="other | self" ilk="function" name="__ror__" signature="__ror__(self, other)" />
        <scope doc="self &gt;&gt; other" ilk="function" name="__rshift__" signature="__rshift__(self, other)" />
        <scope doc="self | other" ilk="function" name="__or__" signature="__or__(self, other)" />
      </scope>
      <scope classrefs="object" doc="All numbers inherit from this class.&#10;If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number)." ilk="class" name="Number" />
      <scope classrefs="Real" doc=".numerator and .denominator should be in lowest terms.&#10;" ilk="class" name="Rational">
        <scope doc="It's important that this conversion use the integer's &quot;true&quot;&#10;division rather than casting one side to float before&#10;dividing so that ratios of huge integers convert without&#10;overflowing." ilk="function" name="__float__" signature="float(self) = self.numerator / self.denominator" />
      </scope>
      <scope classrefs="Complex" doc="To Complex, Real adds the operations that work on real numbers.&#10;In short, those are: a conversion to float, trunc(), divmod, %, &lt;, &lt;=, &gt;, and &gt;=.  Real also provides defaults for the derived operations." ilk="class" name="Real">
        <scope doc="Any Real can be converted to a native float object." ilk="function" name="__float__" signature="__float__(self)" />
        <scope doc="Truncates self to an Integral." ilk="function" name="__trunc__" signature="trunc(self)" />
        <scope doc="self // other: The floor() of self/other." ilk="function" name="__floordiv__" signature="__floordiv__(self, other)" />
        <scope doc="Finds the greatest Integral &lt;= self." ilk="function" name="__floor__" signature="__floor__(self)" />
        <scope doc="other % self" ilk="function" name="__rmod__" signature="__rmod__(self, other)" />
        <scope doc="complex(self) == complex(float(self), 0)" ilk="function" name="__complex__" signature="complex(self) == complex(float(self), 0)" />
        <scope doc="other // self: The floor() of other/self." ilk="function" name="__rfloordiv__" signature="__rfloordiv__(self, other)" />
        <scope doc="Rounds self to ndigits decimal places, defaulting to 0." ilk="function" name="__round__" signature="__round__(self, ndigits=None)" />
        <scope doc="self % other" ilk="function" name="__mod__" signature="__mod__(self, other)" />
        <scope doc="The pair (self // other, self % other)." ilk="function" name="__rdivmod__" signature="divmod(other, self)" />
        <scope doc="Finds the least Integral &gt;= self." ilk="function" name="__ceil__" signature="__ceil__(self)" />
        <scope doc="self &lt; other" ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Conjugate is a no-op for Reals." ilk="function" name="conjugate" signature="conjugate(self)" />
        <scope doc="The pair (self // other, self % other)." ilk="function" name="__divmod__" signature="divmod(self, other)" />
        <scope doc="self &lt;= other" ilk="function" name="__le__" signature="__le__(self, other)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="multiprocessing.popen_fork">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Popen">
        <scope ilk="function" name="_launch" signature="_launch(self, process_obj)" />
        <scope ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, process_obj)" />
        <scope ilk="function" name="poll" signature="poll(self, flag=1)" />
        <scope ilk="function" name="duplicate_for_child" signature="duplicate_for_child(self, fd)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="os" />
      <import module="signal" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="Fixer for apply().&#10;This converts apply(func, v, k) into (func)(*v, **k)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_apply">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixApply">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Strptime-related classes and functions.&#10;CLASSES: LocaleTime -- Discovers and stores locale-specific time information TimeRE -- Creates regexes for pattern matching a string of text containing time information  FUNCTIONS: _getlang -- Figure out what language is being used for the locale strptime -- Calculates the time struct represented by the passed-in string" ilk="blob" lang="Python3" name="_strptime">
      <variable citdl="int" name="IGNORECASE" />
      <scope classrefs="object" doc="Stores and handles locale-specific information related to time.&#10;ATTRIBUTES: f_weekday -- full weekday names (7-item list) a_weekday -- abbreviated weekday names (7-item list) f_month -- full month names (13-item list; dummy value in [0], which is added by code) a_month -- abbreviated month names (13-item list, dummy value in [0], which is added by code) am_pm -- AM/PM representation (2-item list) LC_date_time -- format string for date/time representation (string) LC_date -- format string for date representation (string)" ilk="class" name="LocaleTime">
        <scope ilk="function" name="_LocaleTime__calc_date_time" signature="_LocaleTime__calc_date_time(self)" />
        <scope ilk="function" name="_LocaleTime__calc_am_pm" signature="_LocaleTime__calc_am_pm(self)" />
        <scope ilk="function" name="_LocaleTime__calc_month" signature="_LocaleTime__calc_month(self)" />
        <scope doc="Set all attributes." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_LocaleTime__calc_weekday" signature="_LocaleTime__calc_weekday(self)" />
        <scope ilk="function" name="_LocaleTime__calc_timezone" signature="_LocaleTime__calc_timezone(self)" />
        <scope ilk="function" name="_LocaleTime__pad" signature="_LocaleTime__pad(self, seq, front)" />
      </scope>
      <scope classrefs="dict" doc="Handle conversion from format directives to regexes.&#10;" ilk="class" name="TimeRE">
        <scope doc="Create keys/values." ilk="function" name="__init__" signature="__init__(self, locale_time=None)" />
        <scope doc="Return a compiled re object for the format string." ilk="function" name="compile" signature="compile(self, format)" />
        <scope doc="Return regex pattern for the format string." ilk="function" name="pattern" signature="pattern(self, format)" />
        <scope doc="Convert a list to a regex string for matching a directive." ilk="function" name="_TimeRE__seqToRE" signature="_TimeRE__seqToRE(self, to_convert, directive)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="calendar" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object&#10;" ilk="class" name="datetime_date">
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return a 3-tuple containing ISO year, week number, and&#10;weekday." ilk="function" name="isocalendar" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="weekday" />
        <scope doc="Return date with new specified fields." ilk="function" name="replace" />
        <scope doc="Return proleptic Gregorian ordinal." ilk="function" name="toordinal" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="isoweekday" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, YYYY-MM-DD." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="object" doc="Difference between two datetime values.&#10;" ilk="class" name="datetime_timedelta">
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Total seconds in the duration." ilk="function" name="total_seconds" />
      </scope>
      <scope classrefs="tzinfo" doc="Fixed offset from UTC implementation of tzinfo.&#10;" ilk="class" name="datetime_timezone">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="If name is specified when timezone is created, returns the&#10;name." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return fixed offset." ilk="function" name="utcoffset" />
        <scope doc="datetime in UTC -&gt; datetime in local time." ilk="function" name="fromutc" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return None." ilk="function" name="dst" />
        <scope doc="pickle support" ilk="function" name="__getinitargs__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <import module="locale" />
      <scope doc="Compile a regular expression pattern, returning a pattern&#10;object." ilk="function" name="re_compile" signature="re_compile(pattern, flags=0)" />
      <scope doc="Escape all the characters in pattern except ASCII letters,&#10;numbers and '_'." ilk="function" name="re_escape" signature="re_escape(pattern)" />
      <import module="time" />
    </scope>
    <scope doc="A lexical analyzer class for simple shell-like syntaxes.&#10;" ilk="blob" lang="Python3" name="shlex">
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <import module="os" />
      <scope doc="Return a shell-escaped version of the string *s*." ilk="function" name="quote" signature="quote(s)" />
      <import module="re" />
      <scope classrefs="object" doc="A lexical analyzer class for simple shell-like syntaxes.&#10;" ilk="class" name="shlex">
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope doc="Hook called on a filename to be sourced." ilk="function" name="sourcehook" signature="sourcehook(self, newfile)" />
        <scope doc="Emit a C-compiler-like, Emacs-friendly error-message leader." ilk="function" name="error_leader" signature="error_leader(self, infile=None, lineno=None)" />
        <scope ilk="function" name="read_token" signature="read_token(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, instream=None, infile=None, posix=False)" />
        <scope doc="Push a token onto the stack popped by the get_token method" ilk="function" name="push_token" signature="push_token(self, tok)" />
        <scope doc="Pop the input source stack." ilk="function" name="pop_source" signature="pop_source(self)" />
        <scope doc="Push an input source onto the lexer's input source stack." ilk="function" name="push_source" signature="push_source(self, newstream, newfile=None)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Get a token from the input stream (or from stack if it's&#10;nonempty)" ilk="function" name="get_token" signature="get_token(self)" />
      </scope>
      <scope ilk="function" name="split" signature="split(s, comments=False, posix=True)" />
      <import module="sys" />
    </scope>
    <scope doc="(Extremely) low-level import machinery bits as used by importlib and imp.&#10;" ilk="blob" lang="Python3" name="_imp">
      <scope doc="Acquires the interpreter's import lock for the current&#10;thread." ilk="function" name="acquire_lock" />
      <scope doc="Create an extension module." ilk="function" name="create_builtin" />
      <scope doc="Create an extension module." ilk="function" name="create_dynamic" />
      <scope doc="Initialize a built-in module." ilk="function" name="exec_builtin" />
      <scope doc="Initialize an extension module." ilk="function" name="exec_dynamic" />
      <scope doc="Returns the list of file suffixes used to identify extension&#10;modules." ilk="function" name="extension_suffixes" />
      <scope doc="Create a code object for a frozen module." ilk="function" name="get_frozen_object" />
      <scope doc="Initializes a frozen module." ilk="function" name="init_frozen" />
      <scope doc="Returns True if the module name corresponds to a built-in&#10;module." ilk="function" name="is_builtin" />
      <scope doc="Returns True if the module name corresponds to a frozen&#10;module." ilk="function" name="is_frozen" />
      <scope doc="Returns True if the module name is of a frozen package." ilk="function" name="is_frozen_package" />
      <scope doc="Return True if the import lock is currently held, else&#10;False." ilk="function" name="lock_held" />
      <scope doc="Release the interpreter's import lock." ilk="function" name="release_lock" />
    </scope>
    <scope doc="This module provides access to the garbage collector for reference cycles.&#10;enable() -- Enable automatic garbage collection. disable() -- Disable automatic garbage collection. isenabled() -- Returns true if automatic collection is enabled. collect() -- Do a full collection right now. get_count() -- Return the current collection counts. get_stats() -- Return list of dictionaries containing per-generation stats. set_debug() -- Set debugging flags. get_debug() -- Get debugging flags. set_threshold() -- Set the collection thresholds. get_threshold() -- Return the current the collection thresholds." ilk="blob" lang="Python3" name="gc">
      <variable citdl="int" name="DEBUG_COLLECTABLE" />
      <variable citdl="int" name="DEBUG_LEAK" />
      <variable citdl="int" name="DEBUG_SAVEALL" />
      <variable citdl="int" name="DEBUG_STATS" />
      <variable citdl="int" name="DEBUG_UNCOLLECTABLE" />
      <variable citdl="list" name="callbacks" />
      <scope doc="With no arguments, run a full collection." ilk="function" name="collect" signature="collect([generation]) -&gt; n" />
      <scope doc="Disable automatic garbage collection." ilk="function" name="disable" signature="disable() -&gt; None" />
      <scope doc="Enable automatic garbage collection." ilk="function" name="enable" signature="enable() -&gt; None" />
      <variable citdl="list" name="garbage" />
      <scope doc="Return the current collection counts" ilk="function" name="get_count" signature="get_count() -&gt; (count0, count1, count2)" />
      <scope doc="Get the garbage collection debugging flags." ilk="function" name="get_debug" signature="get_debug() -&gt; flags" />
      <scope doc="Return a list of objects tracked by the collector (excluding&#10;the list returned)." ilk="function" name="get_objects" signature="get_objects() -&gt; [...]" />
      <scope doc="Return the list of objects that are directly referred to by&#10;objs." ilk="function" name="get_referents" returns="list" signature="get_referents(*objs) -&gt; list" />
      <scope doc="Return the list of objects that directly refer to any of&#10;objs." ilk="function" name="get_referrers" returns="list" signature="get_referrers(*objs) -&gt; list" />
      <scope doc="Return a list of dictionaries containing per-generation&#10;statistics." ilk="function" name="get_stats" signature="get_stats() -&gt; [...]" />
      <scope doc="Return the current collection thresholds" ilk="function" name="get_threshold" signature="get_threshold() -&gt; (threshold0, threshold1, threshold2)" />
      <scope doc="Returns true if the object is tracked by the garbage&#10;collector." ilk="function" name="is_tracked" returns="bool" signature="is_tracked(obj) -&gt; bool" />
      <scope doc="Returns true if automatic garbage collection is enabled." ilk="function" name="isenabled" signature="isenabled() -&gt; status" />
      <scope doc="Set the garbage collection debugging flags." ilk="function" name="set_debug" signature="set_debug(flags) -&gt; None" />
      <scope doc="Sets the collection thresholds." ilk="function" name="set_threshold" signature="set_threshold(threshold0, [threshold1, threshold2]) -&gt; None" />
    </scope>
    <scope doc="Various utility functions.&#10;" ilk="blob" lang="Python3" name="unittest.util">
      <scope classrefs="dict" doc="Dictionary that remembers insertion order&#10;" ilk="class" name="OrderedDict">
        <scope doc="od.clear() -&gt; None.  Remove all items from od." ilk="function" name="clear" signature="od.clear() -&gt; None.  Remove all items from od." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="od.__reversed__() &lt;==&gt; reversed(od)" ilk="function" name="__reversed__" signature="od.__reversed__() &lt;==&gt; reversed(od)" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Move an existing element to the end (or beginning if&#10;last==False)." ilk="function" name="move_to_end" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="od.copy() -&gt; a shallow copy of od" ilk="function" name="copy" signature="od.copy() -&gt; a shallow copy of od" />
        <scope doc="Pairs are returned in LIFO order if last is true or FIFO&#10;order if false." ilk="function" name="popitem" signature="od.popitem() -&gt; (k, v), return and remove a (key, value) pair." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="value." ilk="function" name="pop" signature="od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" ilk="function" name="setdefault" signature="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope ilk="function" name="safe_repr" signature="safe_repr(obj, short=False)" />
      <scope doc="Finds elements in only one or the other of two, sorted input&#10;lists." ilk="function" name="sorted_list_difference" signature="sorted_list_difference(expected, actual)" />
      <scope ilk="function" name="strclass" signature="strclass(cls)" />
      <scope doc="Return -1 if x &lt; y, 0 if x == y and 1 if x &gt; y" ilk="function" name="three_way_cmp" signature="three_way_cmp(x, y)" />
      <scope doc="Same behavior as sorted_list_difference but for lists of&#10;unorderable items (like dicts)." ilk="function" name="unorderable_list_difference" signature="unorderable_list_difference(expected, actual)" />
    </scope>
    <scope doc="# pysqlite2/__init__.py: the pysqlite2 package.&#10;# # Copyright (C) 2005 Gerhard Häring &lt;gh@ghaering.de&gt; # # This file is part of pysqlite. # # This software is provided 'as-is', without any express or implied # warranty.  In no event will the authors be held liable for any damages # arising from the use of this software. # # Permission is granted to anyone to use this software for any purpose," ilk="blob" lang="Python3" name="sqlite3">
      <scope classrefs="object" doc="Create a new memoryview object which references the given object.&#10;" ilk="class" name="Binary">
        <scope ilk="function" name="__exit__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the data in the buffer as a byte string." ilk="function" name="tobytes" />
        <scope ilk="function" name="__enter__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Cast a memoryview to a new format or shape." ilk="function" name="cast" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Release the underlying buffer exposed by the memoryview&#10;object." ilk="function" name="release" />
        <scope doc="Return the data in the buffer as a list of elements." ilk="function" name="tolist" />
        <scope doc="Return the data in the buffer as a string of hexadecimal&#10;numbers." ilk="function" name="hex" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Cache">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Gets an entry from the cache or calls the factory function&#10;to produce one." ilk="function" name="get" />
        <scope doc="For debugging only." ilk="function" name="display" />
      </scope>
      <scope classrefs="object" doc="SQLite database connection object.&#10;" ilk="class" name="Connection">
        <scope doc="For context manager. Non-standard." ilk="function" name="__exit__" />
        <scope doc="Sets authorizer callback. Non-standard." ilk="function" name="set_authorizer" />
        <scope doc="Creates a new function. Non-standard." ilk="function" name="create_function" />
        <scope doc="For context manager. Non-standard." ilk="function" name="__enter__" />
        <scope doc="Return a cursor for the connection." ilk="function" name="cursor" />
        <scope doc="Commit the current transaction." ilk="function" name="commit" />
        <scope doc="Executes a multiple SQL statements at once. Non-standard." ilk="function" name="executescript" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Creates a collation function. Non-standard." ilk="function" name="create_collation" />
        <scope doc="Closes the connection." ilk="function" name="close" />
        <scope doc="Returns iterator to the dump of the database in an SQL text&#10;format." ilk="function" name="iterdump" />
        <scope doc="Repeatedly executes a SQL statement. Non-standard." ilk="function" name="executemany" />
        <scope doc="Creates a new aggregate. Non-standard." ilk="function" name="create_aggregate" />
        <scope doc="Abort any pending database operation. Non-standard." ilk="function" name="interrupt" />
        <scope doc="Sets a trace callback called for each SQL statement (passed&#10;as unicode)." ilk="function" name="set_trace_callback" />
        <scope doc="Executes a SQL statement. Non-standard." ilk="function" name="execute" />
        <scope doc="Sets progress handler callback. Non-standard." ilk="function" name="set_progress_handler" />
        <scope doc="Roll back the current transaction." ilk="function" name="rollback" />
      </scope>
      <scope classrefs="object" doc="SQLite database cursor class.&#10;" ilk="class" name="Cursor">
        <scope doc="Fetches all rows from the resultset." ilk="function" name="fetchall" />
        <scope doc="Fetches one row from the resultset." ilk="function" name="fetchone" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Closes the cursor." ilk="function" name="close" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Repeatedly executes a SQL statement." ilk="function" name="executemany" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Executes a SQL statement." ilk="function" name="execute" />
        <scope doc="Fetches several rows from the resultset." ilk="function" name="fetchmany" />
        <scope doc="Required by DB-API. Does nothing in pysqlite." ilk="function" name="setoutputsize" />
        <scope doc="Required by DB-API. Does nothing in pysqlite." ilk="function" name="setinputsizes" />
        <scope doc="Executes a multiple SQL statements at once. Non-standard." ilk="function" name="executescript" />
      </scope>
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="DataError" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="DatabaseError" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object&#10;" ilk="class" name="Date">
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return a 3-tuple containing ISO year, week number, and&#10;weekday." ilk="function" name="isocalendar" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="weekday" />
        <scope doc="Return date with new specified fields." ilk="function" name="replace" />
        <scope doc="Return proleptic Gregorian ordinal." ilk="function" name="toordinal" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="isoweekday" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, YYYY-MM-DD." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope ilk="function" name="DateFromTicks" signature="DateFromTicks(ticks)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="IntegrityError" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="InterfaceError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="InternalError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="NotSupportedError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="OperationalError" />
      <scope classrefs="object" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="OptimizedUnicode">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if S ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;mapping." ilk="function" name="format_map" returns="str" signature="S.format_map(mapping) -&gt; str" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of the string S with trailing whitespace&#10;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; str" />
        <scope doc="Search for the separator sep in S, and return the part&#10;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; str" />
        <scope doc="Return a version of S suitable for caseless comparisons." ilk="function" name="casefold" returns="str" signature="S.casefold() -&gt; str" />
        <scope doc="Return True if there are only numeric characters in S, False&#10;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; str" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; str" />
        <scope doc="Return True if all cased characters in S are lowercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string, starting at the end of the string and working to the&#10;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading and trailing&#10;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; str" />
        <scope doc="Return a copy of S with all occurrences of substring old&#10;replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; str" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; str" />
        <scope doc="Encode S using the codec registered for encoding." ilk="function" name="encode" signature="S.encode(encoding='utf-8', errors='strict') -&gt; bytes" />
        <scope doc="Return True if all characters in S are alphabetic and there&#10;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of S where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs(tabsize=8) -&gt; str" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#10;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#10;and return the part before it, the separator itself, and the&#10;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; str" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; str" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of S with uppercase characters converted to&#10;lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; str" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; str" />
        <scope doc="Return a copy of the string S in which each character has&#10;been mapped through the given translation table." ilk="function" name="translate" returns="str" signature="S.translate(table) -&gt; str" />
        <scope doc="Return True if all characters in S are considered printable&#10;in repr() or S is empty, False otherwise." ilk="function" name="isprintable" returns="bool" signature="S.isprintable() -&gt; bool" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; str" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string." ilk="function" name="split" returns="list" signature="S.split(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading whitespace&#10;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; str" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return True if all characters in S are digits and there is&#10;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in S are uppercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="S.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if S is a titlecased string and there is at&#10;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; str" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; str" />
        <scope doc="Return True if S is a valid identifier according to the&#10;language definition." ilk="function" name="isidentifier" returns="bool" signature="S.isidentifier() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#10;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; str" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in S, breaking at line&#10;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return True if all characters in S are whitespace and there&#10;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="Return True if S starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if all characters in S are alphanumeric and&#10;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <variable citdl="int" name="PARSE_COLNAMES" />
      <variable citdl="int" name="PARSE_DECLTYPES" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="PrepareProtocol">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ProgrammingError" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Row">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Returns the keys of the row." ilk="function" name="keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <variable citdl="int" name="SQLITE_ALTER_TABLE" />
      <variable citdl="int" name="SQLITE_ANALYZE" />
      <variable citdl="int" name="SQLITE_ATTACH" />
      <variable citdl="int" name="SQLITE_CREATE_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_CREATE_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_VIEW" />
      <variable citdl="int" name="SQLITE_DELETE" />
      <variable citdl="int" name="SQLITE_DENY" />
      <variable citdl="int" name="SQLITE_DETACH" />
      <variable citdl="int" name="SQLITE_DROP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_DROP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_VIEW" />
      <variable citdl="int" name="SQLITE_IGNORE" />
      <variable citdl="int" name="SQLITE_INSERT" />
      <variable citdl="int" name="SQLITE_OK" />
      <variable citdl="int" name="SQLITE_PRAGMA" />
      <variable citdl="int" name="SQLITE_READ" />
      <variable citdl="int" name="SQLITE_REINDEX" />
      <variable citdl="int" name="SQLITE_SELECT" />
      <variable citdl="int" name="SQLITE_TRANSACTION" />
      <variable citdl="int" name="SQLITE_UPDATE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Statement" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object&#10;All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="Time">
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return time with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope ilk="function" name="TimeFromTicks" signature="TimeFromTicks(ticks)" />
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="Timestamp">
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Return time object with same time but with tzinfo=None." ilk="function" name="time" />
        <scope doc="Return UTC time tuple, compatible with time.localtime()." ilk="function" name="utctimetuple" />
        <scope doc="tz -&gt; convert to local time in new timezone tz" ilk="function" name="astimezone" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return POSIX timestamp as float." ilk="function" name="timestamp" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return date object with same year, month and day." ilk="function" name="date" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return datetime with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return time object with same time and tzinfo." ilk="function" name="timetz" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="[sep] -&gt; string in ISO 8601 format, YYYY-MM-&#10;DDTHH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <scope ilk="function" name="TimestampFromTicks" signature="TimestampFromTicks(ticks)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Warning" />
      <scope doc="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." ilk="function" name="adapt" signature="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." />
      <variable citdl="dict" name="adapters" />
      <variable citdl="str" name="apilevel" />
      <import module="collections" />
      <scope doc="Checks if a string contains a complete SQL statement." ilk="function" name="complete_statement" signature="complete_statement(sql)" />
      <scope doc="connect(database[, timeout, detect_types, isolation_level,&#10;check_same_thread, factory, cached_statements, uri])" ilk="function" name="connect" />
      <variable citdl="dict" name="converters" />
      <import module="datetime" />
      <import module="dbapi2" />
      <scope doc="Enable or disable callback functions throwing errors to&#10;stderr." ilk="function" name="enable_callback_tracebacks" signature="enable_callback_tracebacks(flag)" />
      <scope doc="Enable or disable shared cache mode for the calling thread." ilk="function" name="enable_shared_cache" signature="enable_shared_cache(do_enable)" />
      <variable citdl="str" name="paramstyle" />
      <scope doc="Registers an adapter with pysqlite's adapter registry." ilk="function" name="register_adapter" signature="register_adapter(type, callable)" />
      <scope doc="Registers a converter with pysqlite. Non-standard." ilk="function" name="register_converter" signature="register_converter(typename, callable)" />
      <variable citdl="str" name="sqlite_version" />
      <variable citdl="tuple" name="sqlite_version_info" />
      <variable citdl="int" name="threadsafety" />
      <import module="time" />
      <variable citdl="str" name="version" />
      <variable citdl="tuple" name="version_info" />
    </scope>
    <scope doc="Execute computations asynchronously using threads or processes.&#10;" ilk="blob" lang="Python3" name="concurrent.futures">
      <variable citdl="str" name="ALL_COMPLETED" />
      <scope classrefs="Error" doc="The Future was cancelled.&#10;" ilk="class" name="CancelledError" />
      <scope classrefs="object" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="Executor">
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Returns an iterator equivalent to map(fn, iter)." ilk="function" name="map" signature="map(self, fn, *iterables, timeout=None, chunksize=1)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
      </scope>
      <variable citdl="str" name="FIRST_COMPLETED" />
      <variable citdl="str" name="FIRST_EXCEPTION" />
      <scope classrefs="object" doc="Represents the result of an asynchronous computation.&#10;" ilk="class" name="Future">
        <scope doc="Return the exception raised by the call that the future&#10;represents." ilk="function" name="exception" signature="exception(self, timeout=None)" />
        <scope ilk="function" name="_Future__get_result" signature="_Future__get_result(self)" />
        <scope doc="Cancel the future if possible." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Attaches a callable that will be called when the future&#10;finishes." ilk="function" name="add_done_callback" signature="add_done_callback(self, fn)" />
        <scope doc="Mark the future as running or process any cancel&#10;notifications." ilk="function" name="set_running_or_notify_cancel" signature="set_running_or_notify_cancel(self)" />
        <scope doc="Initializes the future. Should not be called by clients." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return True if the future is currently executing." ilk="function" name="running" signature="running(self)" />
        <scope doc="Return True of the future was cancelled or finished&#10;executing." ilk="function" name="done" signature="done(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the result of the call that the future represents." ilk="function" name="result" signature="result(self, timeout=None)" />
        <scope ilk="function" name="_invoke_callbacks" signature="_invoke_callbacks(self)" />
        <scope doc="Sets the result of the future as being the given exception." ilk="function" name="set_exception" signature="set_exception(self, exception)" />
        <scope doc="Sets the return value of work associated with the future." ilk="function" name="set_result" signature="set_result(self, result)" />
        <scope doc="Return True if the future was cancelled." ilk="function" name="cancelled" signature="cancelled(self)" />
      </scope>
      <scope classrefs="Executor" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="ProcessPoolExecutor">
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="_adjust_process_count" signature="_adjust_process_count(self)" />
        <scope doc="Returns an iterator equivalent to map(fn, iter)." ilk="function" name="map" signature="map(self, fn, *iterables, timeout=None, chunksize=1)" />
        <scope doc="Initializes a new ProcessPoolExecutor instance." ilk="function" name="__init__" signature="__init__(self, max_workers=None)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
        <scope ilk="function" name="_start_queue_management_thread" signature="_start_queue_management_thread(self)" />
      </scope>
      <scope classrefs="Executor" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="ThreadPoolExecutor">
        <scope doc="Initializes a new ThreadPoolExecutor instance." ilk="function" name="__init__" signature="__init__(self, max_workers=None)" />
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="_adjust_thread_count" signature="_adjust_thread_count(self)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
      </scope>
      <scope classrefs="Error" doc="The operation exceeded the given deadline.&#10;" ilk="class" name="TimeoutError" />
      <import module="_base" />
      <scope doc="An iterator over the given futures that yields each as it&#10;completes." ilk="function" name="as_completed" signature="as_completed(fs, timeout=None)" />
      <import module="process" />
      <import module="thread" />
      <scope doc="Wait for the futures in the given sequence to complete." ilk="function" name="wait" signature="wait(fs, timeout=None, return_when='ALL_COMPLETED')" />
    </scope>
    <scope doc="Generic dylib path manipulation&#10;" ilk="blob" lang="Python3" name="ctypes.macholib.dylib">
      <variable citdl="SRE_Pattern" name="DYLIB_RE" />
      <variable citdl="list" name="__all__" />
      <scope doc="A dylib name can take one of the following four forms:&#10;Location/Name.SomeVersion_Suffix.dylib&#10;Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib" ilk="function" name="dylib_info" signature="dylib_info(filename)" />
      <import module="re" />
      <scope ilk="function" name="test_dylib_info" signature="test_dylib_info()" />
    </scope>
    <scope doc="Parse a Python module and describe its classes and methods.&#10;Parse enough of a Python file to recognize imports and class and method definitions, and to find out the superclasses of a class.  The interface consists of a single function: readmodule_ex(module [, path]) where module is the name of a Python module, and path is an optional list of directories where the module is to be searched.  If present, path is prepended to the system search path sys.path.  The return value is a dictionary.  The keys of the dictionary are the names of the classes defined in the module (including classes that are defined" ilk="blob" lang="Python3" name="pyclbr">
      <scope classrefs="object" doc="Class to represent a Python class.&#10;" ilk="class" name="Class">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, module, name, super, file, lineno)" />
        <scope ilk="function" name="_addmethod" signature="_addmethod(self, name, lineno)" />
      </scope>
      <variable citdl="int" name="DEDENT" />
      <scope classrefs="object" doc="Class to represent a top-level Python function&#10;" ilk="class" name="Function">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, module, name, file, lineno)" />
      </scope>
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="OP" />
      <variable citdl="list" name="__all__" />
      <import module="importlib" />
      <import module="io" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object&#10;Return a callable object that fetches the given item(s) from its operand. After f = itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])" ilk="class" name="itemgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <import module="os" />
      <scope doc="Backwards compatible interface." ilk="function" name="readmodule" signature="readmodule(module, path=None)" />
      <scope doc="Read a module file and return a dictionary of classes." ilk="function" name="readmodule_ex" signature="readmodule_ex(module, path=None)" />
      <import module="sys" />
      <import module="tokenize" />
    </scope>
    <scope doc="This module is always available. It provides access to mathematical&#10;functions for complex numbers." ilk="blob" lang="Python3" name="cmath">
      <scope doc="Return the arc cosine of z." ilk="function" name="acos" />
      <scope doc="Return the inverse hyperbolic cosine of z." ilk="function" name="acosh" />
      <scope doc="Return the arc sine of z." ilk="function" name="asin" />
      <scope doc="Return the inverse hyperbolic sine of z." ilk="function" name="asinh" />
      <scope doc="Return the arc tangent of z." ilk="function" name="atan" />
      <scope doc="Return the inverse hyperbolic tangent of z." ilk="function" name="atanh" />
      <scope doc="Return the cosine of z." ilk="function" name="cos" />
      <scope doc="Return the hyperbolic cosine of z." ilk="function" name="cosh" />
      <variable citdl="float" name="e" />
      <scope doc="Return the exponential value e**z." ilk="function" name="exp" />
      <scope doc="Determine whether two complex numbers are close in value." ilk="function" name="isclose" />
      <scope doc="Return True if both the real and imaginary parts of z are&#10;finite, else False." ilk="function" name="isfinite" />
      <scope doc="Checks if the real or imaginary part of z is infinite." ilk="function" name="isinf" />
      <scope doc="Checks if the real or imaginary part of z not a number&#10;(NaN)." ilk="function" name="isnan" />
      <scope doc="The logarithm of z to the given base." ilk="function" name="log" />
      <scope doc="Return the base-10 logarithm of z." ilk="function" name="log10" />
      <scope doc="Return argument, also known as the phase angle, of a&#10;complex." ilk="function" name="phase" />
      <variable citdl="float" name="pi" />
      <scope doc="Convert a complex from rectangular coordinates to polar&#10;coordinates." ilk="function" name="polar" />
      <scope doc="Convert from polar coordinates to rectangular coordinates." ilk="function" name="rect" />
      <scope doc="Return the sine of z." ilk="function" name="sin" />
      <scope doc="Return the hyperbolic sine of z." ilk="function" name="sinh" />
      <scope doc="Return the square root of z." ilk="function" name="sqrt" />
      <scope doc="Return the tangent of z." ilk="function" name="tan" />
      <scope doc="Return the hyperbolic tangent of z." ilk="function" name="tanh" />
    </scope>
    <scope doc="Fix changes imports of urllib which are now incompatible.&#10;This is rather similar to fix_imports, but because of the more complex nature of the fixing for urllib, it has its own fixer." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_urllib">
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixImports">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="build_pattern" signature="build_pattern(self)" />
        <scope doc="Compiles self.PATTERN into self.pattern." ilk="function" name="compile_pattern" signature="compile_pattern(self)" />
      </scope>
      <scope classrefs="FixImports" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixUrllib">
        <scope doc="Transform for the basic import case." ilk="function" name="transform_import" signature="transform_import(self, node, results)" />
        <scope ilk="function" name="build_pattern" signature="build_pattern(self)" />
        <scope doc="Transform for calls to module members in code." ilk="function" name="transform_dot" signature="transform_dot(self, node, results)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Transform for imports of specific module elements." ilk="function" name="transform_member" signature="transform_member(self, node, results)" />
      </scope>
      <scope doc="Return an import statement in the form: from package import&#10;name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <variable citdl="dict" name="MAPPING" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope ilk="function" name="alternates" signature="alternates(members)" />
      <scope ilk="function" name="build_pattern" signature="build_pattern()" />
      <scope doc="Find the indentation of *node*." ilk="function" name="find_indentation" signature="find_indentation(node)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Fix incompatible imports and module references that must be fixed after&#10;fix_imports." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_imports2">
      <scope classrefs="FixImports" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixImports2" />
      <variable citdl="dict" name="MAPPING" />
      <import module="fix_imports" />
    </scope>
    <scope doc="Middleware to check for obedience to the WSGI specification.&#10;Some of the things this checks:  * Signature of the application and start_response (including that keyword arguments are not used).  * Environment checks:  - Environment is a dictionary (and not a subclass).  - That all the required keys are in the environment: REQUEST_METHOD," ilk="blob" lang="Python3" name="wsgiref.validate">
      <scope classrefs="object" doc="&#10;" ilk="class" name="ErrorWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, wsgi_errors)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="writelines" signature="writelines(self, seq)" />
        <scope ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="write" signature="write(self, s)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="InputWrapper">
        <scope ilk="function" name="read" signature="read(self, *args)" />
        <scope ilk="function" name="readline" signature="readline(self, *args)" />
        <scope ilk="function" name="readlines" signature="readlines(self, *args)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, wsgi_input)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="IteratorWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, wsgi_iterator, check_start_response)" />
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="PartialIteratorWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, wsgi_iterator)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <scope classrefs="Warning" doc="Raised in response to WSGI-spec-related warnings&#10;" ilk="class" name="WSGIWarning" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="WriteWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, wsgi_writer)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, s)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="assert_" signature="assert_(cond, *args)" />
      <variable citdl="SRE_Pattern" name="bad_header_value_re" />
      <scope ilk="function" name="check_content_type" signature="check_content_type(status, headers)" />
      <scope ilk="function" name="check_environ" signature="check_environ(environ)" />
      <scope ilk="function" name="check_errors" signature="check_errors(wsgi_errors)" />
      <scope ilk="function" name="check_exc_info" signature="check_exc_info(exc_info)" />
      <scope ilk="function" name="check_headers" signature="check_headers(headers)" />
      <scope ilk="function" name="check_input" signature="check_input(wsgi_input)" />
      <scope ilk="function" name="check_iterator" signature="check_iterator(iterator)" />
      <scope ilk="function" name="check_status" signature="check_status(status)" />
      <scope ilk="function" name="check_string_type" signature="check_string_type(value, title)" />
      <variable citdl="SRE_Pattern" name="header_re" />
      <import module="re" />
      <import module="sys" />
      <scope doc="When applied between a WSGI server and a WSGI application,&#10;this middleware will check for WSGI compliancy on a number&#10;of levels." ilk="function" name="validator" signature="validator(application)" />
      <import module="warnings" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="zipapp">
      <variable citdl="str" name="MAIN_TEMPLATE" />
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="ZipAppError" />
      <variable citdl="list" name="__all__" />
      <import module="contextlib" />
      <scope doc="Create an application archive from SOURCE." ilk="function" name="create_archive" signature="create_archive(source, target=None, interpreter=None, main=None)" />
      <scope ilk="function" name="get_interpreter" signature="get_interpreter(archive)" />
      <scope doc="Run the zipapp command line interface." ilk="function" name="main" signature="main(args=None)" />
      <import module="os" />
      <import module="pathlib" />
      <variable citdl="str" name="shebang_encoding" />
      <import module="shutil" />
      <import module="stat" />
      <import module="sys" />
      <import module="zipfile" />
    </scope>
    <scope doc="Fixer for itertools.(imap|ifilter|izip) --&gt; (map|filter|zip) and&#10;itertools.ifilterfalse --&gt; itertools.filterfalse (bugs 2360-2363)  imports from itertools are fixed in fix_itertools_import.py  If itertools is imported as something else (ie: import itertools as it; it.izip(spam, eggs)) method calls will not get fixed." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_itertools">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixItertools">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="distutils.cmd&#10;Provides the Command class, the base class for the command classes in the distutils.command package." ilk="blob" lang="Python3" name="distutils.cmd">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <import module="archive_util" />
      <import module="dep_util" />
      <import module="dir_util" />
      <import module="file_util" />
      <scope classrefs="Command" doc="Common base class for installing some files in a subdirectory.&#10;Currently used by install_data and install_scripts." ilk="class" name="install_misc">
        <scope ilk="function" name="_copy_files" signature="_copy_files(self, filelist)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="_install_dir_from" signature="_install_dir_from(self, dirname)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="Simple implementation of the Level 1 DOM.&#10;Namespaces and other minor Level 2 features are also supported.  parse(&quot;foo.xml&quot;)  parseString(&quot;&lt;foo&gt;&lt;bar/&gt;&lt;/foo&gt;&quot;)  Todo: ===== * convenience methods for getting elements and text. * more testing" ilk="blob" lang="Python3" name="xml.dom.minidom">
      <scope classrefs="Node" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Attr">
        <scope ilk="function" name="_get_localName" signature="_get_localName(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, qName, namespaceURI=None, localName=None, prefix=None)" />
        <scope ilk="function" name="_get_isId" signature="_get_isId(self)" />
        <scope ilk="function" name="_get_name" signature="_get_name(self)" />
        <scope ilk="function" name="_get_schemaType" signature="_get_schemaType(self)" />
        <scope ilk="function" name="_set_prefix" signature="_set_prefix(self, prefix)" />
        <scope ilk="function" name="unlink" signature="unlink(self)" />
        <scope ilk="function" name="_get_value" signature="_get_value(self)" />
        <scope ilk="function" name="_get_prefix" signature="_get_prefix(self)" />
        <scope ilk="function" name="_get_specified" signature="_get_specified(self)" />
        <scope ilk="function" name="_set_name" signature="_set_name(self, value)" />
        <scope ilk="function" name="_set_value" signature="_set_value(self, value)" />
      </scope>
      <scope classrefs="object" doc="The attribute list is a transient interface to the underlying&#10;dictionaries.  Mutations here will change the underlying element's dictionary.  Ordering is imposed artificially and does not reflect the order of attributes as found in an input document." ilk="class" name="AttributeList">
        <scope ilk="function" name="getNamedItemNS" signature="getNamedItemNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="values" signature="values(self)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, attname_or_tuple)" />
        <scope ilk="function" name="setNamedItemNS" signature="setNamedItemNS(self, node)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="setNamedItem" signature="setNamedItem(self, node)" />
        <scope ilk="function" name="keysNS" signature="keysNS(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, attname_or_tuple)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, attrs, attrsNS, ownerElement)" />
        <scope doc="# same as set" ilk="function" name="__setitem__" signature="__setitem__(self, attname, value)" />
        <scope ilk="function" name="removeNamedItem" signature="removeNamedItem(self, name)" />
        <scope ilk="function" name="removeNamedItemNS" signature="removeNamedItemNS(self, namespaceURI, localName)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="itemsNS" signature="itemsNS(self)" />
        <scope ilk="function" name="items" signature="items(self)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="get" signature="get(self, name, value=None)" />
        <scope ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="getNamedItem" signature="getNamedItem(self, name)" />
      </scope>
      <scope classrefs="Text" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="CDATASection">
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
      </scope>
      <scope classrefs="Childless Node" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="CharacterData">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="appendData" signature="appendData(self, arg)" />
        <scope ilk="function" name="_get_data" signature="_get_data(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="deleteData" signature="deleteData(self, offset, count)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="insertData" signature="insertData(self, offset, arg)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="_set_data" signature="_set_data(self, data)" />
        <scope ilk="function" name="replaceData" signature="replaceData(self, offset, count, arg)" />
        <scope ilk="function" name="substringData" signature="substringData(self, offset, count)" />
      </scope>
      <scope classrefs="object" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="Childless">
        <scope ilk="function" name="replaceChild" signature="replaceChild(self, newChild, oldChild)" />
        <scope ilk="function" name="insertBefore" signature="insertBefore(self, newChild, refChild)" />
        <scope ilk="function" name="_get_firstChild" signature="_get_firstChild(self)" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes(self)" />
        <scope ilk="function" name="normalize" signature="normalize(self)" />
        <scope ilk="function" name="_get_lastChild" signature="_get_lastChild(self)" />
        <scope ilk="function" name="appendChild" signature="appendChild(self, node)" />
        <scope ilk="function" name="removeChild" signature="removeChild(self, oldChild)" />
      </scope>
      <scope classrefs="CharacterData" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="Comment">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data)" />
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
      </scope>
      <scope classrefs="DOMImplementationLS" doc="&#10;" ilk="class" name="DOMImplementation">
        <scope ilk="function" name="hasFeature" signature="hasFeature(self, feature, version)" />
        <scope doc="# internal" ilk="function" name="_create_document" signature="_create_document(self)" />
        <scope ilk="function" name="createDocument" signature="createDocument(self, namespaceURI, qualifiedName, doctype)" />
        <scope ilk="function" name="createDocumentType" signature="createDocumentType(self, qualifiedName, publicId, systemId)" />
        <scope ilk="function" name="getInterface" signature="getInterface(self, feature)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMImplementationLS">
        <scope ilk="function" name="createDOMBuilder" signature="createDOMBuilder(self, mode, schemaType)" />
        <scope ilk="function" name="createDOMInputSource" signature="createDOMInputSource(self)" />
        <scope ilk="function" name="createDOMWriter" signature="createDOMWriter(self)" />
      </scope>
      <scope classrefs="Node DocumentLS" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Document">
        <scope ilk="function" name="importNode" signature="importNode(self, node, deep)" />
        <scope ilk="function" name="_get_strictErrorChecking" signature="_get_strictErrorChecking(self)" />
        <scope ilk="function" name="unlink" signature="unlink(self)" />
        <scope ilk="function" name="_get_documentElement" signature="_get_documentElement(self)" />
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName(self, name)" />
        <scope ilk="function" name="createTextNode" signature="createTextNode(self, data)" />
        <scope ilk="function" name="createElement" signature="createElement(self, tagName)" />
        <scope ilk="function" name="_get_documentURI" signature="_get_documentURI(self)" />
        <scope ilk="function" name="getElementById" signature="getElementById(self, id)" />
        <scope ilk="function" name="_create_entity" signature="_create_entity(self, name, publicId, systemId, notationName)" />
        <scope ilk="function" name="createDocumentFragment" signature="createDocumentFragment(self)" />
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='', encoding=None)" />
        <scope ilk="function" name="_get_errorHandler" signature="_get_errorHandler(self)" />
        <scope ilk="function" name="createComment" signature="createComment(self, data)" />
        <scope ilk="function" name="cloneNode" signature="cloneNode(self, deep)" />
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="_create_notation" signature="_create_notation(self, name, publicId, systemId)" />
        <scope ilk="function" name="createElementNS" signature="createElementNS(self, namespaceURI, qualifiedName)" />
        <scope ilk="function" name="_get_actualEncoding" signature="_get_actualEncoding(self)" />
        <scope ilk="function" name="isSupported" signature="isSupported(self, feature, version)" />
        <scope ilk="function" name="_get_version" signature="_get_version(self)" />
        <scope ilk="function" name="renameNode" signature="renameNode(self, n, namespaceURI, name)" />
        <scope ilk="function" name="_get_elem_info" signature="_get_elem_info(self, element)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="createProcessingInstruction" signature="createProcessingInstruction(self, target, data)" />
        <scope ilk="function" name="createCDATASection" signature="createCDATASection(self, data)" />
        <scope ilk="function" name="_get_doctype" signature="_get_doctype(self)" />
        <scope ilk="function" name="createAttributeNS" signature="createAttributeNS(self, namespaceURI, qualifiedName)" />
        <scope ilk="function" name="removeChild" signature="removeChild(self, oldChild)" />
        <scope ilk="function" name="createAttribute" signature="createAttribute(self, qName)" />
        <scope ilk="function" name="_get_standalone" signature="_get_standalone(self)" />
        <scope ilk="function" name="appendChild" signature="appendChild(self, node)" />
        <scope ilk="function" name="_get_encoding" signature="_get_encoding(self)" />
      </scope>
      <scope classrefs="Node" doc="Class giving the NodeType constants.&#10;" ilk="class" name="DocumentFragment">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
      </scope>
      <scope classrefs="object" doc="Mixin to create documents that conform to the load/save spec.&#10;" ilk="class" name="DocumentLS">
        <scope ilk="function" name="load" signature="load(self, uri)" />
        <scope ilk="function" name="loadXML" signature="loadXML(self, source)" />
        <scope ilk="function" name="abort" signature="abort(self)" />
        <scope ilk="function" name="_set_async" signature="_set_async(self, async)" />
        <scope ilk="function" name="_get_async" signature="_get_async(self)" />
        <scope ilk="function" name="saveXML" signature="saveXML(self, snode)" />
      </scope>
      <scope classrefs="Identified Childless Node" doc="Mix-in class that supports the publicId and systemId attributes.&#10;" ilk="class" name="DocumentType">
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
        <scope ilk="function" name="_get_internalSubset" signature="_get_internalSubset(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, qualifiedName)" />
        <scope ilk="function" name="cloneNode" signature="cloneNode(self, deep)" />
      </scope>
      <variable citdl="NoneType" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" name="EMPTY_PREFIX" />
      <scope classrefs="Node" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Element">
        <scope ilk="function" name="setAttribute" signature="setAttribute(self, attname, value)" />
        <scope ilk="function" name="getAttribute" signature="getAttribute(self, attname)" />
        <scope ilk="function" name="_ensure_attributes" signature="_ensure_attributes(self)" />
        <scope ilk="function" name="setIdAttributeNS" signature="setIdAttributeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="unlink" signature="unlink(self)" />
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName(self, name)" />
        <scope ilk="function" name="hasAttributes" signature="hasAttributes(self)" />
        <scope ilk="function" name="getAttributeNodeNS" signature="getAttributeNodeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="hasAttributeNS" signature="hasAttributeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="removeAttributeNode" signature="removeAttributeNode(self, node)" />
        <scope ilk="function" name="setAttributeNodeNS" signature="setAttributeNodeNS(self, attr)" />
        <scope ilk="function" name="getAttributeNode" signature="getAttributeNode(self, attrname)" />
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="setAttributeNode" signature="setAttributeNode(self, attr)" />
        <scope ilk="function" name="setAttributeNS" signature="setAttributeNS(self, namespaceURI, qualifiedName, value)" />
        <scope ilk="function" name="removeAttribute" signature="removeAttribute(self, name)" />
        <scope ilk="function" name="removeAttributeNS" signature="removeAttributeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="getAttributeNS" signature="getAttributeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="_get_localName" signature="_get_localName(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tagName, namespaceURI=None, prefix=None, localName=None)" />
        <scope ilk="function" name="removeAttributeNodeNS" signature="removeAttributeNodeNS(self, node)" />
        <scope ilk="function" name="setIdAttributeNode" signature="setIdAttributeNode(self, idAttr)" />
        <scope ilk="function" name="_get_tagName" signature="_get_tagName(self)" />
        <scope ilk="function" name="_get_attributes" signature="_get_attributes(self)" />
        <scope ilk="function" name="setIdAttribute" signature="setIdAttribute(self, name)" />
        <scope ilk="function" name="hasAttribute" signature="hasAttribute(self, name)" />
      </scope>
      <scope classrefs="object" doc="Object that represents content-model information for an element.&#10;This implementation is not expected to be used in practice; DOM builders should provide implementations which do the right thing using information available to it." ilk="class" name="ElementInfo">
        <scope doc="Returns true iff this element is declared to have an EMPTY&#10;content model." ilk="function" name="isEmpty" signature="isEmpty(self)" />
        <scope ilk="function" name="getAttributeTypeNS" signature="getAttributeTypeNS(self, namespaceURI, localName)" />
        <scope doc="Returns true iff the identified attribute is a DTD-style ID." ilk="function" name="isIdNS" signature="isIdNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="getAttributeType" signature="getAttributeType(self, aname)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name)" />
        <scope doc="Returns true iff the named attribute is a DTD-style ID." ilk="function" name="isId" signature="isId(self, aname)" />
        <scope ilk="function" name="isElementContent" signature="isElementContent(self)" />
      </scope>
      <scope classrefs="tuple" doc="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object." ilk="class" name="EmptyNodeList">
        <scope ilk="function" name="__radd__" signature="__radd__(self, other)" />
        <scope doc="Return self+value." ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope ilk="function" name="_set_length" signature="_set_length(self, value)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
      </scope>
      <scope classrefs="Identified Node" doc="Mix-in class that supports the publicId and systemId attributes.&#10;" ilk="class" name="Entity">
        <scope ilk="function" name="replaceChild" signature="replaceChild(self, newChild, oldChild)" />
        <scope ilk="function" name="insertBefore" signature="insertBefore(self, newChild, refChild)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, publicId, systemId, notation)" />
        <scope ilk="function" name="_get_actualEncoding" signature="_get_actualEncoding(self)" />
        <scope ilk="function" name="_get_encoding" signature="_get_encoding(self)" />
        <scope ilk="function" name="appendChild" signature="appendChild(self, newChild)" />
        <scope ilk="function" name="removeChild" signature="removeChild(self, oldChild)" />
        <scope ilk="function" name="_get_version" signature="_get_version(self)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class that supports the publicId and systemId attributes.&#10;" ilk="class" name="Identified">
        <scope ilk="function" name="_identified_mixin_init" signature="_identified_mixin_init(self, publicId, systemId)" />
        <scope ilk="function" name="_get_systemId" signature="_get_systemId(self)" />
        <scope ilk="function" name="_get_publicId" signature="_get_publicId(self)" />
      </scope>
      <scope classrefs="object" doc="The attribute list is a transient interface to the underlying&#10;dictionaries.  Mutations here will change the underlying element's dictionary.  Ordering is imposed artificially and does not reflect the order of attributes as found in an input document." ilk="class" name="NamedNodeMap">
        <scope ilk="function" name="getNamedItemNS" signature="getNamedItemNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="values" signature="values(self)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, attname_or_tuple)" />
        <scope ilk="function" name="setNamedItemNS" signature="setNamedItemNS(self, node)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="setNamedItem" signature="setNamedItem(self, node)" />
        <scope ilk="function" name="keysNS" signature="keysNS(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, attname_or_tuple)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, attrs, attrsNS, ownerElement)" />
        <scope doc="# same as set" ilk="function" name="__setitem__" signature="__setitem__(self, attname, value)" />
        <scope ilk="function" name="removeNamedItem" signature="removeNamedItem(self, name)" />
        <scope ilk="function" name="removeNamedItemNS" signature="removeNamedItemNS(self, namespaceURI, localName)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="itemsNS" signature="itemsNS(self)" />
        <scope ilk="function" name="items" signature="items(self)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="get" signature="get(self, name, value=None)" />
        <scope ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="getNamedItem" signature="getNamedItem(self, name)" />
      </scope>
      <scope classrefs="Node" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Node">
        <scope ilk="function" name="__exit__" signature="__exit__(self, et, ev, tb)" />
        <scope ilk="function" name="replaceChild" signature="replaceChild(self, newChild, oldChild)" />
        <scope ilk="function" name="toxml" signature="toxml(self, encoding=None)" />
        <scope ilk="function" name="insertBefore" signature="insertBefore(self, newChild, refChild)" />
        <scope ilk="function" name="_get_childNodes" signature="_get_childNodes(self)" />
        <scope ilk="function" name="_get_localName" signature="_get_localName(self)" />
        <scope ilk="function" name="removeChild" signature="removeChild(self, oldChild)" />
        <scope ilk="function" name="isSameNode" signature="isSameNode(self, other)" />
        <scope ilk="function" name="cloneNode" signature="cloneNode(self, deep)" />
        <scope ilk="function" name="isSupported" signature="isSupported(self, feature, version)" />
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes(self)" />
        <scope doc="# A Node is its own context manager, to ensure that an&#10;unlink() call occurs." ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="toprettyxml" signature="toprettyxml(self, indent='\t', newl='\n', encoding=None)" />
        <scope ilk="function" name="getInterface" signature="getInterface(self, feature)" />
        <scope ilk="function" name="unlink" signature="unlink(self)" />
        <scope ilk="function" name="normalize" signature="normalize(self)" />
        <scope ilk="function" name="_get_lastChild" signature="_get_lastChild(self)" />
        <scope ilk="function" name="_call_user_data_handler" signature="_call_user_data_handler(self, operation, src, dst)" />
        <scope ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope ilk="function" name="appendChild" signature="appendChild(self, node)" />
        <scope ilk="function" name="getUserData" signature="getUserData(self, key)" />
        <scope ilk="function" name="_get_firstChild" signature="_get_firstChild(self)" />
        <scope ilk="function" name="setUserData" signature="setUserData(self, key, data, handler)" />
      </scope>
      <scope classrefs="list" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="NodeList">
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="_set_length" signature="_set_length(self, value)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
      </scope>
      <scope classrefs="Identified Childless Node" doc="Mix-in class that supports the publicId and systemId attributes.&#10;" ilk="class" name="Notation">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, publicId, systemId)" />
      </scope>
      <scope classrefs="Childless Node" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="ProcessingInstruction">
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
        <scope doc="# nodeValue is an alias for data" ilk="function" name="_get_nodeValue" signature="_get_nodeValue(self)" />
        <scope doc="# nodeName is an alias for target" ilk="function" name="_get_nodeName" signature="_get_nodeName(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, target, data)" />
        <scope ilk="function" name="_set_nodeValue" signature="_set_nodeValue(self, value)" />
        <scope ilk="function" name="_set_nodeName" signature="_set_nodeName(self, value)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ReadOnlySequentialNamedNodeMap">
        <scope ilk="function" name="getNamedItemNS" signature="getNamedItemNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name_or_tuple)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, seq=())" />
        <scope ilk="function" name="setNamedItemNS" signature="setNamedItemNS(self, node)" />
        <scope ilk="function" name="removeNamedItemNS" signature="removeNamedItemNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
        <scope ilk="function" name="removeNamedItem" signature="removeNamedItem(self, name)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="setNamedItem" signature="setNamedItem(self, node)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="getNamedItem" signature="getNamedItem(self, name)" />
      </scope>
      <variable citdl="tuple" name="StringTypes" />
      <scope classrefs="CharacterData" doc="Mixin that makes childless-ness easy to implement and avoids&#10;the complexity of the Node methods that deal with children." ilk="class" name="Text">
        <scope ilk="function" name="_get_isWhitespaceInElementContent" signature="_get_isWhitespaceInElementContent(self)" />
        <scope ilk="function" name="writexml" signature="writexml(self, writer, indent='', addindent='', newl='')" />
        <scope ilk="function" name="splitText" signature="splitText(self, offset)" />
        <scope ilk="function" name="replaceWholeText" signature="replaceWholeText(self, content)" />
        <scope ilk="function" name="_get_wholeText" signature="_get_wholeText(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="TypeInfo">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, namespace, name)" />
        <scope ilk="function" name="_get_namespace" signature="_get_namespace(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_get_name" signature="_get_name(self)" />
      </scope>
      <variable citdl="str" name="XMLNS_NAMESPACE" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <import module="domreg" />
      <scope ilk="function" name="getDOMImplementation" signature="getDOMImplementation(features=None)" />
      <import module="io" />
      <scope doc="Parse a file into a DOM by filename or file object." ilk="function" name="parse" signature="parse(file, parser=None, bufsize=None)" />
      <scope doc="Parse a file into a DOM from a string." ilk="function" name="parseString" signature="parseString(string, parser=None)" />
      <import module="xml" />
    </scope>
    <scope doc="# Mimic the sqlite3 console shell's .dump command&#10;# Author: Paul Kippes &lt;kippesp@gmail.com&gt;" ilk="blob" lang="Python3" name="sqlite3.dump" />
    <scope doc="General functions for HTML manipulation.&#10;" ilk="blob" lang="Python3" name="html">
      <variable citdl="list" name="__all__" />
      <import module="_re" />
      <import module="entities" />
      <scope doc="Replace special characters &quot;&amp;&quot;, &quot;&lt;&quot; and &quot;&gt;&quot; to HTML-safe&#10;sequences." ilk="function" name="escape" signature="escape(s, quote=True)" />
      <scope doc="Convert all named and numeric character references (e.g." ilk="function" name="unescape" signature="unescape(s)" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-unixware7.IN">
      <variable citdl="int" name="ADT_EMASKSIZE" />
      <variable citdl="int" name="AF_802" />
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_CCITT" />
      <variable citdl="int" name="AF_CHAOS" />
      <variable citdl="int" name="AF_DATAKIT" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_DLI" />
      <variable citdl="int" name="AF_ECMA" />
      <variable citdl="int" name="AF_GOSIP" />
      <variable citdl="int" name="AF_HYLINK" />
      <variable citdl="int" name="AF_IMPLINK" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_INET_BSWAP" />
      <variable citdl="int" name="AF_ISO" />
      <variable citdl="int" name="AF_LAT" />
      <variable citdl="int" name="AF_LINK" />
      <variable citdl="int" name="AF_LOCAL" />
      <variable citdl="int" name="AF_MAX" />
      <variable citdl="int" name="AF_NBS" />
      <variable citdl="int" name="AF_NIT" />
      <variable citdl="int" name="AF_NS" />
      <variable citdl="int" name="AF_OSI" />
      <variable citdl="int" name="AF_OSINET" />
      <variable citdl="int" name="AF_PUP" />
      <variable citdl="int" name="AF_ROUTE" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_UNIX" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="AF_X25" />
      <variable citdl="int" name="AF_YNET" />
      <variable citdl="int" name="AHDLCM_ID" />
      <variable citdl="int" name="ALIGNFLT" />
      <variable citdl="int" name="APPM_ID" />
      <variable citdl="int" name="ARPM_ID" />
      <scope ilk="function" name="ASSERT_LOCK" signature="ASSERT_LOCK(x)" />
      <scope ilk="function" name="ASSERT_UNLOCK" signature="ASSERT_UNLOCK(x)" />
      <scope ilk="function" name="ASSERT_WRLOCK" signature="ASSERT_WRLOCK(x)" />
      <scope ilk="function" name="ATOMIC_INT_DECR" signature="ATOMIC_INT_DECR(atomic_intp)" />
      <scope ilk="function" name="ATOMIC_INT_INCR" signature="ATOMIC_INT_INCR(atomic_intp)" />
      <scope ilk="function" name="ATOMIC_INT_READ" signature="ATOMIC_INT_READ(atomic_intp)" />
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BOOTENG" />
      <variable citdl="int" name="BOUNDFLT" />
      <variable citdl="int" name="BPRI_HI" />
      <variable citdl="int" name="BPRI_LO" />
      <variable citdl="int" name="BPRI_MED" />
      <variable citdl="int" name="BPTFLT" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="CALLOUT_MAXVAL" />
      <scope ilk="function" name="CANPUT" signature="CANPUT(q)" />
      <scope ilk="function" name="CANPUTNEXT" signature="CANPUTNEXT(q)" />
      <variable citdl="int" name="CGBITS" />
      <variable citdl="int" name="CLOCKS_PER_SEC" />
      <variable citdl="int" name="CLOCK_MAX" />
      <variable citdl="int" name="CLONEOPEN" />
      <variable citdl="int" name="CONTI" />
      <variable citdl="int" name="CR_MLDREAL" />
      <variable citdl="int" name="CR_RDUMP" />
      <scope ilk="function" name="CYCLES_SINCE" signature="CYCLES_SINCE(c)" />
      <variable citdl="int" name="DBLFLT" />
      <variable citdl="int" name="DB_2PIECE" />
      <variable citdl="int" name="DB_WASDUPED" />
      <variable citdl="int" name="DIVERR" />
      <variable citdl="int" name="DRVOPEN" />
      <variable citdl="int" name="DST_AUST" />
      <variable citdl="int" name="DST_AUSTALT" />
      <variable citdl="int" name="DST_CAN" />
      <variable citdl="int" name="DST_EET" />
      <variable citdl="int" name="DST_GB" />
      <variable citdl="int" name="DST_MET" />
      <variable citdl="int" name="DST_NONE" />
      <variable citdl="int" name="DST_RUM" />
      <variable citdl="int" name="DST_TUR" />
      <variable citdl="int" name="DST_USA" />
      <variable citdl="int" name="DST_WET" />
      <variable citdl="int" name="ENGINE_ONLINE" />
      <variable citdl="int" name="EVT_GLOBCALLOUT" />
      <variable citdl="int" name="EVT_KPRUNRUN" />
      <variable citdl="int" name="EVT_LCLCALLOUT" />
      <variable citdl="int" name="EVT_RUNRUN" />
      <variable citdl="int" name="EVT_SOFTINTMASK" />
      <variable citdl="int" name="EVT_STRSCHED" />
      <variable citdl="int" name="EXTERRFLT" />
      <variable citdl="int" name="EXTOVRFLT" />
      <variable citdl="int" name="E_BAD" />
      <variable citdl="int" name="E_BOUND" />
      <variable citdl="int" name="E_CGLEADER" />
      <variable citdl="int" name="E_DEFAULTKEEP" />
      <variable citdl="int" name="E_DRIVER" />
      <variable citdl="int" name="E_DRIVERBOUND" />
      <variable citdl="int" name="E_EXCLUSIVE" />
      <variable citdl="int" name="E_GLOBAL" />
      <variable citdl="int" name="E_NOWAY" />
      <variable citdl="int" name="E_OFFLINE" />
      <variable citdl="int" name="E_SHUTDOWN" />
      <variable citdl="int" name="E_UNAVAIL" />
      <variable citdl="int" name="FD_NBBY" />
      <variable citdl="int" name="FD_SETSIZE" />
      <variable citdl="int" name="FLUSHALL" />
      <variable citdl="int" name="FLUSHDATA" />
      <scope ilk="function" name="FSPIN_INIT" signature="FSPIN_INIT(lp)" />
      <scope ilk="function" name="FSPIN_IS_LOCKED" signature="FSPIN_IS_LOCKED(fsp)" />
      <scope ilk="function" name="FSPIN_LOCK" signature="FSPIN_LOCK(l)" />
      <scope ilk="function" name="FSPIN_OWNED" signature="FSPIN_OWNED(l)" />
      <scope ilk="function" name="FSPIN_TRYLOCK" signature="FSPIN_TRYLOCK(l)" />
      <scope ilk="function" name="FSPIN_UNLOCK" signature="FSPIN_UNLOCK(l)" />
      <scope doc="# Included from sys/ksynch_p.h" ilk="function" name="GET_TIME" signature="GET_TIME(timep)" />
      <variable citdl="int" name="GIARG" />
      <variable citdl="int" name="GITAB" />
      <variable citdl="int" name="GLOBALSOFTINT" />
      <variable citdl="int" name="GPFLT" />
      <variable citdl="int" name="HDLCM_ID" />
      <variable citdl="int" name="ICMPM_ID" />
      <variable citdl="int" name="IDBITS" />
      <variable citdl="int" name="IGMPM_ID" />
      <scope ilk="function" name="IN6_IS_ADDR_ANY" signature="IN6_IS_ADDR_ANY(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope doc="# Included from netinet/in6_f.h" ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <variable citdl="int" name="IN6_MC_FLAG_PERMANENT" />
      <variable citdl="int" name="IN6_MC_FLAG_TRANSIENT" />
      <variable citdl="int" name="IN6_MC_SCOPE_GLOBAL" />
      <variable citdl="int" name="IN6_MC_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IN6_MC_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IN6_MC_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IN6_MC_SCOPE_SITELOCAL" />
      <scope ilk="function" name="IN6_SET_ADDR_ANY" signature="IN6_SET_ADDR_ANY(a)" />
      <scope ilk="function" name="IN6_SET_ADDR_LOOPBACK" signature="IN6_SET_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_SET_ADDR_UNSPECIFIED" signature="IN6_SET_ADDR_UNSPECIFIED(a)" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ALLRTRS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <variable citdl="int" name="INET_DEBUG" />
      <variable citdl="int" name="INFPSZ" />
      <variable citdl="int" name="INTOFLT" />
      <variable citdl="int" name="INT_MAX" />
      <variable citdl="int" name="INT_MIN" />
      <variable citdl="int" name="INVOPFLT" />
      <variable citdl="int" name="INVTSSFLT" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope doc="# Included from netinet/in_f.h" ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPIPM_ID" />
      <variable citdl="int" name="IPM_ID" />
      <variable citdl="int" name="IPPORT_BIFFUDP" />
      <variable citdl="int" name="IPPORT_CMDSERVER" />
      <variable citdl="int" name="IPPORT_DAYTIME" />
      <variable citdl="int" name="IPPORT_DISCARD" />
      <variable citdl="int" name="IPPORT_ECHO" />
      <variable citdl="int" name="IPPORT_EFSSERVER" />
      <variable citdl="int" name="IPPORT_EXECSERVER" />
      <variable citdl="int" name="IPPORT_FINGER" />
      <variable citdl="int" name="IPPORT_FTP" />
      <variable citdl="int" name="IPPORT_LOGINSERVER" />
      <variable citdl="int" name="IPPORT_MTP" />
      <variable citdl="int" name="IPPORT_NAMESERVER" />
      <variable citdl="int" name="IPPORT_NETSTAT" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVED_HIGH" />
      <variable citdl="int" name="IPPORT_RESERVED_LOW" />
      <variable citdl="int" name="IPPORT_RJE" />
      <variable citdl="int" name="IPPORT_ROUTESERVER" />
      <variable citdl="int" name="IPPORT_SMTP" />
      <variable citdl="int" name="IPPORT_SUPDUP" />
      <variable citdl="int" name="IPPORT_SYSTAT" />
      <variable citdl="int" name="IPPORT_TELNET" />
      <variable citdl="int" name="IPPORT_TFTP" />
      <variable citdl="int" name="IPPORT_TIMESERVER" />
      <variable citdl="int" name="IPPORT_TTYLINK" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED_HIGH" />
      <variable citdl="int" name="IPPORT_USERRESERVED_LOW" />
      <variable citdl="int" name="IPPORT_WHOIS" />
      <variable citdl="int" name="IPPORT_WHOSERVER" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPV6_ADDRFORM" />
      <variable citdl="int" name="IPV6_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IPV6_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_BROADCAST_IF" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_HIER_BASE" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIFINDEX" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="ISTAT_ASSERTED" />
      <variable citdl="int" name="ISTAT_ASSUMED" />
      <variable citdl="int" name="ISTAT_NONE" />
      <scope ilk="function" name="IS_LOCKED" signature="IS_LOCKED(lockp)" />
      <variable citdl="int" name="ITIMER_PROF" />
      <variable citdl="int" name="ITIMER_REAL" />
      <variable citdl="int" name="ITIMER_VIRTUAL" />
      <variable citdl="int" name="KSFLAGS" />
      <variable citdl="int" name="KSVFLAG" />
      <variable citdl="int" name="KSVMPDEBUG" />
      <variable citdl="int" name="KSVMPNODEBUG" />
      <variable citdl="int" name="KSVUNIPROC" />
      <variable citdl="int" name="KS_DEINITED" />
      <variable citdl="int" name="KS_LOCKTEST" />
      <variable citdl="int" name="KS_MPSTATS" />
      <variable citdl="int" name="KS_NOPRMPT" />
      <variable citdl="int" name="KS_NVLTTRACE" />
      <scope ilk="function" name="LIST_INIT" signature="LIST_INIT(head)" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="LK_BASIC" />
      <variable citdl="int" name="LK_NOSTATS" />
      <variable citdl="int" name="LK_SLEEP" />
      <variable citdl="int" name="LK_THRESHOLD" />
      <variable citdl="int" name="LOCALSOFTINT" />
      <scope ilk="function" name="LOCK_DEALLOC" signature="LOCK_DEALLOC(lp)" />
      <scope ilk="function" name="LOCK_DEINIT" signature="LOCK_DEINIT(l)" />
      <scope ilk="function" name="LOCK_OWNED" signature="LOCK_OWNED(lp)" />
      <scope ilk="function" name="LOCK_PLMIN" signature="LOCK_PLMIN(lockp)" />
      <scope ilk="function" name="LOCK_SH_PLMIN" signature="LOCK_SH_PLMIN(lockp)" />
      <variable citdl="int" name="LONG_MAX" />
      <variable citdl="int" name="LONG_MIN" />
      <variable citdl="int" name="LOOPMICROSECONDS" />
      <variable citdl="int" name="LOOPSECONDS" />
      <variable citdl="int" name="LSB_NLKDS" />
      <scope ilk="function" name="LS_ISEMPTY" signature="LS_ISEMPTY(listp)" />
      <variable citdl="int" name="MAXIOCBSZ" />
      <variable citdl="int" name="MAXRQS" />
      <variable citdl="int" name="MAX_INTR_LEVELS" />
      <variable citdl="int" name="MAX_INTR_NESTING" />
      <variable citdl="int" name="MCEFLT" />
      <variable citdl="int" name="MHDLCRIPM_ID" />
      <variable citdl="int" name="MICROSEC" />
      <variable citdl="int" name="MILLISEC" />
      <variable citdl="int" name="MODOPEN" />
      <variable citdl="int" name="MRT_ADD_MFC" />
      <variable citdl="int" name="MRT_ADD_VIF" />
      <variable citdl="int" name="MRT_DEL_MFC" />
      <variable citdl="int" name="MRT_DEL_VIF" />
      <variable citdl="int" name="MRT_DONE" />
      <variable citdl="int" name="MRT_INIT" />
      <variable citdl="int" name="MRT_VERSION" />
      <variable citdl="int" name="MSGDELIM" />
      <variable citdl="int" name="MSGLOG" />
      <variable citdl="int" name="MSGMARK" />
      <variable citdl="int" name="MSGNOGET" />
      <variable citdl="int" name="MSGNOLOOP" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_EOR" />
      <variable citdl="int" name="MSG_MAXIOVLEN" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="MSG_WAITALL" />
      <variable citdl="int" name="M_BREAK" />
      <variable citdl="int" name="M_COPYIN" />
      <variable citdl="int" name="M_COPYOUT" />
      <variable citdl="int" name="M_CTL" />
      <variable citdl="int" name="M_DATA" />
      <variable citdl="int" name="M_DELAY" />
      <variable citdl="int" name="M_ERROR" />
      <variable citdl="int" name="M_FLUSH" />
      <variable citdl="int" name="M_HANGUP" />
      <variable citdl="int" name="M_IOCACK" />
      <variable citdl="int" name="M_IOCDATA" />
      <variable citdl="int" name="M_IOCNAK" />
      <variable citdl="int" name="M_IOCTL" />
      <variable citdl="int" name="M_PASSFP" />
      <variable citdl="int" name="M_PCCTL" />
      <variable citdl="int" name="M_PCPROTO" />
      <variable citdl="int" name="M_PCRSE" />
      <variable citdl="int" name="M_PCSETOPTS" />
      <variable citdl="int" name="M_PCSIG" />
      <variable citdl="int" name="M_PROTO" />
      <variable citdl="int" name="M_READ" />
      <variable citdl="int" name="M_RSE" />
      <variable citdl="int" name="M_SETOPTS" />
      <variable citdl="int" name="M_SIG" />
      <variable citdl="int" name="M_START" />
      <variable citdl="int" name="M_STARTI" />
      <variable citdl="int" name="M_STOP" />
      <variable citdl="int" name="M_STOPI" />
      <variable citdl="int" name="M_TRAIL" />
      <variable citdl="int" name="NANOSEC" />
      <variable citdl="int" name="NBAND" />
      <variable citdl="int" name="NBBY" />
      <variable citdl="int" name="NCALLOUT_HASH" />
      <variable citdl="str" name="NC_APPLETALK" />
      <variable citdl="int" name="NC_BROADCAST" />
      <variable citdl="str" name="NC_CCITT" />
      <variable citdl="str" name="NC_CHAOS" />
      <variable citdl="str" name="NC_DATAKIT" />
      <variable citdl="str" name="NC_DECNET" />
      <variable citdl="str" name="NC_DLI" />
      <variable citdl="str" name="NC_ECMA" />
      <variable citdl="str" name="NC_GOSIP" />
      <variable citdl="str" name="NC_HYLINK" />
      <variable citdl="str" name="NC_ICMP" />
      <variable citdl="str" name="NC_IEEE802" />
      <variable citdl="str" name="NC_IMPLINK" />
      <variable citdl="str" name="NC_INET" />
      <variable citdl="str" name="NC_INET6" />
      <variable citdl="str" name="NC_IPX" />
      <variable citdl="str" name="NC_LAT" />
      <variable citdl="str" name="NC_LOOPBACK" />
      <variable citdl="str" name="NC_NBS" />
      <variable citdl="str" name="NC_NETWARE" />
      <variable citdl="str" name="NC_NIT" />
      <variable citdl="int" name="NC_NOFLAG" />
      <variable citdl="str" name="NC_NOPROTO" />
      <variable citdl="str" name="NC_NOPROTOFMLY" />
      <variable citdl="str" name="NC_NS" />
      <variable citdl="str" name="NC_OSI" />
      <variable citdl="str" name="NC_OSINET" />
      <variable citdl="str" name="NC_PUP" />
      <variable citdl="str" name="NC_SNA" />
      <variable citdl="str" name="NC_SPX" />
      <variable citdl="str" name="NC_TCP" />
      <variable citdl="int" name="NC_TPI_CLTS" />
      <variable citdl="int" name="NC_TPI_COTS" />
      <variable citdl="int" name="NC_TPI_COTS_ORD" />
      <variable citdl="int" name="NC_TPI_RAW" />
      <variable citdl="str" name="NC_UDP" />
      <variable citdl="int" name="NC_VISIBLE" />
      <variable citdl="str" name="NC_X25" />
      <variable citdl="str" name="NETCONFIG" />
      <variable citdl="str" name="NETPATH" />
      <variable citdl="int" name="NMIFLT" />
      <variable citdl="int" name="NOEXTFLT" />
      <variable citdl="int" name="NULL" />
      <variable citdl="int" name="OFF32_MAX" />
      <variable citdl="int" name="OFF_MAX" />
      <variable citdl="int" name="OPENFAIL" />
      <scope ilk="function" name="OPTLEN" signature="OPTLEN(x)" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="PF_802" />
      <variable citdl="int" name="PF_APPLETALK" />
      <variable citdl="int" name="PF_CCITT" />
      <variable citdl="int" name="PF_CHAOS" />
      <variable citdl="int" name="PF_DATAKIT" />
      <variable citdl="int" name="PF_DECnet" />
      <variable citdl="int" name="PF_DLI" />
      <variable citdl="int" name="PF_ECMA" />
      <variable citdl="int" name="PF_ERR_MASK" />
      <variable citdl="int" name="PF_ERR_PAGE" />
      <variable citdl="int" name="PF_ERR_PROT" />
      <variable citdl="int" name="PF_ERR_USER" />
      <variable citdl="int" name="PF_ERR_WRITE" />
      <variable citdl="int" name="PF_GOSIP" />
      <variable citdl="int" name="PF_HYLINK" />
      <variable citdl="int" name="PF_IMPLINK" />
      <variable citdl="int" name="PF_INET" />
      <variable citdl="int" name="PF_INET6" />
      <variable citdl="int" name="PF_ISO" />
      <variable citdl="int" name="PF_LAT" />
      <variable citdl="int" name="PF_LINK" />
      <variable citdl="int" name="PF_LOCAL" />
      <variable citdl="int" name="PF_MAX" />
      <variable citdl="int" name="PF_NBS" />
      <variable citdl="int" name="PF_NIT" />
      <variable citdl="int" name="PF_NS" />
      <variable citdl="int" name="PF_OSI" />
      <variable citdl="int" name="PF_OSINET" />
      <variable citdl="int" name="PF_PUP" />
      <variable citdl="int" name="PF_ROUTE" />
      <variable citdl="int" name="PF_SNA" />
      <variable citdl="int" name="PF_UNIX" />
      <variable citdl="int" name="PF_UNSPEC" />
      <variable citdl="int" name="PF_X25" />
      <variable citdl="int" name="PF_YNET" />
      <variable citdl="int" name="PGFLT" />
      <variable citdl="int" name="PL0" />
      <variable citdl="int" name="PL1" />
      <variable citdl="int" name="PL2" />
      <variable citdl="int" name="PL3" />
      <variable citdl="int" name="PL4" />
      <variable citdl="int" name="PL5" />
      <variable citdl="int" name="PL6" />
      <variable citdl="int" name="PL7" />
      <variable citdl="int" name="PLBASE" />
      <variable citdl="int" name="PLDISK" />
      <variable citdl="int" name="PLHI" />
      <variable citdl="int" name="PLMIN" />
      <variable citdl="int" name="PLSTR" />
      <variable citdl="int" name="PLTIMEOUT" />
      <variable citdl="int" name="PLTTY" />
      <variable citdl="int" name="PPCID_ID" />
      <variable citdl="int" name="PPPM_ID" />
      <scope ilk="function" name="PROCESSOR_UNMAP" signature="PROCESSOR_UNMAP(e)" />
      <variable citdl="int" name="P_MYHOSTID" />
      <variable citdl="int" name="P_MYID" />
      <variable citdl="int" name="QBACK" />
      <variable citdl="int" name="QBOUND" />
      <variable citdl="int" name="QB_BACK" />
      <variable citdl="int" name="QB_FULL" />
      <variable citdl="int" name="QB_WANTW" />
      <variable citdl="int" name="QDEFCNT" />
      <variable citdl="int" name="QENAB" />
      <variable citdl="int" name="QFREEZE" />
      <variable citdl="int" name="QFULL" />
      <variable citdl="int" name="QINTER" />
      <variable citdl="int" name="QMOVED" />
      <variable citdl="int" name="QNOENB" />
      <variable citdl="int" name="QNORM" />
      <variable citdl="int" name="QPCTL" />
      <variable citdl="int" name="QPROCSON" />
      <variable citdl="int" name="QREADR" />
      <variable citdl="int" name="QSVCBUSY" />
      <variable citdl="int" name="QTOENAB" />
      <variable citdl="int" name="QUP" />
      <variable citdl="int" name="QUSE" />
      <variable citdl="int" name="QWANTR" />
      <variable citdl="int" name="QWANTW" />
      <variable citdl="int" name="RECOPY" />
      <variable citdl="int" name="RIPM_ID" />
      <variable citdl="int" name="RWS_BUSY" />
      <variable citdl="int" name="RWS_READ" />
      <variable citdl="int" name="RWS_UNLOCKED" />
      <variable citdl="int" name="RWS_WRITE" />
      <scope ilk="function" name="RW_DEALLOC" signature="RW_DEALLOC(lp)" />
      <scope ilk="function" name="RW_DEINIT" signature="RW_DEINIT(lp)" />
      <scope ilk="function" name="RW_OWNED" signature="RW_OWNED(lp)" />
      <scope ilk="function" name="RW_RDLOCK_PLMIN" signature="RW_RDLOCK_PLMIN(lockp)" />
      <scope ilk="function" name="RW_WRLOCK_PLMIN" signature="RW_WRLOCK_PLMIN(lockp)" />
      <scope ilk="function" name="SA_FAMILY_GET" signature="SA_FAMILY_GET(sa)" />
      <variable citdl="int" name="SCM_RIGHTS" />
      <variable citdl="int" name="SEC" />
      <variable citdl="int" name="SECDAY" />
      <variable citdl="int" name="SECHR" />
      <variable citdl="int" name="SECYR" />
      <variable citdl="int" name="SEGNPFLT" />
      <variable citdl="int" name="SGLSTP" />
      <variable citdl="int" name="SHRT_MAX" />
      <variable citdl="int" name="SHRT_MIN" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="int" name="SIGNBIT" />
      <scope ilk="function" name="SLEEP_DISOWN" signature="SLEEP_DISOWN(lkp)" />
      <scope ilk="function" name="SLEEP_LOCKOWNED" signature="SLEEP_LOCKOWNED(lkp)" />
      <variable citdl="int" name="SOCKETSYS" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPT" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_ADJTIME" />
      <variable citdl="int" name="SO_ALL" />
      <variable citdl="int" name="SO_ALLRAW" />
      <variable citdl="int" name="SO_BAND" />
      <variable citdl="int" name="SO_BIND" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_CONNECT" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DELIM" />
      <variable citdl="int" name="SO_DONTLINGER" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_GETIPDOMAIN" />
      <variable citdl="int" name="SO_GETPEERNAME" />
      <variable citdl="int" name="SO_GETSOCKNAME" />
      <variable citdl="int" name="SO_GETSOCKOPT" />
      <variable citdl="int" name="SO_HIWAT" />
      <variable citdl="int" name="SO_IMASOCKET" />
      <variable citdl="int" name="SO_ISNTTY" />
      <variable citdl="int" name="SO_ISTTY" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_LISTEN" />
      <variable citdl="int" name="SO_LISTENING" />
      <variable citdl="int" name="SO_LOOP" />
      <variable citdl="int" name="SO_LOWAT" />
      <variable citdl="int" name="SO_MAXPSZ" />
      <variable citdl="int" name="SO_MGMT" />
      <variable citdl="int" name="SO_MINPSZ" />
      <variable citdl="int" name="SO_MREADOFF" />
      <variable citdl="int" name="SO_MREADON" />
      <variable citdl="int" name="SO_NDELOFF" />
      <variable citdl="int" name="SO_NDELON" />
      <variable citdl="int" name="SO_NODELIM" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_ORDREL" />
      <variable citdl="int" name="SO_PROTOTYPE" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_RDWR" />
      <variable citdl="int" name="SO_READOPT" />
      <variable citdl="int" name="SO_RECV" />
      <variable citdl="int" name="SO_RECVFROM" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_REUSEPORT" />
      <variable citdl="int" name="SO_SEMA" />
      <variable citdl="int" name="SO_SEND" />
      <variable citdl="int" name="SO_SENDTO" />
      <variable citdl="int" name="SO_SETIPDOMAIN" />
      <variable citdl="int" name="SO_SETSOCKOPT" />
      <variable citdl="int" name="SO_SHUTDOWN" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_SOCKET" />
      <variable citdl="int" name="SO_SOCKPOLL" />
      <variable citdl="int" name="SO_STRHOLD" />
      <variable citdl="int" name="SO_TONSTOP" />
      <variable citdl="int" name="SO_TOSTOP" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SO_USELOOPBACK" />
      <variable citdl="int" name="SO_WROFF" />
      <scope ilk="function" name="SPIN_IS_LOCKED" signature="SPIN_IS_LOCKED(lockp)" />
      <variable citdl="int" name="SP_LOCKED" />
      <variable citdl="int" name="SP_UNLOCKED" />
      <variable citdl="int" name="STKFLT" />
      <variable citdl="int" name="STRCANON" />
      <variable citdl="int" name="STRHIGH" />
      <variable citdl="int" name="STRLEAKHASHSZ" />
      <variable citdl="int" name="STRLOW" />
      <scope ilk="function" name="STRM_MYENG_PUTCNT" signature="STRM_MYENG_PUTCNT(sdp)" />
      <variable citdl="int" name="STRM_PUTCNT_TABLES" />
      <variable citdl="int" name="STRSCHED" />
      <variable citdl="int" name="TCPM_ID" />
      <scope ilk="function" name="TICKS_SINCE" signature="TICKS_SINCE(t)" />
      <scope ilk="function" name="TIME_OWNED_R" signature="TIME_OWNED_R(cgnum)" />
      <variable citdl="int" name="TO_IMMEDIATE" />
      <variable citdl="int" name="TO_PERIODIC" />
      <variable citdl="int" name="TRP_PREEMPT" />
      <variable citdl="int" name="TRP_UNUSED" />
      <scope ilk="function" name="TRYLOCK_PLMIN" signature="TRYLOCK_PLMIN(lockp)" />
      <variable citdl="int" name="UDPM_ID" />
      <variable citdl="int" name="USERFLT" />
      <variable citdl="int" name="__NETLIB_BASE_VERSION__" />
      <variable citdl="int" name="__NETLIB_VERSION__" />
      <scope ilk="function" name="crfree" signature="crfree(credp)" />
      <scope ilk="function" name="crhold" signature="crhold(credp)" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
      <variable citdl="int" name="pseudo_AF_XTP" />
      <variable citdl="int" name="pseudo_PF_XTP" />
      <scope doc="# Included from sys/types.h" ilk="function" name="quad_low" signature="quad_low(x)" />
      <scope ilk="function" name="remque" signature="remque(a)" />
      <scope doc="# Included from sys/listasm.h" ilk="function" name="remque_null" signature="remque_null(e)" />
      <scope doc="# Included from sys/strmdep.h" ilk="function" name="str_aligned" signature="str_aligned(X)" />
      <scope ilk="function" name="straln" signature="straln(a)" />
      <scope ilk="function" name="toid_unpackcg" signature="toid_unpackcg(idval)" />
      <scope ilk="function" name="toid_unpackid" signature="toid_unpackid(idval)" />
    </scope>
    <scope doc="Weak reference support for Python.&#10;This module is an implementation of PEP 205:  http://www.python.org/dev/peps/pep-0205/" ilk="blob" lang="Python3" name="weakref">
      <scope classrefs="object" doc="&#10;" ilk="class" name="CallableProxyType">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return self//=value." ilk="function" name="__ifloordiv__" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Return self**=value." ilk="function" name="__ipow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self*=value." ilk="function" name="__imul__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return self&gt;&gt;=value." ilk="function" name="__irshift__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&lt;&lt;=value." ilk="function" name="__ilshift__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self%=value." ilk="function" name="__imod__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self/=value." ilk="function" name="__itruediv__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
      </scope>
      <scope classrefs="weakref" doc="Specialized reference that includes a key corresponding to the value.&#10;This is used in the WeakValueDictionary to avoid having to create a function object for each key stored in the mapping.  A shared callback object can use the 'key' attribute of a KeyedRef instead of getting a reference to the key from an enclosing scope." ilk="class" name="KeyedRef">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, ob, callback, key)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(type, ob, callback, key)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ProxyType">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return self//=value." ilk="function" name="__ifloordiv__" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Return self**=value." ilk="function" name="__ipow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope ilk="function" name="__bytes__" />
        <scope doc="Return self*=value." ilk="function" name="__imul__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return self&gt;&gt;=value." ilk="function" name="__irshift__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self&lt;&lt;=value." ilk="function" name="__ilshift__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self%=value." ilk="function" name="__imod__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self/=value." ilk="function" name="__itruediv__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
      </scope>
      <variable citdl="tuple" name="ProxyTypes" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ReferenceType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="MutableMapping" doc="Mapping class that references keys weakly.&#10;Entries in the dictionary will be discarded when there is no longer a strong reference to the key. This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects. This can be especially useful with objects that override attribute accesses." ilk="class" name="WeakKeyDictionary">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="__iter__" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dict=None)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="_scrub_removals" signature="_scrub_removals(self)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return a list of weak references to the keys." ilk="function" name="keyrefs" signature="keyrefs(self)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="weakref" doc="A custom `weakref.ref` subclass which simulates a weak reference to&#10;a bound method, working around the lifetime problem of bound methods." ilk="class" name="WeakMethod">
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" signature="__ne__(self, other)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, meth, callback=None)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="WeakSet">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="symmetric_difference_update" signature="symmetric_difference_update(self, other)" />
        <scope ilk="function" name="union" signature="union(self, other)" />
        <scope ilk="function" name="difference_update" signature="difference_update(self, other)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope ilk="function" name="difference" signature="difference(self, other)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope ilk="function" name="symmetric_difference" signature="symmetric_difference(self, other)" />
        <scope ilk="function" name="remove" signature="remove(self, item)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="issuperset" signature="issuperset(self, other)" />
        <scope ilk="function" name="intersection_update" signature="intersection_update(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope ilk="function" name="intersection" signature="intersection(self, other)" />
        <scope ilk="function" name="add" signature="add(self, item)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope ilk="function" name="update" signature="update(self, other)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="issubset" signature="issubset(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, other)" />
        <scope ilk="function" name="discard" signature="discard(self, item)" />
      </scope>
      <scope classrefs="MutableMapping" doc="Mapping class that references values weakly.&#10;Entries in the dictionary will be discarded when no strong reference to the value exists anymore" ilk="class" name="WeakValueDictionary">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Return an iterator that yields the weak references to the&#10;values." ilk="function" name="itervaluerefs" signature="itervaluerefs(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="__iter__" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return a list of weak references to the values." ilk="function" name="valuerefs" signature="valuerefs(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(*args, **kw)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <scope classrefs="object" doc="Class for finalization of weakrefable objects&#10;finalize(obj, func, *args, **kwargs) returns a callable finalizer object which will be called when obj is garbage collected. The first time the finalizer is called it evaluates func(*arg, **kwargs) and returns the result. After this the finalizer is dead, and calling it just returns None.  When the program exits any remaining finalizers for which the atexit attribute is true will be run in reverse order of creation. By default atexit is true." ilk="class" name="finalize">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, obj, func, *args, **kwargs)" />
        <scope doc="If alive then mark as dead and return func(*args, **kwargs);&#10;otherwise return None" ilk="function" name="__call__" signature="__call__(self, _=None)" />
        <scope doc="If alive then return (obj, func, args, kwargs); otherwise&#10;return None" ilk="function" name="peek" signature="peek(self)" />
        <scope ilk="function" name="_exitfunc" />
        <scope ilk="function" name="_select_for_exit" />
        <scope doc="If alive then mark as dead and return (obj, func, args,&#10;kwargs); otherwise return None" ilk="function" name="detach" signature="detach(self)" />
      </scope>
      <scope doc="Return the number of weak references to 'object'." ilk="function" name="getweakrefcount" />
      <scope doc="return a list of all weak reference objects" ilk="function" name="getweakrefs" signature="getweakrefs(object)" />
      <import module="itertools" />
      <scope doc="create a proxy object that weakly" ilk="function" name="proxy" signature="proxy(object[, callback])" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ref">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <import module="sys" />
    </scope>
    <scope doc="Shared support for scanning document type declarations in HTML and XHTML.&#10;This module is used as a foundation for the html.parser module.  It has no documented public API and should not be used directly." ilk="blob" lang="Python3" name="_markupbase">
      <scope classrefs="object" doc="Parser base class which provides some common support methods used&#10;by the SGML/HTML and XHTML parsers." ilk="class" name="ParserBase">
        <scope doc="Return current line number and offset." ilk="function" name="getpos" signature="getpos(self)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope doc="# Internal -- scan past &lt;!ELEMENT declarations" ilk="function" name="_parse_doctype_element" signature="_parse_doctype_element(self, i, declstartpos)" />
        <scope doc="# Internal -- scan past &lt;!NOTATION declarations" ilk="function" name="_parse_doctype_notation" signature="_parse_doctype_notation(self, i, declstartpos)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="# Internal -- parse comment, return length or -1 if not&#10;terminated" ilk="function" name="parse_comment" signature="parse_comment(self, i, report=1)" />
        <scope ilk="function" name="error" signature="error(self, message)" />
        <scope doc="# To be overridden -- handlers for unknown objects" ilk="function" name="unknown_decl" signature="unknown_decl(self, data)" />
        <scope doc="# Internal -- scan past &lt;!ENTITY declarations" ilk="function" name="_parse_doctype_entity" signature="_parse_doctype_entity(self, i, declstartpos)" />
        <scope doc="# Internal -- parse declaration (for use by subclasses)." ilk="function" name="parse_declaration" signature="parse_declaration(self, i)" />
        <scope doc="# Internal -- scan past the internal subset in a &lt;!DOCTYPE&#10;declaration, # returning the index just past any whitespace&#10;following the trailing ']'." ilk="function" name="_parse_doctype_subset" signature="_parse_doctype_subset(self, i, declstartpos)" />
        <scope doc="# Internal -- parse a marked section # Override this to&#10;handle MS-word extension syntax &lt;![if&#10;word]&gt;content&lt;![endif]&gt;" ilk="function" name="parse_marked_section" signature="parse_marked_section(self, i, report=1)" />
        <scope doc="# Internal -- update line number and offset." ilk="function" name="updatepos" signature="updatepos(self, i, j)" />
        <scope doc="# Internal -- scan past &lt;!ATTLIST declarations" ilk="function" name="_parse_doctype_attlist" signature="_parse_doctype_attlist(self, i, declstartpos)" />
        <scope doc="# Internal -- scan a name token and the new position and the&#10;token, or # return -1 if we've reached the end of the&#10;buffer." ilk="function" name="_scan_name" signature="_scan_name(self, i, declstartpos)" />
      </scope>
    </scope>
    <scope doc="Utility functions, node construction macros, etc.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixer_util">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, '('), rparen=Leaf(8, ')'))" />
      <scope doc="Build an assignment statement" ilk="function" name="Assign" signature="Assign(target, source)" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope doc="Return an import statement in the form: from package import&#10;name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <scope doc="Returns an import statement and calls a method of the&#10;module:" ilk="function" name="ImportAndCall" signature="ImportAndCall(node, results, names)" />
      <scope ilk="function" name="KeywordArg" signature="KeywordArg(keyword, value)" />
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes.&#10;" ilk="class" name="Leaf">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="The whitespace and comments preceding this token in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, value, context=None, prefix=None, fixers_applied=[])" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope ilk="function" name="leaves" signature="leaves(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" name="ListComp" signature="ListComp(xp, fp, it, test=None)" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <scope doc="A numeric or string subscript" ilk="function" name="Subscript" signature="Subscript(index_node)" />
      <scope doc="Follow an attribute chain." ilk="function" name="attr_chain" signature="attr_chain(obj, attr)" />
      <variable citdl="set" name="consuming_calls" />
      <scope doc="Returns true if name is imported from package at the top&#10;level of the tree which node belongs to." ilk="function" name="does_tree_import" signature="does_tree_import(package, name, node)" />
      <scope doc="Returns the node which binds variable name, otherwise None." ilk="function" name="find_binding" signature="find_binding(name, node, package=None)" />
      <scope doc="Find the indentation of *node*." ilk="function" name="find_indentation" signature="find_indentation(node)" />
      <scope doc="Find the top level namespace." ilk="function" name="find_root" signature="find_root(node)" />
      <scope doc="Returns true if node is in an environment where all that is&#10;required of it is being iterable (ie, it doesn't matter if&#10;it returns a list or an iterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
      <scope doc="Returns true if the node is an import statement." ilk="function" name="is_import" signature="is_import(node)" />
      <scope doc="Does the node represent a list literal?" ilk="function" name="is_list" signature="is_list(node)" />
      <scope doc="Check that something isn't an attribute or function name&#10;etc." ilk="function" name="is_probably_builtin" signature="is_probably_builtin(node)" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <scope classrefs="object" doc="islice(iterable, stop) --&gt; islice object&#10;islice(iterable, start, stop[, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope ilk="function" name="make_suite" signature="make_suite(node)" />
      <variable citdl="str" name="p0" />
      <variable citdl="str" name="p1" />
      <variable citdl="str" name="p2" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
      <import module="patcomp" />
      <variable citdl="bool" name="pats_built" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Extract, format and print information about Python stack traces.&#10;" ilk="blob" lang="Python3" name="traceback">
      <scope classrefs="object" doc="A single frame from a traceback.&#10;- :attr:`filename` The filename for the frame. - :attr:`lineno` The line within filename for the frame that was active when the frame was captured. - :attr:`name` The name of the function or method that was executing when the frame was captured. - :attr:`line` The text from the linecache module for the of code that was running when the frame was captured. - :attr:`locals` Either None if locals were not supplied, or a dict mapping the name to the repr() of the variable." ilk="class" name="FrameSummary">
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, pos)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct a FrameSummary." ilk="function" name="__init__" signature="__init__(self, filename, lineno, name, *, lookup_line=True, locals=None, line=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="list" doc="A stack of frames.&#10;" ilk="class" name="StackSummary">
        <scope doc="Create a StackSummary from a simple list of tuples." ilk="function" name="from_list" />
        <scope doc="Format the stack ready for printing." ilk="function" name="format" signature="format(self)" />
        <scope doc="Create a StackSummary from a traceback or stack object." ilk="function" name="extract" />
      </scope>
      <scope classrefs="object" doc="An exception ready for rendering.&#10;The traceback module captures enough attributes from the original exception to this intermediary form to ensure that no references are held, while still being able to fully print or format it.  Use `from_exception` to create TracebackException instances from exception objects, or the constructor to create TracebackException instances from individual components.  - :attr:`__cause__` A TracebackException of the original *__cause__*. - :attr:`__context__` A TracebackException of the original *__context__*." ilk="class" name="TracebackException">
        <scope doc="Format the exception." ilk="function" name="format" signature="format(self, *, chain=True)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False, _seen=None)" />
        <scope doc="Create a TracebackException from an exception." ilk="function" name="from_exception" />
        <scope doc="Private API. force all lines in the stack to be loaded." ilk="function" name="_load_lines" signature="_load_lines(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Format the exception part of the traceback." ilk="function" name="format_exception_only" signature="format_exception_only(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Clear all references to local variables in the frames of a&#10;traceback." ilk="function" name="clear_frames" signature="clear_frames(tb)" />
      <import module="collections" />
      <scope doc="Extract the raw traceback from the current stack frame." ilk="function" name="extract_stack" signature="extract_stack(f=None, limit=None)" />
      <scope doc="Return list of up to limit pre-processed entries from&#10;traceback." ilk="function" name="extract_tb" signature="extract_tb(tb, limit=None)" />
      <scope doc="Like print_exc() but return a string." ilk="function" name="format_exc" signature="format_exc(limit=None, chain=True)" />
      <scope doc="Format a stack trace and the exception information." ilk="function" name="format_exception" signature="format_exception(etype, value, tb, limit=None, chain=True)" />
      <scope doc="Format the exception part of a traceback." ilk="function" name="format_exception_only" signature="format_exception_only(etype, value)" />
      <scope doc="Format a list of traceback entry tuples for printing." ilk="function" name="format_list" signature="format_list(extracted_list)" />
      <scope doc="Shorthand for 'format_list(extract_stack(f, limit))'." ilk="function" name="format_stack" signature="format_stack(f=None, limit=None)" />
      <scope doc="A shorthand for 'format_list(extract_tb(tb, limit))'." ilk="function" name="format_tb" signature="format_tb(tb, limit=None)" />
      <import module="itertools" />
      <import module="linecache" />
      <scope doc="Shorthand for 'print_exception(*sys.exc_info(), limit,&#10;file)'." ilk="function" name="print_exc" signature="print_exc(limit=None, file=None, chain=True)" />
      <scope doc="Print exception up to 'limit' stack trace entries from 'tb'&#10;to 'file'." ilk="function" name="print_exception" signature="print_exception(etype, value, tb, limit=None, file=None, chain=True)" />
      <scope doc="This is a shorthand for 'print_exception(sys.last_type,&#10;sys.last_value, sys.last_traceback, limit, file)'." ilk="function" name="print_last" signature="print_last(limit=None, file=None, chain=True)" />
      <scope doc="Print the list of tuples as returned by extract_tb() or&#10;extract_stack() as a formatted stack trace to the given&#10;file." ilk="function" name="print_list" signature="print_list(extracted_list, file=None)" />
      <scope doc="Print a stack trace from its invocation point." ilk="function" name="print_stack" signature="print_stack(f=None, limit=None, file=None)" />
      <scope doc="Print up to 'limit' stack trace entries from the traceback&#10;'tb'." ilk="function" name="print_tb" signature="print_tb(tb, limit=None, file=None)" />
      <import module="sys" />
      <scope doc="Walk a stack yielding the frame and line number for each&#10;frame." ilk="function" name="walk_stack" signature="walk_stack(f)" />
      <scope doc="Walk a traceback yielding the frame and line number for each&#10;frame." ilk="function" name="walk_tb" signature="walk_tb(tb)" />
    </scope>
    <scope doc="Adjust some old Python 2 idioms to their modern counterparts.&#10;* Change some type comparisons to isinstance() calls: type(x) == T -&gt; isinstance(x, T) type(x) is T -&gt; isinstance(x, T) type(x) != T -&gt; not isinstance(x, T) type(x) is not T -&gt; not isinstance(x, T)  * Change &quot;while 1:&quot; into &quot;while True:&quot;.  * Change both " ilk="blob" lang="Python3" name="lib2to3.fixes.fix_idioms">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <variable citdl="str" name="CMP" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixIdioms">
        <scope ilk="function" name="transform_isinstance" signature="transform_isinstance(self, node, results)" />
        <scope ilk="function" name="transform_sort" signature="transform_sort(self, node, results)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope ilk="function" name="transform_while" signature="transform_while(self, node, results)" />
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <variable citdl="str" name="TYPE" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Implementation of the DOM Level 3 'LS-Load' feature.&#10;" ilk="blob" lang="Python3" name="xml.dom.xmlbuilder">
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMBuilder">
        <scope ilk="function" name="_set_entityResolver" signature="_set_entityResolver(self, entityResolver)" />
        <scope ilk="function" name="parseURI" signature="parseURI(self, uri)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="setFeature" signature="setFeature(self, name, state)" />
        <scope ilk="function" name="_get_entityResolver" signature="_get_entityResolver(self)" />
        <scope ilk="function" name="_get_filter" signature="_get_filter(self)" />
        <scope ilk="function" name="_get_errorHandler" signature="_get_errorHandler(self)" />
        <scope ilk="function" name="getFeature" signature="getFeature(self, name)" />
        <scope ilk="function" name="supportsFeature" signature="supportsFeature(self, name)" />
        <scope ilk="function" name="_set_errorHandler" signature="_set_errorHandler(self, errorHandler)" />
        <scope ilk="function" name="parse" signature="parse(self, input)" />
        <scope ilk="function" name="parseWithContext" signature="parseWithContext(self, input, cnode, action)" />
        <scope ilk="function" name="_parse_bytestream" signature="_parse_bytestream(self, stream, options)" />
        <scope ilk="function" name="_set_filter" signature="_set_filter(self, filter)" />
        <scope ilk="function" name="canSetFeature" signature="canSetFeature(self, name, state)" />
      </scope>
      <scope classrefs="object" doc="Element filter which can be used to tailor construction of&#10;a DOM instance." ilk="class" name="DOMBuilderFilter">
        <scope ilk="function" name="acceptNode" signature="acceptNode(self, element)" />
        <scope ilk="function" name="startContainer" signature="startContainer(self, element)" />
        <scope ilk="function" name="_get_whatToShow" signature="_get_whatToShow(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMEntityResolver">
        <scope ilk="function" name="_guess_media_encoding" signature="_guess_media_encoding(self, source)" />
        <scope ilk="function" name="resolveEntity" signature="resolveEntity(self, publicId, systemId)" />
        <scope ilk="function" name="_get_opener" signature="_get_opener(self)" />
        <scope ilk="function" name="_create_opener" signature="_create_opener(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMImplementationLS">
        <scope ilk="function" name="createDOMBuilder" signature="createDOMBuilder(self, mode, schemaType)" />
        <scope ilk="function" name="createDOMInputSource" signature="createDOMInputSource(self)" />
        <scope ilk="function" name="createDOMWriter" signature="createDOMWriter(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMInputSource">
        <scope ilk="function" name="_get_stringData" signature="_get_stringData(self)" />
        <scope ilk="function" name="_set_byteStream" signature="_set_byteStream(self, byteStream)" />
        <scope ilk="function" name="_set_characterStream" signature="_set_characterStream(self, characterStream)" />
        <scope ilk="function" name="_set_stringData" signature="_set_stringData(self, data)" />
        <scope ilk="function" name="_set_systemId" signature="_set_systemId(self, systemId)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_get_publicId" signature="_get_publicId(self)" />
        <scope ilk="function" name="_set_baseURI" signature="_set_baseURI(self, uri)" />
        <scope ilk="function" name="_set_publicId" signature="_set_publicId(self, publicId)" />
        <scope ilk="function" name="_get_baseURI" signature="_get_baseURI(self)" />
        <scope ilk="function" name="_get_systemId" signature="_get_systemId(self)" />
        <scope ilk="function" name="_get_characterStream" signature="_get_characterStream(self)" />
        <scope ilk="function" name="_get_byteStream" signature="_get_byteStream(self)" />
        <scope ilk="function" name="_set_encoding" signature="_set_encoding(self, encoding)" />
        <scope ilk="function" name="_get_encoding" signature="_get_encoding(self)" />
      </scope>
      <scope classrefs="object" doc="Mixin to create documents that conform to the load/save spec.&#10;" ilk="class" name="DocumentLS">
        <scope ilk="function" name="load" signature="load(self, uri)" />
        <scope ilk="function" name="loadXML" signature="loadXML(self, source)" />
        <scope ilk="function" name="abort" signature="abort(self)" />
        <scope ilk="function" name="_set_async" signature="_set_async(self, async)" />
        <scope ilk="function" name="_get_async" signature="_get_async(self)" />
        <scope ilk="function" name="saveXML" signature="saveXML(self, snode)" />
      </scope>
      <scope classrefs="object" doc="Features object that has variables set for each DOMBuilder feature.&#10;The DOMBuilder class uses an instance of this class to pass settings to the ExpatBuilder class." ilk="class" name="Options" />
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="__warningregistry__" />
      <import module="copy" />
      <import module="warnings" />
      <import module="xml" />
    </scope>
    <scope doc="Fixer for basestring -&gt; str.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_basestring">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixBasestring">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Stuff to parse Sun and NeXT audio files.&#10;An audio file consists of a header followed by the data.  The structure of the header is as follows.  +---------------+ | magic word    | +---------------+ | header size   | +---------------+ | data size     | +---------------+" ilk="blob" lang="Python3" name="sunau">
      <variable citdl="int" name="AUDIO_FILE_ENCODING_ADPCM_G721" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_ADPCM_G722" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_ADPCM_G723_3" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_ADPCM_G723_5" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_ALAW_8" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_DOUBLE" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_FLOAT" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_LINEAR_16" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_LINEAR_24" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_LINEAR_32" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_LINEAR_8" />
      <variable citdl="int" name="AUDIO_FILE_ENCODING_MULAW_8" />
      <variable citdl="int" name="AUDIO_FILE_MAGIC" />
      <variable citdl="int" name="AUDIO_UNKNOWN_SIZE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Au_read">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="setpos" signature="setpos(self, pos)" />
        <scope ilk="function" name="getmark" signature="getmark(self, id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="rewind" signature="rewind(self)" />
        <scope ilk="function" name="getfp" signature="getfp(self)" />
        <scope ilk="function" name="getmarkers" signature="getmarkers(self)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="readframes" signature="readframes(self, nframes)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Au_write">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="writeframes" signature="writeframes(self, data)" />
        <scope ilk="function" name="_ensure_header_written" signature="_ensure_header_written(self)" />
        <scope ilk="function" name="setcomptype" signature="setcomptype(self, type, name)" />
        <scope ilk="function" name="setnchannels" signature="setnchannels(self, nchannels)" />
        <scope ilk="function" name="setsampwidth" signature="setsampwidth(self, sampwidth)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
        <scope ilk="function" name="setframerate" signature="setframerate(self, framerate)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="setparams" signature="setparams(self, params)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="setnframes" signature="setnframes(self, nframes)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="writeframesraw" signature="writeframesraw(self, data)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="_patchheader" signature="_patchheader(self)" />
        <scope ilk="function" name="_write_header" signature="_write_header(self)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope ilk="function" name="open" signature="open(f, mode=None)" />
      <scope ilk="function" name="openfp" signature="openfp(f, mode=None)" />
    </scope>
    <scope doc="distutils.fancy_getopt&#10;Wrapper around the standard getopt module that provides the following additional features: * short and long options are tied together * options have help strings, so fancy_getopt could potentially create a complete usage summary * options set attributes of a passed-in object" ilk="blob" lang="Python3" name="distutils.fancy_getopt">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Wrapper around the standard 'getopt()' module that provides some&#10;handy extra functionality: * short and long options are tied together * options have help strings, and help text can be assembled from them * options set attributes of a passed-in object * boolean options can have &quot;negative aliases&quot; -- eg. if --quiet is the &quot;negative alias&quot; of --verbose, then &quot;--quiet&quot; on the command line sets 'verbose' to false" ilk="class" name="FancyGetopt">
        <scope ilk="function" name="add_option" signature="add_option(self, long_option, short_option=None, help_string=None)" />
        <scope ilk="function" name="_build_index" signature="_build_index(self)" />
        <scope doc="Returns the list of (option, value) tuples processed by the&#10;previous run of 'getopt()'." ilk="function" name="get_option_order" signature="get_option_order(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option_table=None)" />
        <scope doc="Set the aliases for this option parser." ilk="function" name="set_aliases" signature="set_aliases(self, alias)" />
        <scope ilk="function" name="print_help" signature="print_help(self, header=None, file=None)" />
        <scope ilk="function" name="set_option_table" signature="set_option_table(self, option_table)" />
        <scope doc="Parse command-line options in args." ilk="function" name="getopt" signature="getopt(self, args=None, object=None)" />
        <scope doc="Return true if the option table for this parser has an&#10;option with long name 'long_option'." ilk="function" name="has_option" signature="has_option(self, long_option)" />
        <scope doc="Translate long option name 'long_option' to the form it has&#10;as an attribute of some object: ie., translate hyphens to&#10;underscores." ilk="function" name="get_attr_name" signature="get_attr_name(self, long_option)" />
        <scope doc="Populate the various data structures that keep tabs on the&#10;option table." ilk="function" name="_grok_option_table" signature="_grok_option_table(self)" />
        <scope doc="Set the negative aliases for this option parser." ilk="function" name="set_negative_aliases" signature="set_negative_aliases(self, negative_alias)" />
        <scope doc="Generate help text (a list of strings, one per suggested&#10;line of output) from the option table for this FancyGetopt&#10;object." ilk="function" name="generate_help" signature="generate_help(self, header=None)" />
        <scope ilk="function" name="_check_alias_dict" signature="_check_alias_dict(self, aliases, what)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" doc="Dummy class just used as a place to hold command-line option&#10;values as instance attributes." ilk="class" name="OptionDummy">
        <scope doc="Create a new OptionDummy instance." ilk="function" name="__init__" signature="__init__(self, options=[])" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <variable citdl="dict" name="WS_TRANS" />
      <scope ilk="function" name="fancy_getopt" signature="fancy_getopt(options, negative_opt, object, args)" />
      <import module="getopt" />
      <variable citdl="str" name="longopt_pat" />
      <variable citdl="SRE_Pattern" name="longopt_re" />
      <variable citdl="dict" name="longopt_xlate" />
      <variable citdl="SRE_Pattern" name="neg_alias_re" />
      <import module="re" />
      <import module="string" />
      <import module="sys" />
      <scope doc="Convert a long option name to a valid Python identifier by&#10;changing &quot;-&quot; to &quot;_&quot;." ilk="function" name="translate_longopt" signature="translate_longopt(opt)" />
      <scope doc="Split 'text' into multiple lines of no more than 'width'&#10;characters each, and return the list of strings that&#10;results." ilk="function" name="wrap_text" signature="wrap_text(text : string, width : int) -&gt; [string]" />
    </scope>
    <scope doc="program/module to trace Python program or function execution&#10;Sample use, command line: trace.py -c -f counts --ignore-dir '$prefix' spam.py eggs trace.py -t --ignore-dir '$prefix' spam.py eggs trace.py --trackcalls spam.py eggs  Sample use, programmatically import sys  # create a Trace object, telling it what to ignore, and whether to # do tracing or line-counting or both." ilk="blob" lang="Python3" name="trace">
      <scope classrefs="object" doc="&#10;" ilk="class" name="CoverageResults">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, counts=None, calledfuncs=None, infile=None, callers=None, outfile=None)" />
        <scope doc="@param coverdir" ilk="function" name="write_results" signature="write_results(self, show_missing=True, summary=False, coverdir=None)" />
        <scope doc="Merge in the data from another CoverageResults" ilk="function" name="update" signature="update(self, other)" />
        <scope doc="Return True if the filename does not refer to a file we want&#10;to have reported." ilk="function" name="is_ignored_filename" signature="is_ignored_filename(self, filename)" />
        <scope doc="Return a coverage results file in path." ilk="function" name="write_results_file" signature="write_results_file(self, path, lines, lnotab, lines_hit, encoding=None)" />
      </scope>
      <scope classrefs="_Ignore" doc="&#10;" ilk="class" name="Ignore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, modules=None, dirs=None)" />
      </scope>
      <variable citdl="str" name="PRAGMA_NOCOVER" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Trace">
        <scope doc="Handler for call events." ilk="function" name="globaltrace_trackcallers" signature="globaltrace_trackcallers(self, frame, why, arg)" />
        <scope doc="Handler for call events." ilk="function" name="globaltrace_lt" signature="globaltrace_lt(self, frame, why, arg)" />
        <scope doc="Handler for call events." ilk="function" name="globaltrace_countfuncs" signature="globaltrace_countfuncs(self, frame, why, arg)" />
        <scope ilk="function" name="file_module_function_of" signature="file_module_function_of(self, frame)" />
        <scope ilk="function" name="localtrace_trace_and_count" signature="localtrace_trace_and_count(self, frame, why, arg)" />
        <scope ilk="function" name="runctx" signature="runctx(self, cmd, globals=None, locals=None)" />
        <scope ilk="function" name="run" signature="run(self, cmd)" />
        <scope doc="@param count true iff it should count number of times each&#10;line is executed @param trace true iff it should print out&#10;each line that is being counted" ilk="function" name="__init__" signature="__init__(self, count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)" />
        <scope ilk="function" name="results" signature="results(self)" />
        <scope ilk="function" name="runfunc" signature="runfunc(self, func, *args, **kw)" />
        <scope ilk="function" name="localtrace_trace" signature="localtrace_trace(self, frame, why, arg)" />
        <scope ilk="function" name="localtrace_count" signature="localtrace_count(self, frame, why, arg)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="dis" />
      <scope ilk="function" name="find_executable_linenos" signature="find_executable_linenos(filename)" />
      <scope ilk="function" name="find_lines" signature="find_lines(code, strs)" />
      <scope ilk="function" name="find_lines_from_code" signature="find_lines_from_code(code, strs)" />
      <scope ilk="function" name="find_strings" signature="find_strings(filename, encoding=None)" />
      <scope ilk="function" name="fullmodname" signature="fullmodname(path)" />
      <import module="gc" />
      <import module="inspect" />
      <import module="linecache" />
      <scope ilk="function" name="main" signature="main(argv=None)" />
      <scope ilk="function" name="modname" signature="modname(path)" />
      <import module="os" />
      <import module="pickle" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="rx_blank" />
      <import module="sys" />
      <import module="threading" />
      <import module="token" />
      <import module="tokenize" />
      <scope doc="#  Deprecated API" ilk="function" name="usage" signature="usage(outfile)" />
    </scope>
    <scope doc="Utilities for with-statement contexts.  See PEP 343.&#10;" ilk="blob" lang="Python3" name="contextlib">
      <scope classrefs="object" doc="A base class or mixin that enables context managers to work as decorators.&#10;" ilk="class" name="ContextDecorator">
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, func)" />
        <scope doc="Return a recreated instance of self." ilk="function" name="_recreate_cm" signature="_recreate_cm(self)" />
      </scope>
      <scope classrefs="object" doc="Context manager for dynamic management of a stack of exit callbacks&#10;For example:  with ExitStack() as stack: files = [stack.enter_context(open(fname)) for fname in filenames] # All opened files will automatically be closed at the end of # the with statement, even if attempts to open files later # in the list raise an exception" ilk="class" name="ExitStack">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *exc_details)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Immediately unwind the context stack" ilk="function" name="close" signature="close(self)" />
        <scope doc="Registers an arbitrary callback and arguments." ilk="function" name="callback" signature="callback(self, callback, *args, **kwds)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Helper to correctly register callbacks to __exit__ methods" ilk="function" name="_push_cm_exit" signature="_push_cm_exit(self, cm, cm_exit)" />
        <scope doc="Preserve the context stack by transferring it to a new&#10;instance" ilk="function" name="pop_all" signature="pop_all(self)" />
        <scope doc="Enters the supplied context manager" ilk="function" name="enter_context" signature="enter_context(self, cm)" />
        <scope doc="Registers a callback with the standard __exit__ method&#10;signature" ilk="function" name="push" signature="push(self, exit)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="Context to automatically close something at the end of a block.&#10;Code like this:  with closing(&lt;module&gt;.open(&lt;arguments&gt;)) as f: &lt;block&gt;  is equivalent to this:  f = &lt;module&gt;.open(&lt;arguments&gt;) try: &lt;block&gt;" ilk="class" name="closing">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, thing)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *exc_info)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
      </scope>
      <scope doc="@contextmanager decorator." ilk="function" name="contextmanager" signature="contextmanager(func)" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <scope classrefs="_RedirectStream" doc="Context manager for temporarily redirecting stderr to another file.&#10;" ilk="class" name="redirect_stderr" />
      <scope classrefs="_RedirectStream" doc="Context manager for temporarily redirecting stdout to another file.&#10;# How to send help() to stderr with redirect_stdout(sys.stderr): help(dir)  # How to write help() to a file with open('help.txt', 'w') as f: with redirect_stdout(f): help(pow)" ilk="class" name="redirect_stdout" />
      <scope classrefs="object" doc="Context manager to suppress specified exceptions&#10;After the exception is suppressed, execution proceeds with the next statement following the with statement.  with suppress(FileNotFoundError): os.remove(somefile) # Execution still resumes here if the file was already removed" ilk="class" name="suppress">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *exceptions)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exctype, excinst, exctb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
      </scope>
      <import module="sys" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="distutils.command.bdist&#10;Implements the Distutils 'bdist' command (create a built [binary] distribution)." ilk="blob" lang="Python3" name="distutils.command.bdist">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="bdist">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <import module="os" />
      <scope doc="Print list of available formats (arguments to &quot;--format&quot;&#10;option)." ilk="function" name="show_formats" signature="show_formats()" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-freebsd5.IN">
      <scope ilk="function" name="CIRCLEQ_ENTRY" signature="CIRCLEQ_ENTRY(type)" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_LINKLOCAL" signature="IN6_IS_SCOPE_LINKLOCAL(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_BINDV6ONLY" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_ADDR_INT16_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_ULL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_USL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MNL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_ONE" />
      <variable citdl="int" name="IPV6_ADDR_INT32_SMP" />
      <variable citdl="int" name="IPV6_ADDR_INT32_TWO" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_GLOBAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_SITELOCAL" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <scope ilk="function" name="LIST_ENTRY" signature="LIST_ENTRY(type)" />
      <scope ilk="function" name="LIST_HEAD_INITIALIZER" signature="LIST_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="SLIST_ENTRY" signature="SLIST_ENTRY(type)" />
      <scope doc="# Included from sys/queue.h" ilk="function" name="SLIST_HEAD_INITIALIZER" signature="SLIST_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="STAILQ_ENTRY" signature="STAILQ_ENTRY(type)" />
      <scope ilk="function" name="STAILQ_HEAD_INITIALIZER" signature="STAILQ_HEAD_INITIALIZER(head)" />
      <scope ilk="function" name="TAILQ_ENTRY" signature="TAILQ_ENTRY(type)" />
      <scope ilk="function" name="TAILQ_HEAD_INITIALIZER" signature="TAILQ_HEAD_INITIALIZER(head)" />
    </scope>
    <scope doc="Utilities to compile possibly incomplete Python source code.&#10;This module provides two interfaces, broadly similar to the builtin function compile(), which take program text, a filename and a 'mode' and:  - Return code object if the command is complete and valid - Return None if the command is incomplete - Raise SyntaxError, ValueError or OverflowError if the command is a syntax error (OverflowError and ValueError can be produced by malformed literals). " ilk="blob" lang="Python3" name="codeop">
      <scope classrefs="object" doc="Instances of this class have __call__ methods identical in&#10;signature to compile_command; the difference is that if the instance compiles program text containing a __future__ statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force." ilk="class" name="CommandCompiler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Compile a command and determine whether it is incomplete." ilk="function" name="__call__" signature="__call__(self, source, filename='&lt;input&gt;', symbol='single')" />
      </scope>
      <scope classrefs="object" doc="Instances of this class behave much like the built-in compile&#10;function, but if one is used to compile text containing a future statement, it &quot;remembers&quot; and compiles all subsequent program texts with the statement in force." ilk="class" name="Compile">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, source, filename, symbol)" />
      </scope>
      <variable citdl="int" name="PyCF_DONT_IMPLY_DEDENT" />
      <variable citdl="list" name="__all__" />
      <import module="__future__" />
      <scope doc="Compile a command and determine whether it is incomplete." ilk="function" name="compile_command" signature="compile_command(source, filename='&lt;input&gt;', symbol='single')" />
    </scope>
    <scope doc="Functions to convert between Python values and C structs.&#10;Python bytes objects are used to hold the data representing the C struct and also as format strings (explained below) to describe the layout of data in the C struct.  The optional first format char indicates byte order, size and alignment: @: native order, size &amp; alignment (default) =: native order, std. size &amp; alignment &lt;: little-endian, std. size &amp; alignment &gt;: big-endian, std. size &amp; alignment !: same as &gt;" ilk="blob" lang="Python3" name="struct">
      <scope classrefs="object" doc="Struct(fmt) --&gt; compiled struct object&#10;Return a new Struct object which writes and reads binary data according to the format string fmt.  See help(struct) for more on format strings." ilk="class" name="Struct">
        <scope doc="Return a tuple containing values unpacked according to the&#10;format string S.format." ilk="function" name="unpack" signature="S.unpack(buffer) -&gt; (v1, v2, ...)" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return a tuple containing values unpacked according to the&#10;format string S.format." ilk="function" name="unpack_from" signature="S.unpack_from(buffer, offset=0) -&gt; (v1, v2, ...)" />
        <scope doc="Return an iterator yielding tuples unpacked from the given&#10;bytes source, like a repeated invocation of unpack_from()." ilk="function" name="iter_unpack" signature="S.iter_unpack(buffer) -&gt; iterator(v1, v2, ...)" />
        <scope doc="Pack the values v1, v2, ..." ilk="function" name="pack_into" signature="S.pack_into(buffer, offset, v1, v2, ...)" />
        <scope doc="Return a bytes object containing values v1, v2, ..." ilk="function" name="pack" signature="S.pack(v1, v2, ...) -&gt; bytes" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return size in bytes of the struct described by the format&#10;string fmt." ilk="function" name="calcsize" returns="int" signature="calcsize(fmt) -&gt; integer" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <scope doc="Return an iterator yielding tuples unpacked from the given&#10;bytes source according to the format string, like a repeated&#10;invocation of unpack_from()." ilk="function" name="iter_unpack" signature="iter_unpack(fmt, buffer) -&gt; iterator(v1, v2, ...)" />
      <scope doc="Return a bytes object containing the values v1, v2, ..." ilk="function" name="pack" signature="pack(fmt, v1, v2, ...) -&gt; bytes" />
      <scope doc="Pack the values v1, v2, ..." ilk="function" name="pack_into" signature="pack_into(fmt, buffer, offset, v1, v2, ...)" />
      <scope doc="Return a tuple containing values unpacked according to the&#10;format string fmt." ilk="function" name="unpack" signature="unpack(fmt, buffer) -&gt; (v1, v2, ...)" />
      <scope doc="Return a tuple containing values unpacked according to the&#10;format string fmt." ilk="function" name="unpack_from" signature="unpack_from(fmt, buffer, offset=0) -&gt; (v1, v2, ...)" />
    </scope>
    <scope doc="Tokenization help for Python programs.&#10;tokenize(readline) is a generator that breaks a stream of bytes into Python tokens.  It decodes the bytes according to PEP-0263 for determining source file encoding.  It accepts a readline-like method which is called repeatedly to get the next line of input (or b&quot;&quot; for EOF).  It generates 5-tuples with these members:  the token type (see token.py) the token (a string)" ilk="blob" lang="Python3" name="tokenize">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="ASYNC" />
      <variable citdl="int" name="AT" />
      <variable citdl="int" name="ATEQUAL" />
      <variable citdl="int" name="AWAIT" />
      <variable citdl="bytes" name="BOM_UTF8" />
      <variable citdl="str" name="Binnumber" />
      <variable citdl="str" name="Bracket" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="COMMENT" />
      <variable citdl="str" name="Comment" />
      <variable citdl="str" name="ContStr" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="str" name="Decnumber" />
      <variable citdl="str" name="Double" />
      <variable citdl="str" name="Double3" />
      <variable citdl="int" name="ELLIPSIS" />
      <variable citdl="int" name="ENCODING" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="dict" name="EXACT_TOKEN_TYPES" />
      <variable citdl="str" name="Expfloat" />
      <variable citdl="str" name="Exponent" />
      <variable citdl="str" name="Floatnumber" />
      <variable citdl="str" name="Funny" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="str" name="Hexnumber" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="str" name="Ignore" />
      <variable citdl="str" name="Imagnumber" />
      <variable citdl="str" name="Intnumber" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="str" name="Name" />
      <variable citdl="str" name="Number" />
      <variable citdl="int" name="OP" />
      <variable citdl="str" name="Octnumber" />
      <variable citdl="str" name="Operator" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="str" name="PlainToken" />
      <variable citdl="str" name="Pointfloat" />
      <variable citdl="str" name="PseudoExtras" />
      <variable citdl="str" name="PseudoToken" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="str" name="Single" />
      <variable citdl="str" name="Single3" />
      <variable citdl="str" name="Special" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="StopTokenizing" />
      <variable citdl="str" name="String" />
      <variable citdl="str" name="StringPrefix" />
      <variable citdl="int" name="TILDE" />
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see help(codecs.Codec) or the documentation for codecs.register) and defaults to &quot;strict&quot;.  newline controls how line endings are handled. It can be None, '', '\n', '\r', and '\r\n'.  It works as follows: " ilk="class" name="TextIOWrapper">
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read at most n characters from stream." ilk="function" name="read" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write string to stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <variable citdl="str" name="Token" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="TokenError" />
      <scope classrefs="TokenInfo" doc="TokenInfo(type, string, start, end, line)&#10;" ilk="class" name="TokenInfo">
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="str" name="Triple" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Untokenizer">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="compat" signature="compat(self, token, iterable)" />
        <scope ilk="function" name="untokenize" signature="untokenize(self, iterable)" />
        <scope ilk="function" name="add_whitespace" signature="add_whitespace(self, start)" />
      </scope>
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="str" name="Whitespace" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="any" signature="any(*choices)" />
      <variable citdl="SRE_Pattern" name="blank_re" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#10;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
      </scope>
      <import module="collections" />
      <variable citdl="SRE_Pattern" name="cookie_re" />
      <scope doc="The detect_encoding() function is used to detect the&#10;encoding that should be used to decode a Python source file." ilk="function" name="detect_encoding" signature="detect_encoding(readline)" />
      <variable citdl="dict" name="endpats" />
      <scope doc="# An undocumented, backwards compatible, API for all the&#10;places in the standard # library that expect to be able to&#10;use tokenize with strings" ilk="function" name="generate_tokens" signature="generate_tokens(readline)" />
      <scope ilk="function" name="group" signature="group(*choices)" />
      <scope doc="Looks up a codec tuple in the Python codec registry and&#10;returns a CodecInfo object." ilk="function" name="lookup" />
      <scope ilk="function" name="main" signature="main()" />
      <scope ilk="function" name="maybe" signature="maybe(*choices)" />
      <scope doc="Open a file in read only mode using the encoding detected by&#10;detect_encoding()." ilk="function" name="open" signature="open(filename)" />
      <import module="re" />
      <variable citdl="dict" name="single_quoted" />
      <import module="sys" />
      <variable citdl="str" name="t" />
      <variable citdl="int" name="tabsize" />
      <variable citdl="dict" name="tok_name" />
      <scope doc="The tokenize() generator requires one argment, readline,&#10;which must be a callable object which provides the same&#10;interface as the readline() method of built-in file objects." ilk="function" name="tokenize" signature="tokenize(readline)" />
      <variable citdl="dict" name="triple_quoted" />
      <scope doc="Transform tokens back into Python source code." ilk="function" name="untokenize" signature="untokenize(iterable)" />
    </scope>
    <scope doc="Base class for fixers (optional, but recommended).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixer_base">
      <scope classrefs="object" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="BaseFix">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Return a string suitable for use as an identifier" ilk="function" name="new_name" signature="new_name(self, template='xxx_todo_changeme')" />
        <scope doc="Initializer. Subclass may override." ilk="function" name="__init__" signature="__init__(self, options, log)" />
        <scope doc="Set the filename." ilk="function" name="set_filename" signature="set_filename(self, filename)" />
        <scope doc="Warn the user that a given chunk of code is not valid Python&#10;3, but that it cannot be converted automatically." ilk="function" name="cannot_convert" signature="cannot_convert(self, node, reason=None)" />
        <scope doc="Compiles self.PATTERN into self.pattern." ilk="function" name="compile_pattern" signature="compile_pattern(self)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="log_message" signature="log_message(self, message)" />
        <scope doc="Used for warning the user about possible uncertainty in the&#10;translation." ilk="function" name="warning" signature="warning(self, node, reason)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="finish_tree" signature="finish_tree(self, tree, filename)" />
      </scope>
      <scope classrefs="BaseFix" doc="Base class for fixers which not execute if an import is found.&#10;" ilk="class" name="ConditionalFix">
        <scope ilk="function" name="should_skip" signature="should_skip(self, node)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, *args)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="PatternCompiler">
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, grammar_file='/tmp/Python-3.5.1/Lib/lib2to3/PatternGrammar.txt')" />
        <scope ilk="function" name="compile_basic" signature="compile_basic(self, nodes, repeat=None)" />
        <scope doc="Compiles a pattern string to a nested pytree.*Pattern&#10;object." ilk="function" name="compile_pattern" signature="compile_pattern(self, input, debug=False, with_tree=False)" />
        <scope ilk="function" name="get_int" signature="get_int(self, node)" />
        <scope doc="Compiles a node, recursively." ilk="function" name="compile_node" signature="compile_node(self, node)" />
      </scope>
      <scope doc="Returns true if name is imported from package at the top&#10;level of the tree which node belongs to." ilk="function" name="does_tree_import" signature="does_tree_import(package, name, node)" />
      <import module="itertools" />
      <import module="logging" />
      <import module="pygram" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="pathlib">
      <variable citdl="int" name="EINVAL" />
      <variable citdl="int" name="ENOENT" />
      <variable citdl="int" name="ENOTDIR" />
      <scope classrefs="PurePath" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="Path">
        <scope ilk="function" name="__exit__" signature="__exit__(self, t, v, tb)" />
        <scope doc="Open the file in text mode, write to it, and close the file." ilk="function" name="write_text" signature="write_text(self, data, encoding=None, errors=None)" />
        <scope doc="Open the file in bytes mode, read it, and close the file." ilk="function" name="read_bytes" signature="read_bytes(self)" />
        <scope doc="Remove this file or link." ilk="function" name="unlink" signature="unlink(self)" />
        <scope doc="Return whether other_path is the same or not as this file&#10;(as returned by os.path.samefile())." ilk="function" name="samefile" signature="samefile(self, other_path)" />
        <scope doc="Whether this path exists." ilk="function" name="exists" signature="exists(self)" />
        <scope doc="Return a new path pointing to the user's home directory (as&#10;returned by os.path.expanduser('~'))." ilk="function" name="home" />
        <scope doc="Return a new path pointing to the current working directory&#10;(as returned by os.getcwd())." ilk="function" name="cwd" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return an absolute version of this path." ilk="function" name="absolute" signature="absolute(self)" />
        <scope doc="Whether this path is a symbolic link." ilk="function" name="is_symlink" signature="is_symlink(self)" />
        <scope doc="Open the file in text mode, read it, and close the file." ilk="function" name="read_text" signature="read_text(self, encoding=None, errors=None)" />
        <scope doc="Whether this path is a character device." ilk="function" name="is_char_device" signature="is_char_device(self)" />
        <scope doc="Return the login name of the file owner." ilk="function" name="owner" signature="owner(self)" />
        <scope doc="Change the permissions of the path, like os.chmod()." ilk="function" name="chmod" signature="chmod(self, mode)" />
        <scope ilk="function" name="_opener" signature="_opener(self, name, flags, mode=438)" />
        <scope doc="Iterate over this subtree and yield all existing files (of&#10;any kind, including directories) matching the given pattern." ilk="function" name="glob" signature="glob(self, pattern)" />
        <scope doc="Iterate over the files in this directory." ilk="function" name="iterdir" signature="iterdir(self)" />
        <scope doc="Open the file pointed by this path and return a file&#10;descriptor, as os.open() does." ilk="function" name="_raw_open" signature="_raw_open(self, flags, mode=511)" />
        <scope ilk="function" name="_init" signature="_init(self, template=None)" />
        <scope doc="Make this path a symlink pointing to the given path." ilk="function" name="symlink_to" signature="symlink_to(self, target, target_is_directory=False)" />
        <scope doc="Return the group name of the file gid." ilk="function" name="group" signature="group(self)" />
        <scope doc="Like stat(), except if the path points to a symlink, the&#10;symlink's status information is returned, rather than its&#10;target's." ilk="function" name="lstat" signature="lstat(self)" />
        <scope doc="Whether this path is a regular file (also True for symlinks&#10;pointing to regular files)." ilk="function" name="is_file" signature="is_file(self)" />
        <scope doc="Whether this path is a block device." ilk="function" name="is_block_device" signature="is_block_device(self)" />
        <scope doc="Rename this path to the given path." ilk="function" name="rename" signature="rename(self, target)" />
        <scope doc="Like chmod(), except if the path points to a symlink, the&#10;symlink's permissions are changed, rather than its target's." ilk="function" name="lchmod" signature="lchmod(self, mode)" />
        <scope doc="Remove this directory. The directory must be empty." ilk="function" name="rmdir" signature="rmdir(self)" />
        <scope doc="Rename this path to the given path, clobbering the existing&#10;destination if it exists." ilk="function" name="replace" signature="replace(self, target)" />
        <scope ilk="function" name="mkdir" signature="mkdir(self, mode=511, parents=False, exist_ok=False)" />
        <scope doc="Create this file with the given access mode, if it doesn't&#10;exist." ilk="function" name="touch" signature="touch(self, mode=438, exist_ok=True)" />
        <scope doc="Open the file pointed by this path and return a file object,&#10;as the built-in open() function does." ilk="function" name="open" signature="open(self, mode='r', buffering=-1, encoding=None, errors=None, newline=None)" />
        <scope doc="Construct a PurePath from one or several strings and or&#10;existing PurePath objects." ilk="function" name="__new__" signature="__new__(cls, *args, **kwargs)" />
        <scope doc="Whether this path is a socket." ilk="function" name="is_socket" signature="is_socket(self)" />
        <scope doc="Whether this path is a FIFO." ilk="function" name="is_fifo" signature="is_fifo(self)" />
        <scope doc="Recursively yield all existing files (of any kind, including&#10;directories) matching the given pattern, anywhere in this&#10;subtree." ilk="function" name="rglob" signature="rglob(self, pattern)" />
        <scope ilk="function" name="_make_child_relpath" signature="_make_child_relpath(self, part)" />
        <scope doc="Return a new path with expanded ~ and ~user constructs (as&#10;returned by os.path.expanduser)" ilk="function" name="expanduser" signature="expanduser(self)" />
        <scope doc="Make the path absolute, resolving all symlinks on the way&#10;and also normalizing it (for example turning slashes into&#10;backslashes under Windows)." ilk="function" name="resolve" signature="resolve(self)" />
        <scope ilk="function" name="_raise_closed" signature="_raise_closed(self)" />
        <scope doc="Open the file in bytes mode, write to it, and close the&#10;file." ilk="function" name="write_bytes" signature="write_bytes(self, data)" />
        <scope doc="Whether this path is a directory." ilk="function" name="is_dir" signature="is_dir(self)" />
        <scope doc="Return the result of the stat() system call on this path,&#10;like os.stat() does." ilk="function" name="stat" signature="stat(self)" />
      </scope>
      <scope classrefs="Path PurePosixPath" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="PosixPath" />
      <scope classrefs="object" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="PurePath">
        <scope doc="Return True if this path matches the given pattern." ilk="function" name="match" signature="match(self, path_pattern)" />
        <scope ilk="function" name="__rtruediv__" signature="__rtruediv__(self, key)" />
        <scope ilk="function" name="_format_parsed_parts" />
        <scope doc="Return the path as a 'file' URI." ilk="function" name="as_uri" signature="as_uri(self)" />
        <scope doc="Construct a PurePath from one or several strings and or&#10;existing PurePath objects." ilk="function" name="__new__" signature="__new__(cls, *args)" />
        <scope doc="Return a new path with the file suffix changed (or added, if&#10;none)." ilk="function" name="with_suffix" signature="with_suffix(self, suffix)" />
        <scope doc="Return the relative path to another path identified by the&#10;passed arguments." ilk="function" name="relative_to" signature="relative_to(self, *other)" />
        <scope doc="Return the bytes representation of the path." ilk="function" name="__bytes__" signature="__bytes__(self)" />
        <scope doc="Combine this path with one or several arguments, and return&#10;a new path representing either a subpath (if all arguments&#10;are relative paths) or a totally different path (if one of&#10;the arguments is anchored)." ilk="function" name="joinpath" signature="joinpath(self, *args)" />
        <scope ilk="function" name="__truediv__" signature="__truediv__(self, key)" />
        <scope doc="Return a new path with the file name changed." ilk="function" name="with_name" signature="with_name(self, name)" />
        <scope ilk="function" name="_from_parts" />
        <scope ilk="function" name="_from_parsed_parts" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Return the string representation of the path, suitable for&#10;passing to system calls." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return True if the path contains one of the special names&#10;reserved by the system, if any." ilk="function" name="is_reserved" signature="is_reserved(self)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="_init" signature="_init(self)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Return the string representation of the path with forward&#10;(/) slashes." ilk="function" name="as_posix" signature="as_posix(self)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="True if the path is absolute (has both a root and, if&#10;applicable, a drive)." ilk="function" name="is_absolute" signature="is_absolute(self)" />
        <scope ilk="function" name="_make_child" signature="_make_child(self, args)" />
        <scope ilk="function" name="_parse_args" />
      </scope>
      <scope classrefs="PurePath" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="PurePosixPath" />
      <scope classrefs="PurePath" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="PureWindowsPath" />
      <scope doc="Return True if mode is from a block special device file." ilk="function" name="S_ISBLK" returns="bool" signature="S_ISBLK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a character special device file." ilk="function" name="S_ISCHR" returns="bool" signature="S_ISCHR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a directory." ilk="function" name="S_ISDIR" returns="bool" signature="S_ISDIR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a FIFO (named pipe)." ilk="function" name="S_ISFIFO" returns="bool" signature="S_ISFIFO(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a symbolic link." ilk="function" name="S_ISLNK" returns="bool" signature="S_ISLNK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a regular file." ilk="function" name="S_ISREG" returns="bool" signature="S_ISREG(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a socket." ilk="function" name="S_ISSOCK" returns="bool" signature="S_ISSOCK(mode) -&gt; bool" />
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="Sequence">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self)" />
      </scope>
      <scope classrefs="Path PureWindowsPath" doc="PurePath represents a filesystem path and offers operations which&#10;don't imply any actual filesystem I/O.  Depending on your system, instantiating a PurePath will return either a PurePosixPath or a PureWindowsPath object.  You can also instantiate either of these classes directly, regardless of your system." ilk="class" name="WindowsPath" />
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object&#10;Return a callable object that fetches the given attribute(s) from its operand. After f = attrgetter('name'), the call f(r) returns r.name. After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date). After h = attrgetter('name.first', 'name.last'), the call h(r) returns (r.name.first, r.name.last)." ilk="class" name="attrgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="@contextmanager decorator." ilk="function" name="contextmanager" signature="contextmanager(func)" />
      <import module="fnmatch" />
      <import module="functools" />
      <import module="io" />
      <variable citdl="NoneType" name="nt" />
      <import module="ntpath" />
      <import module="os" />
      <import module="posixpath" />
      <import module="re" />
      <variable citdl="bool" name="supports_symlinks" />
      <import module="sys" />
      <scope doc="Like quote(), but accepts a bytes object rather than a str,&#10;and does not perform string-to-bytes encoding." ilk="function" name="urlquote_from_bytes" signature="urlquote_from_bytes(bs, safe='/')" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) according to PEP 3119.&#10;" ilk="blob" lang="Python3" name="abc">
      <scope classrefs="object" doc="Helper class that provides a standard way to create an ABC using&#10;inheritance." ilk="class" name="ABC" />
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).&#10;Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super())." ilk="class" name="ABCMeta">
        <scope doc="Register a virtual subclass of an ABC." ilk="function" name="register" signature="register(cls, subclass)" />
        <scope doc="Override for issubclass(subclass, cls)." ilk="function" name="__subclasscheck__" signature="__subclasscheck__(cls, subclass)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(mcls, name, bases, namespace)" />
        <scope doc="Debug helper to print the ABC registry." ilk="function" name="_dump_registry" signature="_dump_registry(cls, file=None)" />
        <scope doc="Override for isinstance(instance, cls)." ilk="function" name="__instancecheck__" signature="__instancecheck__(cls, instance)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="WeakSet">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="symmetric_difference_update" signature="symmetric_difference_update(self, other)" />
        <scope ilk="function" name="union" signature="union(self, other)" />
        <scope ilk="function" name="difference_update" signature="difference_update(self, other)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope ilk="function" name="difference" signature="difference(self, other)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope ilk="function" name="symmetric_difference" signature="symmetric_difference(self, other)" />
        <scope ilk="function" name="remove" signature="remove(self, item)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="issuperset" signature="issuperset(self, other)" />
        <scope ilk="function" name="intersection_update" signature="intersection_update(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope ilk="function" name="intersection" signature="intersection(self, other)" />
        <scope ilk="function" name="add" signature="add(self, item)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope ilk="function" name="update" signature="update(self, other)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="issubset" signature="issubset(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, other)" />
        <scope ilk="function" name="discard" signature="discard(self, item)" />
      </scope>
      <scope classrefs="classmethod" doc="A decorator indicating abstract classmethods.&#10;Similar to abstractmethod.  Usage:  class C(metaclass=ABCMeta): @abstractclassmethod def my_abstract_classmethod(cls, ...): ...  'abstractclassmethod' is deprecated. Use 'classmethod' with" ilk="class" name="abstractclassmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, callable)" />
      </scope>
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="property" doc="A decorator indicating abstract properties.&#10;Requires that the metaclass is ABCMeta or derived from it.  A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract properties are overridden. The abstract properties can be called using any of the normal 'super' call mechanisms.  Usage:  class C(metaclass=ABCMeta): @abstractproperty" ilk="class" name="abstractproperty" />
      <scope classrefs="staticmethod" doc="A decorator indicating abstract staticmethods.&#10;Similar to abstractmethod.  Usage:  class C(metaclass=ABCMeta): @abstractstaticmethod def my_abstract_staticmethod(...): ...  'abstractstaticmethod' is deprecated. Use 'staticmethod' with" ilk="class" name="abstractstaticmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, callable)" />
      </scope>
      <scope doc="Returns the current ABC cache token." ilk="function" name="get_cache_token" signature="get_cache_token()" />
    </scope>
    <scope doc="Refactoring framework.&#10;Used as a main program, this can refactor any number of files and/or recursively descend down directories.  Imported as a module, this provides infrastructure to write your own refactoring tool." ilk="blob" lang="Python3" name="lib2to3.refactor">
      <scope classrefs="Exception" doc="A fixer could not be loaded.&#10;" ilk="class" name="FixerError" />
      <scope classrefs="RefactoringTool" doc="&#10;" ilk="class" name="MultiprocessRefactoringTool">
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
        <scope ilk="function" name="_child" signature="_child(self)" />
        <scope doc="Refactor a list of files and directories." ilk="function" name="refactor" signature="refactor(self, items, write=False, doctests_only=False, num_processes=1)" />
        <scope doc="Refactors a file." ilk="function" name="refactor_file" signature="refactor_file(self, *args, **kwargs)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="MultiprocessingUnsupported" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="RefactoringTool">
        <scope doc="Do our best to decode a Python source file correctly." ilk="function" name="_read_python_source" signature="_read_python_source(self, filename)" />
        <scope doc="Refactor a given input string." ilk="function" name="refactor_string" signature="refactor_string(self, data, name)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, fixer_names, options=None, explicit=None)" />
        <scope doc="Writes a string to a file." ilk="function" name="write_file" signature="write_file(self, new_text, filename, old_text, encoding=None)" />
        <scope doc="Refactors one doctest." ilk="function" name="refactor_doctest" signature="refactor_doctest(self, block, lineno, indent, filename)" />
        <scope doc="Refactors a parse tree (modifying the tree in place)." ilk="function" name="refactor_tree" signature="refactor_tree(self, tree, name)" />
        <scope ilk="function" name="log_debug" signature="log_debug(self, msg, *args)" />
        <scope doc="Descends down a directory and refactor every Python file&#10;found." ilk="function" name="refactor_dir" signature="refactor_dir(self, dir_name, write=False, doctests_only=False)" />
        <scope ilk="function" name="refactor_stdin" signature="refactor_stdin(self, doctests_only=False)" />
        <scope doc="Refactors a docstring, looking for doctests." ilk="function" name="refactor_docstring" signature="refactor_docstring(self, input, filename)" />
        <scope doc="Called when a file has been refactored and there may be&#10;changes." ilk="function" name="processed_file" signature="processed_file(self, new_text, filename, old_text=None, write=False, encoding=None)" />
        <scope doc="Refactor a list of files and directories." ilk="function" name="refactor" signature="refactor(self, items, write=False, doctests_only=False)" />
        <scope doc="Parses a block into a tree." ilk="function" name="parse_block" signature="parse_block(self, block, lineno, indent)" />
        <scope ilk="function" name="summarize" signature="summarize(self)" />
        <scope doc="Called with the old version, new version, and filename of a&#10;refactored file." ilk="function" name="print_output" signature="print_output(self, old_text, new_text, filename, equal)" />
        <scope doc="Refactors a file." ilk="function" name="refactor_file" signature="refactor_file(self, filename, write=False, doctests_only=False)" />
        <scope doc="Wraps a tokenize stream to systematically modify start/end." ilk="function" name="wrap_toks" signature="wrap_toks(self, block, lineno, indent)" />
        <scope doc="Called when an error occurs." ilk="function" name="log_error" signature="log_error(self, msg, *args, **kwds)" />
        <scope doc="Hook to log a message." ilk="function" name="log_message" signature="log_message(self, msg, *args)" />
        <scope doc="Inspects the options to load the requested patterns and&#10;handlers." ilk="function" name="get_fixers" signature="get_fixers(self)" />
        <scope doc="Traverse an AST, applying a set of fixers to each node." ilk="function" name="traverse_by" signature="traverse_by(self, fixers, traversal)" />
        <scope doc="Generates lines as expected by tokenize from a list of&#10;lines." ilk="function" name="gen_lines" signature="gen_lines(self, block, indent)" />
      </scope>
      <import module="bm" />
      <import module="bu" />
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#10;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
      </scope>
      <import module="collections" />
      <import module="driver" />
      <scope doc="Find the top level namespace." ilk="function" name="find_root" signature="find_root(node)" />
      <scope doc="Return a sorted list of all available fix names in the given&#10;package." ilk="function" name="get_all_fix_names" signature="get_all_fix_names(fixer_pkg, remove_prefix=True)" />
      <scope doc="Return the fully qualified names for fixers in the package&#10;pkg_name." ilk="function" name="get_fixers_from_package" signature="get_fixers_from_package(pkg_name)" />
      <import module="io" />
      <import module="logging" />
      <import module="operator" />
      <import module="os" />
      <import module="pygram" />
      <import module="pytree" />
      <import module="sys" />
      <import module="token" />
      <import module="tokenize" />
      <variable citdl="_Feature" name="with_statement" />
    </scope>
    <scope doc="Abstract Base Classes (ABCs) for collections, according to PEP 3119.&#10;Unit tests are in test_collections." ilk="blob" lang="Python3" name="_collections_abc">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).&#10;Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super())." ilk="class" name="ABCMeta">
        <scope doc="Register a virtual subclass of an ABC." ilk="function" name="register" signature="register(cls, subclass)" />
        <scope doc="Override for issubclass(subclass, cls)." ilk="function" name="__subclasscheck__" signature="__subclasscheck__(cls, subclass)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(mcls, name, bases, namespace)" />
        <scope doc="Debug helper to print the ABC registry." ilk="function" name="_dump_registry" signature="_dump_registry(cls, file=None)" />
        <scope doc="Override for isinstance(instance, cls)." ilk="function" name="__instancecheck__" signature="__instancecheck__(cls, instance)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="AsyncIterable">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="AsyncIterable" doc="&#10;" ilk="class" name="AsyncIterator">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item or raise StopAsyncIteration when&#10;exhausted." ilk="function" name="__anext__" signature="__anext__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Awaitable">
        <scope ilk="function" name="__await__" signature="__await__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Sequence" doc="This unifies bytes and bytearray.&#10;XXX Should add all their methods." ilk="class" name="ByteString" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Callable">
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Container">
        <scope ilk="function" name="__contains__" signature="__contains__(self, x)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Awaitable" doc="&#10;" ilk="class" name="Coroutine">
        <scope doc="Send a value into the coroutine." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the coroutine." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Iterator" doc="&#10;" ilk="class" name="Generator">
        <scope doc="Send a value into the generator." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the generator." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside generator." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item from the generator." ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Hashable">
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="ItemsView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Iterable">
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Iterable" doc="&#10;" ilk="class" name="Iterator">
        <scope doc="Return the next item from the iterator." ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="KeysView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="&#10;" ilk="class" name="Mapping">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
      </scope>
      <scope classrefs="Sized" doc="&#10;" ilk="class" name="MappingView">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, mapping)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="Mapping" doc="&#10;" ilk="class" name="MutableMapping">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
      </scope>
      <scope classrefs="Sequence" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="MutableSequence">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="S.reverse()" />
        <scope doc="S.clear() -&gt; None -- remove all items from S" ilk="function" name="clear" signature="S.clear() -&gt; None -- remove all items from S" />
        <scope doc="extend sequence by appending elements from the iterable" ilk="function" name="extend" signature="S.extend(iterable)" />
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, values)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, index)" />
        <scope doc="Raise IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="S.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, index, value)" />
        <scope doc="append value to the end of the sequence" ilk="function" name="append" signature="S.append(value)" />
        <scope doc="insert value before index" ilk="function" name="insert" signature="S.insert(index, value)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="S.remove(value)" />
      </scope>
      <scope classrefs="Set" doc="A mutable set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__, __len__, add(), and discard().  To override the comparisons (presumably for speed, as the semantics are fixed), all you have to do is redefine __le__ and then the other operations will automatically follow suit." ilk="class" name="MutableSet">
        <scope doc="This is slow (creates N new iterators!) but effective." ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, it)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, it)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, it)" />
        <scope doc="Return the popped value. Raise KeyError if empty." ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Add an element." ilk="function" name="add" signature="add(self, value)" />
        <scope doc="Remove an element. If not a member, raise a KeyError." ilk="function" name="remove" signature="remove(self, value)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, it)" />
        <scope doc="Remove an element. Do not raise an exception if absent." ilk="function" name="discard" signature="discard(self, value)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="Sequence">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="Set">
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
        <scope ilk="function" name="__rxor__" signature="__rxor__(self, other)" />
        <scope ilk="function" name="__rand__" signature="__rand__(self, other)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Compute the hash value of a set." ilk="function" name="_hash" signature="_hash(self)" />
        <scope ilk="function" name="__ror__" signature="__ror__(self, other)" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="__rsub__" signature="__rsub__(self, other)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Sized">
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView" doc="&#10;" ilk="class" name="ValuesView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="bytearray_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="bytes_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="coroutine">
        <scope ilk="function" name="__del__" />
        <scope doc="Return an iterator to be used in await expression." ilk="function" name="__await__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in coroutine," />
        <scope doc="close() -&gt; raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside coroutine." />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into coroutine," />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_itemiterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_items">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return True if the view and the given iterable have a null&#10;intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_keyiterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_keys">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return True if the view and the given iterable have a null&#10;intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_valueiterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="dict_values">
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="generator">
        <scope ilk="function" name="__del__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into generator," />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="close() -&gt; raise GeneratorExit inside generator." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside generator." />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in generator," />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="list_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="list_reverseiterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="mappingproxy">
        <scope doc="D.values() -&gt; list of D's values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D's values" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="D.keys() -&gt; list of D's keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D's keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="range_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="set_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="str_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <import module="sys" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="tuple_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object&#10;Return a zip object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the shortest iterable in the argument sequence is exhausted and then it raises StopIteration." ilk="class" name="zip_iterator">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Email address parsing code.&#10;Lifted directly from rfc822.py.  This should eventually be rewritten." ilk="blob" lang="Python3" name="email._parseaddr">
      <scope classrefs="AddrlistClass" doc="An AddressList encapsulates a list of parsed RFC 2822 addresses.&#10;" ilk="class" name="AddressList">
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, other)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope doc="Initialize a new instance." ilk="function" name="__init__" signature="__init__(self, field)" />
        <scope ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="Address parser class by Ben Escoto.&#10;To understand what this class does, it helps to have a copy of RFC 2822 in front of you.  Note: this class interface is deprecated and may be removed in the future. Use email.utils.AddressList instead." ilk="class" name="AddrlistClass">
        <scope doc="Parse a header fragment delimited by special characters." ilk="function" name="getdelimited" signature="getdelimited(self, beginchar, endchars, allowcomments=True)" />
        <scope doc="Get the complete domain name from an address." ilk="function" name="getdomain" signature="getdomain(self)" />
        <scope doc="Parse an RFC 2822 addr-spec." ilk="function" name="getaddrspec" signature="getaddrspec(self)" />
        <scope doc="Initialize a new instance." ilk="function" name="__init__" signature="__init__(self, field)" />
        <scope doc="Parse an RFC 2822 atom." ilk="function" name="getatom" signature="getatom(self, atomends=None)" />
        <scope doc="Parse a route address (Return-path value)." ilk="function" name="getrouteaddr" signature="getrouteaddr(self)" />
        <scope doc="Parse a sequence of RFC 2822 phrases." ilk="function" name="getphraselist" signature="getphraselist(self)" />
        <scope doc="Parse the next address." ilk="function" name="getaddress" signature="getaddress(self)" />
        <scope doc="Get a parenthesis-delimited fragment from self's field." ilk="function" name="getcomment" signature="getcomment(self)" />
        <scope doc="Parse all addresses." ilk="function" name="getaddrlist" signature="getaddrlist(self)" />
        <scope doc="Parse an RFC 2822 domain-literal." ilk="function" name="getdomainliteral" signature="getdomainliteral(self)" />
        <scope doc="Skip white space and extract comments." ilk="function" name="gotonext" signature="gotonext(self)" />
        <scope doc="Get a quote-delimited fragment from self's field." ilk="function" name="getquote" signature="getquote(self)" />
      </scope>
      <variable citdl="str" name="COMMASPACE" />
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="str" name="SPACE" />
      <variable citdl="list" name="__all__" />
      <import module="calendar" />
      <scope doc="Turn a 10-tuple as returned by parsedate_tz() into a POSIX&#10;timestamp." ilk="function" name="mktime_tz" signature="mktime_tz(data)" />
      <scope doc="Convert a time string to a time tuple." ilk="function" name="parsedate" signature="parsedate(data)" />
      <scope doc="Convert a date string to a time tuple." ilk="function" name="parsedate_tz" signature="parsedate_tz(data)" />
      <scope doc="Prepare string to be used in a quoted string." ilk="function" name="quote" signature="quote(str)" />
      <import module="time" />
    </scope>
    <scope doc="An FTP client class and some helper functions.&#10;Based on RFC 959: File Transfer Protocol (FTP), by J. Postel and J. Reynolds  Example:  &gt;&gt;&gt; from ftplib import FTP &gt;&gt;&gt; ftp = FTP('ftp.python.org') # connect to host, default port &gt;&gt;&gt; ftp.login() # default, i.e.: user anonymous, passwd anonymous@ '230 Guest login ok, access restrictions apply.' &gt;&gt;&gt; ftp.retrlines('LIST') # list directory contents total 9" ilk="blob" lang="Python3" name="ftplib">
      <variable citdl="bytes" name="B_CRLF" />
      <variable citdl="str" name="CRLF" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="object" doc="An FTP client class.&#10;To create a connection, call the class using these arguments: host, user, passwd, acct, timeout  The first four arguments are all strings, and have default value ''. timeout must be numeric and defaults to None if not passed, meaning that no timeout will be set on any ftp socket(s) If a timeout is passed, then this is now the default timeout for all ftp socket operations for this instance.  Then use self.connect() with optional host and port argument." ilk="class" name="FTP">
        <scope doc="# Context management protocol: try to quit() if active" ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="Login, default anonymous." ilk="function" name="login" signature="login(self, user='', passwd='', acct='')" />
        <scope doc="Initiate a transfer over the data connection." ilk="function" name="ntransfercmd" signature="ntransfercmd(self, cmd, rest=None)" />
        <scope doc="Get the welcome message from the server." ilk="function" name="getwelcome" signature="getwelcome(self)" />
        <scope doc="# Internal: send one command to the server (through&#10;putline())" ilk="function" name="putcmd" signature="putcmd(self, line)" />
        <scope doc="# Internal: return one line from the server, stripping CRLF." ilk="function" name="getline" signature="getline(self)" />
        <scope doc="Change to a directory." ilk="function" name="cwd" signature="cwd(self, dirname)" />
        <scope doc="# Internal: get a response from the server, which may&#10;possibly # consist of multiple lines." ilk="function" name="getmultiline" signature="getmultiline(self)" />
        <scope doc="Return current working directory." ilk="function" name="pwd" signature="pwd(self)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="makepasv" signature="makepasv(self)" />
        <scope doc="Send a command and return the response." ilk="function" name="sendcmd" signature="sendcmd(self, cmd)" />
        <scope doc="Close the connection without assuming anything about it." ilk="function" name="close" signature="close(self)" />
        <scope doc="Connect to host." ilk="function" name="connect" signature="connect(self, host='', port=0, timeout=-999, source_address=None)" />
        <scope doc="Send a PORT command with the current host and the given port&#10;number." ilk="function" name="sendport" signature="sendport(self, host, port)" />
        <scope doc="Send a command and expect a response beginning with '2'." ilk="function" name="voidcmd" signature="voidcmd(self, cmd)" />
        <scope doc="Expect a response beginning with '2'." ilk="function" name="voidresp" signature="voidresp(self)" />
        <scope doc="Retrieve the size of a file." ilk="function" name="size" signature="size(self, filename)" />
        <scope doc="Set the debugging level." ilk="function" name="debug" signature="debug(self, level)" />
        <scope doc="# Internal: get a response from the server." ilk="function" name="getresp" signature="getresp(self)" />
        <scope doc="Delete a file." ilk="function" name="delete" signature="delete(self, filename)" />
        <scope doc="Retrieve data in line mode. A new port is created for you." ilk="function" name="retrlines" signature="retrlines(self, cmd, callback=None)" />
        <scope doc="Quit, and close the connection." ilk="function" name="quit" signature="quit(self)" />
        <scope doc="Create a new socket and send a PORT command for it." ilk="function" name="makeport" signature="makeport(self)" />
        <scope doc="Return a list of files in a given directory (default the&#10;current)." ilk="function" name="nlst" signature="nlst(self, *args)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host='', user='', passwd='', acct='', timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
        <scope doc="Store a file in line mode. A new port is created for you." ilk="function" name="storlines" signature="storlines(self, cmd, fp, callback=None)" />
        <scope doc="List a directory in long form." ilk="function" name="dir" signature="dir(self, *args)" />
        <scope doc="Send an EPRT command with the current host and the given&#10;port number." ilk="function" name="sendeprt" signature="sendeprt(self, host, port)" />
        <scope doc="Store a file in binary mode. A new port is created for you." ilk="function" name="storbinary" signature="storbinary(self, cmd, fp, blocksize=8192, callback=None, rest=None)" />
        <scope doc="# Internal: send one line to the server, appending CRLF" ilk="function" name="putline" signature="putline(self, line)" />
        <scope doc="# Internal: &quot;sanitize&quot; a string for printing" ilk="function" name="sanitize" signature="sanitize(self, s)" />
        <scope doc="List a directory in a standardized format by using MLSD&#10;command (RFC-3659)." ilk="function" name="mlsd" signature="mlsd(self, path='', facts=[])" />
        <scope doc="Remove a directory." ilk="function" name="rmd" signature="rmd(self, dirname)" />
        <scope doc="Abort a file transfer. Uses out-of-band data." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="Rename a file." ilk="function" name="rename" signature="rename(self, fromname, toname)" />
        <scope doc="Send new account name." ilk="function" name="acct" signature="acct(self, password)" />
        <scope doc="Retrieve data in binary mode. A new port is created for you." ilk="function" name="retrbinary" signature="retrbinary(self, cmd, callback, blocksize=8192, rest=None)" />
        <scope doc="Make a directory, return its full pathname." ilk="function" name="mkd" signature="mkd(self, dirname)" />
        <scope doc="Set the debugging level." ilk="function" name="set_debuglevel" signature="set_debuglevel(self, level)" />
        <scope doc="Like ntransfercmd() but returns only the socket." ilk="function" name="transfercmd" signature="transfercmd(self, cmd, rest=None)" />
        <scope doc="Use passive or active mode for data transfers." ilk="function" name="set_pasv" signature="set_pasv(self, val)" />
      </scope>
      <variable citdl="int" name="FTP_PORT" />
      <scope classrefs="FTP" doc="A FTP subclass which adds TLS support to FTP as described&#10;in RFC-4217.  Connect as usual to port 21 implicitly securing the FTP control connection before authenticating.  Securing the data connection requires user to explicitly ask for it by calling prot_p() method.  Usage example: &gt;&gt;&gt; from ftplib import FTP_TLS" ilk="class" name="FTP_TLS">
        <scope doc="Login, default anonymous." ilk="function" name="login" signature="login(self, user='', passwd='', acct='', secure=True)" />
        <scope doc="Set up secure control connection by using TLS/SSL." ilk="function" name="auth" signature="auth(self)" />
        <scope doc="Set up clear text data connection." ilk="function" name="prot_c" signature="prot_c(self)" />
        <scope doc="Abort a file transfer. Uses out-of-band data." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host='', user='', passwd='', acct='', keyfile=None, certfile=None, context=None, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
        <scope doc="Initiate a transfer over the data connection." ilk="function" name="ntransfercmd" signature="ntransfercmd(self, cmd, rest=None)" />
        <scope doc="Set up secure data connection." ilk="function" name="prot_p" signature="prot_p(self)" />
        <scope doc="Switch back to a clear-text control connection." ilk="function" name="ccc" signature="ccc(self)" />
      </scope>
      <variable citdl="int" name="MAXLINE" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="list" name="__all__" />
      <variable citdl="tuple" name="all_errors" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error_perm" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error_proto" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error_reply" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error_temp" />
      <scope doc="Copy file from one FTP-instance to another." ilk="function" name="ftpcp" signature="ftpcp(source, sourcename, target, targetname='', type='I')" />
      <import module="os" />
      <scope doc="Parse the '150' response for a RETR request." ilk="function" name="parse150" signature="parse150(resp)" />
      <scope doc="Parse the '227' response for a PASV request." ilk="function" name="parse227" signature="parse227(resp)" />
      <scope doc="Parse the '229' response for an EPSV request." ilk="function" name="parse229" signature="parse229(resp, peer)" />
      <scope doc="Parse the '257' response for a MKD or PWD request." ilk="function" name="parse257" signature="parse257(resp)" />
      <scope doc="Default retrlines callback to print a line." ilk="function" name="print_line" signature="print_line(line)" />
      <import module="socket" />
      <import module="ssl" />
      <import module="sys" />
      <scope doc="Test program." ilk="function" name="test" signature="test()" />
      <import module="warnings" />
    </scope>
    <scope doc="HMAC (Keyed-Hashing for Message Authentication) Python module.&#10;Implements the HMAC algorithm as described by RFC 2104." ilk="blob" lang="Python3" name="hmac">
      <scope classrefs="object" doc="RFC 2104 HMAC class.  Also complies with RFC 4231.&#10;This supports the API for Cryptographic Hash Functions (PEP 247)." ilk="class" name="HMAC">
        <scope doc="Return the hash value of this hashing object." ilk="function" name="digest" signature="digest(self)" />
        <scope doc="Like digest(), but returns a string of hexadecimal digits&#10;instead." ilk="function" name="hexdigest" signature="hexdigest(self)" />
        <scope doc="Update this hashing object with the string msg." ilk="function" name="update" signature="update(self, msg)" />
        <scope doc="Return a separate copy of this hashing object." ilk="function" name="copy" signature="copy(self)" />
        <scope doc="Create a new HMAC object." ilk="function" name="__init__" signature="__init__(self, key, msg=None, digestmod=None)" />
        <scope doc="Return a hash object for the current state." ilk="function" name="_current" signature="_current(self)" />
      </scope>
      <import module="_hashlib" />
      <import module="_warnings" />
      <scope doc="Return 'a == b'." ilk="function" name="compare_digest" returns="bool" signature="compare_digest(a, b) -&gt; bool" />
      <variable citdl="NoneType" name="digest_size" />
      <scope doc="Create a new hashing object and return it." ilk="function" name="new" signature="new(key, msg=None, digestmod=None)" />
      <variable citdl="bytes" name="trans_36" />
      <variable citdl="bytes" name="trans_5C" />
    </scope>
    <scope doc="# Analogue of `multiprocessing.connection` which uses queues instead of sockets&#10;# # multiprocessing/dummy/connection.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.dummy.connection">
      <scope ilk="function" name="Client" signature="Client(address)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Connection">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, _in, _out)" />
        <scope ilk="function" name="poll" signature="poll(self, timeout=0.0)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_value, exc_tb)" />
        <scope ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Listener">
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_value, exc_tb)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, address=None, family=None, backlog=1)" />
        <scope ilk="function" name="accept" signature="accept(self)" />
      </scope>
      <scope ilk="function" name="Pipe" signature="Pipe(duplex=True)" />
      <scope classrefs="object" doc="Create a queue object with a given maximum size.&#10;If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="Queue">
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self, block=True, timeout=None)" />
        <scope doc="# Initialize the queue representation" ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope doc="# Get an item from the queue" ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0)" />
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item, block=True, timeout=None)" />
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise (not&#10;reliable!)." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope doc="# Put a new item in the queue" ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Blocks until all items in the Queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" name="qsize" signature="qsize(self)" />
        <scope doc="Return True if the queue is full, False otherwise (not&#10;reliable!)." ilk="function" name="full" signature="full(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="list" name="families" />
    </scope>
    <scope doc="# Deprecated alias for xml.etree.ElementTree&#10;" ilk="blob" lang="Python3" name="xml.etree.cElementTree">
      <scope doc="Comment element factory." ilk="function" name="Comment" signature="Comment(text=None)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Element">
        <scope ilk="function" name="__deepcopy__" />
        <scope ilk="function" name="clear" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="find" />
        <scope ilk="function" name="findtext" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope ilk="function" name="__copy__" />
        <scope ilk="function" name="iter" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope ilk="function" name="itertext" />
        <scope ilk="function" name="set" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="--" ilk="function" name="getiterator" signature="iter($self, /, tag=None)" />
        <scope ilk="function" name="extend" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope ilk="function" name="get" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope ilk="function" name="keys" />
        <scope ilk="function" name="findall" />
        <scope ilk="function" name="__setstate__" />
        <scope ilk="function" name="makeelement" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope ilk="function" name="getchildren" />
        <scope ilk="function" name="__getstate__" />
        <scope ilk="function" name="append" />
        <scope ilk="function" name="items" />
        <scope ilk="function" name="iterfind" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope ilk="function" name="insert" />
        <scope ilk="function" name="remove" />
      </scope>
      <scope classrefs="object" doc="An XML element hierarchy.&#10;This class also provides support for serialization to and from standard XML.  *element* is an optional root element node, *file* is an optional file handle or file name of an XML file whose contents will be used to initialize the tree with." ilk="class" name="ElementTree">
        <scope doc="Find first matching element by tag name or path." ilk="function" name="findtext" signature="findtext(self, path, default=None, namespaces=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, element=None, file=None)" />
        <scope doc="Find first matching element by tag name or path." ilk="function" name="find" signature="find(self, path, namespaces=None)" />
        <scope doc="Find all matching subelements by tag name or path." ilk="function" name="findall" signature="findall(self, path, namespaces=None)" />
        <scope doc="Write element tree to a file as XML." ilk="function" name="write" signature="write(self, file_or_filename, encoding=None, xml_declaration=None, default_namespace=None, method=None, *, short_empty_elements=True)" />
        <scope doc="Create and return tree iterator for the root element." ilk="function" name="iter" signature="iter(self, tag=None)" />
        <scope doc="Replace root element of this tree." ilk="function" name="_setroot" signature="_setroot(self, element)" />
        <scope ilk="function" name="write_c14n" signature="write_c14n(self, file)" />
        <scope doc="Return root element of this tree." ilk="function" name="getroot" signature="getroot(self)" />
        <scope doc="Load external XML document into element tree." ilk="function" name="parse" signature="parse(self, source, parser=None)" />
        <scope doc="# compatibility" ilk="function" name="getiterator" signature="getiterator(self, tag=None)" />
        <scope doc="Find all matching subelements by tag name or path." ilk="function" name="iterfind" signature="iterfind(self, path, namespaces=None)" />
      </scope>
      <scope doc="Processing Instruction element factory." ilk="function" name="PI" signature="PI(target, text=None)" />
      <scope classrefs="SyntaxError" doc="Invalid syntax.&#10;" ilk="class" name="ParseError" />
      <scope doc="Processing Instruction element factory." ilk="function" name="ProcessingInstruction" signature="ProcessingInstruction(target, text=None)" />
      <scope classrefs="object" doc="Qualified name wrapper.&#10;This class can be used to wrap a QName attribute value in order to get proper namespace handing on output.  *text_or_uri* is a string containing the QName value either in the form {uri}local, or if the tag argument is given, the URI part of a QName.  *tag* is an optional argument which if given, will make the first argument (text_or_uri) be interpreted as a URI, and this argument (tag) be interpreted as a local name." ilk="class" name="QName">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, text_or_uri, tag=None)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="SubElement" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="TreeBuilder">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="close" />
        <scope ilk="function" name="data" />
        <scope ilk="function" name="start" />
        <scope ilk="function" name="end" />
      </scope>
      <variable citdl="str" name="VERSION" />
      <scope doc="Parse XML document from string constant." ilk="function" name="XML" signature="XML(text, parser=None)" />
      <scope doc="Parse XML document from string constant for its IDs." ilk="function" name="XMLID" signature="XMLID(text, parser=None)" />
      <scope classrefs="object" doc="# also see ElementTree and TreeBuilder&#10;" ilk="class" name="XMLParser">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="feed" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope ilk="function" name="_setevents" />
        <scope ilk="function" name="_parse_whole" />
        <scope ilk="function" name="close" />
        <scope ilk="function" name="doctype" />
      </scope>
      <scope doc="Write element tree or element structure to sys.stdout." ilk="function" name="dump" signature="dump(elem)" />
      <scope doc="Parse XML document from string constant." ilk="function" name="fromstring" signature="fromstring(text, parser=None)" />
      <scope doc="Parse XML document from sequence of string fragments." ilk="function" name="fromstringlist" signature="fromstringlist(sequence, parser=None)" />
      <scope doc="Return True if *element* appears to be an Element." ilk="function" name="iselement" signature="iselement(element)" />
      <scope doc="Incrementally parse XML document into ElementTree." ilk="function" name="iterparse" signature="iterparse(source, events=None, parser=None)" />
      <scope doc="Parse XML document into element tree." ilk="function" name="parse" signature="parse(source, parser=None)" />
      <scope doc="Register a namespace prefix." ilk="function" name="register_namespace" signature="register_namespace(prefix, uri)" />
      <scope doc="Generate string representation of XML element." ilk="function" name="tostring" signature="tostring(element, encoding=None, method=None, *, short_empty_elements=True)" />
      <scope ilk="function" name="tostringlist" signature="tostringlist(element, encoding=None, method=None, *, short_empty_elements=True)" />
    </scope>
    <scope doc="Parser engine for the grammar tables generated by pgen.&#10;The grammar table must be loaded first.  See Parser/parser.c in the Python distribution for additional info on how this parsing engine works." ilk="blob" lang="Python3" name="lib2to3.pgen2.parse">
      <scope classrefs="Exception" doc="Exception to signal the parser is stuck.&#10;" ilk="class" name="ParseError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, type, value, context)" />
      </scope>
      <scope classrefs="object" doc="Parser engine.&#10;The proper usage sequence is:  p = Parser(grammar, [converter])  # create instance p.setup([start])                  # prepare for parsing &lt;for each input token&gt;: if p.addtoken(...):           # parse a token; may raise ParseError break root = p.rootnode                 # root of abstract syntax tree  A Parser instance may be reused by calling setup() repeatedly." ilk="class" name="Parser">
        <scope doc="Add a token; return True iff this is the end of the program." ilk="function" name="addtoken" signature="addtoken(self, type, value, context)" />
        <scope doc="Shift a token." ilk="function" name="shift" signature="shift(self, type, value, newstate, context)" />
        <scope doc="Pop a nonterminal." ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Turn a token into a label." ilk="function" name="classify" signature="classify(self, type, value, context)" />
        <scope doc="Constructor." ilk="function" name="__init__" signature="__init__(self, grammar, convert=None)" />
        <scope doc="Prepare for parsing." ilk="function" name="setup" signature="setup(self, start=None)" />
        <scope doc="Push a nonterminal." ilk="function" name="push" signature="push(self, type, newdfa, newstate, context)" />
      </scope>
      <import module="token" />
    </scope>
    <scope doc="Parser driver.&#10;This provides a high-level interface to parse a file into a syntax tree." ilk="blob" lang="Python3" name="lib2to3.pgen2.driver">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Driver">
        <scope doc="Parse a stream and return the syntax tree." ilk="function" name="parse_stream_raw" signature="parse_stream_raw(self, stream, debug=False)" />
        <scope doc="Parse a file and return the syntax tree." ilk="function" name="parse_file" signature="parse_file(self, filename, encoding=None, debug=False)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, grammar, convert=None, logger=None)" />
        <scope doc="Parse a stream and return the syntax tree." ilk="function" name="parse_stream" signature="parse_stream(self, stream, debug=False)" />
        <scope doc="Parse a string and return the syntax tree." ilk="function" name="parse_string" signature="parse_string(self, text, debug=False)" />
        <scope doc="Parse a series of tokens and return the syntax tree." ilk="function" name="parse_tokens" signature="parse_tokens(self, tokens, debug=False)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="codecs" />
      <import module="grammar" />
      <import module="io" />
      <scope doc="Load the grammar (maybe from a pickle)." ilk="function" name="load_grammar" signature="load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None)" />
      <import module="logging" />
      <scope doc="Main program, when run as a script: produce grammar pickle&#10;files." ilk="function" name="main" signature="main(*args)" />
      <import module="os" />
      <import module="parse" />
      <import module="pgen" />
      <import module="sys" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="Facility to use the Expat parser to load a minidom instance&#10;from a string or file.  This avoids all the overhead of SAX and pulldom to gain performance." ilk="blob" lang="Python3" name="xml.dom.expatbuilder">
      <variable citdl="int" name="CDATA_SECTION_NODE" />
      <variable citdl="int" name="DOCUMENT_NODE" />
      <variable citdl="NoneType" name="EMPTY_NAMESPACE" />
      <variable citdl="NoneType" name="EMPTY_PREFIX" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ElementInfo">
        <scope ilk="function" name="isEmpty" signature="isEmpty(self)" />
        <scope ilk="function" name="getAttributeTypeNS" signature="getAttributeTypeNS(self, namespaceURI, localName)" />
        <scope ilk="function" name="isIdNS" signature="isIdNS(self, euri, ename, auri, aname)" />
        <scope ilk="function" name="getAttributeType" signature="getAttributeType(self, aname)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tagName, model=None)" />
        <scope ilk="function" name="isId" signature="isId(self, aname)" />
        <scope ilk="function" name="isElementContent" signature="isElementContent(self)" />
      </scope>
      <scope classrefs="object" doc="Document builder that uses Expat to build a ParsedXML.DOM document&#10;instance." ilk="class" name="ExpatBuilder">
        <scope ilk="function" name="_finish_end_element" signature="_finish_end_element(self, curNode)" />
        <scope doc="Free all data structures used during DOM construction." ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="end_cdata_section_handler" signature="end_cdata_section_handler(self)" />
        <scope doc="Install the callbacks needed to build the DOM into the&#10;parser." ilk="function" name="install" signature="install(self, parser)" />
        <scope ilk="function" name="xml_decl_handler" signature="xml_decl_handler(self, version, encoding, standalone)" />
        <scope ilk="function" name="_finish_start_element" signature="_finish_start_element(self, node)" />
        <scope doc="Parse a document from a file object, returning the document&#10;node." ilk="function" name="parseFile" signature="parseFile(self, file)" />
        <scope ilk="function" name="attlist_decl_handler" signature="attlist_decl_handler(self, elem, name, type, default, required)" />
        <scope ilk="function" name="entity_decl_handler" signature="entity_decl_handler(self, entityName, is_parameter_entity, value, base, systemId, publicId, notationName)" />
        <scope doc="Create a new parser object." ilk="function" name="createParser" signature="createParser(self)" />
        <scope ilk="function" name="element_decl_handler" signature="element_decl_handler(self, name, model)" />
        <scope doc="Load the internal subset if there might be one." ilk="function" name="_setup_subset" signature="_setup_subset(self, buffer)" />
        <scope ilk="function" name="notation_decl_handler" signature="notation_decl_handler(self, notationName, base, systemId, publicId)" />
        <scope doc="Parse a document from a string, returning the document node." ilk="function" name="parseString" signature="parseString(self, string)" />
        <scope ilk="function" name="external_entity_ref_handler" signature="external_entity_ref_handler(self, context, base, systemId, publicId)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, options=None)" />
        <scope ilk="function" name="first_element_handler" signature="first_element_handler(self, name, attributes)" />
        <scope ilk="function" name="_handle_white_text_nodes" signature="_handle_white_text_nodes(self, node, info)" />
        <scope ilk="function" name="comment_handler" signature="comment_handler(self, data)" />
        <scope ilk="function" name="pi_handler" signature="pi_handler(self, target, data)" />
        <scope ilk="function" name="character_data_handler" signature="character_data_handler(self, data)" />
        <scope doc="# If this ever changes, Namespaces.end_element_handler()&#10;needs to # be changed to match." ilk="function" name="end_element_handler" signature="end_element_handler(self, name)" />
        <scope doc="Return the parser object, creating a new one if needed." ilk="function" name="getParser" signature="getParser(self)" />
        <scope ilk="function" name="start_doctype_decl_handler" signature="start_doctype_decl_handler(self, doctypeName, systemId, publicId, has_internal_subset)" />
        <scope ilk="function" name="start_element_handler" signature="start_element_handler(self, name, attributes)" />
        <scope ilk="function" name="character_data_handler_cdata" signature="character_data_handler_cdata(self, data)" />
        <scope ilk="function" name="start_cdata_section_handler" signature="start_cdata_section_handler(self)" />
        <scope ilk="function" name="end_doctype_decl_handler" signature="end_doctype_decl_handler(self)" />
      </scope>
      <scope classrefs="Namespaces ExpatBuilder" doc="Document builder that supports namespaces.&#10;" ilk="class" name="ExpatBuilderNS">
        <scope doc="Free all data structures used during DOM construction." ilk="function" name="reset" signature="reset(self)" />
      </scope>
      <variable citdl="int" name="FILTER_ACCEPT" />
      <variable citdl="int" name="FILTER_INTERRUPT" />
      <variable citdl="int" name="FILTER_REJECT" />
      <variable citdl="int" name="FILTER_SKIP" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="FilterCrutch">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, builder)" />
      </scope>
      <scope classrefs="object" doc="Wrapper around a DOMBuilderFilter which implements the checks&#10;to make the whatToShow filter attribute work." ilk="class" name="FilterVisibilityController">
        <scope ilk="function" name="startContainer" signature="startContainer(self, node)" />
        <scope ilk="function" name="acceptNode" signature="acceptNode(self, node)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filter)" />
      </scope>
      <scope classrefs="ExpatBuilder" doc="Builder which constructs document fragments given XML source&#10;text and a context node.  The context node is expected to provide information about the namespace declarations which are in scope at the start of the fragment." ilk="class" name="FragmentBuilder">
        <scope doc="Parse a document fragment from a file object, returning the&#10;fragment node." ilk="function" name="parseFile" signature="parseFile(self, file)" />
        <scope doc="Free all data structures used during DOM construction." ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="external_entity_ref_handler" signature="external_entity_ref_handler(self, context, base, systemId, publicId)" />
        <scope ilk="function" name="_getNSattrs" signature="_getNSattrs(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, context, options=None)" />
        <scope doc="Re-create the internal subset from the DocumentType node." ilk="function" name="_getDeclarations" signature="_getDeclarations(self)" />
        <scope doc="Parse a document fragment from a string, returning the&#10;fragment node." ilk="function" name="parseString" signature="parseString(self, string)" />
      </scope>
      <scope classrefs="Namespaces FragmentBuilder" doc="Fragment builder that supports namespaces.&#10;" ilk="class" name="FragmentBuilderNS">
        <scope doc="Return string of namespace attributes from this element and&#10;ancestors." ilk="function" name="_getNSattrs" signature="_getNSattrs(self)" />
        <scope doc="Free all data structures used during DOM construction." ilk="function" name="reset" signature="reset(self)" />
      </scope>
      <scope classrefs="ExpatBuilder" doc="XML processor which can rip out the internal document type subset.&#10;" ilk="class" name="InternalSubsetExtractor">
        <scope ilk="function" name="start_doctype_decl_handler" signature="start_doctype_decl_handler(self, name, publicId, systemId, has_internal_subset)" />
        <scope doc="Install the callbacks needed to build the DOM into the&#10;parser." ilk="function" name="install" signature="install(self, parser)" />
        <scope doc="Parse a document from a file object, returning the document&#10;node." ilk="function" name="parseFile" signature="parseFile(self, file)" />
        <scope doc="Return the internal subset as a string." ilk="function" name="getSubset" signature="getSubset(self)" />
        <scope ilk="function" name="start_element_handler" signature="start_element_handler(self, name, attrs)" />
        <scope ilk="function" name="end_doctype_decl_handler" signature="end_doctype_decl_handler(self)" />
        <scope doc="Parse a document from a string, returning the document node." ilk="function" name="parseString" signature="parseString(self, string)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class for builders; adds support for namespaces.&#10;" ilk="class" name="Namespaces">
        <scope doc="Insert the namespace-handlers onto the parser." ilk="function" name="install" signature="install(self, parser)" />
        <scope ilk="function" name="_initNamespaces" signature="_initNamespaces(self)" />
        <scope ilk="function" name="start_element_handler" signature="start_element_handler(self, name, attributes)" />
        <scope doc="# This only adds some asserts to the original #&#10;end_element_handler(), so we only define this when -O is not&#10;# used." ilk="function" name="end_element_handler" signature="end_element_handler(self, name)" />
        <scope doc="Create a new namespace-handling parser." ilk="function" name="createParser" signature="createParser(self)" />
        <scope doc="Push this namespace declaration on our storage." ilk="function" name="start_namespace_decl_handler" signature="start_namespace_decl_handler(self, prefix, uri)" />
      </scope>
      <scope classrefs="object" doc="Class giving the NodeType constants.&#10;" ilk="class" name="Node" />
      <scope classrefs="object" doc="This is the DOM2 NodeFilter interface. It contains only constants.&#10;" ilk="class" name="NodeFilter">
        <scope ilk="function" name="acceptNode" signature="acceptNode(self, node)" />
      </scope>
      <scope classrefs="Exception" doc="Exception raised to short-circuit parsing in InternalSubsetExtractor.&#10;" ilk="class" name="ParseEscape" />
      <scope classrefs="FilterCrutch" doc="&#10;" ilk="class" name="Rejecter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, builder)" />
        <scope ilk="function" name="start_element_handler" signature="start_element_handler(self, *args)" />
        <scope ilk="function" name="end_element_handler" signature="end_element_handler(self, *args)" />
      </scope>
      <scope classrefs="FilterCrutch" doc="&#10;" ilk="class" name="Skipper">
        <scope ilk="function" name="start_element_handler" signature="start_element_handler(self, *args)" />
        <scope ilk="function" name="end_element_handler" signature="end_element_handler(self, *args)" />
      </scope>
      <variable citdl="int" name="TEXT_NODE" />
      <variable citdl="str" name="XMLNS_NAMESPACE" />
      <import module="expat" />
      <scope doc="Create a builder based on an Options object." ilk="function" name="makeBuilder" signature="makeBuilder(options)" />
      <import module="minidom" />
      <scope doc="Parse a document, returning the resulting Document node." ilk="function" name="parse" signature="parse(file, namespaces=True)" />
      <scope doc="Parse a fragment of a document, given the context from which&#10;it was originally extracted." ilk="function" name="parseFragment" signature="parseFragment(file, context, namespaces=True)" />
      <scope doc="Parse a fragment of a document from a string, given the&#10;context from which it was originally extracted." ilk="function" name="parseFragmentString" signature="parseFragmentString(string, context, namespaces=True)" />
      <scope doc="Parse a document from a string, returning the resulting&#10;Document node." ilk="function" name="parseString" signature="parseString(string, namespaces=True)" />
      <variable citdl="DOMImplementation" name="theDOMImplementation" />
      <import module="xmlbuilder" />
    </scope>
    <scope doc="A dumb and slow but simple dbm clone.&#10;For database spam, spam.dir contains the index (a text file), spam.bak *may* contain a backup of the index (also a text file), while spam.dat contains the data (a binary file).  XXX TO DO:  - seems to contain a bug when updating...  - reclaim free space (currently, space once occupied by deleted or expanded items is never reused)" ilk="blob" lang="Python3" name="dbm.dumb">
      <variable citdl="list" name="__all__" />
      <import module="_ast" />
      <import module="_io" />
      <import module="_os" />
      <import module="collections" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Open the database file, filename, and return corresponding&#10;object." ilk="function" name="open" signature="open(file, flag='c', mode=438)" />
    </scope>
    <scope doc="# Emulation of has_key() function for platforms that don't use ncurses&#10;#" ilk="blob" lang="Python3" name="curses.has_key">
      <import module="_curses" />
      <scope ilk="function" name="has_key" signature="has_key(ch)" />
    </scope>
    <scope doc="A powerful, extensible, and easy-to-use option parser.&#10;By Greg Ward &lt;gward@python.net&gt;  Originally distributed as Optik.  For support, use the optik-users@lists.sourceforge.net mailing list (http://lists.sourceforge.net/lists/listinfo/optik-users).  Simple usage example:  from optparse import OptionParser" ilk="blob" lang="Python3" name="optparse">
      <scope classrefs="BadOptionError" doc="Raised if an ambiguous option is seen on the command line.&#10;" ilk="class" name="AmbiguousOptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, opt_str, possibilities)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an invalid option is seen on the command line.&#10;" ilk="class" name="BadOptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, opt_str)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for formatting option help.  OptionParser&#10;instances should use one of the HelpFormatter subclasses for formatting help; by default IndentedHelpFormatter is used.  Instance attributes: parser : OptionParser the controlling OptionParser instance indent_increment : int the number of columns to indent per nesting level max_help_position : int the maximum starting column for option help text" ilk="class" name="HelpFormatter">
        <scope ilk="function" name="format_option" signature="format_option(self, option)" />
        <scope ilk="function" name="set_short_opt_delimiter" signature="set_short_opt_delimiter(self, delim)" />
        <scope ilk="function" name="indent" signature="indent(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, indent_increment, max_help_position, width, short_first)" />
        <scope ilk="function" name="format_description" signature="format_description(self, description)" />
        <scope doc="Format a paragraph of free-form text for inclusion in the&#10;help output at the current indentation level." ilk="function" name="_format_text" signature="_format_text(self, text)" />
        <scope ilk="function" name="format_heading" signature="format_heading(self, heading)" />
        <scope ilk="function" name="set_parser" signature="set_parser(self, parser)" />
        <scope ilk="function" name="dedent" signature="dedent(self)" />
        <scope doc="Return a comma-separated list of option strings &amp;&#10;metavariables." ilk="function" name="format_option_strings" signature="format_option_strings(self, option)" />
        <scope ilk="function" name="set_long_opt_delimiter" signature="set_long_opt_delimiter(self, delim)" />
        <scope ilk="function" name="format_epilog" signature="format_epilog(self, epilog)" />
        <scope ilk="function" name="format_usage" signature="format_usage(self, usage)" />
        <scope ilk="function" name="expand_default" signature="expand_default(self, option)" />
        <scope ilk="function" name="store_option_strings" signature="store_option_strings(self, parser)" />
      </scope>
      <scope classrefs="HelpFormatter" doc="Format help with indented section bodies.&#10;" ilk="class" name="IndentedHelpFormatter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, indent_increment=2, max_help_position=24, width=None, short_first=1)" />
        <scope ilk="function" name="format_heading" signature="format_heading(self, heading)" />
        <scope ilk="function" name="format_usage" signature="format_usage(self, usage)" />
      </scope>
      <variable citdl="tuple" name="NO_DEFAULT" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="OptParseError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Instance attributes:&#10;_short_opts : [string] _long_opts : [string]  action : string type : string dest : string default : any nargs : int const : any choices : [string]" ilk="class" name="Option">
        <scope ilk="function" name="check_value" signature="check_value(self, opt, value)" />
        <scope ilk="function" name="_check_const" signature="_check_const(self)" />
        <scope ilk="function" name="_check_action" signature="_check_action(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *opts, **attrs)" />
        <scope ilk="function" name="take_action" signature="take_action(self, action, dest, opt, value, values, parser)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_check_dest" signature="_check_dest(self)" />
        <scope ilk="function" name="process" signature="process(self, opt, value, values, parser)" />
        <scope ilk="function" name="get_opt_string" signature="get_opt_string(self)" />
        <scope ilk="function" name="_set_opt_strings" signature="_set_opt_strings(self, opts)" />
        <scope ilk="function" name="_check_choice" signature="_check_choice(self)" />
        <scope ilk="function" name="_check_type" signature="_check_type(self)" />
        <scope ilk="function" name="_set_attrs" signature="_set_attrs(self, attrs)" />
        <scope ilk="function" name="takes_value" signature="takes_value(self)" />
        <scope ilk="function" name="convert_value" signature="convert_value(self, opt, value)" />
        <scope ilk="function" name="_check_callback" signature="_check_callback(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="_check_nargs" signature="_check_nargs(self)" />
        <scope ilk="function" name="_check_opt_strings" signature="_check_opt_strings(self, opts)" />
      </scope>
      <scope classrefs="OptionError" doc="Raised if conflicting options are added to an OptionParser.&#10;" ilk="class" name="OptionConflictError" />
      <scope classrefs="object" doc="Abstract base class.&#10;Class attributes: standard_option_list : [Option] list of standard options that will be accepted by all instances of this parser class (intended to be overridden by subclasses).  Instance attributes: option_list : [Option] the list of Option objects contained by this OptionContainer _short_opt : { string : Option } dictionary mapping short option strings, eg. &quot;-f&quot; or &quot;-X&quot;," ilk="class" name="OptionContainer">
        <scope ilk="function" name="set_description" signature="set_description(self, description)" />
        <scope doc="add_option(Option)&#10;add_option(opt_str, ..., kwarg=val, ...)" ilk="function" name="add_option" signature="add_option(Option)&#10;add_option(opt_str, ..., kwarg=val, ...)" />
        <scope ilk="function" name="get_description" signature="get_description(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option_class, conflict_handler, description)" />
        <scope ilk="function" name="add_options" signature="add_options(self, option_list)" />
        <scope ilk="function" name="format_description" signature="format_description(self, formatter)" />
        <scope ilk="function" name="_share_option_mappings" signature="_share_option_mappings(self, parser)" />
        <scope ilk="function" name="format_option_help" signature="format_option_help(self, formatter)" />
        <scope ilk="function" name="get_option" signature="get_option(self, opt_str)" />
        <scope ilk="function" name="_check_conflict" signature="_check_conflict(self, option)" />
        <scope ilk="function" name="remove_option" signature="remove_option(self, opt_str)" />
        <scope ilk="function" name="has_option" signature="has_option(self, opt_str)" />
        <scope ilk="function" name="_create_option_mappings" signature="_create_option_mappings(self)" />
        <scope doc="see OptionParser.destroy()." ilk="function" name="destroy" signature="destroy(self)" />
        <scope ilk="function" name="format_help" signature="format_help(self, formatter)" />
        <scope ilk="function" name="set_conflict_handler" signature="set_conflict_handler(self, handler)" />
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an Option instance is created with invalid or&#10;inconsistent arguments." ilk="class" name="OptionError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, option)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="OptionContainer" doc="Abstract base class.&#10;Class attributes: standard_option_list : [Option] list of standard options that will be accepted by all instances of this parser class (intended to be overridden by subclasses).  Instance attributes: option_list : [Option] the list of Option objects contained by this OptionContainer _short_opt : { string : Option } dictionary mapping short option strings, eg. &quot;-f&quot; or &quot;-X&quot;," ilk="class" name="OptionGroup">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, parser, title, description=None)" />
        <scope ilk="function" name="set_title" signature="set_title(self, title)" />
        <scope doc="see OptionParser.destroy()." ilk="function" name="destroy" signature="destroy(self)" />
        <scope ilk="function" name="format_help" signature="format_help(self, formatter)" />
        <scope ilk="function" name="_create_option_list" signature="_create_option_list(self)" />
      </scope>
      <scope classrefs="OptionContainer" doc="Class attributes:&#10;standard_option_list : [Option] list of standard options that will be accepted by all instances of this parser class (intended to be overridden by subclasses).  Instance attributes: usage : string a usage string for your program.  Before it is displayed to the user, &quot;%prog&quot; will be expanded to the name of your program (self.prog or os.path.basename(sys.argv[0])). prog : string" ilk="class" name="OptionParser">
        <scope ilk="function" name="_get_args" signature="_get_args(self, args)" />
        <scope ilk="function" name="get_option_group" signature="get_option_group(self, opt_str)" />
        <scope ilk="function" name="get_prog_name" signature="get_prog_name(self)" />
        <scope doc="Print an extended help message, listing all options and any&#10;help text provided with them, to 'file' (default stdout)." ilk="function" name="print_help" signature="print_help(file : file = stdout)" />
        <scope ilk="function" name="_add_help_option" signature="_add_help_option(self)" />
        <scope ilk="function" name="_get_all_options" signature="_get_all_options(self)" />
        <scope doc="Determine which long option string 'opt' matches, ie." ilk="function" name="_match_long_opt" returns="str" signature="_match_long_opt(opt : string) -&gt; string" />
        <scope ilk="function" name="_init_parsing_state" signature="_init_parsing_state(self)" />
        <scope ilk="function" name="set_defaults" signature="set_defaults(self, **kwargs)" />
        <scope doc="Print the usage message for the current program (self.usage)&#10;to 'file' (default stdout)." ilk="function" name="print_usage" signature="print_usage(file : file = stdout)" />
        <scope doc="_process_args(largs : [string], rargs : [string], values :&#10;Values)" ilk="function" name="_process_args" signature="_process_args(self, largs, rargs, values)" />
        <scope ilk="function" name="set_default" signature="set_default(self, dest, value)" />
        <scope ilk="function" name="set_usage" signature="set_usage(self, usage)" />
        <scope doc="Set parsing to not stop on the first non-option, allowing&#10;interspersing switches with command arguments." ilk="function" name="enable_interspersed_args" signature="enable_interspersed_args(self)" />
        <scope ilk="function" name="_populate_option_list" signature="_populate_option_list(self, option_list, add_help=True)" />
        <scope ilk="function" name="_process_long_opt" signature="_process_long_opt(self, rargs, values)" />
        <scope ilk="function" name="add_option_group" signature="add_option_group(self, *args, **kwargs)" />
        <scope ilk="function" name="exit" signature="exit(self, status=0, msg=None)" />
        <scope ilk="function" name="format_option_help" signature="format_option_help(self, formatter=None)" />
        <scope ilk="function" name="get_description" signature="get_description(self)" />
        <scope ilk="function" name="_add_version_option" signature="_add_version_option(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, usage=None, option_list=None, option_class=&lt;class 'optparse.Option'&gt;, version=None, conflict_handler='error', description=None, formatter=None, add_help_option=True, prog=None, epilog=None)" />
        <scope ilk="function" name="get_default_values" signature="get_default_values(self)" />
        <scope ilk="function" name="get_usage" signature="get_usage(self)" />
        <scope doc="Print a usage message incorporating 'msg' to stderr and&#10;exit." ilk="function" name="error" signature="error(msg : string)" />
        <scope doc="Set parsing to stop on the first non-option." ilk="function" name="disable_interspersed_args" signature="disable_interspersed_args(self)" />
        <scope ilk="function" name="_create_option_list" signature="_create_option_list(self)" />
        <scope doc="-&gt; (values : Values, args : [string])" ilk="function" name="check_values" signature="check_values(values : Values, args : [string])" />
        <scope ilk="function" name="format_epilog" signature="format_epilog(self, formatter)" />
        <scope ilk="function" name="get_version" signature="get_version(self)" />
        <scope ilk="function" name="expand_prog_name" signature="expand_prog_name(self, s)" />
        <scope ilk="function" name="_process_short_opts" signature="_process_short_opts(self, rargs, values)" />
        <scope ilk="function" name="set_process_default_values" signature="set_process_default_values(self, process)" />
        <scope doc="Declare that you are done with this OptionParser." ilk="function" name="destroy" signature="destroy(self)" />
        <scope ilk="function" name="format_help" signature="format_help(self, formatter=None)" />
        <scope doc="parse_args(args : [string] = sys.argv[1:], values : Values =&#10;None) -&gt; (values : Values, args : [string])" ilk="function" name="parse_args" signature="parse_args(self, args=None, values=None)" />
        <scope doc="Print the version message for this program (self.version) to&#10;'file' (default stdout)." ilk="function" name="print_version" signature="print_version(file : file = stdout)" />
      </scope>
      <scope classrefs="OptParseError" doc="Raised if an invalid option value is encountered on the command&#10;line." ilk="class" name="OptionValueError" />
      <variable citdl="str" name="SUPPRESS_HELP" />
      <variable citdl="str" name="SUPPRESS_USAGE" />
      <scope classrefs="HelpFormatter" doc="Format help with underlined section headers.&#10;" ilk="class" name="TitledHelpFormatter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, indent_increment=0, max_help_position=24, width=None, short_first=0)" />
        <scope ilk="function" name="format_heading" signature="format_heading(self, heading)" />
        <scope ilk="function" name="format_usage" signature="format_usage(self, usage)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Values">
        <scope ilk="function" name="read_file" signature="read_file(self, filename, mode='careful')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Update the option values from an arbitrary dictionary, but&#10;only use keys from dict that already have a corresponding&#10;attribute in self." ilk="function" name="_update_careful" signature="_update_careful(self, dict)" />
        <scope ilk="function" name="ensure_value" signature="ensure_value(self, attr, value)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, defaults=None)" />
        <scope ilk="function" name="_update" signature="_update(self, dict, mode)" />
        <scope ilk="function" name="read_module" signature="read_module(self, modname, mode='careful')" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Update the option values from an arbitrary dictionary, using&#10;all keys from the dictionary regardless of whether they have&#10;a corresponding attribute in self or not." ilk="function" name="_update_loose" signature="_update_loose(self, dict)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__copyright__" />
      <scope ilk="function" name="check_builtin" signature="check_builtin(option, opt, value)" />
      <scope ilk="function" name="check_choice" signature="check_choice(option, opt, value)" />
      <scope ilk="function" name="gettext" signature="gettext(message)" />
      <scope classrefs="object" doc="Instance attributes:&#10;_short_opts : [string] _long_opts : [string]  action : string type : string dest : string default : any nargs : int const : any choices : [string]" ilk="class" name="make_option">
        <scope ilk="function" name="check_value" signature="check_value(self, opt, value)" />
        <scope ilk="function" name="_check_const" signature="_check_const(self)" />
        <scope ilk="function" name="_check_action" signature="_check_action(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *opts, **attrs)" />
        <scope ilk="function" name="take_action" signature="take_action(self, action, dest, opt, value, values, parser)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_check_dest" signature="_check_dest(self)" />
        <scope ilk="function" name="process" signature="process(self, opt, value, values, parser)" />
        <scope ilk="function" name="get_opt_string" signature="get_opt_string(self)" />
        <scope ilk="function" name="_set_opt_strings" signature="_set_opt_strings(self, opts)" />
        <scope ilk="function" name="_check_choice" signature="_check_choice(self)" />
        <scope ilk="function" name="_check_type" signature="_check_type(self)" />
        <scope ilk="function" name="_set_attrs" signature="_set_attrs(self, attrs)" />
        <scope ilk="function" name="takes_value" signature="takes_value(self)" />
        <scope ilk="function" name="convert_value" signature="convert_value(self, opt, value)" />
        <scope ilk="function" name="_check_callback" signature="_check_callback(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="_check_nargs" signature="_check_nargs(self)" />
        <scope ilk="function" name="_check_opt_strings" signature="_check_opt_strings(self, opts)" />
      </scope>
      <scope ilk="function" name="ngettext" signature="ngettext(msgid1, msgid2, n)" />
      <import module="os" />
      <import module="sys" />
      <import module="textwrap" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="_codecs">
      <scope ilk="function" name="ascii_decode" />
      <scope ilk="function" name="ascii_encode" />
      <scope ilk="function" name="charmap_build" />
      <scope ilk="function" name="charmap_decode" />
      <scope ilk="function" name="charmap_encode" />
      <scope doc="Decodes obj using the codec registered for encoding." ilk="function" name="decode" />
      <scope doc="Encodes obj using the codec registered for encoding." ilk="function" name="encode" />
      <scope ilk="function" name="escape_decode" />
      <scope ilk="function" name="escape_encode" />
      <scope ilk="function" name="latin_1_decode" />
      <scope ilk="function" name="latin_1_encode" />
      <scope doc="Looks up a codec tuple in the Python codec registry and&#10;returns a CodecInfo object." ilk="function" name="lookup" />
      <scope doc="Return the error handler for the specified error handling&#10;name or raise a LookupError, if no handler exists under this&#10;name." ilk="function" name="lookup_error" signature="lookup_error(errors) -&gt; handler" />
      <scope ilk="function" name="raw_unicode_escape_decode" />
      <scope ilk="function" name="raw_unicode_escape_encode" />
      <scope ilk="function" name="readbuffer_encode" />
      <scope doc="Register a codec search function." ilk="function" name="register" />
      <scope doc="Register the specified error handler under the name errors." ilk="function" name="register_error" />
      <scope ilk="function" name="unicode_escape_decode" />
      <scope ilk="function" name="unicode_escape_encode" />
      <scope ilk="function" name="unicode_internal_decode" />
      <scope ilk="function" name="unicode_internal_encode" />
      <scope ilk="function" name="utf_16_be_decode" />
      <scope ilk="function" name="utf_16_be_encode" />
      <scope ilk="function" name="utf_16_decode" />
      <scope ilk="function" name="utf_16_encode" />
      <scope ilk="function" name="utf_16_ex_decode" />
      <scope ilk="function" name="utf_16_le_decode" />
      <scope ilk="function" name="utf_16_le_encode" />
      <scope ilk="function" name="utf_32_be_decode" />
      <scope ilk="function" name="utf_32_be_encode" />
      <scope ilk="function" name="utf_32_decode" />
      <scope ilk="function" name="utf_32_encode" />
      <scope ilk="function" name="utf_32_ex_decode" />
      <scope ilk="function" name="utf_32_le_decode" />
      <scope ilk="function" name="utf_32_le_encode" />
      <scope ilk="function" name="utf_7_decode" />
      <scope ilk="function" name="utf_7_encode" />
      <scope ilk="function" name="utf_8_decode" />
      <scope ilk="function" name="utf_8_encode" />
    </scope>
    <scope doc="Interfaces for launching and remotely controlling Web browsers.&#10;" ilk="blob" lang="Python3" name="webbrowser">
      <scope classrefs="GenericBrowser" doc="Class for all browsers which are to be started in the&#10;background." ilk="class" name="BackgroundBrowser">
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
      </scope>
      <scope classrefs="object" doc="Parent class for all browsers. Do not use directly.&#10;" ilk="class" name="BaseBrowser">
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
        <scope ilk="function" name="open_new" signature="open_new(self, url)" />
        <scope ilk="function" name="open_new_tab" signature="open_new_tab(self, url)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name='')" />
      </scope>
      <scope classrefs="UnixBrowser" doc="Launcher class for Google Chrome browser.&#10;" ilk="class" name="Chrome" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Google Chrome browser.&#10;" ilk="class" name="Chromium" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Elinks browsers.&#10;" ilk="class" name="Elinks" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Galeon/Epiphany browsers.&#10;" ilk="class" name="Galeon" />
      <scope classrefs="BaseBrowser" doc="Class for all browsers started with a command&#10;and without remote functionality." ilk="class" name="GenericBrowser">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name)" />
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
      </scope>
      <scope classrefs="BaseBrowser" doc="Parent class for all browsers. Do not use directly.&#10;" ilk="class" name="Grail">
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
        <scope doc="# There should be a way to maintain a connection to Grail,&#10;but the # Grail remote control protocol doesn't really allow&#10;that at this # point." ilk="function" name="_find_grail_rc" signature="_find_grail_rc(self)" />
        <scope ilk="function" name="_remote" signature="_remote(self, action)" />
      </scope>
      <scope classrefs="BaseBrowser" doc="Controller for the KDE File Manager (kfm, or Konqueror).&#10;See the output of ``kfmclient --commands`` for more information on the Konqueror remote-control interface." ilk="class" name="Konqueror">
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
      </scope>
      <scope classrefs="UnixBrowser" doc="Launcher class for Mozilla/Netscape browsers.&#10;" ilk="class" name="Mozilla" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Mozilla/Netscape browsers.&#10;" ilk="class" name="Netscape" />
      <scope classrefs="UnixBrowser" doc="Launcher class for Opera browser.&#10;" ilk="class" name="Opera" />
      <scope classrefs="BaseBrowser" doc="Parent class for all Unix browsers with remote functionality.&#10;" ilk="class" name="UnixBrowser">
        <scope ilk="function" name="_invoke" signature="_invoke(self, args, remote, autoraise)" />
        <scope ilk="function" name="open" signature="open(self, url, new=0, autoraise=True)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return a browser launcher instance appropriate for the&#10;environment." ilk="function" name="get" signature="get(using=None)" />
      <scope ilk="function" name="main" signature="main()" />
      <scope ilk="function" name="open" signature="open(url, new=0, autoraise=True)" />
      <scope ilk="function" name="open_new" signature="open_new(url)" />
      <scope ilk="function" name="open_new_tab" signature="open_new_tab(url)" />
      <import module="os" />
      <scope doc="Register a browser connector and, optionally, connection." ilk="function" name="register" signature="register(name, klass, instance=None, update_tryorder=1)" />
      <scope ilk="function" name="register_X_browsers" signature="register_X_browsers()" />
      <import module="shlex" />
      <import module="shutil" />
      <import module="subprocess" />
      <import module="sys" />
    </scope>
    <scope doc="Conversion functions between RGB and other color systems.&#10;This modules provides two functions for each color system ABC:  rgb_to_abc(r, g, b) --&gt; a, b, c abc_to_rgb(a, b, c) --&gt; r, g, b  All inputs and outputs are triples of floats in the range [0.0...1.0] (with the exception of I and Q, which covers a slightly larger range). Inputs outside the valid range may cause exceptions or invalid outputs.  Supported color systems:" ilk="blob" lang="Python3" name="colorsys">
      <variable citdl="float" name="ONE_SIXTH" />
      <variable citdl="float" name="ONE_THIRD" />
      <variable citdl="float" name="TWO_THIRD" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="hls_to_rgb" signature="hls_to_rgb(h, l, s)" />
      <scope ilk="function" name="hsv_to_rgb" signature="hsv_to_rgb(h, s, v)" />
      <scope ilk="function" name="rgb_to_hls" signature="rgb_to_hls(r, g, b)" />
      <scope ilk="function" name="rgb_to_hsv" signature="rgb_to_hsv(r, g, b)" />
      <scope ilk="function" name="rgb_to_yiq" signature="rgb_to_yiq(r, g, b)" />
      <scope ilk="function" name="yiq_to_rgb" signature="yiq_to_rgb(y, i, q)" />
    </scope>
    <scope doc="Fixer for except statements with named exceptions.&#10;The following cases will be converted:  - &quot;except E, T:&quot; where T is a name:  except E as T:  - &quot;except E, T:&quot; where T is not a name, tuple or list:  except E as t: T = t" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_except">
      <scope doc="Build an assignment statement" ilk="function" name="Assign" signature="Assign(target, source)" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixExcept">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope ilk="function" name="find_excepts" signature="find_excepts(nodes)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a list literal?" ilk="function" name="is_list" signature="is_list(node)" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Python version compatibility support for minidom.&#10;This module contains internal implementation details and should not be imported; use xml.dom.minidom instead." ilk="blob" lang="Python3" name="xml.dom.minicompat">
      <scope classrefs="tuple" doc="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object." ilk="class" name="EmptyNodeList">
        <scope ilk="function" name="__radd__" signature="__radd__(self, other)" />
        <scope doc="Return self+value." ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope ilk="function" name="_set_length" signature="_set_length(self, value)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
      </scope>
      <scope classrefs="list" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="NodeList">
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope ilk="function" name="_set_length" signature="_set_length(self, value)" />
        <scope ilk="function" name="_get_length" signature="_get_length(self)" />
        <scope ilk="function" name="item" signature="item(self, index)" />
      </scope>
      <variable citdl="tuple" name="StringTypes" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="defproperty" signature="defproperty(klass, name, doc)" />
      <import module="xml" />
    </scope>
    <scope doc="Generic socket server classes.&#10;This module tries to capture the various aspects of defining a server:  For socket-based servers:  - address family: - AF_INET{,6}: IP (Internet Protocol) sockets (default) - AF_UNIX: Unix domain sockets - others, e.g. AF_DECNET are conceivable (see &lt;socket.h&gt; - socket type: - SOCK_STREAM (reliable stream, e.g. TCP)" ilk="blob" lang="Python3" name="socketserver">
      <scope classrefs="object" doc="Base class for request handler classes.&#10;This class is instantiated for each request to be handled.  The constructor sets the instance variables request, client_address and server, and then calls the handle() method.  To implement a specific service, all you need to do is to derive a class which defines a handle() method.  The handle() method can find the request as self.request, the client address as self.client_address, and the server (in case it needs access to per-server information) as self.server.  Since a separate instance is created for each request, the handle() method" ilk="class" name="BaseRequestHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, request, client_address, server)" />
        <scope ilk="function" name="finish" signature="finish(self)" />
        <scope ilk="function" name="handle" signature="handle(self)" />
        <scope ilk="function" name="setup" signature="setup(self)" />
      </scope>
      <scope classrefs="object" doc="Base class for server classes.&#10;Methods for the caller:  - __init__(server_address, RequestHandlerClass) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you do not use serve_forever() - fileno() -&gt; int   # for selector  Methods that may be overridden: " ilk="class" name="BaseServer">
        <scope doc="Handle an error gracefully. May be overridden." ilk="function" name="handle_error" signature="handle_error(self, request, client_address)" />
        <scope doc="Called to clean up an individual request." ilk="function" name="close_request" signature="close_request(self, request)" />
        <scope doc="Called by the serve_forever() loop." ilk="function" name="service_actions" signature="service_actions(self)" />
        <scope doc="Constructor. May be extended, do not override." ilk="function" name="__init__" signature="__init__(self, server_address, RequestHandlerClass)" />
        <scope doc="Handle one request at a time until shutdown." ilk="function" name="serve_forever" signature="serve_forever(self, poll_interval=0.5)" />
        <scope doc="Handle one request, without blocking." ilk="function" name="_handle_request_noblock" signature="_handle_request_noblock(self)" />
        <scope doc="Called if no new request arrives within self.timeout." ilk="function" name="handle_timeout" signature="handle_timeout(self)" />
        <scope doc="Stops the serve_forever loop." ilk="function" name="shutdown" signature="shutdown(self)" />
        <scope doc="Called by constructor to activate the server." ilk="function" name="server_activate" signature="server_activate(self)" />
        <scope doc="Call finish_request." ilk="function" name="process_request" signature="process_request(self, request, client_address)" />
        <scope doc="Called to clean-up the server." ilk="function" name="server_close" signature="server_close(self)" />
        <scope doc="Called to shutdown and close an individual request." ilk="function" name="shutdown_request" signature="shutdown_request(self, request)" />
        <scope doc="Handle one request, possibly blocking." ilk="function" name="handle_request" signature="handle_request(self)" />
        <scope doc="Finish one request by instantiating RequestHandlerClass." ilk="function" name="finish_request" signature="finish_request(self, request, client_address)" />
        <scope doc="Verify the request. May be overridden." ilk="function" name="verify_request" signature="verify_request(self, request, client_address)" />
      </scope>
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for datagram sockets.&#10;" ilk="class" name="DatagramRequestHandler">
        <scope ilk="function" name="finish" signature="finish(self)" />
        <scope ilk="function" name="setup" signature="setup(self)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class to handle each request in a new process.&#10;" ilk="class" name="ForkingMixIn">
        <scope doc="Fork a new subprocess to process the request." ilk="function" name="process_request" signature="process_request(self, request, client_address)" />
        <scope doc="Collect the zombie child processes regularly in the&#10;ForkingMixIn." ilk="function" name="service_actions" signature="service_actions(self)" />
        <scope doc="Wait for zombies after self.timeout seconds of inactivity." ilk="function" name="handle_timeout" signature="handle_timeout(self)" />
        <scope doc="Internal routine to wait for children that have exited." ilk="function" name="collect_children" signature="collect_children(self)" />
      </scope>
      <scope classrefs="ForkingMixIn TCPServer" doc="Mix-in class to handle each request in a new process.&#10;" ilk="class" name="ForkingTCPServer" />
      <scope classrefs="ForkingMixIn UDPServer" doc="Mix-in class to handle each request in a new process.&#10;" ilk="class" name="ForkingUDPServer" />
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for stream sockets.&#10;" ilk="class" name="StreamRequestHandler">
        <scope ilk="function" name="finish" signature="finish(self)" />
        <scope ilk="function" name="setup" signature="setup(self)" />
      </scope>
      <scope classrefs="BaseServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="TCPServer">
        <scope doc="Called by constructor to activate the server." ilk="function" name="server_activate" signature="server_activate(self)" />
        <scope doc="Called to clean up an individual request." ilk="function" name="close_request" signature="close_request(self, request)" />
        <scope doc="Called to clean-up the server." ilk="function" name="server_close" signature="server_close(self)" />
        <scope doc="Get the request and client address from the socket." ilk="function" name="get_request" signature="get_request(self)" />
        <scope doc="Called to shutdown and close an individual request." ilk="function" name="shutdown_request" signature="shutdown_request(self, request)" />
        <scope doc="Constructor. May be extended, do not override." ilk="function" name="__init__" signature="__init__(self, server_address, RequestHandlerClass, bind_and_activate=True)" />
        <scope doc="Called by constructor to bind the socket." ilk="function" name="server_bind" signature="server_bind(self)" />
        <scope doc="Return socket file number." ilk="function" name="fileno" signature="fileno(self)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingMixIn">
        <scope doc="Start a new thread to process the request." ilk="function" name="process_request" signature="process_request(self, request, client_address)" />
        <scope doc="Same as in BaseServer but as a thread." ilk="function" name="process_request_thread" signature="process_request_thread(self, request, client_address)" />
      </scope>
      <scope classrefs="ThreadingMixIn TCPServer" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingTCPServer" />
      <scope classrefs="ThreadingMixIn UDPServer" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingUDPServer" />
      <scope classrefs="ThreadingMixIn UnixDatagramServer" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingUnixDatagramServer" />
      <scope classrefs="ThreadingMixIn UnixStreamServer" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingUnixStreamServer" />
      <scope classrefs="TCPServer" doc="UDP server class.&#10;" ilk="class" name="UDPServer">
        <scope doc="Called by constructor to activate the server." ilk="function" name="server_activate" signature="server_activate(self)" />
        <scope doc="Called to clean up an individual request." ilk="function" name="close_request" signature="close_request(self, request)" />
        <scope doc="Get the request and client address from the socket." ilk="function" name="get_request" signature="get_request(self)" />
        <scope doc="Called to shutdown and close an individual request." ilk="function" name="shutdown_request" signature="shutdown_request(self, request)" />
      </scope>
      <scope classrefs="UDPServer" doc="UDP server class.&#10;" ilk="class" name="UnixDatagramServer" />
      <scope classrefs="TCPServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="UnixStreamServer" />
      <variable citdl="list" name="__all__" />
      <import module="errno" />
      <import module="os" />
      <import module="selectors" />
      <import module="socket" />
      <import module="threading" />
      <scope doc="Monotonic clock, cannot go backward." ilk="function" name="time" returns="float" signature="monotonic() -&gt; float" />
    </scope>
    <scope doc="Basic pip uninstallation support, helper for the Windows uninstaller&#10;" ilk="blob" lang="Python3" name="ensurepip._uninstall">
      <import module="argparse" />
      <import module="ensurepip" />
    </scope>
    <scope doc="Routines for manipulating RFC2047 encoded words.&#10;This is currently a package-private API, but will be considered for promotion to a public API if there is demand." ilk="blob" lang="Python3" name="email._encoded_words">
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="ascii_letters" />
      <import module="base64" />
      <import module="binascii" />
      <scope doc="Decode encoded word and return (string, charset, lang,&#10;defects) tuple." ilk="function" name="decode" signature="decode(ew)" />
      <scope ilk="function" name="decode_b" signature="decode_b(encoded)" />
      <scope ilk="function" name="decode_q" signature="decode_q(encoded)" />
      <variable citdl="str" name="digits" />
      <scope doc="Encode string using the CTE encoding that produces the&#10;shorter result." ilk="function" name="encode" signature="encode(string, charset='utf-8', encoding=None, lang='')" />
      <scope ilk="function" name="encode_b" signature="encode_b(bstring)" />
      <scope ilk="function" name="encode_q" signature="encode_q(bstring)" />
      <import module="errors" />
      <import module="functools" />
      <scope ilk="function" name="len_b" signature="len_b(bstring)" />
      <scope ilk="function" name="len_q" signature="len_q(bstring)" />
      <import module="re" />
    </scope>
    <scope doc="Event loop using a selector and related classes.&#10;A selector is a &quot;notify-when-ready&quot; multiplexer.  For a subclass which also includes support for signal handling, see the unix_events sub-module." ilk="blob" lang="Python3" name="asyncio.selector_events">
      <scope classrefs="BaseEventLoop" doc="Selector event loop.&#10;See events.EventLoop for API specification." ilk="class" name="BaseSelectorEventLoop">
        <scope ilk="function" name="_sock_sendall" signature="_sock_sendall(self, fut, registered, sock, data)" />
        <scope ilk="function" name="_sock_connect" signature="_sock_connect(self, fut, sock, address)" />
        <scope doc="Send data to the socket." ilk="function" name="sock_sendall" signature="sock_sendall(self, sock, data)" />
        <scope doc="Create SSL transport." ilk="function" name="_make_ssl_transport" signature="_make_ssl_transport(self, rawsock, protocol, sslcontext, waiter=None, *, server_side=False, server_hostname=None, extra=None, server=None)" />
        <scope doc="Write a byte to self-pipe, to wake up the event loop." ilk="function" name="_write_to_self" signature="_write_to_self(self)" />
        <scope ilk="function" name="_read_from_self" signature="_read_from_self(self)" />
        <scope doc="Create datagram transport." ilk="function" name="_make_datagram_transport" signature="_make_datagram_transport(self, sock, protocol, address=None, waiter=None, extra=None)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_socketpair" signature="_socketpair(self)" />
        <scope ilk="function" name="_sock_connect_cb" signature="_sock_connect_cb(self, fut, sock, address)" />
        <scope ilk="function" name="_accept_connection" signature="_accept_connection(self, protocol_factory, sock, sslcontext=None, server=None)" />
        <scope doc="Receive data from the socket." ilk="function" name="sock_recv" signature="sock_recv(self, sock, n)" />
        <scope doc="Accept a connection." ilk="function" name="sock_accept" signature="sock_accept(self, sock)" />
        <scope ilk="function" name="_make_legacy_ssl_transport" signature="_make_legacy_ssl_transport(self, rawsock, protocol, sslcontext, waiter, *, server_side=False, server_hostname=None, extra=None, server=None)" />
        <scope ilk="function" name="_start_serving" signature="_start_serving(self, protocol_factory, sock, sslcontext=None, server=None)" />
        <scope doc="Connect to a remote socket at address." ilk="function" name="sock_connect" signature="sock_connect(self, sock, address)" />
        <scope ilk="function" name="_close_self_pipe" signature="_close_self_pipe(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, selector=None)" />
        <scope doc="Remove a writer callback." ilk="function" name="remove_writer" signature="remove_writer(self, fd)" />
        <scope ilk="function" name="_sock_connect_done" signature="_sock_connect_done(self, fd, fut)" />
        <scope ilk="function" name="_sock_recv" signature="_sock_recv(self, fut, registered, sock, n)" />
        <scope doc="Remove a reader callback." ilk="function" name="remove_reader" signature="remove_reader(self, fd)" />
        <scope ilk="function" name="_sock_accept" signature="_sock_accept(self, fut, registered, sock)" />
        <scope doc="Add a writer callback.." ilk="function" name="add_writer" signature="add_writer(self, fd, callback, *args)" />
        <scope ilk="function" name="_stop_serving" signature="_stop_serving(self, sock)" />
        <scope doc="Create socket transport." ilk="function" name="_make_socket_transport" signature="_make_socket_transport(self, sock, protocol, waiter=None, *, extra=None, server=None)" />
        <scope doc="Add a reader callback." ilk="function" name="add_reader" signature="add_reader(self, fd, callback, *args)" />
        <scope ilk="function" name="_accept_connection2" signature="_accept_connection2(self, protocol_factory, conn, extra, sslcontext=None, server=None)" />
        <scope doc="Process selector events." ilk="function" name="_process_events" signature="_process_events(self, event_list)" />
        <scope ilk="function" name="_make_self_pipe" signature="_make_self_pipe(self)" />
        <scope ilk="function" name="_process_self_data" signature="_process_self_data(self, data)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="base_events" />
      <import module="collections" />
      <import module="compat" />
      <import module="constants" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="errno" />
      <import module="events" />
      <import module="functools" />
      <import module="futures" />
      <variable citdl="Logger" name="logger" />
      <import module="selectors" />
      <import module="socket" />
      <import module="ssl" />
      <import module="sslproto" />
      <import module="transports" />
      <import module="warnings" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="ensurepip">
      <variable citdl="list" name="__all__" />
      <scope doc="Bootstrap pip into the current Python installation (or the&#10;given root directory)." ilk="function" name="bootstrap" signature="bootstrap(*, root=None, upgrade=False, user=False, altinstall=False, default_pip=False, verbosity=0)" />
      <import module="os" />
      <import module="pkgutil" />
      <import module="ssl" />
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Returns a string specifying the bundled version of pip." ilk="function" name="version" signature="version()" />
    </scope>
    <scope doc="Macintosh-specific module for conversion between pathnames and URLs.&#10;Do not import directly; use urllib instead." ilk="blob" lang="Python3" name="macurl2path">
      <variable citdl="list" name="__all__" />
      <import module="os" />
      <scope doc="OS-specific conversion from a file system path to a relative&#10;URL of the 'file' scheme; not recommended for general use." ilk="function" name="pathname2url" signature="pathname2url(pathname)" />
      <scope doc="OS-specific conversion from a relative URL of the 'file'&#10;scheme to a file system path; not recommended for general&#10;use." ilk="function" name="url2pathname" signature="url2pathname(pathname)" />
      <import module="urllib" />
    </scope>
    <scope doc="# Code used to start processes when using the spawn or forkserver&#10;# start methods. # # multiprocessing/spawn.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.spawn">
      <variable citdl="bool" name="WINEXE" />
      <variable citdl="bool" name="WINSERVICE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Run code for process object if this in not the main process" ilk="function" name="freeze_support" signature="freeze_support()" />
      <scope doc="Returns prefix of command line used for spawning a child&#10;process" ilk="function" name="get_command_line" signature="get_command_line(**kwds)" />
      <scope ilk="function" name="get_executable" signature="get_executable()" />
      <scope doc="Return info about parent needed by child to unpickle process&#10;object" ilk="function" name="get_preparation_data" signature="get_preparation_data(name)" />
      <scope ilk="function" name="get_start_method" />
      <scope doc="Set sys.modules['__main__'] to module at main_path" ilk="function" name="import_main_path" signature="import_main_path(main_path)" />
      <scope doc="Return whether commandline indicates we are forking" ilk="function" name="is_forking" signature="is_forking(argv)" />
      <variable citdl="list" name="old_main_modules" />
      <import module="os" />
      <import module="pickle" />
      <scope doc="Try to get current process ready to unpickle process object" ilk="function" name="prepare" signature="prepare(data)" />
      <import module="process" />
      <import module="runpy" />
      <scope ilk="function" name="set_executable" signature="set_executable(exe)" />
      <scope ilk="function" name="set_start_method" />
      <scope doc="Run code specifed by data received over pipe" ilk="function" name="spawn_main" signature="spawn_main(pipe_handle, parent_pid=None, tracker_fd=None)" />
      <import module="sys" />
      <import module="types" />
      <import module="util" />
    </scope>
    <scope doc="This is an implementation of decimal floating point arithmetic based on&#10;the General Decimal Arithmetic Specification:  http://speleotrove.com/decimal/decarith.html  and IEEE standard 854-1987:  http://en.wikipedia.org/wiki/IEEE_854-1987  Decimal floating point has finite precision with arbitrarily large bounds. " ilk="blob" lang="Python3" name="_pydecimal">
      <variable citdl="Context" name="BasicContext" />
      <scope classrefs="DecimalException" doc="Exponent of a 0 changed to fit bounds.&#10;This occurs and signals clamped if the exponent of a result has been altered in order to fit the constraints of a specific concrete representation.  This may occur when the exponent of a zero result would be outside the bounds of a representation, or when a large normal number would have an encoded exponent that cannot be represented.  In this latter case, the exponent is reduced to fit and the corresponding number of zero digits are appended to the coefficient (&quot;fold-down&quot;)." ilk="class" name="Clamped" />
      <scope classrefs="object" doc="Contains the context for a Decimal instance.&#10;Contains: prec - precision (for use in rounding, division, square roots..) rounding - rounding type (how you round) traps - If traps[exception] = 1, then the exception is raised when it is caused.  Otherwise, a value is substituted in. flags  - When an exception is caused, flags[exception] is set. (Whether or not the trap_enabler is set) Should be reset by user of Decimal instance. Emin -   Minimum exponent" ilk="class" name="Context">
        <scope doc="Creates a new Decimal instance but using self as context." ilk="function" name="create_decimal" signature="create_decimal(self, num='0')" />
        <scope doc="Returns a shallow copy from self." ilk="function" name="_shallow_copy" signature="_shallow_copy(self)" />
        <scope doc="Minus corresponds to unary prefix minus in Python." ilk="function" name="minus" signature="minus(self, a)" />
        <scope doc="Returns the natural (base e) logarithm of the operand." ilk="function" name="ln" signature="ln(self, a)" />
        <scope doc="Return True if the operand is a qNaN or sNaN; otherwise&#10;return False." ilk="function" name="is_nan" signature="is_nan(self, a)" />
        <scope doc="Applies the logical operation 'and' between each operand's&#10;digits." ilk="function" name="logical_and" signature="logical_and(self, a, b)" />
        <scope doc="Returns True if the two operands have the same exponent." ilk="function" name="same_quantum" signature="same_quantum(self, a, b)" />
        <scope doc="Returns the largest representable number smaller than a." ilk="function" name="next_minus" signature="next_minus(self, a)" />
        <scope doc="Return True if the operand is canonical; otherwise return&#10;False." ilk="function" name="is_canonical" signature="is_canonical(self, a)" />
        <scope doc="Returns to be &quot;a - b * n&quot;, where n is the integer nearest&#10;the exact value of &quot;x / b&quot; (if two integers are equally near&#10;then the even one is chosen)." ilk="function" name="remainder_near" signature="remainder_near(self, a, b)" />
        <scope doc="Decimal division in a specified context." ilk="function" name="divide" signature="divide(self, a, b)" />
        <scope doc="normalize reduces an operand to its simplest form." ilk="function" name="normalize" signature="normalize(self, a)" />
        <scope doc="Converts a number to a string, using scientific notation." ilk="function" name="to_sci_string" signature="to_sci_string(self, a)" />
        <scope doc="Rounds to an integer." ilk="function" name="to_integral_value" signature="to_integral_value(self, a)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="max_mag" signature="max_mag(self, a, b)" />
        <scope doc="Returns the same Decimal object." ilk="function" name="canonical" signature="canonical(self, a)" />
        <scope doc="Returns maximum exponent (= Emax - prec + 1)" ilk="function" name="Etop" signature="Etop(self)" />
        <scope ilk="function" name="__delattr__" signature="__delattr__(self, name)" />
        <scope doc="&gt;&gt;&gt; ExtendedContext.divmod(Decimal(8), Decimal(3))&#10;(Decimal('2'), Decimal('2')) &gt;&gt;&gt;&#10;ExtendedContext.divmod(Decimal(8), Decimal(4))&#10;(Decimal('2'), Decimal('0'))" ilk="function" name="divmod" signature="Return (a // b, a % b)." />
        <scope doc="Divides two numbers and returns the integer part of the&#10;result." ilk="function" name="divide_int" signature="divide_int(self, a, b)" />
        <scope doc="Returns a deep copy from self." ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope doc="Rounds to an integer." ilk="function" name="to_integral" signature="to_integral(self, a)" />
        <scope doc="Converts a number to a string, using scientific notation." ilk="function" name="to_eng_string" signature="to_eng_string(self, a)" />
        <scope doc="Applies the logical operation 'xor' between each operand's&#10;digits." ilk="function" name="logical_xor" signature="logical_xor(self, a, b)" />
        <scope doc="Returns the smallest representable number larger than a." ilk="function" name="next_plus" signature="next_plus(self, a)" />
        <scope doc="Return the sum of the two operands." ilk="function" name="add" signature="add(self, a, b)" />
        <scope doc="Returns Etiny (= Emin - prec + 1)" ilk="function" name="Etiny" signature="Etiny(self)" />
        <scope doc="# Support for pickling, copy, and deepcopy" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Sets the rounding type." ilk="function" name="_set_rounding" signature="_set_rounding(self, type)" />
        <scope doc="Square root of a non-negative number to context precision." ilk="function" name="sqrt" signature="sqrt(self, a)" />
        <scope doc="Returns the first operand after adding the second value its&#10;exp." ilk="function" name="scaleb" signature="scaleb(self, a, b)" />
        <scope doc="Return True if the operand is subnormal; otherwise return&#10;False." ilk="function" name="is_subnormal" signature="is_subnormal(self, a)" />
        <scope doc="Returns the number closest to a, in direction towards b." ilk="function" name="next_toward" signature="next_toward(self, a, b)" />
        <scope doc="max compares two values numerically and returns the maximum." ilk="function" name="max" signature="max(self, a, b)" />
        <scope doc="Return True if the operand is negative; otherwise return&#10;False." ilk="function" name="is_signed" signature="is_signed(self, a)" />
        <scope doc="Returns a copy of the decimal object." ilk="function" name="copy_decimal" signature="copy_decimal(self, a)" />
        <scope doc="Reset all traps to zero" ilk="function" name="clear_traps" signature="clear_traps(self)" />
        <scope doc="Stop ignoring the flags, if they are raised" ilk="function" name="_regard_flags" signature="_regard_flags(self, *flags)" />
        <scope doc="Return True if the operand is a quiet NaN; otherwise return&#10;False." ilk="function" name="is_qnan" signature="is_qnan(self, a)" />
        <scope doc="Creates a new Decimal instance from a float but rounding&#10;using self as the context." ilk="function" name="create_decimal_from_float" signature="create_decimal_from_float(self, f)" />
        <scope doc="Return the difference between the two operands." ilk="function" name="subtract" signature="subtract(self, a, b)" />
        <scope doc="Reset all flags to zero" ilk="function" name="clear_flags" signature="clear_flags(self)" />
        <scope doc="Returns an indication of the class of the operand." ilk="function" name="number_class" signature="number_class(self, a)" />
        <scope ilk="function" name="_set_integer_check" signature="_set_integer_check(self, name, value, vmin, vmax)" />
        <scope doc="Returns a copy of the operand with the sign set to 0." ilk="function" name="copy_abs" signature="copy_abs(self, a)" />
        <scope doc="Return True if the operand is a zero; otherwise return&#10;False." ilk="function" name="is_zero" signature="is_zero(self, a)" />
        <scope doc="Returns the remainder from integer division." ilk="function" name="remainder" signature="remainder(self, a, b)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="min_mag" signature="min_mag(self, a, b)" />
        <scope doc="Returns a multiplied by b, plus c." ilk="function" name="fma" signature="fma(self, a, b, c)" />
        <scope doc="Compares two operands using their abstract representation&#10;ignoring sign." ilk="function" name="compare_total_mag" signature="compare_total_mag(self, a, b)" />
        <scope doc="Return True if the operand is a signaling NaN; otherwise&#10;return False." ilk="function" name="is_snan" signature="is_snan(self, a)" />
        <scope doc="Plus corresponds to unary prefix plus in Python." ilk="function" name="plus" signature="plus(self, a)" />
        <scope doc="Rounds to an integer." ilk="function" name="to_integral_exact" signature="to_integral_exact(self, a)" />
        <scope doc="Compares values numerically." ilk="function" name="compare" signature="compare(self, a, b)" />
        <scope ilk="function" name="__setattr__" signature="__setattr__(self, name, value)" />
        <scope doc="Copies the second operand's sign to the first one." ilk="function" name="copy_sign" signature="copy_sign(self, a, b)" />
        <scope doc="Returns a value equal to 'a' (rounded), having the exponent&#10;of 'b'." ilk="function" name="quantize" signature="quantize(self, a, b)" />
        <scope doc="Applies the logical operation 'or' between each operand's&#10;digits." ilk="function" name="logical_or" signature="logical_or(self, a, b)" />
        <scope doc="Returns the base 10 logarithm of the operand." ilk="function" name="log10" signature="log10(self, a)" />
        <scope ilk="function" name="_set_signal_dict" signature="_set_signal_dict(self, name, d)" />
        <scope doc="Returns e ** a." ilk="function" name="exp" signature="exp(self, a)" />
        <scope ilk="function" name="_apply" signature="_apply(self, a)" />
        <scope doc="Compares two operands using their abstract representation." ilk="function" name="compare_total" signature="compare_total(self, a, b)" />
        <scope ilk="function" name="__init__" signature="__init__(self, prec=None, rounding=None, Emin=None, Emax=None, capitals=None, clamp=None, flags=None, traps=None, _ignored_flags=None)" />
        <scope doc="Return True if the operand is infinite; otherwise return&#10;False." ilk="function" name="is_infinite" signature="is_infinite(self, a)" />
        <scope doc="Ignore the flags, if they are raised" ilk="function" name="_ignore_flags" signature="_ignore_flags(self, *flags)" />
        <scope doc="Return True if the operand is finite; otherwise return&#10;False." ilk="function" name="is_finite" signature="is_finite(self, a)" />
        <scope doc="min compares two values numerically and returns the minimum." ilk="function" name="min" signature="min(self, a, b)" />
        <scope doc="Show the current context." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Returns a rotated copy of a, b times." ilk="function" name="rotate" signature="rotate(self, a, b)" />
        <scope doc="Compares the values of the two operands numerically." ilk="function" name="compare_signal" signature="compare_signal(self, a, b)" />
        <scope doc="multiply multiplies two operands." ilk="function" name="multiply" signature="multiply(self, a, b)" />
        <scope doc="Ignore all flags, if they are raised" ilk="function" name="_ignore_all_flags" signature="_ignore_all_flags(self)" />
        <scope doc="Returns a shifted copy of a, b times." ilk="function" name="shift" signature="shift(self, a, b)" />
        <scope doc="Returns a copy of the operand with the sign inverted." ilk="function" name="copy_negate" signature="copy_negate(self, a)" />
        <scope doc="Just returns 10, as this is Decimal, :)" ilk="function" name="radix" signature="radix(self)" />
        <scope doc="Returns a deep copy from self." ilk="function" name="copy" signature="copy(self)" />
        <scope doc="Handles an error" ilk="function" name="_raise_error" signature="_raise_error(self, condition, explanation=None, *args)" />
        <scope doc="Return True if the operand is a normal number; otherwise&#10;return False." ilk="function" name="is_normal" signature="is_normal(self, a)" />
        <scope doc="Invert all the digits in the operand." ilk="function" name="logical_invert" signature="logical_invert(self, a)" />
        <scope doc="Returns the exponent of the magnitude of the operand's MSD." ilk="function" name="logb" signature="logb(self, a)" />
        <scope doc="Raises a to the power of b, to modulo if given." ilk="function" name="power" signature="power(self, a, b, modulo=None)" />
      </scope>
      <scope classrefs="InvalidOperation" doc="Trying to convert badly formed string.&#10;This occurs and signals invalid-operation if an string is being converted to a number and it does not conform to the numeric string syntax.  The result is [0,qNaN]." ilk="class" name="ConversionSyntax">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <scope classrefs="object" doc="Floating point class for decimal arithmetic.&#10;" ilk="class" name="Decimal">
        <scope doc="Rounds down (not towards 0 if negative)" ilk="function" name="_round_floor" signature="_round_floor(self, prec)" />
        <scope doc="Float representation." ilk="function" name="__float__" signature="__float__(self)" />
        <scope doc="Returns True if self is even. Assumes self is an integer." ilk="function" name="_iseven" signature="_iseven(self)" />
        <scope doc="Return True if self is finite; otherwise return False." ilk="function" name="is_finite" signature="is_finite(self)" />
        <scope doc="Return True if self is a qNaN or sNaN; otherwise return&#10;False." ilk="function" name="is_nan" signature="is_nan(self)" />
        <scope doc="Swaps self/other and returns __truediv__." ilk="function" name="__rtruediv__" signature="__rtruediv__(self, other, context=None)" />
        <scope doc="Swaps self/other and returns __divmod__." ilk="function" name="__rdivmod__" signature="__rdivmod__(self, other, context=None)" />
        <scope doc="Applies an 'and' operation between self and other's digits." ilk="function" name="logical_and" signature="logical_and(self, other, context=None)" />
        <scope doc="Returns the smaller value." ilk="function" name="min" signature="min(self, other, context=None)" />
        <scope doc="Return True if self is a signaling NaN; otherwise return&#10;False." ilk="function" name="is_snan" signature="is_snan(self)" />
        <scope doc="Swaps self/other and returns __floordiv__." ilk="function" name="__rfloordiv__" signature="__rfloordiv__(self, other, context=None)" />
        <scope doc="Return True if self is canonical; otherwise return False." ilk="function" name="is_canonical" signature="is_canonical(self)" />
        <scope doc="Round self to the nearest integer, or to a given precision." ilk="function" name="__round__" signature="__round__(self, n=None)" />
        <scope doc="Remainder nearest to 0-  abs(remainder-near) &lt;= other/2" ilk="function" name="remainder_near" signature="remainder_near(self, other, context=None)" />
        <scope doc="self % other" ilk="function" name="__mod__" signature="__mod__(self, other, context=None)" />
        <scope doc="Also known as round-towards-0, truncate." ilk="function" name="_round_down" signature="_round_down(self, prec)" />
        <scope doc="Normalize- strip trailing 0s, change anything equal to 0 to&#10;0e0" ilk="function" name="normalize" signature="normalize(self, context=None)" />
        <scope doc="Converts a float to a decimal number, exactly." ilk="function" name="from_float" />
        <scope doc="Returns self + other." ilk="function" name="__add__" signature="__add__(self, other, context=None)" />
        <scope doc="Round 5 down" ilk="function" name="_round_half_down" signature="_round_half_down(self, prec)" />
        <scope doc="Return (self // other, self % other)" ilk="function" name="__divmod__" signature="Return (self // other, self % other)" />
        <scope doc="Rounds to the nearest integer, without raising inexact,&#10;rounded." ilk="function" name="to_integral_value" signature="to_integral_value(self, rounding=None, context=None)" />
        <scope doc="Returns the smallest representable number larger than&#10;itself." ilk="function" name="next_plus" signature="next_plus(self, context=None)" />
        <scope doc="Attempt to compute self**other exactly." ilk="function" name="_power_exact" signature="_power_exact(self, other, p)" />
        <scope doc="Return string representation of the number in scientific&#10;notation." ilk="function" name="__str__" signature="__str__(self, eng=False, context=None)" />
        <scope doc="Returns the same Decimal object." ilk="function" name="canonical" signature="canonical(self)" />
        <scope doc="Swaps self/other and returns __pow__." ilk="function" name="__rpow__" signature="__rpow__(self, other, context=None)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="min_mag" signature="min_mag(self, other, context=None)" />
        <scope doc="Returns whether the number is not actually one." ilk="function" name="_isnan" signature="_isnan(self)" />
        <scope doc="Returns whether the number is infinite" ilk="function" name="_isinfinity" signature="_isinfinity(self)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other, context=None)" />
        <scope doc="Returns self + other." ilk="function" name="__radd__" signature="__radd__(self, other, context=None)" />
        <scope doc="Returns the absolute value of self." ilk="function" name="__abs__" signature="__abs__(self, round=True, context=None)" />
        <scope doc="Rounds to the nearest integer, without raising inexact,&#10;rounded." ilk="function" name="to_integral" signature="to_integral(self, rounding=None, context=None)" />
        <scope doc="Return the square root of self." ilk="function" name="sqrt" signature="sqrt(self, context=None)" />
        <scope doc="Rescale self so that the exponent is exp, either by padding&#10;with zeros or by truncating digits, using the given rounding&#10;mode." ilk="function" name="_rescale" signature="_rescale(self, exp, rounding)" />
        <scope doc="Applies an 'xor' operation between self and other's digits." ilk="function" name="logical_xor" signature="logical_xor(self, other, context=None)" />
        <scope doc="Rounds 5 up (away from 0)" ilk="function" name="_round_half_up" signature="_round_half_up(self, prec)" />
        <scope doc="Return the floor of self, as an integer." ilk="function" name="__floor__" signature="__floor__(self)" />
        <scope doc="Swaps self/other and returns __mod__." ilk="function" name="__rmod__" signature="__rmod__(self, other, context=None)" />
        <scope doc="Round 5 to even, rest to nearest." ilk="function" name="_round_half_even" signature="_round_half_even(self, prec)" />
        <scope doc="Round if it is necessary to keep self within prec precision." ilk="function" name="_fix" signature="_fix(self, context)" />
        <scope doc="# Support for pickling, copy, and deepcopy" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Convert to engineering-type string." ilk="function" name="to_eng_string" signature="to_eng_string(self, context=None)" />
        <scope doc="Returns self operand after adding the second value to its&#10;exp." ilk="function" name="scaleb" signature="scaleb(self, other, context=None)" />
        <scope doc="Three argument version of __pow__" ilk="function" name="_power_modulo" signature="_power_modulo(self, other, modulo, context=None)" />
        <scope doc="Return True if self is subnormal; otherwise return False." ilk="function" name="is_subnormal" signature="is_subnormal(self, context=None)" />
        <scope ilk="function" name="__gt__" signature="__gt__(self, other, context=None)" />
        <scope doc="Round down unless digit prec-1 is 0 or 5." ilk="function" name="_round_05up" signature="_round_05up(self, prec)" />
        <scope doc="Return True if self is a quiet NaN; otherwise return False." ilk="function" name="is_qnan" signature="is_qnan(self)" />
        <scope doc="Returns the larger value." ilk="function" name="max" signature="max(self, other, context=None)" />
        <scope doc="Create a decimal point instance." ilk="function" name="__new__" signature="__new__(cls, value='0', context=None)" />
        <scope doc="Compare the two non-NaN decimal instances self and other." ilk="function" name="_cmp" signature="_cmp(self, other)" />
        <scope doc="Converts self to an int, truncating if necessary." ilk="function" name="__int__" signature="__int__(self)" />
        <scope doc="Return True if self is nonzero; otherwise return False." ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="Compares the values numerically with their sign ignored." ilk="function" name="max_mag" signature="max_mag(self, other, context=None)" />
        <scope doc="Represents the number as a triple tuple." ilk="function" name="as_tuple" signature="as_tuple(self)" />
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Returns the number closest to self, in the direction towards&#10;other." ilk="function" name="next_toward" signature="next_toward(self, other, context=None)" />
        <scope doc="Version of _check_nans used for the signaling comparisons&#10;compare_signal, __le__, __lt__, __ge__, __gt__." ilk="function" name="_compare_check_nans" signature="_compare_check_nans(self, other, context)" />
        <scope doc="Format a Decimal instance according to the given specifier." ilk="function" name="__format__" signature="__format__(self, specifier, context=None, _localeconv=None)" />
        <scope doc="Returns a copy with the sign set to 0." ilk="function" name="copy_abs" signature="copy_abs(self)" />
        <scope doc="Return self * other." ilk="function" name="__mul__" signature="__mul__(self, other, context=None)" />
        <scope doc="Return True if self is a zero; otherwise return False." ilk="function" name="is_zero" signature="is_zero(self)" />
        <scope doc="Decapitate the payload of a NaN to fit the context" ilk="function" name="_fix_nan" signature="_fix_nan(self, context)" />
        <scope doc="Fused multiply-add." ilk="function" name="fma" signature="fma(self, other, third, context=None)" />
        <scope doc="Compares self to other using abstract repr., ignoring sign." ilk="function" name="compare_total_mag" signature="compare_total_mag(self, other, context=None)" />
        <scope doc="Converts self to an int, truncating if necessary." ilk="function" name="__trunc__" signature="__trunc__(self)" />
        <scope doc="Returns whether self is an integer" ilk="function" name="_isinteger" signature="_isinteger(self)" />
        <scope ilk="function" name="__complex__" signature="__complex__(self)" />
        <scope doc="Returns an indication of the class of self." ilk="function" name="number_class" signature="number_class(self, context=None)" />
        <scope doc="Return self ** other [ % modulo]." ilk="function" name="__pow__" signature="__pow__(self, other, modulo=None, context=None)" />
        <scope doc="Rounds to a nearby integer." ilk="function" name="to_integral_exact" signature="to_integral_exact(self, rounding=None, context=None)" />
        <scope doc="Return the ceiling of self, as an integer." ilk="function" name="__ceil__" signature="__ceil__(self)" />
        <scope doc="Compare self to other." ilk="function" name="compare" signature="compare(self, other, context=None)" />
        <scope ilk="function" name="conjugate" signature="conjugate(self)" />
        <scope doc="Returns whether the number is not actually one." ilk="function" name="_check_nans" signature="_check_nans(self, other=None, context=None)" />
        <scope doc="Returns self with the sign of other." ilk="function" name="copy_sign" signature="copy_sign(self, other, context=None)" />
        <scope doc="Returns the largest representable number smaller than&#10;itself." ilk="function" name="next_minus" signature="next_minus(self, context=None)" />
        <scope doc="Quantize self so its exponent is the same as that of exp." ilk="function" name="quantize" signature="quantize(self, exp, rounding=None, context=None)" />
        <scope doc="Rounds up (not away from 0 if negative.)" ilk="function" name="_round_ceiling" signature="_round_ceiling(self, prec)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other, context=None)" />
        <scope doc="Applies an 'or' operation between self and other's digits." ilk="function" name="logical_or" signature="logical_or(self, other, context=None)" />
        <scope doc="Return True if self is negative; otherwise return False." ilk="function" name="is_signed" signature="is_signed(self)" />
        <scope doc="Returns e ** self." ilk="function" name="exp" signature="exp(self, context=None)" />
        <scope doc="Returns the base 10 logarithm of self." ilk="function" name="log10" signature="log10(self, context=None)" />
        <scope doc="Returns a copy with the sign switched." ilk="function" name="__neg__" signature="__neg__(self, context=None)" />
        <scope doc="Returns a copy, unless it is a sNaN." ilk="function" name="__pos__" signature="__pos__(self, context=None)" />
        <scope ilk="function" name="__eq__" signature="__eq__(self, other, context=None)" />
        <scope doc="Return the adjusted exponent of self" ilk="function" name="adjusted" signature="adjusted(self)" />
        <scope doc="Return self * other." ilk="function" name="__rmul__" signature="__rmul__(self, other, context=None)" />
        <scope doc="Return True if self is a logical operand." ilk="function" name="_islogical" signature="_islogical(self)" />
        <scope doc="Rounds away from 0." ilk="function" name="_round_up" signature="_round_up(self, prec)" />
        <scope doc="Compares self to other using the abstract representations." ilk="function" name="compare_total" signature="compare_total(self, other, context=None)" />
        <scope doc="x.__hash__() &lt;==&gt; hash(x)" ilk="function" name="__hash__" signature="x.__hash__() &lt;==&gt; hash(x)" />
        <scope doc="Return True if self is infinite; otherwise return False." ilk="function" name="is_infinite" signature="is_infinite(self)" />
        <scope doc="Return True if self is a normal number; otherwise return&#10;False." ilk="function" name="is_normal" signature="is_normal(self, context=None)" />
        <scope doc="self // other" ilk="function" name="__floordiv__" signature="__floordiv__(self, other, context=None)" />
        <scope doc="Compute a lower bound for the adjusted exponent of&#10;self.ln()." ilk="function" name="_ln_exp_bound" signature="_ln_exp_bound(self)" />
        <scope doc="Returns the natural (base e) logarithm of self." ilk="function" name="ln" signature="ln(self, context=None)" />
        <scope doc="Compute a lower bound for the adjusted exponent of&#10;self.log10()." ilk="function" name="_log10_exp_bound" signature="_log10_exp_bound(self)" />
        <scope doc="Return True if self and other have the same exponent;&#10;otherwise return False." ilk="function" name="same_quantum" signature="same_quantum(self, other, context=None)" />
        <scope doc="Represents the number as an instance of Decimal." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope doc="Compares self to the other operand numerically." ilk="function" name="compare_signal" signature="compare_signal(self, other, context=None)" />
        <scope doc="Return self - other" ilk="function" name="__sub__" signature="__sub__(self, other, context=None)" />
        <scope doc="Assumes that neither self nor other is a NaN, that self is&#10;not infinite and that other is nonzero." ilk="function" name="_divide" signature="Return (self // other, self % other), to context.prec precision." />
        <scope doc="Returns a shifted copy of self, value-of-other times." ilk="function" name="shift" signature="shift(self, other, context=None)" />
        <scope doc="Returns a copy with the sign inverted." ilk="function" name="copy_negate" signature="copy_negate(self)" />
        <scope doc="Just returns 10, as this is Decimal, :)" ilk="function" name="radix" signature="radix(self)" />
        <scope ilk="function" name="__lt__" signature="__lt__(self, other, context=None)" />
        <scope doc="Return other - self" ilk="function" name="__rsub__" signature="__rsub__(self, other, context=None)" />
        <scope doc="Return self / other." ilk="function" name="__truediv__" signature="__truediv__(self, other, context=None)" />
        <scope doc="Round a nonzero, nonspecial Decimal to a fixed number of&#10;significant figures, using the given rounding mode." ilk="function" name="_round" signature="_round(self, places, rounding)" />
        <scope doc="Invert all its digits." ilk="function" name="logical_invert" signature="logical_invert(self, context=None)" />
        <scope ilk="function" name="_fill_logical" signature="_fill_logical(self, context, opa, opb)" />
        <scope doc="Returns the exponent of the magnitude of self's MSD." ilk="function" name="logb" signature="logb(self, context=None)" />
        <scope doc="Returns a rotated copy of self, value-of-other times." ilk="function" name="rotate" signature="rotate(self, other, context=None)" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Base exception class.&#10;Used exceptions derive from this. If an exception derives from another exception besides this (such as Underflow (Inexact, Rounded, Subnormal) that indicates that it is only called if the others are present.  This isn't actually used for anything, though.  handle  -- Called when context._raise_error is called and the trap_enabler is not set.  First argument is self, second is the context.  More arguments can be given, those being after the explanation in _raise_error (For example," ilk="class" name="DecimalException">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <scope classrefs="tuple" doc="DecimalTuple(sign, digits, exponent)&#10;" ilk="class" name="DecimalTuple">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new DecimalTuple object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Create new instance of DecimalTuple(sign, digits, exponent)" ilk="function" name="__new__" signature="__new__(_cls, sign, digits, exponent)" />
        <scope doc="Make a new DecimalTuple object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="Context" name="DefaultContext" />
      <scope classrefs="DecimalException ZeroDivisionError" doc="Division by 0.&#10;This occurs and signals division-by-zero if division of a finite number by zero was attempted (during a divide-integer or divide operation, or a power operation with negative right-hand operand), and the dividend was not zero.  The result of the operation is [sign,inf], where sign is the exclusive or of the signs of the operands for divide, or is 1 for an odd power of -0, for power." ilk="class" name="DivisionByZero">
        <scope ilk="function" name="handle" signature="handle(self, context, sign, *args)" />
      </scope>
      <scope classrefs="InvalidOperation" doc="Cannot perform the division adequately.&#10;This occurs and signals invalid-operation if the integer result of a divide-integer or remainder operation had too many digits (would be longer than precision).  The result is [0,qNaN]." ilk="class" name="DivisionImpossible">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <scope classrefs="InvalidOperation ZeroDivisionError" doc="Undefined result of division.&#10;This occurs and signals invalid-operation if division by zero was attempted (during a divide-integer, divide, or remainder operation), and the dividend is also zero.  The result is [0,qNaN]." ilk="class" name="DivisionUndefined">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <variable citdl="Context" name="ExtendedContext" />
      <scope classrefs="DecimalException TypeError" doc="Enable stricter semantics for mixing floats and Decimals.&#10;If the signal is not trapped (default), mixing floats and Decimals is permitted in the Decimal() constructor, context.create_decimal() and all comparison operators. Both conversion and comparisons are exact. Any occurrence of a mixed operation is silently recorded by setting FloatOperation in the context flags.  Explicit conversions with Decimal.from_float() or context.create_decimal_from_float() do not set the flag.  Otherwise (the signal is trapped), only equality comparisons and explicit conversions are silent. All other mixed operations raise FloatOperation." ilk="class" name="FloatOperation" />
      <variable citdl="bool" name="HAVE_THREADS" />
      <scope classrefs="DecimalException" doc="Had to round, losing information.&#10;This occurs and signals inexact whenever the result of an operation is not exact (that is, it needed to be rounded and any discarded digits were non-zero), or if an overflow or underflow condition occurs.  The result in all cases is unchanged.  The inexact signal may be tested (or trapped) to determine if a given operation (or sequence of operations) was inexact." ilk="class" name="Inexact" />
      <scope classrefs="InvalidOperation" doc="Invalid context.  Unknown rounding, for example.&#10;This occurs and signals invalid-operation if an invalid context was detected during an operation.  This can occur if contexts are not checked on creation and either the precision exceeds the capability of the underlying concrete representation or an unknown or unsupported rounding was specified.  These aspects of the context need only be checked when the values are required to be used.  The result is [0,qNaN]." ilk="class" name="InvalidContext">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <scope classrefs="DecimalException" doc="An invalid operation was performed.&#10;Various bad things cause this:  Something creates a signaling NaN -INF + INF 0 * (+-)INF (+-)INF / (+-)INF x % 0 (+-)INF % x x._rescale( non-integer ) sqrt(-x) , x &gt; 0" ilk="class" name="InvalidOperation">
        <scope ilk="function" name="handle" signature="handle(self, context, *args)" />
      </scope>
      <variable citdl="int" name="MAX_EMAX" />
      <variable citdl="int" name="MAX_PREC" />
      <variable citdl="int" name="MIN_EMIN" />
      <variable citdl="int" name="MIN_ETINY" />
      <scope classrefs="Inexact Rounded" doc="Numerical overflow.&#10;This occurs and signals overflow if the adjusted exponent of a result (from a conversion or from an operation that is not an attempt to divide by zero), after rounding, would be greater than the largest value that can be handled by the implementation (the value Emax).  The result depends on the rounding mode:  For round-half-up and round-half-even (and for round-half-down and round-up, if implemented), the result of the operation is [sign,inf], where sign is the sign of the intermediate result.  For round-down, the" ilk="class" name="Overflow">
        <scope ilk="function" name="handle" signature="handle(self, context, sign, *args)" />
      </scope>
      <variable citdl="str" name="ROUND_05UP" />
      <variable citdl="str" name="ROUND_CEILING" />
      <variable citdl="str" name="ROUND_DOWN" />
      <variable citdl="str" name="ROUND_FLOOR" />
      <variable citdl="str" name="ROUND_HALF_DOWN" />
      <variable citdl="str" name="ROUND_HALF_EVEN" />
      <variable citdl="str" name="ROUND_HALF_UP" />
      <variable citdl="str" name="ROUND_UP" />
      <scope classrefs="DecimalException" doc="Number got rounded (not  necessarily changed during rounding).&#10;This occurs and signals rounded whenever the result of an operation is rounded (that is, some zero or non-zero digits were discarded from the coefficient), or if an overflow or underflow condition occurs.  The result in all cases is unchanged.  The rounded signal may be tested (or trapped) to determine if a given operation (or sequence of operations) caused a loss of precision." ilk="class" name="Rounded" />
      <scope classrefs="DecimalException" doc="Exponent &lt; Emin before rounding.&#10;This occurs and signals subnormal whenever the result of a conversion or operation is subnormal (that is, its adjusted exponent is less than Emin, before any rounding).  The result in all cases is unchanged.  The subnormal signal may be tested (or trapped) to determine if a given or operation (or sequence of operations) yielded a subnormal result." ilk="class" name="Subnormal" />
      <scope classrefs="Inexact Rounded Subnormal" doc="Numerical underflow with result rounded to 0.&#10;This occurs and signals underflow if a result is inexact and the adjusted exponent of the result would be smaller (more negative) than the smallest value that can be handled by the implementation (the value Emin).  That is, the result is both inexact and subnormal.  The result after an underflow will be a subnormal number rounded, if necessary, so that its exponent is not less than Etiny.  This may result in 0 with the sign of the intermediate result and an exponent of Etiny.  In all cases, Inexact, Rounded, and Subnormal will also be raised." ilk="class" name="Underflow" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__libmpdec_version__" />
      <variable citdl="str" name="__xname__" />
      <import module="_locale" />
      <import module="_math" />
      <import module="_numbers" />
      <scope doc="Returns this thread's context." ilk="function" name="getcontext" signature="getcontext(_local=&lt;_thread._local object at 0x7f118377e258&gt;)" />
      <scope doc="Return a context manager for a copy of the supplied context" ilk="function" name="localcontext" signature="localcontext(ctx=None)" />
      <scope doc="Set this thread's context to context." ilk="function" name="setcontext" signature="setcontext(context, _local=&lt;_thread._local object at 0x7f118377e258&gt;)" />
    </scope>
    <scope doc="IMAP4 client.&#10;Based on RFC 2060.  Public class:           IMAP4 Public variable:        Debug Public functions:       Internaldate2tuple Int2AP ParseFlags Time2Internaldate" ilk="blob" lang="Python3" name="imaplib">
      <variable citdl="tuple" name="AllowedVersions" />
      <variable citdl="bytes" name="CRLF" />
      <variable citdl="dict" name="Commands" />
      <variable citdl="SRE_Pattern" name="Continuation" />
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <variable citdl="int" name="Debug" />
      <variable citdl="SRE_Pattern" name="Flags" />
      <variable citdl="bool" name="HAVE_SSL" />
      <scope classrefs="object" doc="IMAP4 client class.&#10;Instantiate with: IMAP4([host[, port]])  host - host's name (default: localhost); port - port number (default: standard IMAP4 port).  All IMAP4rev1 commands are supported by methods of the same name (in lower-case).  All arguments to commands are converted to strings, except for AUTHENTICATE, and the last argument to APPEND which is passed as" ilk="class" name="IMAP4">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="_command" signature="_command(self, name, *args)" />
        <scope doc="Permanently remove deleted items from selected mailbox." ilk="function" name="expunge" signature="expunge(self)" />
        <scope ilk="function" name="_dump_ur" signature="_dump_ur(self, dict)" />
        <scope ilk="function" name="_mode_ascii" signature="_mode_ascii(self)" />
        <scope ilk="function" name="_mode_utf8" signature="_mode_utf8(self)" />
        <scope ilk="function" name="_simple_command" signature="_simple_command(self, name, *args)" />
        <scope ilk="function" name="_connect" signature="_connect(self)" />
        <scope doc="Close I/O established in &quot;open&quot;." ilk="function" name="shutdown" signature="shutdown(self)" />
        <scope doc="(typ, [data, ...]) = &lt;instance&gt;.fetch(message_set,&#10;message_parts)" ilk="function" name="fetch" signature="Fetch (parts of) messages." />
        <scope ilk="function" name="_mesg" signature="_mesg(self, s, secs=None)" />
        <scope ilk="function" name="_get_line" signature="_get_line(self)" />
        <scope doc="Checkpoint mailbox on server." ilk="function" name="check" signature="check(self)" />
        <scope doc="Subscribe to new mailbox." ilk="function" name="subscribe" signature="subscribe(self, mailbox)" />
        <scope ilk="function" name="_get_tagged_response" signature="_get_tagged_response(self, tag)" />
        <scope doc="IMAPrev1 extension THREAD command." ilk="function" name="thread" signature="thread(self, threading_algorithm, charset, *search_criteria)" />
        <scope doc="Identify client using plaintext password." ilk="function" name="login" signature="login(self, user, password)" />
        <scope doc="Delete old mailbox." ilk="function" name="delete" signature="delete(self, mailbox)" />
        <scope doc="Send NOOP command." ilk="function" name="noop" signature="noop(self)" />
        <scope ilk="function" name="print_log" signature="print_log(self)" />
        <scope doc="Execute &quot;command arg ...&quot; with messages identified by UID,&#10;rather than message number." ilk="function" name="uid" signature="uid(self, command, *args)" />
        <scope doc="(typ, [data]) = &lt;instance&gt;.getannotation(mailbox, entry,&#10;attribute) Retrieve ANNOTATIONs." ilk="function" name="getannotation" signature="getannotation(self, mailbox, entry, attribute)" />
        <scope doc="Get the quota root's resource usage and limits." ilk="function" name="getquota" signature="getquota(self, root)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Allow simple extension commands notified by server in&#10;CAPABILITY response." ilk="function" name="xatom" signature="xatom(self, name, *args)" />
        <scope ilk="function" name="_get_response" signature="_get_response(self)" />
        <scope doc="(typ, [data]) = &lt;instance&gt;.capability() Fetch capabilities&#10;list from server." ilk="function" name="capability" signature="capability(self)" />
        <scope doc="Rename old mailbox name to new." ilk="function" name="rename" signature="rename(self, oldmailbox, newmailbox)" />
        <scope doc="(typ, [data]) = &lt;instance&gt;.setannotation(mailbox[, entry,&#10;attribute]+) Set ANNOTATIONs." ilk="function" name="setannotation" signature="setannotation(self, *args)" />
        <scope doc="Unsubscribe from old mailbox." ilk="function" name="unsubscribe" signature="unsubscribe(self, mailbox)" />
        <scope doc="Alters flag dispositions for messages in mailbox." ilk="function" name="store" signature="store(self, message_set, command, flags)" />
        <scope doc="IMAP4rev1 extension SORT command." ilk="function" name="sort" signature="sort(self, sort_criteria, charset, *search_criteria)" />
        <scope doc="Authobject to use with CRAM-MD5 authentication." ilk="function" name="_CRAM_MD5_AUTH" signature="_CRAM_MD5_AUTH(self, challenge)" />
        <scope doc="List 'subscribed' mailbox names in directory matching&#10;pattern." ilk="function" name="lsub" signature="lsub(self, directory='&quot;&quot;', pattern='*')" />
        <scope doc="Show my ACLs for a mailbox (i.e." ilk="function" name="myrights" signature="myrights(self, mailbox)" />
        <scope doc="Search mailbox for matching messages." ilk="function" name="search" signature="search(self, charset, *criteria)" />
        <scope doc="Get the ACLs for a mailbox." ilk="function" name="getacl" signature="getacl(self, mailbox)" />
        <scope doc="Send an RFC5161 enable string to the server." ilk="function" name="enable" signature="enable(self, capability)" />
        <scope doc="Create new mailbox." ilk="function" name="create" signature="create(self, mailbox)" />
        <scope doc="Select a mailbox." ilk="function" name="select" signature="select(self, mailbox='INBOX', readonly=False)" />
        <scope ilk="function" name="starttls" signature="starttls(self, ssl_context=None)" />
        <scope doc="List mailbox names in directory matching pattern." ilk="function" name="list" signature="list(self, directory='&quot;&quot;', pattern='*')" />
        <scope doc="Shutdown connection to server." ilk="function" name="logout" signature="logout(self)" />
        <scope ilk="function" name="_command_complete" signature="_command_complete(self, name, tag)" />
        <scope doc="Send data to remote." ilk="function" name="send" signature="send(self, data)" />
        <scope doc="Set a mailbox acl." ilk="function" name="setacl" signature="setacl(self, mailbox, who, what)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Close currently selected mailbox." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_match" signature="_match(self, cre, s)" />
        <scope ilk="function" name="_append_untagged" signature="_append_untagged(self, typ, dat)" />
        <scope doc="Fetch truncated part of a message." ilk="function" name="partial" signature="partial(self, message_num, message_part, start, length)" />
        <scope doc="Authenticate command - requires response processing." ilk="function" name="authenticate" signature="authenticate(self, mechanism, authobject)" />
        <scope ilk="function" name="_new_tag" signature="_new_tag(self)" />
        <scope doc="Append message to named mailbox." ilk="function" name="append" signature="append(self, mailbox, flags, date_time, message)" />
        <scope doc="Assume authentication as &quot;user&quot;." ilk="function" name="proxyauth" signature="proxyauth(self, user)" />
        <scope ilk="function" name="_create_socket" signature="_create_socket(self)" />
        <scope doc="Delete the ACLs (remove any rights) set for who on mailbox." ilk="function" name="deleteacl" signature="deleteacl(self, mailbox, who)" />
        <scope doc="Request named status conditions for mailbox." ilk="function" name="status" signature="status(self, mailbox, names)" />
        <scope doc="Set the quota root's resource limits." ilk="function" name="setquota" signature="setquota(self, root, limits)" />
        <scope doc="Returns IMAP namespaces ala rfc2342" ilk="function" name="namespace" signature="namespace(self)" />
        <scope doc="Return most recent 'RECENT' responses if any exist, else&#10;prompt server for an update using the 'NOOP' command." ilk="function" name="recent" signature="recent(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host='', port=143)" />
        <scope ilk="function" name="_get_capabilities" signature="_get_capabilities(self)" />
        <scope ilk="function" name="_log" signature="_log(self, line)" />
        <scope doc="Read line from remote." ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Setup connection to remote server on &quot;host:port&quot; (default:&#10;localhost:standard IMAP4 port)." ilk="function" name="open" signature="open(self, host='', port=143)" />
        <scope ilk="function" name="_quote" signature="_quote(self, arg)" />
        <scope doc="Force use of CRAM-MD5 authentication." ilk="function" name="login_cram_md5" signature="login_cram_md5(self, user, password)" />
        <scope doc="Copy 'message_set' messages onto end of 'new_mailbox'." ilk="function" name="copy" signature="copy(self, message_set, new_mailbox)" />
        <scope doc="Read 'size' bytes from remote." ilk="function" name="read" signature="read(self, size)" />
        <scope doc="Return data for response 'code' if received, or None." ilk="function" name="response" signature="response(self, code)" />
        <scope doc="Get the list of quota roots for the named mailbox." ilk="function" name="getquotaroot" signature="getquotaroot(self, mailbox)" />
        <scope doc="Return socket instance used to connect to IMAP4 server." ilk="function" name="socket" signature="socket(self)" />
        <scope ilk="function" name="_check_bye" signature="_check_bye(self)" />
        <scope ilk="function" name="_untagged_response" signature="_untagged_response(self, typ, dat, name)" />
      </scope>
      <variable citdl="int" name="IMAP4_PORT" />
      <scope classrefs="IMAP4" doc="IMAP4 client class over SSL connection&#10;Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile[, ssl_context]]]]])  host - host's name (default: localhost); port - port number (default: standard IMAP4 SSL port); keyfile - PEM formatted file that contains your private key (default: None); certfile - PEM formatted certificate chain file (default: None); ssl_context - a SSLContext object that contains your certificate chain and private key (default: None) Note: if ssl_context is provided, then parameters keyfile or certfile should not be set otherwise ValueError is raised." ilk="class" name="IMAP4_SSL">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host='', port=993, keyfile=None, certfile=None, ssl_context=None)" />
        <scope doc="Setup connection to remote server on &quot;host:port&quot;." ilk="function" name="open" signature="open(self, host='', port=993)" />
        <scope ilk="function" name="_create_socket" signature="_create_socket(self)" />
      </scope>
      <variable citdl="int" name="IMAP4_SSL_PORT" />
      <scope classrefs="IMAP4" doc="IMAP4 client class over a stream&#10;Instantiate with: IMAP4_stream(command)  &quot;command&quot; - a string that can be passed to subprocess.Popen()  for more documentation see the docstring of the parent class IMAP4." ilk="class" name="IMAP4_stream">
        <scope doc="Read 'size' bytes from remote." ilk="function" name="read" signature="read(self, size)" />
        <scope doc="Send data to remote." ilk="function" name="send" signature="send(self, data)" />
        <scope doc="Read line from remote." ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Setup a stream connection." ilk="function" name="open" signature="open(self, host=None, port=None)" />
        <scope doc="Close I/O established in &quot;open&quot;." ilk="function" name="shutdown" signature="shutdown(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, command)" />
      </scope>
      <scope doc="Convert integer to A-P string representation." ilk="function" name="Int2AP" signature="Int2AP(num)" />
      <variable citdl="SRE_Pattern" name="InternalDate" />
      <scope doc="Parse an IMAP4 INTERNALDATE string." ilk="function" name="Internaldate2tuple" signature="Internaldate2tuple(resp)" />
      <variable citdl="SRE_Pattern" name="Literal" />
      <variable citdl="SRE_Pattern" name="MapCRLF" />
      <variable citdl="dict" name="Mon2num" />
      <variable citdl="list" name="Months" />
      <scope doc="Convert IMAP4 flags response to python tuple." ilk="function" name="ParseFlags" signature="ParseFlags(resp)" />
      <variable citdl="SRE_Pattern" name="Response_code" />
      <scope doc="Convert date_time to IMAP4 INTERNALDATE representation." ilk="function" name="Time2Internaldate" signature="Time2Internaldate(date_time)" />
      <variable citdl="SRE_Pattern" name="Untagged_response" />
      <variable citdl="SRE_Pattern" name="Untagged_status" />
      <variable citdl="list" name="__all__" />
      <import module="binascii" />
      <import module="calendar" />
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="datetime">
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Return time object with same time but with tzinfo=None." ilk="function" name="time" />
        <scope doc="Return UTC time tuple, compatible with time.localtime()." ilk="function" name="utctimetuple" />
        <scope doc="tz -&gt; convert to local time in new timezone tz" ilk="function" name="astimezone" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return POSIX timestamp as float." ilk="function" name="timestamp" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return date object with same year, month and day." ilk="function" name="date" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return datetime with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return time object with same time and tzinfo." ilk="function" name="timetz" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="[sep] -&gt; string in ISO 8601 format, YYYY-MM-&#10;DDTHH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <import module="errno" />
      <import module="random" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="time" />
      <scope classrefs="object" doc="Difference between two datetime values.&#10;" ilk="class" name="timedelta">
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Total seconds in the duration." ilk="function" name="total_seconds" />
      </scope>
      <scope classrefs="tzinfo" doc="Fixed offset from UTC implementation of tzinfo.&#10;" ilk="class" name="timezone">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="If name is specified when timezone is created, returns the&#10;name." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return fixed offset." ilk="function" name="utcoffset" />
        <scope doc="datetime in UTC -&gt; datetime in local time." ilk="function" name="fromutc" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return None." ilk="function" name="dst" />
        <scope doc="pickle support" ilk="function" name="__getinitargs__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
    </scope>
    <scope doc="Find modules used by a script, using introspection.&#10;" ilk="blob" lang="Python3" name="modulefinder">
      <scope doc="# A Public interface" ilk="function" name="AddPackagePath" signature="AddPackagePath(packagename, path)" />
      <variable citdl="bytes" name="HAVE_ARGUMENT" />
      <variable citdl="bytes" name="IMPORT_NAME" />
      <variable citdl="bytes" name="LOAD_CONST" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Module">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, file=None, path=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ModuleFinder">
        <scope ilk="function" name="scan_code" signature="scan_code(self, co, m)" />
        <scope ilk="function" name="scan_opcodes_25" signature="scan_opcodes_25(self, co, unpack=&lt;built-in function unpack&gt;)" />
        <scope ilk="function" name="import_module" signature="import_module(self, partname, fqname, parent)" />
        <scope ilk="function" name="import_hook" signature="import_hook(self, name, caller=None, fromlist=None, level=-1)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, path=None, debug=0, excludes=[], replace_paths=[])" />
        <scope ilk="function" name="add_module" signature="add_module(self, fqname)" />
        <scope ilk="function" name="load_package" signature="load_package(self, fqname, pathname)" />
        <scope ilk="function" name="ensure_fromlist" signature="ensure_fromlist(self, m, fromlist, recursive=0)" />
        <scope ilk="function" name="replace_paths_in_code" signature="replace_paths_in_code(self, co)" />
        <scope ilk="function" name="find_module" signature="find_module(self, name, path, parent=None)" />
        <scope ilk="function" name="find_all_submodules" signature="find_all_submodules(self, m)" />
        <scope ilk="function" name="run_script" signature="run_script(self, pathname)" />
        <scope ilk="function" name="msg" signature="msg(self, level, str, *args)" />
        <scope doc="Print a report to stdout, listing the found modules with&#10;their paths, as well as modules that are missing, or seem to&#10;be missing." ilk="function" name="report" signature="report(self)" />
        <scope ilk="function" name="load_tail" signature="load_tail(self, q, tail)" />
        <scope ilk="function" name="load_file" signature="load_file(self, pathname)" />
        <scope ilk="function" name="_safe_import_hook" signature="_safe_import_hook(self, name, caller, fromlist, level=-1)" />
        <scope ilk="function" name="msgin" signature="msgin(self, *args)" />
        <scope ilk="function" name="determine_parent" signature="determine_parent(self, caller, level=-1)" />
        <scope doc="Return a list of modules that appear to be missing." ilk="function" name="any_missing" signature="any_missing(self)" />
        <scope ilk="function" name="find_head_package" signature="find_head_package(self, parent, name)" />
        <scope ilk="function" name="_add_badmodule" signature="_add_badmodule(self, name, caller)" />
        <scope doc="Return two lists, one with modules that are certainly&#10;missing and one with modules that *may* be missing." ilk="function" name="any_missing_maybe" signature="any_missing_maybe(self)" />
        <scope ilk="function" name="msgout" signature="msgout(self, *args)" />
        <scope ilk="function" name="load_module" signature="load_module(self, fqname, fp, pathname, file_info)" />
      </scope>
      <scope ilk="function" name="ReplacePackage" signature="ReplacePackage(oldname, newname)" />
      <variable citdl="bytes" name="STORE_GLOBAL" />
      <variable citdl="bytes" name="STORE_NAME" />
      <variable citdl="list" name="STORE_OPS" />
      <import module="dis" />
      <import module="imp" />
      <import module="importlib" />
      <import module="marshal" />
      <import module="os" />
      <variable citdl="dict" name="packagePathMap" />
      <variable citdl="dict" name="replacePackageMap" />
      <import module="struct" />
      <import module="sys" />
      <scope ilk="function" name="test" signature="test()" />
      <import module="types" />
      <import module="warnings" />
    </scope>
    <scope doc="distutils.command&#10;Package containing implementation of all the standard Distutils commands." ilk="blob" lang="Python3" name="distutils.command">
      <variable citdl="list" name="__all__" />
    </scope>
    <scope doc="Policy framework for the email package.&#10;Allows fine grained feature control of how the package parses and emits data." ilk="blob" lang="Python3" name="email._policybase">
      <scope classrefs="Policy" doc="Controls for how messages are interpreted and formatted.&#10;Most of the classes and many of the methods in the email package accept Policy objects as parameters.  A Policy object contains a set of values and functions that control how input is interpreted and how output is rendered. For example, the parameter 'raise_on_defect' controls whether or not an RFC violation results in an error being raised or not, while 'max_line_length' controls the maximum length of output lines when a Message is serialized.  Any valid attribute may be overridden when a Policy is created by passing it as a keyword argument to the constructor.  Policy objects are immutable, but a new Policy object can be created with only certain values changed by" ilk="class" name="Compat32">
        <scope ilk="function" name="_fold" signature="_fold(self, name, value, sanitize)" />
        <scope ilk="function" name="_sanitize_header" signature="_sanitize_header(self, name, value)" />
        <scope doc="Given a list of linesep terminated strings constituting the&#10;lines of a single header, return the (name, value) tuple&#10;that should be stored in the model." ilk="function" name="header_source_parse" signature="header_source_parse(self, sourcelines)" />
        <scope doc="Given the header name and the value from the model, return&#10;binary data containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold_binary" signature="fold_binary(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return a&#10;string containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold" signature="fold(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return&#10;the value to be returned to the application program that is&#10;requesting that header." ilk="function" name="header_fetch_parse" signature="header_fetch_parse(self, name, value)" />
        <scope doc="Given the header name and the value provided by the&#10;application program, return the (name, value) that should be&#10;stored in the model." ilk="function" name="header_store_parse" signature="header_store_parse(self, name, value)" />
      </scope>
      <scope classrefs="_PolicyBase" doc="Controls for how messages are interpreted and formatted.&#10;Most of the classes and many of the methods in the email package accept Policy objects as parameters.  A Policy object contains a set of values and functions that control how input is interpreted and how output is rendered. For example, the parameter 'raise_on_defect' controls whether or not an RFC violation results in an error being raised or not, while 'max_line_length' controls the maximum length of output lines when a Message is serialized.  Any valid attribute may be overridden when a Policy is created by passing it as a keyword argument to the constructor.  Policy objects are immutable, but a new Policy object can be created with only certain values changed by" ilk="class" name="Policy">
        <scope doc="Return the maximum allowed number of headers named 'name'." ilk="function" name="header_max_count" signature="header_max_count(self, name)" />
        <scope doc="Given a list of linesep terminated strings constituting the&#10;lines of a single header, return the (name, value) tuple&#10;that should be stored in the model." ilk="function" name="header_source_parse" signature="header_source_parse(self, sourcelines)" />
        <scope doc="Given the header name and the value from the model, return&#10;binary data containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold_binary" signature="fold_binary(self, name, value)" />
        <scope doc="Record 'defect' on 'obj'." ilk="function" name="register_defect" signature="register_defect(self, obj, defect)" />
        <scope doc="Given the header name and the value provided by the&#10;application program, return the (name, value) that should be&#10;stored in the model." ilk="function" name="header_store_parse" signature="header_store_parse(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return a&#10;string containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold" signature="fold(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return&#10;the value to be returned to the application program that is&#10;requesting that header." ilk="function" name="header_fetch_parse" signature="header_fetch_parse(self, name, value)" />
        <scope doc="Based on policy, either raise defect or call&#10;register_defect." ilk="function" name="handle_defect" signature="handle_defect(self, obj, defect)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_charset" />
      <import module="abc" />
      <variable citdl="Compat32" name="compat32" />
      <import module="header" />
    </scope>
    <scope doc="Support module for CGI (Common Gateway Interface) scripts.&#10;This module defines a number of utilities for use by CGI scripts written in Python." ilk="blob" lang="Python3" name="cgi">
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="object" doc="A feed-style parser of email.&#10;" ilk="class" name="FeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope doc="# Non-public interface for supporting Parser's headersonly&#10;flag" ilk="function" name="_set_headersonly" signature="_set_headersonly(self)" />
        <scope doc="Parse all remaining data and return the root message object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_call_parse" signature="_call_parse(self)" />
        <scope ilk="function" name="_parse_headers" signature="_parse_headers(self, lines)" />
        <scope ilk="function" name="_parsegen" signature="_parsegen(self)" />
        <scope doc="_factory is called with no arguments to create a new message&#10;obj" ilk="function" name="__init__" signature="__init__(self, _factory=None, *, policy=Compat32())" />
        <scope ilk="function" name="_pop_message" signature="_pop_message(self)" />
        <scope ilk="function" name="_new_message" signature="_new_message(self)" />
      </scope>
      <scope classrefs="object" doc="Store a sequence of fields, reading multipart/form-data.&#10;This class provides naming, typing, files stored on disk, and more.  At the top level, it is accessible like a dictionary, whose keys are the field names.  (Note: None can occur as a field name.) The items are either a Python list (if there's multiple values) or another FieldStorage or MiniFieldStorage object.  If it's a single object, it has the following attributes:  name: the field name, if specified; otherwise None  filename: the filename, if specified; otherwise None; this is the" ilk="class" name="FieldStorage">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="Dictionary style __contains__ method." ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="Dictionary style get() method, including 'value' lookup." ilk="function" name="getvalue" signature="getvalue(self, key, default=None)" />
        <scope doc="Dictionary style indexing." ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="line is always bytes, not string" ilk="function" name="_FieldStorage__write" signature="_FieldStorage__write(self, line)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Internal: read data in query string format." ilk="function" name="read_urlencoded" signature="read_urlencoded(self)" />
        <scope doc="Constructor. Read multipart/* until last part." ilk="function" name="__init__" signature="__init__(self, fp=None, headers=None, outerboundary=b'', environ=environ({'GNOME_KEYRING_CONTROL': '/run/user/1000/keyring-JQZeg8', 'UPSTART_INSTANCE': '', 'JOB': 'gnome-session', 'XDG_SESSION_ID': 'c1', 'INSTANCE': 'Unity', '_system_name': 'Ubuntu', 'SSH_AUTH_SOCK': '/run/user/1000/keyring-JQZeg8/ssh', 'UPSTART_JOB': 'unity-settings-daemon', 'PYTHONPATH': '/home/mitchell/code/komodo/src/codeintel/lib', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'IRBRC': '/home/mitchell/.rvm/rubies/ruby-2.2.1/.irbrc', '_system_arch': 'x86_64', 'RUBY_VERSION': 'ruby-2.2.1', 'UPSTART_SESSION': 'unix:abstract=/com/ubuntu/upstart-session/1000/1234', 'UPSTART_EVENTS': 'started starting', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg', 'GDM_LANG': 'en_US', '_system_version': '14.04', 'MY_RUBY_HOME': '/home/mitchell/.rvm/rubies/ruby-2.2.1', 'GEM_PATH': '/home/mitchell/.rvm/gems/ruby-2.2.1:/home/mitchell/.rvm/gems/ruby-2.2.1@global', 'XDG_RUNTIME_DIR': '/run/user/1000', 'SHLVL': '1', 'QT4_IM_MODULE': 'xim', 'IM_CONFIG_PHASE': '1', 'DESKTOP_SESSION': 'ubuntu', 'XDG_CURRENT_DESKTOP': 'Unity', 'XAUTHORITY': '/home/mitchell/.Xauthority', 'LANG': 'en_US.UTF-8', 'SELINUX_INIT': 'YES', 'rvm_prefix': '/home/mitchell', 'KOMODO_USERDATADIR': '/tmp/komodo', 'LANGUAGE': 'en_US', 'QT_QPA_PLATFORMTHEME': 'appmenu-qt5', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:', '_system_type': 'Linux', 'rvm_version': '1.26.11 (latest)', 'NODE_PATH': '/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript', 'PATH': '/home/mitchell/bin:/home/mitchell/code/komodo/util/black:/home/mitchell/.rvm/gems/ruby-2.2.1/bin:/home/mitchell/.rvm/gems/ruby-2.2.1@global/bin:/home/mitchell/.rvm/rubies/ruby-2.2.1/bin:/home/mitchell/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin', 'MANDATORY_PATH': '/usr/share/gconf/ubuntu.mandatory.path', 'GNOME_KEYRING_PID': '1374', 'TEXTDOMAINDIR': '/usr/share/locale/', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'rvm_bin_path': '/home/mitchell/.rvm/bin', 'GDMSESSION': 'ubuntu', 'TERM': 'xterm', '_': '/tmp/Python-3.5.1/python', 'XDG_GREETER_DATA_DIR': '/var/lib/lightdm-data/mitchell', 'PWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix/python', 'HOME': '/home/mitchell', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-tXgF19H11M', 'TEXTDOMAIN': 'im-config', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/', 'rvm_path': '/home/mitchell/.rvm', 'COMPIZ_CONFIG_PROFILE': 'ubuntu', 'GPG_AGENT_INFO': '/run/user/1000/keyring-JQZeg8/gpg:0:1', 'USER': 'mitchell', 'WINDOWID': '75497484', 'XDG_SEAT_PATH': '/org/freedesktop/DisplayManager/Seat0', 'XDG_SESSION_PATH': '/org/freedesktop/DisplayManager/Session0', 'XDG_VTNR': '7', 'OLDPWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix', 'CLUTTER_IM_MODULE': 'xim', 'GTK_MODULES': 'overlay-scrollbar:unity-gtk-module', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VTE_VERSION': '3409', 'GEM_HOME': '/home/mitchell/.rvm/gems/ruby-2.2.1', 'XDG_SEAT': 'seat0', 'SESSIONTYPE': 'gnome-session', 'COLORTERM': 'gnome-terminal', 'SHELL': '/bin/bash', 'LOGNAME': 'mitchell', 'GTK_IM_MODULE': 'ibus', 'DISPLAY': ':0'}), keep_blank_values=0, strict_parsing=0, limit=None, encoding='utf-8', errors='replace')" />
        <scope doc="Return the first value received." ilk="function" name="getfirst" signature="getfirst(self, key, default=None)" />
        <scope doc="Return a printable representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return list of received values." ilk="function" name="getlist" signature="getlist(self, key)" />
        <scope doc="Overridable: return a readable &amp; writable file." ilk="function" name="make_file" signature="make_file(self)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Internal: read lines until EOF or outerboundary." ilk="function" name="read_lines" signature="read_lines(self)" />
        <scope doc="Internal: read binary data." ilk="function" name="read_binary" signature="read_binary(self)" />
        <scope doc="Dictionary style keys() method." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Internal: read an atomic part." ilk="function" name="read_single" signature="read_single(self)" />
        <scope doc="Internal: read lines until outerboundary." ilk="function" name="read_lines_to_outerboundary" signature="read_lines_to_outerboundary(self)" />
        <scope doc="Internal: read a part that is itself multipart." ilk="function" name="read_multi" signature="read_multi(self, environ, keep_blank_values, strict_parsing)" />
        <scope doc="Dictionary style len(x) support." ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="Internal: read lines until EOF." ilk="function" name="read_lines_to_eof" signature="read_lines_to_eof(self)" />
        <scope doc="Internal: skip lines until outer boundary if defined." ilk="function" name="skip_lines" signature="skip_lines(self)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="&#10;" ilk="class" name="Mapping">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
      </scope>
      <scope classrefs="object" doc="Basic message object.&#10;A message object is defined as something that has a bunch of RFC 2822 headers and a payload.  It may optionally have an envelope header (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a multipart or a message/rfc822), then the payload is a list of Message objects, otherwise it is a string.  Message objects implement part of the `mapping' interface, which assumes there is exactly one occurrence of the header per message.  Some headers do in fact appear multiple times (e.g. Received) and for those headers, you must use the explicit API to set or get all the headers.  Not all of" ilk="class" name="Message">
        <scope doc="Return the `default' content type." ilk="function" name="get_default_type" signature="get_default_type(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope doc="Return the parameter value if found in the Content-Type&#10;header." ilk="function" name="get_param" signature="get_param(self, param, failobj=None, header='content-type', unquote=True)" />
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
        <scope doc="Return a list of all the message's header values." ilk="function" name="values" signature="values(self)" />
        <scope doc="Delete all occurrences of a header, if present." ilk="function" name="__delitem__" signature="__delitem__(self, name)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Return the Charset instance associated with the message's&#10;payload." ilk="function" name="get_charset" signature="get_charset(self)" />
        <scope doc="Set the main type and subtype for the Content-Type header." ilk="function" name="set_type" signature="set_type(self, type, header='Content-Type', requote=True)" />
        <scope doc="Return the entire formatted message as a bytes object." ilk="function" name="__bytes__" signature="__bytes__(self)" />
        <scope doc="# Unix From_ line" ilk="function" name="set_unixfrom" signature="set_unixfrom(self, unixfrom)" />
        <scope doc="Set the charset of the payload to a given character set." ilk="function" name="set_charset" signature="set_charset(self, charset)" />
        <scope doc="Return the filename associated with the payload if present." ilk="function" name="get_filename" signature="get_filename(self, failobj=None)" />
        <scope doc="Return the message's content type." ilk="function" name="get_content_type" signature="get_content_type(self)" />
        <scope doc="Walk over the message tree, yielding each subpart." ilk="function" name="walk" signature="walk(self)" />
        <scope doc="Return the message's main content type." ilk="function" name="get_content_maintype" signature="get_content_maintype(self)" />
        <scope doc="Set the boundary parameter in Content-Type to 'boundary'." ilk="function" name="set_boundary" signature="set_boundary(self, boundary)" />
        <scope doc="Return the charset parameter of the Content-Type header." ilk="function" name="get_content_charset" signature="get_content_charset(self, failobj=None)" />
        <scope doc="Return the (name, value) header pairs without modification." ilk="function" name="raw_items" signature="raw_items(self)" />
        <scope doc="Return a reference to the payload." ilk="function" name="get_payload" signature="get_payload(self, i=None, decode=False)" />
        <scope ilk="function" name="_get_params_preserve" signature="_get_params_preserve(self, failobj, header)" />
        <scope doc="Return the entire formatted message as a bytes object." ilk="function" name="as_bytes" signature="as_bytes(self, unixfrom=False, policy=None)" />
        <scope doc="Set the `default' content type." ilk="function" name="set_default_type" signature="set_default_type(self, ctype)" />
        <scope doc="Returns the message's sub-content type." ilk="function" name="get_content_subtype" signature="get_content_subtype(self)" />
        <scope doc="Get a header value." ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Set the payload to the given value." ilk="function" name="set_payload" signature="set_payload(self, payload, charset=None)" />
        <scope doc="Return the entire formatted message as a string." ilk="function" name="as_string" signature="as_string(self, unixfrom=False, maxheaderlen=0, policy=None)" />
        <scope doc="Extended header setting." ilk="function" name="add_header" signature="add_header(self, _name, _value, **_params)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, policy=Compat32())" />
        <scope doc="Return the boundary associated with the payload if present." ilk="function" name="get_boundary" signature="get_boundary(self, failobj=None)" />
        <scope doc="Return True if the message consists of multiple parts." ilk="function" name="is_multipart" signature="is_multipart(self)" />
        <scope doc="Set the value of a header." ilk="function" name="__setitem__" signature="__setitem__(self, name, val)" />
        <scope doc="Get all the message's header fields and values." ilk="function" name="items" signature="items(self)" />
        <scope doc="Return the entire formatted message as a string." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Get a header value." ilk="function" name="get" signature="get(self, name, failobj=None)" />
        <scope doc="Return the message's Content-Type parameters, as a list." ilk="function" name="get_params" signature="get_params(self, failobj=None, header='content-type', unquote=True)" />
        <scope doc="Return a list of all the message's header field names." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Store name and value in the model without modification." ilk="function" name="set_raw" signature="set_raw(self, name, value)" />
        <scope doc="Set a parameter in the Content-Type header." ilk="function" name="set_param" signature="set_param(self, param, value, header='Content-Type', requote=True, charset=None, language='', replace=False)" />
        <scope doc="Return the message's content-disposition if it exists, or&#10;None." ilk="function" name="get_content_disposition" signature="get_content_disposition(self)" />
        <scope doc="Remove the given parameter completely from the Content-Type&#10;header." ilk="function" name="del_param" signature="del_param(self, param, header='content-type', requote=True)" />
        <scope doc="Return a list of all the values for the named field." ilk="function" name="get_all" signature="get_all(self, name, failobj=None)" />
        <scope doc="Replace a header." ilk="function" name="replace_header" signature="replace_header(self, _name, _value)" />
        <scope doc="Return a list containing the charset(s) used in this&#10;message." ilk="function" name="get_charsets" signature="get_charsets(self, failobj=None)" />
        <scope ilk="function" name="get_unixfrom" signature="get_unixfrom(self)" />
        <scope doc="Return the total number of headers, including duplicates." ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="Like FieldStorage, for use when no file uploads are possible.&#10;" ilk="class" name="MiniFieldStorage">
        <scope doc="Constructor from field name and value." ilk="function" name="__init__" signature="__init__(self, name, value)" />
        <scope doc="Return printable representation." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see help(codecs.Codec) or the documentation for codecs.register) and defaults to &quot;strict&quot;.  newline controls how line endings are handled. It can be None, '', '\n', '\r', and '\r\n'.  It works as follows: " ilk="class" name="TextIOWrapper">
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read at most n characters from stream." ilk="function" name="read" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write string to stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Close the log file." ilk="function" name="closelog" signature="closelog()" />
      <scope doc="Write a log message to the log file. See initlog() for docs." ilk="function" name="dolog" signature="dolog(fmt, *args)" />
      <scope doc="Deprecated API." ilk="function" name="escape" signature="escape(s, quote=None)" />
      <import module="html" />
      <scope doc="Write a log message, if there is a log file." ilk="function" name="initlog" signature="initlog(*allargs)" />
      <import module="locale" />
      <scope doc="Write a log message, if there is a log file." ilk="function" name="log" signature="log(*allargs)" />
      <variable citdl="str" name="logfile" />
      <variable citdl="NoneType" name="logfp" />
      <variable citdl="int" name="maxlen" />
      <scope doc="Dummy function, assigned to log when logging is disabled." ilk="function" name="nolog" signature="nolog(*allargs)" />
      <import module="os" />
      <scope doc="Parse a query in the environment or from a file (default&#10;stdin)" ilk="function" name="parse" signature="parse(fp=None, environ=environ({'GNOME_KEYRING_CONTROL': '/run/user/1000/keyring-JQZeg8', 'UPSTART_INSTANCE': '', 'JOB': 'gnome-session', 'XDG_SESSION_ID': 'c1', 'INSTANCE': 'Unity', '_system_name': 'Ubuntu', 'SSH_AUTH_SOCK': '/run/user/1000/keyring-JQZeg8/ssh', 'UPSTART_JOB': 'unity-settings-daemon', 'PYTHONPATH': '/home/mitchell/code/komodo/src/codeintel/lib', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'IRBRC': '/home/mitchell/.rvm/rubies/ruby-2.2.1/.irbrc', '_system_arch': 'x86_64', 'RUBY_VERSION': 'ruby-2.2.1', 'UPSTART_SESSION': 'unix:abstract=/com/ubuntu/upstart-session/1000/1234', 'UPSTART_EVENTS': 'started starting', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg', 'GDM_LANG': 'en_US', '_system_version': '14.04', 'MY_RUBY_HOME': '/home/mitchell/.rvm/rubies/ruby-2.2.1', 'GEM_PATH': '/home/mitchell/.rvm/gems/ruby-2.2.1:/home/mitchell/.rvm/gems/ruby-2.2.1@global', 'XDG_RUNTIME_DIR': '/run/user/1000', 'SHLVL': '1', 'QT4_IM_MODULE': 'xim', 'IM_CONFIG_PHASE': '1', 'DESKTOP_SESSION': 'ubuntu', 'XDG_CURRENT_DESKTOP': 'Unity', 'XAUTHORITY': '/home/mitchell/.Xauthority', 'LANG': 'en_US.UTF-8', 'SELINUX_INIT': 'YES', 'rvm_prefix': '/home/mitchell', 'KOMODO_USERDATADIR': '/tmp/komodo', 'LANGUAGE': 'en_US', 'QT_QPA_PLATFORMTHEME': 'appmenu-qt5', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:', '_system_type': 'Linux', 'rvm_version': '1.26.11 (latest)', 'NODE_PATH': '/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript', 'PATH': '/home/mitchell/bin:/home/mitchell/code/komodo/util/black:/home/mitchell/.rvm/gems/ruby-2.2.1/bin:/home/mitchell/.rvm/gems/ruby-2.2.1@global/bin:/home/mitchell/.rvm/rubies/ruby-2.2.1/bin:/home/mitchell/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin', 'MANDATORY_PATH': '/usr/share/gconf/ubuntu.mandatory.path', 'GNOME_KEYRING_PID': '1374', 'TEXTDOMAINDIR': '/usr/share/locale/', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'rvm_bin_path': '/home/mitchell/.rvm/bin', 'GDMSESSION': 'ubuntu', 'TERM': 'xterm', '_': '/tmp/Python-3.5.1/python', 'XDG_GREETER_DATA_DIR': '/var/lib/lightdm-data/mitchell', 'PWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix/python', 'HOME': '/home/mitchell', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-tXgF19H11M', 'TEXTDOMAIN': 'im-config', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/', 'rvm_path': '/home/mitchell/.rvm', 'COMPIZ_CONFIG_PROFILE': 'ubuntu', 'GPG_AGENT_INFO': '/run/user/1000/keyring-JQZeg8/gpg:0:1', 'USER': 'mitchell', 'WINDOWID': '75497484', 'XDG_SEAT_PATH': '/org/freedesktop/DisplayManager/Seat0', 'XDG_SESSION_PATH': '/org/freedesktop/DisplayManager/Session0', 'XDG_VTNR': '7', 'OLDPWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix', 'CLUTTER_IM_MODULE': 'xim', 'GTK_MODULES': 'overlay-scrollbar:unity-gtk-module', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VTE_VERSION': '3409', 'GEM_HOME': '/home/mitchell/.rvm/gems/ruby-2.2.1', 'XDG_SEAT': 'seat0', 'SESSIONTYPE': 'gnome-session', 'COLORTERM': 'gnome-terminal', 'SHELL': '/bin/bash', 'LOGNAME': 'mitchell', 'GTK_IM_MODULE': 'ibus', 'DISPLAY': ':0'}), keep_blank_values=0, strict_parsing=0)" />
      <scope doc="Parse a Content-type like header." ilk="function" name="parse_header" signature="parse_header(line)" />
      <scope doc="Parse multipart input." ilk="function" name="parse_multipart" signature="parse_multipart(fp, pdict)" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qs" signature="parse_qs(qs, keep_blank_values=0, strict_parsing=0)" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qsl" signature="parse_qsl(qs, keep_blank_values=0, strict_parsing=0)" />
      <scope ilk="function" name="print_arguments" signature="print_arguments()" />
      <scope doc="Dump the current directory as HTML." ilk="function" name="print_directory" signature="print_directory()" />
      <scope doc="Dump the shell environment as HTML." ilk="function" name="print_environ" signature="print_environ(environ=environ({'GNOME_KEYRING_CONTROL': '/run/user/1000/keyring-JQZeg8', 'UPSTART_INSTANCE': '', 'JOB': 'gnome-session', 'XDG_SESSION_ID': 'c1', 'INSTANCE': 'Unity', '_system_name': 'Ubuntu', 'SSH_AUTH_SOCK': '/run/user/1000/keyring-JQZeg8/ssh', 'UPSTART_JOB': 'unity-settings-daemon', 'PYTHONPATH': '/home/mitchell/code/komodo/src/codeintel/lib', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'IRBRC': '/home/mitchell/.rvm/rubies/ruby-2.2.1/.irbrc', '_system_arch': 'x86_64', 'RUBY_VERSION': 'ruby-2.2.1', 'UPSTART_SESSION': 'unix:abstract=/com/ubuntu/upstart-session/1000/1234', 'UPSTART_EVENTS': 'started starting', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg', 'GDM_LANG': 'en_US', '_system_version': '14.04', 'MY_RUBY_HOME': '/home/mitchell/.rvm/rubies/ruby-2.2.1', 'GEM_PATH': '/home/mitchell/.rvm/gems/ruby-2.2.1:/home/mitchell/.rvm/gems/ruby-2.2.1@global', 'XDG_RUNTIME_DIR': '/run/user/1000', 'SHLVL': '1', 'QT4_IM_MODULE': 'xim', 'IM_CONFIG_PHASE': '1', 'DESKTOP_SESSION': 'ubuntu', 'XDG_CURRENT_DESKTOP': 'Unity', 'XAUTHORITY': '/home/mitchell/.Xauthority', 'LANG': 'en_US.UTF-8', 'SELINUX_INIT': 'YES', 'rvm_prefix': '/home/mitchell', 'KOMODO_USERDATADIR': '/tmp/komodo', 'LANGUAGE': 'en_US', 'QT_QPA_PLATFORMTHEME': 'appmenu-qt5', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:', '_system_type': 'Linux', 'rvm_version': '1.26.11 (latest)', 'NODE_PATH': '/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript', 'PATH': '/home/mitchell/bin:/home/mitchell/code/komodo/util/black:/home/mitchell/.rvm/gems/ruby-2.2.1/bin:/home/mitchell/.rvm/gems/ruby-2.2.1@global/bin:/home/mitchell/.rvm/rubies/ruby-2.2.1/bin:/home/mitchell/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin', 'MANDATORY_PATH': '/usr/share/gconf/ubuntu.mandatory.path', 'GNOME_KEYRING_PID': '1374', 'TEXTDOMAINDIR': '/usr/share/locale/', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'rvm_bin_path': '/home/mitchell/.rvm/bin', 'GDMSESSION': 'ubuntu', 'TERM': 'xterm', '_': '/tmp/Python-3.5.1/python', 'XDG_GREETER_DATA_DIR': '/var/lib/lightdm-data/mitchell', 'PWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix/python', 'HOME': '/home/mitchell', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-tXgF19H11M', 'TEXTDOMAIN': 'im-config', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/', 'rvm_path': '/home/mitchell/.rvm', 'COMPIZ_CONFIG_PROFILE': 'ubuntu', 'GPG_AGENT_INFO': '/run/user/1000/keyring-JQZeg8/gpg:0:1', 'USER': 'mitchell', 'WINDOWID': '75497484', 'XDG_SEAT_PATH': '/org/freedesktop/DisplayManager/Seat0', 'XDG_SESSION_PATH': '/org/freedesktop/DisplayManager/Session0', 'XDG_VTNR': '7', 'OLDPWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix', 'CLUTTER_IM_MODULE': 'xim', 'GTK_MODULES': 'overlay-scrollbar:unity-gtk-module', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VTE_VERSION': '3409', 'GEM_HOME': '/home/mitchell/.rvm/gems/ruby-2.2.1', 'XDG_SEAT': 'seat0', 'SESSIONTYPE': 'gnome-session', 'COLORTERM': 'gnome-terminal', 'SHELL': '/bin/bash', 'LOGNAME': 'mitchell', 'GTK_IM_MODULE': 'ibus', 'DISPLAY': ':0'}))" />
      <scope doc="Dump a list of environment variables used by CGI as HTML." ilk="function" name="print_environ_usage" signature="print_environ_usage()" />
      <scope ilk="function" name="print_exception" signature="print_exception(type=None, value=None, tb=None, limit=None)" />
      <scope doc="Dump the contents of a form as HTML." ilk="function" name="print_form" signature="print_form(form)" />
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Robust test CGI script, usable as main program." ilk="function" name="test" signature="test(environ=environ({'GNOME_KEYRING_CONTROL': '/run/user/1000/keyring-JQZeg8', 'UPSTART_INSTANCE': '', 'JOB': 'gnome-session', 'XDG_SESSION_ID': 'c1', 'INSTANCE': 'Unity', '_system_name': 'Ubuntu', 'SSH_AUTH_SOCK': '/run/user/1000/keyring-JQZeg8/ssh', 'UPSTART_JOB': 'unity-settings-daemon', 'PYTHONPATH': '/home/mitchell/code/komodo/src/codeintel/lib', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'IRBRC': '/home/mitchell/.rvm/rubies/ruby-2.2.1/.irbrc', '_system_arch': 'x86_64', 'RUBY_VERSION': 'ruby-2.2.1', 'UPSTART_SESSION': 'unix:abstract=/com/ubuntu/upstart-session/1000/1234', 'UPSTART_EVENTS': 'started starting', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg', 'GDM_LANG': 'en_US', '_system_version': '14.04', 'MY_RUBY_HOME': '/home/mitchell/.rvm/rubies/ruby-2.2.1', 'GEM_PATH': '/home/mitchell/.rvm/gems/ruby-2.2.1:/home/mitchell/.rvm/gems/ruby-2.2.1@global', 'XDG_RUNTIME_DIR': '/run/user/1000', 'SHLVL': '1', 'QT4_IM_MODULE': 'xim', 'IM_CONFIG_PHASE': '1', 'DESKTOP_SESSION': 'ubuntu', 'XDG_CURRENT_DESKTOP': 'Unity', 'XAUTHORITY': '/home/mitchell/.Xauthority', 'LANG': 'en_US.UTF-8', 'SELINUX_INIT': 'YES', 'rvm_prefix': '/home/mitchell', 'KOMODO_USERDATADIR': '/tmp/komodo', 'LANGUAGE': 'en_US', 'QT_QPA_PLATFORMTHEME': 'appmenu-qt5', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:', '_system_type': 'Linux', 'rvm_version': '1.26.11 (latest)', 'NODE_PATH': '/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript', 'PATH': '/home/mitchell/bin:/home/mitchell/code/komodo/util/black:/home/mitchell/.rvm/gems/ruby-2.2.1/bin:/home/mitchell/.rvm/gems/ruby-2.2.1@global/bin:/home/mitchell/.rvm/rubies/ruby-2.2.1/bin:/home/mitchell/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin:/home/mitchell/.rvm/bin', 'MANDATORY_PATH': '/usr/share/gconf/ubuntu.mandatory.path', 'GNOME_KEYRING_PID': '1374', 'TEXTDOMAINDIR': '/usr/share/locale/', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'rvm_bin_path': '/home/mitchell/.rvm/bin', 'GDMSESSION': 'ubuntu', 'TERM': 'xterm', '_': '/tmp/Python-3.5.1/python', 'XDG_GREETER_DATA_DIR': '/var/lib/lightdm-data/mitchell', 'PWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix/python', 'HOME': '/home/mitchell', 'DEFAULTS_PATH': '/usr/share/gconf/ubuntu.default.path', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'DBUS_SESSION_BUS_ADDRESS': 'unix:abstract=/tmp/dbus-tXgF19H11M', 'TEXTDOMAIN': 'im-config', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/', 'rvm_path': '/home/mitchell/.rvm', 'COMPIZ_CONFIG_PROFILE': 'ubuntu', 'GPG_AGENT_INFO': '/run/user/1000/keyring-JQZeg8/gpg:0:1', 'USER': 'mitchell', 'WINDOWID': '75497484', 'XDG_SEAT_PATH': '/org/freedesktop/DisplayManager/Seat0', 'XDG_SESSION_PATH': '/org/freedesktop/DisplayManager/Session0', 'XDG_VTNR': '7', 'OLDPWD': '/home/mitchell/code/komodo/src/codeintel/support/gencix', 'CLUTTER_IM_MODULE': 'xim', 'GTK_MODULES': 'overlay-scrollbar:unity-gtk-module', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'VTE_VERSION': '3409', 'GEM_HOME': '/home/mitchell/.rvm/gems/ruby-2.2.1', 'XDG_SEAT': 'seat0', 'SESSIONTYPE': 'gnome-session', 'COLORTERM': 'gnome-terminal', 'SHELL': '/bin/bash', 'LOGNAME': 'mitchell', 'GTK_IM_MODULE': 'ibus', 'DISPLAY': ':0'}))" />
      <import module="urllib" />
      <scope ilk="function" name="valid_boundary" signature="valid_boundary(s)" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="collections.abc">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AsyncIterable">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="AsyncIterable" doc="&#10;" ilk="class" name="AsyncIterator">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item or raise StopAsyncIteration when&#10;exhausted." ilk="function" name="__anext__" signature="__anext__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Awaitable">
        <scope ilk="function" name="__await__" signature="__await__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Sequence" doc="This unifies bytes and bytearray.&#10;XXX Should add all their methods." ilk="class" name="ByteString" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Callable">
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Container">
        <scope ilk="function" name="__contains__" signature="__contains__(self, x)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Awaitable" doc="&#10;" ilk="class" name="Coroutine">
        <scope doc="Send a value into the coroutine." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the coroutine." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Iterator" doc="&#10;" ilk="class" name="Generator">
        <scope doc="Send a value into the generator." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the generator." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside generator." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item from the generator." ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Hashable">
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="ItemsView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Iterable">
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Iterable" doc="&#10;" ilk="class" name="Iterator">
        <scope doc="Return the next item from the iterator." ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="KeysView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="&#10;" ilk="class" name="Mapping">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
      </scope>
      <scope classrefs="Sized" doc="&#10;" ilk="class" name="MappingView">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, mapping)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="Mapping" doc="&#10;" ilk="class" name="MutableMapping">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
      </scope>
      <scope classrefs="Sequence" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="MutableSequence">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="S.reverse()" />
        <scope doc="S.clear() -&gt; None -- remove all items from S" ilk="function" name="clear" signature="S.clear() -&gt; None -- remove all items from S" />
        <scope doc="extend sequence by appending elements from the iterable" ilk="function" name="extend" signature="S.extend(iterable)" />
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, values)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, index)" />
        <scope doc="Raise IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="S.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, index, value)" />
        <scope doc="append value to the end of the sequence" ilk="function" name="append" signature="S.append(value)" />
        <scope doc="insert value before index" ilk="function" name="insert" signature="S.insert(index, value)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="S.remove(value)" />
      </scope>
      <scope classrefs="Set" doc="A mutable set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__, __len__, add(), and discard().  To override the comparisons (presumably for speed, as the semantics are fixed), all you have to do is redefine __le__ and then the other operations will automatically follow suit." ilk="class" name="MutableSet">
        <scope doc="This is slow (creates N new iterators!) but effective." ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, it)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, it)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, it)" />
        <scope doc="Return the popped value. Raise KeyError if empty." ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Add an element." ilk="function" name="add" signature="add(self, value)" />
        <scope doc="Remove an element. If not a member, raise a KeyError." ilk="function" name="remove" signature="remove(self, value)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, it)" />
        <scope doc="Remove an element. Do not raise an exception if absent." ilk="function" name="discard" signature="discard(self, value)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="Sequence">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="Set">
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
        <scope ilk="function" name="__rxor__" signature="__rxor__(self, other)" />
        <scope ilk="function" name="__rand__" signature="__rand__(self, other)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Compute the hash value of a set." ilk="function" name="_hash" signature="_hash(self)" />
        <scope ilk="function" name="__ror__" signature="__ror__(self, other)" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="__rsub__" signature="__rsub__(self, other)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Sized">
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView" doc="&#10;" ilk="class" name="ValuesView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
    </scope>
    <scope doc="Base class for MIME multipart/* type messages.&#10;" ilk="blob" lang="Python3" name="email.mime.multipart">
      <scope classrefs="Message" doc="Base class for MIME specializations.&#10;" ilk="class" name="MIMEBase">
        <scope doc="This constructor adds a Content-Type: and a MIME-Version:&#10;header." ilk="function" name="__init__" signature="__init__(self, _maintype, _subtype, **_params)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME multipart/* type messages.&#10;" ilk="class" name="MIMEMultipart">
        <scope doc="Creates a multipart/* type message." ilk="function" name="__init__" signature="__init__(self, _subtype='mixed', boundary=None, _subparts=None, **_params)" />
      </scope>
      <variable citdl="list" name="__all__" />
    </scope>
    <scope doc="text_file&#10;provides the TextFile class, which gives an interface to text files that (optionally) takes care of stripping comments, ignoring blank lines, and joining lines with backslashes." ilk="blob" lang="Python3" name="distutils.text_file">
      <scope classrefs="object" doc="Provides a file-like object that takes care of all the things you&#10;commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as &quot;#&quot; is your comment character), skip blank lines, join adjacent lines by escaping the newline (ie. backslash at end of line), strip leading and/or trailing whitespace.  All of these are optional and independently controllable.  Provides a 'warn()' method so you can generate warning messages that report physical line number, even if the logical line in question spans multiple physical lines.  Also provides 'unreadline()' for" ilk="class" name="TextFile">
        <scope doc="Read and return a single logical line from the current file&#10;(or from an internal buffer if lines have previously been&#10;&quot;unread&quot; with 'unreadline()')." ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Read and return the list of all logical lines remaining in&#10;the current file." ilk="function" name="readlines" signature="readlines(self)" />
        <scope doc="Open a new file named 'filename'." ilk="function" name="open" signature="open(self, filename)" />
        <scope doc="line in the current file." ilk="function" name="warn" signature="Print (to stderr) a warning message tied to the current logical" />
        <scope ilk="function" name="gen_error" signature="gen_error(self, msg, line=None)" />
        <scope doc="Close the current file and forget everything we know about&#10;it (filename, current line number)." ilk="function" name="close" signature="close(self)" />
        <scope doc="Construct a new TextFile object." ilk="function" name="__init__" signature="__init__(self, filename=None, file=None, **options)" />
        <scope doc="Push 'line' (a string) onto an internal buffer that will be&#10;checked by future 'readline()' calls." ilk="function" name="unreadline" signature="unreadline(self, line)" />
        <scope ilk="function" name="error" signature="error(self, msg, line=None)" />
      </scope>
      <import module="io" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="Fixer for it.next() -&gt; next(it), per PEP 3114.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_next">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixNext">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="str" name="bind_warning" />
      <scope ilk="function" name="find_assign" signature="find_assign(node)" />
      <scope doc="Returns the node which binds variable name, otherwise None." ilk="function" name="find_binding" signature="find_binding(name, node, package=None)" />
      <import module="fixer_base" />
      <scope ilk="function" name="is_assign_target" signature="is_assign_target(node)" />
      <scope ilk="function" name="is_subtree" signature="is_subtree(root, node)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="# system configuration generated and used by the sysconfig module&#10;" ilk="blob" lang="Python3" name="_sysconfigdata">
      <variable citdl="dict" name="build_time_vars" />
    </scope>
    <scope doc="TestSuite&#10;" ilk="blob" lang="Python3" name="unittest.suite">
      <scope classrefs="object" doc="A simple test suite that doesn't provide class or module shared fixtures.&#10;" ilk="class" name="BaseTestSuite">
        <scope ilk="function" name="countTestCases" signature="countTestCases(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="addTests" signature="addTests(self, tests)" />
        <scope ilk="function" name="run" signature="run(self, result)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tests=())" />
        <scope doc="Stop holding a reference to the TestCase at index." ilk="function" name="_removeTestAtIndex" signature="_removeTestAtIndex(self, index)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope ilk="function" name="addTest" signature="addTest(self, test)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Run the tests without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
      </scope>
      <scope classrefs="BaseTestSuite" doc="A test suite is a composite test consisting of a number of TestCases.&#10;For use, create an instance of TestSuite, then add test case instances. When all tests have been added, the suite can be passed to a test runner, such as TextTestRunner. It will run the individual test cases in the order in which they were added, aggregating the results. When subclassing, do not forget to call the base class constructor." ilk="class" name="TestSuite">
        <scope ilk="function" name="_tearDownPreviousClass" signature="_tearDownPreviousClass(self, test, result)" />
        <scope ilk="function" name="_handleClassSetUp" signature="_handleClassSetUp(self, test, result)" />
        <scope ilk="function" name="run" signature="run(self, result, debug=False)" />
        <scope ilk="function" name="_handleModuleTearDown" signature="_handleModuleTearDown(self, result)" />
        <scope ilk="function" name="_get_previous_module" signature="_get_previous_module(self, result)" />
        <scope ilk="function" name="_handleModuleFixture" signature="_handleModuleFixture(self, test, result)" />
        <scope doc="Run the tests without collecting errors in a TestResult" ilk="function" name="debug" signature="debug(self)" />
        <scope ilk="function" name="_addClassOrModuleLevelException" signature="_addClassOrModuleLevelException(self, result, exception, errorName)" />
      </scope>
      <import module="case" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="Command-line parsing library&#10;This module is an optparse-inspired command-line parsing library that:  - handles both optional and positional arguments - produces highly informative usage messages - supports parsers that dispatch to sub-parsers  The following is a simple usage example that sums integers from the command-line and writes the result to a file::  parser = argparse.ArgumentParser(" ilk="blob" lang="Python3" name="argparse">
      <scope classrefs="_AttributeHolder" doc="Information about how to convert command line strings to Python objects.&#10;Action objects are used by an ArgumentParser to represent the information needed to parse a single argument from one or more strings from the command line. The keyword arguments to the Action constructor are also all attributes of Action instances.  Keyword Arguments:  - option_strings -- A list of command-line option strings which should be associated with this action. " ilk="class" name="Action">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, parser, namespace, values, option_string=None)" />
        <scope ilk="function" name="_get_kwargs" signature="_get_kwargs(self)" />
      </scope>
      <scope classrefs="HelpFormatter" doc="Help message formatter which adds default values to argument help.&#10;Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." ilk="class" name="ArgumentDefaultsHelpFormatter">
        <scope ilk="function" name="_get_help_string" signature="_get_help_string(self, action)" />
      </scope>
      <scope classrefs="Exception" doc="An error from creating or using an argument (optional or positional).&#10;The string value of this exception is the message, augmented with information about the argument that caused it." ilk="class" name="ArgumentError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, argument, message)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="_AttributeHolder _ActionsContainer" doc="Object for parsing command line strings into Python objects.&#10;Keyword Arguments: - prog -- The name of the program (default: sys.argv[0]) - usage -- A usage message (default: auto-generated from arguments) - description -- A description of what the program does - epilog -- Text following the argument descriptions - parents -- Parsers whose arguments should be copied into this one - formatter_class -- HelpFormatter class for printing help messages - prefix_chars -- Characters that prefix optional arguments - fromfile_prefix_chars -- Characters that prefix files containing additional arguments" ilk="class" name="ArgumentParser">
        <scope ilk="function" name="_get_optional_actions" signature="_get_optional_actions(self)" />
        <scope ilk="function" name="parse_known_args" signature="parse_known_args(self, args=None, namespace=None)" />
        <scope ilk="function" name="_get_option_tuples" signature="_get_option_tuples(self, option_string)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True)" />
        <scope ilk="function" name="_add_action" signature="_add_action(self, action)" />
        <scope doc="# ======================== # Value conversion methods #&#10;========================" ilk="function" name="_get_values" signature="_get_values(self, action, arg_strings)" />
        <scope ilk="function" name="_parse_optional" signature="_parse_optional(self, arg_string)" />
        <scope ilk="function" name="_match_argument" signature="_match_argument(self, action, arg_strings_pattern)" />
        <scope doc="Prints a usage message incorporating the message to stderr&#10;and exits." ilk="function" name="error" signature="error(message: string)" />
        <scope ilk="function" name="_match_arguments_partial" signature="_match_arguments_partial(self, actions, arg_strings_pattern)" />
        <scope doc="# ================================== # Optional/Positional&#10;adding methods # ==================================" ilk="function" name="add_subparsers" signature="add_subparsers(self, **kwargs)" />
        <scope ilk="function" name="_read_args_from_files" signature="_read_args_from_files(self, arg_strings)" />
        <scope ilk="function" name="_get_formatter" signature="_get_formatter(self)" />
        <scope ilk="function" name="convert_arg_line_to_args" signature="convert_arg_line_to_args(self, arg_line)" />
        <scope doc="# ===================================== # Command line&#10;argument parsing methods #&#10;=====================================" ilk="function" name="parse_args" signature="parse_args(self, args=None, namespace=None)" />
        <scope ilk="function" name="_parse_known_args" signature="_parse_known_args(self, arg_strings, namespace)" />
        <scope doc="# ===================== # Help-printing methods #&#10;=====================" ilk="function" name="print_usage" signature="print_usage(self, file=None)" />
        <scope ilk="function" name="_print_message" signature="_print_message(self, message, file=None)" />
        <scope doc="# ======================= # Pretty __repr__ methods #&#10;=======================" ilk="function" name="_get_kwargs" signature="_get_kwargs(self)" />
        <scope ilk="function" name="print_help" signature="print_help(self, file=None)" />
        <scope doc="# ======================= # Help-formatting methods #&#10;=======================" ilk="function" name="format_usage" signature="format_usage(self)" />
        <scope ilk="function" name="_get_value" signature="_get_value(self, action, arg_string)" />
        <scope ilk="function" name="_check_value" signature="_check_value(self, action, value)" />
        <scope ilk="function" name="format_help" signature="format_help(self)" />
        <scope ilk="function" name="_get_positional_actions" signature="_get_positional_actions(self)" />
        <scope ilk="function" name="_get_nargs_pattern" signature="_get_nargs_pattern(self, action)" />
        <scope doc="# =============== # Exiting methods # ===============" ilk="function" name="exit" signature="exit(self, status=0, message=None)" />
      </scope>
      <scope classrefs="Exception" doc="An error from trying to convert a command line string to a type.&#10;" ilk="class" name="ArgumentTypeError" />
      <scope classrefs="object" doc="Factory for creating file object types&#10;Instances of FileType are typically passed as type= arguments to the ArgumentParser add_argument() method.  Keyword Arguments: - mode -- A string indicating how the file is to be opened. Accepts the same values as the builtin open() function. - bufsize -- The file's desired buffer size. Accepts the same values as the builtin open() function. - encoding -- The file's encoding. Accepts the same values as the builtin open() function." ilk="class" name="FileType">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, mode='r', bufsize=-1, encoding=None, errors=None)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, string)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="Formatter for generating usage messages and argument help strings.&#10;Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." ilk="class" name="HelpFormatter">
        <scope ilk="function" name="add_usage" signature="add_usage(self, usage, actions, groups, prefix=None)" />
        <scope ilk="function" name="_format_action_invocation" signature="_format_action_invocation(self, action)" />
        <scope ilk="function" name="add_argument" signature="add_argument(self, action)" />
        <scope doc="# ======================== # Message building methods #&#10;========================" ilk="function" name="start_section" signature="start_section(self, heading)" />
        <scope ilk="function" name="_metavar_formatter" signature="_metavar_formatter(self, action, default_metavar)" />
        <scope ilk="function" name="end_section" signature="end_section(self)" />
        <scope doc="# ======================= # Help-formatting methods #&#10;=======================" ilk="function" name="format_help" signature="format_help(self)" />
        <scope ilk="function" name="_get_default_metavar_for_positional" signature="_get_default_metavar_for_positional(self, action)" />
        <scope ilk="function" name="_format_text" signature="_format_text(self, text)" />
        <scope ilk="function" name="_expand_help" signature="_expand_help(self, action)" />
        <scope ilk="function" name="_format_action" signature="_format_action(self, action)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, prog, indent_increment=2, max_help_position=24, width=None)" />
        <scope ilk="function" name="_get_default_metavar_for_optional" signature="_get_default_metavar_for_optional(self, action)" />
        <scope ilk="function" name="_format_args" signature="_format_args(self, action, default_metavar)" />
        <scope doc="# =============================== # Section and indentation&#10;methods # ===============================" ilk="function" name="_indent" signature="_indent(self)" />
        <scope ilk="function" name="_format_usage" signature="_format_usage(self, usage, actions, groups, prefix)" />
        <scope ilk="function" name="_dedent" signature="_dedent(self)" />
        <scope ilk="function" name="_join_parts" signature="_join_parts(self, part_strings)" />
        <scope ilk="function" name="_get_help_string" signature="_get_help_string(self, action)" />
        <scope ilk="function" name="_split_lines" signature="_split_lines(self, text, width)" />
        <scope ilk="function" name="add_arguments" signature="add_arguments(self, actions)" />
        <scope ilk="function" name="_add_item" signature="_add_item(self, func, args)" />
        <scope ilk="function" name="add_text" signature="add_text(self, text)" />
        <scope ilk="function" name="_format_actions_usage" signature="_format_actions_usage(self, actions, groups)" />
        <scope ilk="function" name="_fill_text" signature="_fill_text(self, text, width, indent)" />
        <scope ilk="function" name="_iter_indented_subactions" signature="_iter_indented_subactions(self, action)" />
      </scope>
      <scope classrefs="HelpFormatter" doc="Help message formatter which uses the argument 'type' as the default&#10;metavar value (instead of the argument 'dest')  Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." ilk="class" name="MetavarTypeHelpFormatter">
        <scope ilk="function" name="_get_default_metavar_for_optional" signature="_get_default_metavar_for_optional(self, action)" />
        <scope ilk="function" name="_get_default_metavar_for_positional" signature="_get_default_metavar_for_positional(self, action)" />
      </scope>
      <scope classrefs="_AttributeHolder" doc="Simple object for storing attributes.&#10;Implements equality by attribute names and values, and provides a simple string representation." ilk="class" name="Namespace">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, **kwargs)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
      </scope>
      <variable citdl="str" name="ONE_OR_MORE" />
      <variable citdl="str" name="OPTIONAL" />
      <variable citdl="str" name="PARSER" />
      <variable citdl="str" name="REMAINDER" />
      <scope classrefs="HelpFormatter" doc="Help message formatter which retains any formatting in descriptions.&#10;Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." ilk="class" name="RawDescriptionHelpFormatter">
        <scope ilk="function" name="_fill_text" signature="_fill_text(self, text, width, indent)" />
      </scope>
      <scope classrefs="RawDescriptionHelpFormatter" doc="Help message formatter which retains formatting of all help text.&#10;Only the name of this class is considered a public API. All the methods provided by the class are considered an implementation detail." ilk="class" name="RawTextHelpFormatter">
        <scope ilk="function" name="_split_lines" signature="_split_lines(self, text, width)" />
      </scope>
      <variable citdl="str" name="SUPPRESS" />
      <variable citdl="str" name="ZERO_OR_MORE" />
      <variable citdl="list" name="__all__" />
      <import module="_collections" />
      <import module="_copy" />
      <import module="_os" />
      <import module="_re" />
      <import module="_sys" />
      <import module="_textwrap" />
      <scope ilk="function" name="ngettext" signature="ngettext(msgid1, msgid2, n)" />
    </scope>
    <scope doc="Non-terminal symbols of Python grammar (from &quot;graminit.h&quot;).&#10;" ilk="blob" lang="Python3" name="symbol">
      <variable citdl="int" name="and_expr" />
      <variable citdl="int" name="and_test" />
      <variable citdl="int" name="arglist" />
      <variable citdl="int" name="argument" />
      <variable citdl="int" name="arith_expr" />
      <variable citdl="int" name="assert_stmt" />
      <variable citdl="int" name="async_funcdef" />
      <variable citdl="int" name="async_stmt" />
      <variable citdl="int" name="atom" />
      <variable citdl="int" name="atom_expr" />
      <variable citdl="int" name="augassign" />
      <variable citdl="int" name="break_stmt" />
      <variable citdl="int" name="classdef" />
      <variable citdl="int" name="comp_for" />
      <variable citdl="int" name="comp_if" />
      <variable citdl="int" name="comp_iter" />
      <variable citdl="int" name="comp_op" />
      <variable citdl="int" name="comparison" />
      <variable citdl="int" name="compound_stmt" />
      <variable citdl="int" name="continue_stmt" />
      <variable citdl="int" name="decorated" />
      <variable citdl="int" name="decorator" />
      <variable citdl="int" name="decorators" />
      <variable citdl="int" name="del_stmt" />
      <variable citdl="int" name="dictorsetmaker" />
      <variable citdl="int" name="dotted_as_name" />
      <variable citdl="int" name="dotted_as_names" />
      <variable citdl="int" name="dotted_name" />
      <variable citdl="int" name="encoding_decl" />
      <variable citdl="int" name="eval_input" />
      <variable citdl="int" name="except_clause" />
      <variable citdl="int" name="expr" />
      <variable citdl="int" name="expr_stmt" />
      <variable citdl="int" name="exprlist" />
      <variable citdl="int" name="factor" />
      <variable citdl="int" name="file_input" />
      <variable citdl="int" name="flow_stmt" />
      <variable citdl="int" name="for_stmt" />
      <variable citdl="int" name="funcdef" />
      <variable citdl="int" name="global_stmt" />
      <variable citdl="int" name="if_stmt" />
      <variable citdl="int" name="import_as_name" />
      <variable citdl="int" name="import_as_names" />
      <variable citdl="int" name="import_from" />
      <variable citdl="int" name="import_name" />
      <variable citdl="int" name="import_stmt" />
      <variable citdl="int" name="lambdef" />
      <variable citdl="int" name="lambdef_nocond" />
      <variable citdl="int" name="nonlocal_stmt" />
      <variable citdl="int" name="not_test" />
      <variable citdl="int" name="or_test" />
      <variable citdl="int" name="parameters" />
      <variable citdl="int" name="pass_stmt" />
      <variable citdl="int" name="power" />
      <variable citdl="int" name="raise_stmt" />
      <variable citdl="int" name="return_stmt" />
      <variable citdl="int" name="shift_expr" />
      <variable citdl="int" name="simple_stmt" />
      <variable citdl="int" name="single_input" />
      <variable citdl="int" name="sliceop" />
      <variable citdl="int" name="small_stmt" />
      <variable citdl="int" name="star_expr" />
      <variable citdl="int" name="stmt" />
      <variable citdl="int" name="subscript" />
      <variable citdl="int" name="subscriptlist" />
      <variable citdl="int" name="suite" />
      <variable citdl="dict" name="sym_name" />
      <variable citdl="int" name="term" />
      <variable citdl="int" name="test" />
      <variable citdl="int" name="test_nocond" />
      <variable citdl="int" name="testlist" />
      <variable citdl="int" name="testlist_comp" />
      <variable citdl="int" name="testlist_star_expr" />
      <variable citdl="int" name="tfpdef" />
      <variable citdl="int" name="trailer" />
      <variable citdl="int" name="try_stmt" />
      <variable citdl="int" name="typedargslist" />
      <variable citdl="int" name="varargslist" />
      <variable citdl="int" name="vfpdef" />
      <variable citdl="int" name="while_stmt" />
      <variable citdl="int" name="with_item" />
      <variable citdl="int" name="with_stmt" />
      <variable citdl="int" name="xor_expr" />
      <variable citdl="int" name="yield_arg" />
      <variable citdl="int" name="yield_expr" />
      <variable citdl="int" name="yield_stmt" />
    </scope>
    <scope doc="The io module provides the Python interfaces to stream handling. The&#10;builtin open function is defined in this module.  At the top of the I/O hierarchy is the abstract base class IOBase. It defines the basic interface to a stream. Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise an IOError if they do not support a given operation.  Extending IOBase is RawIOBase which deals simply with the reading and writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide an interface to OS files." ilk="blob" lang="Python3" name="_io">
      <scope classrefs="OSError" doc="I/O operation would block.&#10;" ilk="class" name="BlockingIOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="A buffered reader and writer object together.&#10;A buffered reader object and buffered writer object put together to form a sequential IO object that can read and write. This is typically used with a socket or two-way pipe.  reader and writer are RawIOBase objects that are readable and writeable respectively. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRWPair">
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="peek" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="__getstate__" />
        <scope ilk="function" name="readinto" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="A buffered interface to random access streams.&#10;The constructor creates a reader and writer for a seekable stream, raw, given in the first argument. If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedRandom">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope ilk="function" name="readinto" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope ilk="function" name="peek" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Create a new buffered reader using the given readable raw IO object.&#10;" ilk="class" name="BufferedReader">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Read and return up to n bytes, with at most one read() call&#10;to the underlying raw stream." ilk="function" name="read1" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope ilk="function" name="readinto" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope ilk="function" name="readinto1" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope ilk="function" name="peek" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="A buffer for a writeable sequential RawIO object.&#10;The constructor creates a BufferedWriter for the given writeable raw stream. If the buffer_size is not given, it defaults to DEFAULT_BUFFER_SIZE." ilk="class" name="BufferedWriter">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Disconnect this buffer from its underlying raw stream and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
        <scope doc="Write the given buffer to the IO stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <variable citdl="int" name="DEFAULT_BUFFER_SIZE" />
      <scope classrefs="_RawIOBase" doc="Open a file.&#10;The mode can be 'r' (default), 'w', 'x' or 'a' for reading, writing, exclusive creation or appending.  The file will be created if it doesn't exist when opened for writing or appending; it will be truncated when opened for writing.  A FileExistsError will be raised if it already exists when opened for creating. Opening a file for creating implies writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode to allow simultaneous reading and writing. A custom opener can be used by passing a callable as *opener*. The underlying file descriptor for the file object is then obtained by calling opener with (*name*, *flags*). *opener* must return an open file descriptor (passing os.open as *opener*" ilk="class" name="FileIO">
        <scope doc="True if file was opened in a read mode." ilk="function" name="readable" />
        <scope doc="Truncate the file to at most size bytes and return the&#10;truncated size." ilk="function" name="truncate" />
        <scope doc="Move to new file position and return the file position." ilk="function" name="seek" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the underlying file descriptor (an integer)." ilk="function" name="fileno" />
        <scope doc="Same as RawIOBase.readinto()." ilk="function" name="readinto" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="True if file was opened in a write mode." ilk="function" name="writable" />
        <scope doc="Read at most size bytes, returned as bytes." ilk="function" name="read" />
        <scope ilk="function" name="_dealloc_warn" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="True if the file is connected to a TTY device." ilk="function" name="isatty" />
        <scope doc="Close the file." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="True if file supports random-access." ilk="function" name="seekable" />
        <scope doc="Write bytes b to file, return number written." ilk="function" name="write" />
        <scope doc="Read all data from the file, returned as bytes." ilk="function" name="readall" />
        <scope doc="Current file position." ilk="function" name="tell" />
      </scope>
      <scope classrefs="object" doc="Codec used when reading a file in universal newlines mode.&#10;It wraps another incremental decoder, translating \r\n and \r into \n. It also records the types of newlines encountered.  When used with translate=False, it ensures that the newline sequence is returned in one piece. When used with decoder=None, it expects unicode strings as decode input and translates newlines without first invoking an external decoder." ilk="class" name="IncrementalNewlineDecoder">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="getstate" />
        <scope ilk="function" name="reset" />
        <scope ilk="function" name="setstate" />
        <scope ilk="function" name="decode" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Character and line based layer over a BufferedIOBase object, buffer.&#10;encoding gives the name of the encoding that the stream will be decoded or encoded with. It defaults to locale.getpreferredencoding(False).  errors determines the strictness of encoding and decoding (see help(codecs.Codec) or the documentation for codecs.register) and defaults to &quot;strict&quot;.  newline controls how line endings are handled. It can be None, '', '\n', '\r', and '\r\n'.  It works as follows: " ilk="class" name="TextIOWrapper">
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" />
        <scope doc="Truncate file to size bytes." ilk="function" name="truncate" />
        <scope doc="Separate the underlying buffer from the TextIOBase and&#10;return it." ilk="function" name="detach" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" />
        <scope doc="Return whether object was opened for writing." ilk="function" name="writable" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Read at most n characters from stream." ilk="function" name="read" />
        <scope doc="Return whether this is an 'interactive' stream." ilk="function" name="isatty" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" />
        <scope doc="Write string to stream." ilk="function" name="write" />
        <scope doc="Return current stream position." ilk="function" name="tell" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="ValueError OSError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="UnsupportedOperation" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
    </scope>
    <scope doc="Fraction, infinite-precision, real numbers.&#10;" ilk="blob" lang="Python3" name="fractions">
      <scope classrefs="object" doc="Construct a new Decimal object. 'value' can be an integer, string, tuple,&#10;or another Decimal object. If no value is given, return Decimal('0'). The context does not affect the conversion and is only passed to determine if the InvalidOperation trap is active." ilk="class" name="Decimal">
        <scope ilk="function" name="__trunc__" />
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return True if the argument is a finite number, and False if&#10;the argument is infinite or a NaN." ilk="function" name="is_finite" />
        <scope doc="Return True if the argument is a (quiet or signaling) NaN&#10;and False otherwise." ilk="function" name="is_nan" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return the digit-wise 'and' of the two (logical) operands." ilk="function" name="logical_and" />
        <scope doc="Minimum of self and other." ilk="function" name="min" />
        <scope doc="Return True if the argument is a signaling NaN and False&#10;otherwise." ilk="function" name="is_snan" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return True if the argument is canonical and False&#10;otherwise." ilk="function" name="is_canonical" />
        <scope ilk="function" name="__round__" />
        <scope doc="Return the remainder from dividing self by other." ilk="function" name="remainder_near" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Normalize the number by stripping the rightmost trailing&#10;zeros and converting any result equal to Decimal('0') to&#10;Decimal('0e0')." ilk="function" name="normalize" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Similar to the max() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="max_mag" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="Round to the nearest integer without signaling Inexact or&#10;Rounded." ilk="function" name="to_integral_value" />
        <scope doc="Return the smallest number representable in the given&#10;context (or in the current default context if no context is&#10;given) that is larger than the given operand." ilk="function" name="next_plus" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return the canonical encoding of the argument." ilk="function" name="canonical" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Similar to the min() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="min_mag" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope ilk="function" name="__copy__" />
        <scope doc="Identical to the to_integral_value() method." ilk="function" name="to_integral" />
        <scope doc="Convert to an engineering-type string." ilk="function" name="to_eng_string" />
        <scope doc="Return the digit-wise 'exclusive or' of the two (logical)&#10;operands." ilk="function" name="logical_xor" />
        <scope ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return the square root of the argument to full precision." ilk="function" name="sqrt" />
        <scope doc="Return the first operand with the exponent adjusted the&#10;second." ilk="function" name="scaleb" />
        <scope doc="Return True if the argument is subnormal, and False&#10;otherwise." ilk="function" name="is_subnormal" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return True if the argument is a quiet NaN, and False&#10;otherwise." ilk="function" name="is_qnan" />
        <scope doc="Return True if the argument is a (positive or negative) zero&#10;and False otherwise." ilk="function" name="is_zero" />
        <scope doc="Return True if the argument has a negative sign and False&#10;otherwise." ilk="function" name="is_signed" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return a tuple representation of the number." ilk="function" name="as_tuple" />
        <scope ilk="function" name="__deepcopy__" />
        <scope doc="If the two operands are unequal, return the number closest&#10;to the first operand in the direction of the second operand." ilk="function" name="next_toward" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return a string describing the class of the operand." ilk="function" name="number_class" />
        <scope doc="Return the absolute value of the argument." ilk="function" name="copy_abs" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Maximum of self and other." ilk="function" name="max" />
        <scope doc="Fused multiply-add." ilk="function" name="fma" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their value as in compare_total(), but ignoring&#10;the sign of each operand." ilk="function" name="compare_total_mag" />
        <scope doc="Return the largest number representable in the given context&#10;(or in the current default context if no context is given)&#10;that is smaller than the given operand." ilk="function" name="next_minus" />
        <scope ilk="function" name="__complex__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Compare self to other." ilk="function" name="compare" />
        <scope doc="Return self." ilk="function" name="conjugate" />
        <scope doc="Return a copy of the first operand with the sign set to be&#10;the same as the sign of the second operand." ilk="function" name="copy_sign" />
        <scope doc="Return a value equal to the first operand after rounding and&#10;having the exponent of the second operand." ilk="function" name="quantize" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return the digit-wise 'or' of the two (logical) operands." ilk="function" name="logical_or" />
        <scope doc="Return the base ten logarithm of the operand." ilk="function" name="log10" />
        <scope doc="Return the value of the (natural) exponential function e**x&#10;at the given number." ilk="function" name="exp" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return the adjusted exponent of the number." ilk="function" name="adjusted" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their numerical value." ilk="function" name="compare_total" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return True if the argument is either positive or negative&#10;infinity and False otherwise." ilk="function" name="is_infinite" />
        <scope doc="Return True if the argument is a normal finite non-zero&#10;number with an adjusted exponent greater than or equal to&#10;Emin." ilk="function" name="is_normal" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return the natural (base e) logarithm of the operand." ilk="function" name="ln" />
        <scope doc="Test whether self and other have the same exponent or&#10;whether both are NaN." ilk="function" name="same_quantum" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Identical to compare, except that all NaNs signal." ilk="function" name="compare_signal" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return the result of shifting the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="shift" />
        <scope doc="Return the negation of the argument." ilk="function" name="copy_negate" />
        <scope doc="Return Decimal(10), the radix (base) in which the Decimal&#10;class does all its arithmetic." ilk="function" name="radix" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Round to the nearest integer, signaling Inexact or Rounded&#10;as appropriate if rounding occurs." ilk="function" name="to_integral_exact" />
        <scope doc="Return the digit-wise inversion of the (logical) operand." ilk="function" name="logical_invert" />
        <scope doc="For a non-zero number, return the adjusted exponent of the&#10;operand as a Decimal instance." ilk="function" name="logb" />
        <scope doc="Return the result of rotating the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="rotate" />
        <scope ilk="function" name="__ceil__" />
      </scope>
      <scope classrefs="Rational" doc="This class implements rational numbers.&#10;In the two-argument form of the constructor, Fraction(8, 6) will produce a rational number equivalent to 4/3. Both arguments must be Rational. The numerator defaults to 0 and the denominator defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.  Fractions can also be constructed from:  - numeric strings similar to those accepted by the float constructor (for example, '-2.3' or '1e10') " ilk="class" name="Fraction">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Will be math.floor(a) in 3.0." ilk="function" name="__floor__" signature="__floor__(a)" />
        <scope doc="a * b" ilk="function" name="__mul__" signature="__mul__(a, b)" />
        <scope doc="a / b" ilk="function" name="__rtruediv__" signature="__rtruediv__(b, a)" />
        <scope doc="trunc(a)" ilk="function" name="__trunc__" signature="trunc(a)" />
        <scope doc="a - b" ilk="function" name="_sub" signature="_sub(a, b)" />
        <scope doc="a // b" ilk="function" name="__rfloordiv__" signature="__rfloordiv__(b, a)" />
        <scope doc="Will be round(self, ndigits) in 3.0." ilk="function" name="__round__" signature="__round__(self, ndigits=None)" />
        <scope doc="+a: Coerces a subclass instance to Fraction" ilk="function" name="__pos__" signature="__pos__(a)" />
        <scope doc="a % b" ilk="function" name="__mod__" signature="__mod__(a, b)" />
        <scope doc="a ** b" ilk="function" name="__pow__" signature="__pow__(a, b)" />
        <scope doc="a / b" ilk="function" name="__truediv__" signature="__truediv__(a, b)" />
        <scope doc="Converts a finite float to a rational number, exactly." ilk="function" name="from_float" />
        <scope doc="a + b" ilk="function" name="__add__" signature="__add__(a, b)" />
        <scope doc="abs(a)" ilk="function" name="__abs__" signature="abs(a)" />
        <scope doc="a &lt;= b" ilk="function" name="__le__" signature="__le__(a, b)" />
        <scope doc="str(self)" ilk="function" name="__str__" signature="str(self)" />
        <scope doc="a ** b" ilk="function" name="__rpow__" signature="__rpow__(b, a)" />
        <scope doc="Generates forward and reverse operators given a purely-&#10;rational operator and a function from the operator module." ilk="function" name="_operator_fallbacks" signature="_operator_fallbacks(monomorphic_operator, fallback_operator)" />
        <scope doc="-a" ilk="function" name="__neg__" signature="__neg__(a)" />
        <scope doc="a &gt;= b" ilk="function" name="__ge__" signature="__ge__(a, b)" />
        <scope doc="a == b" ilk="function" name="__eq__" signature="__eq__(a, b)" />
        <scope doc="a + b" ilk="function" name="__radd__" signature="__radd__(b, a)" />
        <scope doc="a * b" ilk="function" name="__rmul__" signature="__rmul__(b, a)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope doc="hash(self)" ilk="function" name="__hash__" signature="hash(self)" />
        <scope doc="Closest Fraction to self with denominator at most&#10;max_denominator." ilk="function" name="limit_denominator" signature="limit_denominator(self, max_denominator=1000000)" />
        <scope doc="a // b" ilk="function" name="__floordiv__" signature="__floordiv__(a, b)" />
        <scope doc="a / b" ilk="function" name="_div" signature="_div(a, b)" />
        <scope doc="a % b" ilk="function" name="__rmod__" signature="__rmod__(b, a)" />
        <scope doc="repr(self)" ilk="function" name="__repr__" signature="repr(self)" />
        <scope doc="a * b" ilk="function" name="_mul" signature="_mul(a, b)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="a - b" ilk="function" name="__sub__" signature="__sub__(a, b)" />
        <scope doc="a &gt; b" ilk="function" name="__gt__" signature="__gt__(a, b)" />
        <scope doc="Converts a finite Decimal instance to a rational number,&#10;exactly." ilk="function" name="from_decimal" />
        <scope doc="a + b" ilk="function" name="_add" signature="_add(a, b)" />
        <scope doc="Constructs a Rational." ilk="function" name="__new__" signature="__new__(cls, numerator=0, denominator=None, _normalize=True)" />
        <scope doc="Helper for comparison operators, for internal use only." ilk="function" name="_richcmp" signature="_richcmp(self, other, op)" />
        <scope doc="Will be math.ceil(a) in 3.0." ilk="function" name="__ceil__" signature="__ceil__(a)" />
        <scope doc="a != 0" ilk="function" name="__bool__" signature="__bool__(a)" />
        <scope doc="a &lt; b" ilk="function" name="__lt__" signature="__lt__(a, b)" />
        <scope doc="a - b" ilk="function" name="__rsub__" signature="__rsub__(b, a)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Calculate the Greatest Common Divisor of a and b." ilk="function" name="gcd" signature="gcd(a, b)" />
      <import module="math" />
      <import module="numbers" />
      <import module="operator" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="This module provides various functions to manipulate time values.&#10;There are two standard representations of time.  One is the number of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer or a floating point number (to represent fractions of seconds). The Epoch is system-defined; on Unix, it is generally January 1st, 1970. The actual value can be retrieved by calling gmtime(0).  The other representation is a tuple of 9 integers giving local time. The tuple items are: year (including century, e.g. 1998) month (1-12)" ilk="blob" lang="Python3" name="time">
      <variable citdl="int" name="CLOCK_MONOTONIC" />
      <variable citdl="int" name="CLOCK_MONOTONIC_RAW" />
      <variable citdl="int" name="CLOCK_PROCESS_CPUTIME_ID" />
      <variable citdl="int" name="CLOCK_REALTIME" />
      <variable citdl="int" name="CLOCK_THREAD_CPUTIME_ID" />
      <variable citdl="int" name="altzone" />
      <scope doc="Convert a time tuple to a string, e.g." ilk="function" name="asctime" returns="str" signature="asctime([tuple]) -&gt; string" />
      <scope doc="Return the CPU time or real time since the start of the&#10;process or since the first call to clock()." ilk="function" name="clock" signature="clock() -&gt; floating point number" />
      <scope doc="Return the resolution (precision) of the specified clock&#10;clk_id." ilk="function" name="clock_getres" signature="clock_getres(clk_id) -&gt; floating point number" />
      <scope doc="Return the time of the specified clock clk_id." ilk="function" name="clock_gettime" signature="clock_gettime(clk_id) -&gt; floating point number" />
      <scope doc="Set the time of the specified clock clk_id." ilk="function" name="clock_settime" signature="clock_settime(clk_id, time)" />
      <scope doc="Convert a time in seconds since the Epoch to a string in&#10;local time." ilk="function" name="ctime" returns="str" signature="ctime(seconds) -&gt; string" />
      <variable citdl="int" name="daylight" />
      <scope doc="Get information of the specified clock." ilk="function" name="get_clock_info" returns="dict" signature="get_clock_info(name: str) -&gt; dict" />
      <scope doc="tm_sec, tm_wday, tm_yday, tm_isdst)" ilk="function" name="gmtime" signature="gmtime([seconds]) -&gt; (tm_year, tm_mon, tm_mday, tm_hour, tm_min," />
      <scope doc="tm_sec,tm_wday,tm_yday,tm_isdst)" ilk="function" name="localtime" signature="localtime([seconds]) -&gt; (tm_year,tm_mon,tm_mday,tm_hour,tm_min," />
      <scope doc="Convert a time tuple in local time to seconds since the&#10;Epoch." ilk="function" name="mktime" signature="mktime(tuple) -&gt; floating point number" />
      <scope doc="Monotonic clock, cannot go backward." ilk="function" name="monotonic" returns="float" signature="monotonic() -&gt; float" />
      <scope doc="Performance counter for benchmarking." ilk="function" name="perf_counter" returns="float" signature="perf_counter() -&gt; float" />
      <scope doc="Process time for profiling: sum of the kernel and user-space&#10;CPU time." ilk="function" name="process_time" returns="float" signature="process_time() -&gt; float" />
      <scope doc="Delay execution for a given number of seconds." ilk="function" name="sleep" signature="sleep(seconds)" />
      <scope doc="Convert a time tuple to a string according to a format&#10;specification." ilk="function" name="strftime" returns="str" signature="strftime(format[, tuple]) -&gt; string" />
      <scope doc="Parse a string to a time tuple according to a format&#10;specification." ilk="function" name="strptime" signature="strptime(string, format) -&gt; struct_time" />
      <scope classrefs="tuple" doc="The time value as returned by gmtime(), localtime(), and strptime(), and&#10;accepted by asctime(), mktime() and strftime().  May be considered as a sequence of 9 integers.  Note that several fields' values are not the same as those defined by the C language standard for struct tm.  For example, the value of the field tm_year is the actual year, not year - 1900.  See individual fields' descriptions for details." ilk="class" name="struct_time">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Return the current time in seconds since the Epoch." ilk="function" name="time" signature="time() -&gt; floating point number" />
      <variable citdl="int" name="timezone" />
      <variable citdl="tuple" name="tzname" />
      <scope doc="Initialize, or reinitialize, the local timezone to the value&#10;stored in os.environ['TZ']." ilk="function" name="tzset" signature="tzset()" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="email.mime" />
    <scope doc="&#10;" ilk="blob" lang="Python3" name="xml.dom.pulldom">
      <variable citdl="str" name="CHARACTERS" />
      <variable citdl="str" name="COMMENT" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="DOMEventStream">
        <scope doc="Explicitly release parsing objects" ilk="function" name="clear" signature="clear()" />
        <scope doc="Fallback replacement for getEvent() that emits the events&#10;that _slurp() read previously." ilk="function" name="_emit" signature="_emit(self)" />
        <scope ilk="function" name="expandNode" signature="expandNode(self, node)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, pos)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="getEvent" signature="getEvent(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream, parser, bufsize)" />
        <scope doc="Fallback replacement for getEvent() using the standard SAX2&#10;interface, which means we slurp the SAX events into memory&#10;(no performance gain, but we are compatible to all SAX&#10;parsers)." ilk="function" name="_slurp" signature="_slurp(self)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <variable citdl="str" name="END_DOCUMENT" />
      <variable citdl="str" name="END_ELEMENT" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ErrorHandler">
        <scope ilk="function" name="warning" signature="warning(self, exception)" />
        <scope ilk="function" name="error" signature="error(self, exception)" />
        <scope ilk="function" name="fatalError" signature="fatalError(self, exception)" />
      </scope>
      <variable citdl="str" name="IGNORABLE_WHITESPACE" />
      <variable citdl="str" name="PROCESSING_INSTRUCTION" />
      <scope classrefs="ContentHandler" doc="Interface for receiving logical document content events.&#10;This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document." ilk="class" name="PullDOM">
        <scope doc="Explicitly release parsing structures" ilk="function" name="clear" signature="clear()" />
        <scope ilk="function" name="comment" signature="comment(self, s)" />
        <scope doc="Begin the scope of a prefix-URI Namespace mapping." ilk="function" name="startPrefixMapping" signature="startPrefixMapping(self, prefix, uri)" />
        <scope doc="Signals the end of an element in non-namespace mode." ilk="function" name="endElement" signature="endElement(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, documentFactory=None)" />
        <scope doc="Receive notification of ignorable whitespace in element&#10;content." ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, chars)" />
        <scope ilk="function" name="buildDocument" signature="buildDocument(self, uri, tagname)" />
        <scope doc="Signals the end of an element in namespace mode." ilk="function" name="endElementNS" signature="endElementNS(self, name, tagName)" />
        <scope doc="Receive notification of the end of a document." ilk="function" name="endDocument" signature="endDocument(self)" />
        <scope doc="End the scope of a prefix-URI mapping." ilk="function" name="endPrefixMapping" signature="endPrefixMapping(self, prefix)" />
        <scope doc="Receive notification of the beginning of a document." ilk="function" name="startDocument" signature="startDocument(self)" />
        <scope doc="Signals the start of an element in namespace mode." ilk="function" name="startElementNS" signature="startElementNS(self, name, tagName, attrs)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Receive notification of a processing instruction." ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope doc="Called by the parser to give the application a locator for&#10;locating the origin of document events." ilk="function" name="setDocumentLocator" signature="setDocumentLocator(self, locator)" />
        <scope doc="Receive notification of character data." ilk="function" name="characters" signature="characters(self, chars)" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
      </scope>
      <scope classrefs="PullDOM" doc="Interface for receiving logical document content events.&#10;This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document." ilk="class" name="SAX2DOM">
        <scope doc="Receive notification of a processing instruction." ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope doc="Receive notification of character data." ilk="function" name="characters" signature="characters(self, chars)" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
        <scope doc="Signals the start of an element in namespace mode." ilk="function" name="startElementNS" signature="startElementNS(self, name, tagName, attrs)" />
        <scope doc="Receive notification of ignorable whitespace in element&#10;content." ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, chars)" />
      </scope>
      <variable citdl="str" name="START_DOCUMENT" />
      <variable citdl="str" name="START_ELEMENT" />
      <variable citdl="int" name="default_bufsize" />
      <scope ilk="function" name="parse" signature="parse(stream_or_string, parser=None, bufsize=None)" />
      <scope ilk="function" name="parseString" signature="parseString(string, parser=None)" />
      <import module="xml" />
    </scope>
    <scope doc="Fix &quot;for x in f.xreadlines()&quot; -&gt; &quot;for x in f&quot;.&#10;This fixer will also convert g(f.xreadlines) into g(f.__iter__)." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_xreadlines">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixXreadlines">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-freebsd8.IN">
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IFA6_IS_DEPRECATED" signature="IFA6_IS_DEPRECATED(a)" />
      <scope ilk="function" name="IFA6_IS_INVALID" signature="IFA6_IS_INVALID(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_INTFACELOCAL" signature="IN6_IS_ADDR_MC_INTFACELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_EMBED" signature="IN6_IS_SCOPE_EMBED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_LINKLOCAL" signature="IN6_IS_SCOPE_LINKLOCAL(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <scope ilk="function" name="IN_LINKLOCAL" signature="IN_LINKLOCAL(i)" />
      <scope ilk="function" name="IN_LOCAL_GROUP" signature="IN_LOCAL_GROUP(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_MAX" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CARP" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MOBILE" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OLD_DIVERT" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PFSYNC" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SCTP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SKIP" />
      <variable citdl="int" name="IPPROTO_SPACER" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TLSP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_ADDRCTLPOLICY" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_AUTO_LINKLOCAL" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_IFQ" />
      <variable citdl="int" name="IPV6CTL_ISATAPRTR" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MCAST_PMTU" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6CTL_RIP6STATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_STEALTH" />
      <variable citdl="int" name="IPV6CTL_TEMPPLTIME" />
      <variable citdl="int" name="IPV6CTL_TEMPVLTIME" />
      <variable citdl="int" name="IPV6CTL_USETEMPADDR" />
      <variable citdl="int" name="IPV6CTL_USE_DEFAULTZONE" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6CTL_V6ONLY" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_2292DSTOPTS" />
      <variable citdl="int" name="IPV6_2292HOPLIMIT" />
      <variable citdl="int" name="IPV6_2292HOPOPTS" />
      <variable citdl="int" name="IPV6_2292NEXTHOP" />
      <variable citdl="int" name="IPV6_2292PKTINFO" />
      <variable citdl="int" name="IPV6_2292PKTOPTIONS" />
      <variable citdl="int" name="IPV6_2292RTHDR" />
      <variable citdl="int" name="IPV6_ADDR_INT16_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_ULL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_USL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MNL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_ONE" />
      <variable citdl="int" name="IPV6_ADDR_INT32_SMP" />
      <variable citdl="int" name="IPV6_ADDR_INT32_TWO" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_GLOBAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_INTFACELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_SITELOCAL" />
      <variable citdl="int" name="IPV6_AUTOFLOWLABEL" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MSFILTER" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PATHMTU" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6_REACHCONF" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVHOPLIMIT" />
      <variable citdl="int" name="IPV6_RECVHOPOPTS" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVPATHMTU" />
      <variable citdl="int" name="IPV6_RECVPKTINFO" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVRTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_USE_MIN_MTU" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_ADD_SOURCE_MEMBERSHIP" />
      <variable citdl="int" name="IP_BLOCK_SOURCE" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DONTFRAG" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DROP_SOURCE_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_NAT_CFG" />
      <variable citdl="int" name="IP_FW_NAT_DEL" />
      <variable citdl="int" name="IP_FW_NAT_GET_CONFIG" />
      <variable citdl="int" name="IP_FW_NAT_GET_LOG" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_TABLE_ADD" />
      <variable citdl="int" name="IP_FW_TABLE_DEL" />
      <variable citdl="int" name="IP_FW_TABLE_FLUSH" />
      <variable citdl="int" name="IP_FW_TABLE_GETSIZE" />
      <variable citdl="int" name="IP_FW_TABLE_LIST" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MAX_SOURCE_FILTER" />
      <variable citdl="int" name="IP_MINTTL" />
      <variable citdl="int" name="IP_MIN_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MSFILTER" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_ONESBCAST" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RECVTTL" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_SENDSRCADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="IP_UNBLOCK_SOURCE" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="MCAST_BLOCK_SOURCE" />
      <variable citdl="int" name="MCAST_EXCLUDE" />
      <variable citdl="int" name="MCAST_INCLUDE" />
      <variable citdl="int" name="MCAST_JOIN_GROUP" />
      <variable citdl="int" name="MCAST_JOIN_SOURCE_GROUP" />
      <variable citdl="int" name="MCAST_LEAVE_GROUP" />
      <variable citdl="int" name="MCAST_LEAVE_SOURCE_GROUP" />
      <variable citdl="int" name="MCAST_UNBLOCK_SOURCE" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="__CC_SUPPORTS___FUNC__" />
      <variable citdl="int" name="__CC_SUPPORTS___INLINE__" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="in_nullhost" signature="in_nullhost(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="multiprocessing.popen_forkserver">
      <scope classrefs="Popen" doc="&#10;" ilk="class" name="Popen">
        <scope ilk="function" name="_launch" signature="_launch(self, process_obj)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, process_obj)" />
        <scope ilk="function" name="poll" signature="poll(self, flag=1)" />
        <scope ilk="function" name="duplicate_for_child" signature="duplicate_for_child(self, fd)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="context" />
      <import module="forkserver" />
      <import module="io" />
      <import module="os" />
      <import module="popen_fork" />
      <import module="reduction" />
      <import module="spawn" />
      <import module="util" />
    </scope>
    <scope doc="# $Id: __init__.py 3375 2008-02-13 08:05:08Z fredrik $&#10;# elementtree package" ilk="blob" lang="Python3" name="xml.etree">
      <import module="ElementPath" />
      <import module="ElementTree" />
      <import module="cElementTree" />
    </scope>
    <scope doc="This module is always available.  It provides access to the&#10;mathematical functions defined by the C standard." ilk="blob" lang="Python3" name="math">
      <scope doc="Return the arc cosine (measured in radians) of x." ilk="function" name="acos" signature="acos(x)" />
      <scope doc="Return the inverse hyperbolic cosine of x." ilk="function" name="acosh" signature="acosh(x)" />
      <scope doc="Return the arc sine (measured in radians) of x." ilk="function" name="asin" signature="asin(x)" />
      <scope doc="Return the inverse hyperbolic sine of x." ilk="function" name="asinh" signature="asinh(x)" />
      <scope doc="Return the arc tangent (measured in radians) of x." ilk="function" name="atan" signature="atan(x)" />
      <scope doc="Return the arc tangent (measured in radians) of y/x." ilk="function" name="atan2" signature="atan2(y, x)" />
      <scope doc="Return the inverse hyperbolic tangent of x." ilk="function" name="atanh" signature="atanh(x)" />
      <scope doc="Return the ceiling of x as an int." ilk="function" name="ceil" signature="ceil(x)" />
      <scope doc="Return a float with the magnitude (absolute value) of x but&#10;the sign of y." ilk="function" name="copysign" signature="copysign(x, y)" />
      <scope doc="Return the cosine of x (measured in radians)." ilk="function" name="cos" signature="cos(x)" />
      <scope doc="Return the hyperbolic cosine of x." ilk="function" name="cosh" signature="cosh(x)" />
      <scope doc="Convert angle x from radians to degrees." ilk="function" name="degrees" signature="degrees(x)" />
      <variable citdl="float" name="e" />
      <scope doc="Error function at x." ilk="function" name="erf" signature="erf(x)" />
      <scope doc="Complementary error function at x." ilk="function" name="erfc" signature="erfc(x)" />
      <scope doc="Return e raised to the power of x." ilk="function" name="exp" signature="exp(x)" />
      <scope doc="Return exp(x)-1." ilk="function" name="expm1" signature="expm1(x)" />
      <scope doc="Return the absolute value of the float x." ilk="function" name="fabs" signature="fabs(x)" />
      <scope doc="Find x!." ilk="function" name="factorial" signature="factorial(x) -&gt; Integral" />
      <scope doc="Return the floor of x as an int." ilk="function" name="floor" signature="floor(x)" />
      <scope doc="Return fmod(x, y), according to platform C." ilk="function" name="fmod" signature="fmod(x, y)" />
      <scope doc="Return the mantissa and exponent of x, as pair (m, e)." ilk="function" name="frexp" signature="frexp(x)" />
      <scope doc="Return an accurate floating point sum of values in the&#10;iterable." ilk="function" name="fsum" signature="fsum(iterable)" />
      <scope doc="Gamma function at x." ilk="function" name="gamma" signature="gamma(x)" />
      <scope doc="greatest common divisor of x and y" ilk="function" name="gcd" returns="int" signature="gcd(x, y) -&gt; int" />
      <scope doc="Return the Euclidean distance, sqrt(x*x + y*y)." ilk="function" name="hypot" signature="hypot(x, y)" />
      <variable citdl="float" name="inf" />
      <scope doc="Determine whether two floating point numbers are close in&#10;value." ilk="function" name="isclose" returns="bool" signature="is_close(a, b, *, rel_tol=1e-09, abs_tol=0.0) -&gt; bool" />
      <scope doc="Return True if x is neither an infinity nor a NaN, and False&#10;otherwise." ilk="function" name="isfinite" returns="bool" signature="isfinite(x) -&gt; bool" />
      <scope doc="Return True if x is a positive or negative infinity, and&#10;False otherwise." ilk="function" name="isinf" returns="bool" signature="isinf(x) -&gt; bool" />
      <scope doc="Return True if x is a NaN (not a number), and False&#10;otherwise." ilk="function" name="isnan" returns="bool" signature="isnan(x) -&gt; bool" />
      <scope doc="Return x * (2**i)." ilk="function" name="ldexp" signature="ldexp(x, i)" />
      <scope doc="Natural logarithm of absolute value of Gamma function at x." ilk="function" name="lgamma" signature="lgamma(x)" />
      <scope doc="Return the logarithm of x to the given base." ilk="function" name="log" signature="log(x[, base])" />
      <scope doc="Return the base 10 logarithm of x." ilk="function" name="log10" signature="log10(x)" />
      <scope doc="Return the natural logarithm of 1+x (base e)." ilk="function" name="log1p" signature="log1p(x)" />
      <scope doc="Return the base 2 logarithm of x." ilk="function" name="log2" signature="log2(x)" />
      <scope doc="Return the fractional and integer parts of x." ilk="function" name="modf" signature="modf(x)" />
      <variable citdl="float" name="nan" />
      <variable citdl="float" name="pi" />
      <scope doc="Return x**y (x to the power of y)." ilk="function" name="pow" signature="pow(x, y)" />
      <scope doc="Convert angle x from degrees to radians." ilk="function" name="radians" signature="radians(x)" />
      <scope doc="Return the sine of x (measured in radians)." ilk="function" name="sin" signature="sin(x)" />
      <scope doc="Return the hyperbolic sine of x." ilk="function" name="sinh" signature="sinh(x)" />
      <scope doc="Return the square root of x." ilk="function" name="sqrt" signature="sqrt(x)" />
      <scope doc="Return the tangent of x (measured in radians)." ilk="function" name="tan" signature="tan(x)" />
      <scope doc="Return the hyperbolic tangent of x." ilk="function" name="tanh" signature="tanh(x)" />
      <scope doc="Truncates x to the nearest Integral toward 0." ilk="function" name="trunc" signature="trunc(x:Real) -&gt; Integral" />
    </scope>
    <scope doc="Fixer that turns &lt;&gt; into !=.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_ne">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixNe">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Routines to help recognizing sound files.&#10;Function whathdr() recognizes various types of sound file headers. It understands almost all headers that SOX can decode.  The return tuple contains the following items, in this order: - file type (as SOX understands it) - sampling rate (0 if unknown or hard to decode) - number of channels (0 if unknown or hard to decode) - number of frames in the file (-1 if unknown or hard to decode) - number of bits/sample, or 'U' for U-LAW, or 'A' for A-LAW " ilk="blob" lang="Python3" name="sndhdr">
      <scope classrefs="tuple" doc="SndHeaders(filetype, framerate, nchannels, nframes, sampwidth)&#10;" ilk="class" name="SndHeaders">
        <scope doc="Return a new SndHeaders object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new SndHeaders object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Create new instance of SndHeaders(filetype, framerate,&#10;nchannels, nframes, sampwidth)" ilk="function" name="__new__" signature="__new__(_cls, filetype, framerate, nchannels, nframes, sampwidth)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="get_long_be" signature="get_long_be(b)" />
      <scope ilk="function" name="get_long_le" signature="get_long_le(b)" />
      <scope ilk="function" name="get_short_be" signature="get_short_be(b)" />
      <scope ilk="function" name="get_short_le" signature="get_short_le(b)" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope ilk="function" name="test" signature="test()" />
      <scope ilk="function" name="test_8svx" signature="test_8svx(h, f)" />
      <scope ilk="function" name="test_aifc" signature="test_aifc(h, f)" />
      <scope ilk="function" name="test_au" signature="test_au(h, f)" />
      <scope ilk="function" name="test_hcom" signature="test_hcom(h, f)" />
      <scope ilk="function" name="test_sndr" signature="test_sndr(h, f)" />
      <scope ilk="function" name="test_sndt" signature="test_sndt(h, f)" />
      <scope ilk="function" name="test_voc" signature="test_voc(h, f)" />
      <scope ilk="function" name="test_wav" signature="test_wav(h, f)" />
      <scope ilk="function" name="testall" signature="testall(list, recursive, toplevel)" />
      <variable citdl="list" name="tests" />
      <scope doc="Guess the type of a sound file." ilk="function" name="what" signature="what(filename)" />
      <scope doc="Recognize sound headers." ilk="function" name="whathdr" signature="whathdr(filename)" />
    </scope>
    <scope doc="Basic message object for the email package object model.&#10;" ilk="blob" lang="Python3" name="email.message">
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="object" doc="Map character sets to their email properties.&#10;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" name="Charset">
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode_lines" signature="header_encode_lines(self, string, maxlengths)" />
        <scope doc="Return the output character set." ilk="function" name="get_output_charset" signature="get_output_charset(self)" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" name="get_body_encoding" signature="get_body_encoding(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self, header_bytes)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input_charset='us-ascii')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" name="body_encode" signature="body_encode(self, string)" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode" signature="header_encode(self, string)" />
      </scope>
      <scope classrefs="MIMEPart" doc="Basic message object.&#10;A message object is defined as something that has a bunch of RFC 2822 headers and a payload.  It may optionally have an envelope header (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a multipart or a message/rfc822), then the payload is a list of Message objects, otherwise it is a string.  Message objects implement part of the `mapping' interface, which assumes there is exactly one occurrence of the header per message.  Some headers do in fact appear multiple times (e.g. Received) and for those headers, you must use the explicit API to set or get all the headers.  Not all of" ilk="class" name="EmailMessage">
        <scope ilk="function" name="set_content" signature="set_content(self, *args, **kw)" />
      </scope>
      <scope classrefs="Message" doc="Basic message object.&#10;A message object is defined as something that has a bunch of RFC 2822 headers and a payload.  It may optionally have an envelope header (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a multipart or a message/rfc822), then the payload is a list of Message objects, otherwise it is a string.  Message objects implement part of the `mapping' interface, which assumes there is exactly one occurrence of the header per message.  Some headers do in fact appear multiple times (e.g. Received) and for those headers, you must use the explicit API to set or get all the headers.  Not all of" ilk="class" name="MIMEPart">
        <scope ilk="function" name="_make_multipart" signature="_make_multipart(self, subtype, disallowed_subtypes, boundary)" />
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="set_content" signature="set_content(self, *args, content_manager=None, **kw)" />
        <scope ilk="function" name="add_alternative" signature="add_alternative(self, *args, **kw)" />
        <scope ilk="function" name="get_content" signature="get_content(self, *args, content_manager=None, **kw)" />
        <scope ilk="function" name="make_related" signature="make_related(self, boundary=None)" />
        <scope ilk="function" name="add_attachment" signature="add_attachment(self, *args, **kw)" />
        <scope doc="Return an iterator over the non-main parts of a multipart." ilk="function" name="iter_attachments" signature="iter_attachments(self)" />
        <scope ilk="function" name="add_related" signature="add_related(self, *args, **kw)" />
        <scope ilk="function" name="_find_body" signature="_find_body(self, part, preferencelist)" />
        <scope ilk="function" name="clear_content" signature="clear_content(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, policy=None)" />
        <scope ilk="function" name="is_attachment" signature="is_attachment(self)" />
        <scope ilk="function" name="_add_multipart" signature="_add_multipart(self, _subtype, *args, _disp=None, **kw)" />
        <scope ilk="function" name="make_alternative" signature="make_alternative(self, boundary=None)" />
        <scope doc="Return best candidate mime part for display as 'body' of&#10;message." ilk="function" name="get_body" signature="get_body(self, preferencelist=('related', 'html', 'plain'))" />
        <scope ilk="function" name="make_mixed" signature="make_mixed(self, boundary=None)" />
        <scope doc="Return an iterator over all immediate subparts of a&#10;multipart." ilk="function" name="iter_parts" signature="iter_parts(self)" />
      </scope>
      <scope classrefs="object" doc="Basic message object.&#10;A message object is defined as something that has a bunch of RFC 2822 headers and a payload.  It may optionally have an envelope header (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a multipart or a message/rfc822), then the payload is a list of Message objects, otherwise it is a string.  Message objects implement part of the `mapping' interface, which assumes there is exactly one occurrence of the header per message.  Some headers do in fact appear multiple times (e.g. Received) and for those headers, you must use the explicit API to set or get all the headers.  Not all of" ilk="class" name="Message">
        <scope doc="Return the `default' content type." ilk="function" name="get_default_type" signature="get_default_type(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope doc="Return the parameter value if found in the Content-Type&#10;header." ilk="function" name="get_param" signature="get_param(self, param, failobj=None, header='content-type', unquote=True)" />
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
        <scope doc="Return a list of all the message's header values." ilk="function" name="values" signature="values(self)" />
        <scope doc="Delete all occurrences of a header, if present." ilk="function" name="__delitem__" signature="__delitem__(self, name)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Return the Charset instance associated with the message's&#10;payload." ilk="function" name="get_charset" signature="get_charset(self)" />
        <scope doc="Set the main type and subtype for the Content-Type header." ilk="function" name="set_type" signature="set_type(self, type, header='Content-Type', requote=True)" />
        <scope doc="Return the entire formatted message as a bytes object." ilk="function" name="__bytes__" signature="__bytes__(self)" />
        <scope doc="# Unix From_ line" ilk="function" name="set_unixfrom" signature="set_unixfrom(self, unixfrom)" />
        <scope doc="Set the charset of the payload to a given character set." ilk="function" name="set_charset" signature="set_charset(self, charset)" />
        <scope doc="Return the filename associated with the payload if present." ilk="function" name="get_filename" signature="get_filename(self, failobj=None)" />
        <scope doc="Return the message's content type." ilk="function" name="get_content_type" signature="get_content_type(self)" />
        <scope doc="Walk over the message tree, yielding each subpart." ilk="function" name="walk" signature="walk(self)" />
        <scope doc="Return the message's main content type." ilk="function" name="get_content_maintype" signature="get_content_maintype(self)" />
        <scope doc="Set the boundary parameter in Content-Type to 'boundary'." ilk="function" name="set_boundary" signature="set_boundary(self, boundary)" />
        <scope doc="Return the charset parameter of the Content-Type header." ilk="function" name="get_content_charset" signature="get_content_charset(self, failobj=None)" />
        <scope doc="Return the (name, value) header pairs without modification." ilk="function" name="raw_items" signature="raw_items(self)" />
        <scope doc="Return a reference to the payload." ilk="function" name="get_payload" signature="get_payload(self, i=None, decode=False)" />
        <scope ilk="function" name="_get_params_preserve" signature="_get_params_preserve(self, failobj, header)" />
        <scope doc="Return the entire formatted message as a bytes object." ilk="function" name="as_bytes" signature="as_bytes(self, unixfrom=False, policy=None)" />
        <scope doc="Set the `default' content type." ilk="function" name="set_default_type" signature="set_default_type(self, ctype)" />
        <scope doc="Returns the message's sub-content type." ilk="function" name="get_content_subtype" signature="get_content_subtype(self)" />
        <scope doc="Get a header value." ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Set the payload to the given value." ilk="function" name="set_payload" signature="set_payload(self, payload, charset=None)" />
        <scope doc="Return the entire formatted message as a string." ilk="function" name="as_string" signature="as_string(self, unixfrom=False, maxheaderlen=0, policy=None)" />
        <scope doc="Extended header setting." ilk="function" name="add_header" signature="add_header(self, _name, _value, **_params)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, policy=Compat32())" />
        <scope doc="Return the boundary associated with the payload if present." ilk="function" name="get_boundary" signature="get_boundary(self, failobj=None)" />
        <scope doc="Return True if the message consists of multiple parts." ilk="function" name="is_multipart" signature="is_multipart(self)" />
        <scope doc="Set the value of a header." ilk="function" name="__setitem__" signature="__setitem__(self, name, val)" />
        <scope doc="Get all the message's header fields and values." ilk="function" name="items" signature="items(self)" />
        <scope doc="Return the entire formatted message as a string." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Get a header value." ilk="function" name="get" signature="get(self, name, failobj=None)" />
        <scope doc="Return the message's Content-Type parameters, as a list." ilk="function" name="get_params" signature="get_params(self, failobj=None, header='content-type', unquote=True)" />
        <scope doc="Return a list of all the message's header field names." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Store name and value in the model without modification." ilk="function" name="set_raw" signature="set_raw(self, name, value)" />
        <scope doc="Set a parameter in the Content-Type header." ilk="function" name="set_param" signature="set_param(self, param, value, header='Content-Type', requote=True, charset=None, language='', replace=False)" />
        <scope doc="Return the message's content-disposition if it exists, or&#10;None." ilk="function" name="get_content_disposition" signature="get_content_disposition(self)" />
        <scope doc="Remove the given parameter completely from the Content-Type&#10;header." ilk="function" name="del_param" signature="del_param(self, param, header='content-type', requote=True)" />
        <scope doc="Return a list of all the values for the named field." ilk="function" name="get_all" signature="get_all(self, name, failobj=None)" />
        <scope doc="Replace a header." ilk="function" name="replace_header" signature="replace_header(self, _name, _value)" />
        <scope doc="Return a list containing the charset(s) used in this&#10;message." ilk="function" name="get_charsets" signature="get_charsets(self, failobj=None)" />
        <scope ilk="function" name="get_unixfrom" signature="get_unixfrom(self)" />
        <scope doc="Return the total number of headers, including duplicates." ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <variable citdl="str" name="SEMISPACE" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_charset" />
      <variable citdl="Compat32" name="compat32" />
      <scope ilk="function" name="decode_b" signature="decode_b(encoded)" />
      <import module="errors" />
      <import module="quopri" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="tspecials" />
      <import module="utils" />
      <import module="uu" />
      <import module="warnings" />
    </scope>
    <scope doc="Loading unittests.&#10;" ilk="blob" lang="Python3" name="unittest.loader">
      <scope classrefs="object" doc="This class is responsible for loading tests according to various criteria&#10;and returning them wrapped in a TestSuite" ilk="class" name="TestLoader">
        <scope doc="Used by discovery." ilk="function" name="_find_test_path" signature="_find_test_path(self, full_path, pattern, namespace=False)" />
        <scope doc="Return a suite of all tests cases found using the given&#10;sequence of string specifiers." ilk="function" name="loadTestsFromNames" signature="loadTestsFromNames(self, names, module=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return a sorted sequence of method names found within&#10;testCaseClass" ilk="function" name="getTestCaseNames" signature="getTestCaseNames(self, testCaseClass)" />
        <scope doc="Return a suite of all tests cases contained in testCaseClass" ilk="function" name="loadTestsFromTestCase" signature="loadTestsFromTestCase(self, testCaseClass)" />
        <scope ilk="function" name="_match_path" signature="_match_path(self, path, full_path, pattern)" />
        <scope doc="Return a suite of all tests cases given a string specifier." ilk="function" name="loadTestsFromName" signature="loadTestsFromName(self, name, module=None)" />
        <scope doc="Used by discovery. Yields test suites it loads." ilk="function" name="_find_tests" signature="_find_tests(self, start_dir, pattern, namespace=False)" />
        <scope doc="Find and return all test modules from the specified start&#10;directory, recursing into subdirectories to find them and&#10;return all tests found within them." ilk="function" name="discover" signature="discover(self, start_dir, pattern='test*.py', top_level_dir=None)" />
        <scope ilk="function" name="_get_directory_containing_module" signature="_get_directory_containing_module(self, module_name)" />
        <scope doc="Return a suite of all tests cases contained in the given&#10;module" ilk="function" name="loadTestsFromModule" signature="loadTestsFromModule(self, module, *args, pattern=None, **kws)" />
        <scope ilk="function" name="_get_module_from_name" signature="_get_module_from_name(self, name)" />
        <scope ilk="function" name="_get_name_from_path" signature="_get_name_from_path(self, path)" />
        <scope doc="Return -1 if x &lt; y, 0 if x == y and 1 if x &gt; y" ilk="function" name="sortTestMethodsUsing" signature="sortTestMethodsUsing(x, y)" />
      </scope>
      <variable citdl="SRE_Pattern" name="VALID_MODULE_NAME" />
      <import module="case" />
      <variable citdl="TestLoader" name="defaultTestLoader" />
      <scope ilk="function" name="findTestCases" signature="findTestCases(module, prefix='test', sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;, suiteClass=&lt;class 'unittest.suite.TestSuite'&gt;)" />
      <scope doc="Test whether FILENAME matches PATTERN." ilk="function" name="fnmatch" signature="fnmatch(name, pat)" />
      <import module="functools" />
      <scope ilk="function" name="getTestCaseNames" signature="getTestCaseNames(testCaseClass, prefix, sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;)" />
      <scope ilk="function" name="makeSuite" signature="makeSuite(testCaseClass, prefix='test', sortUsing=&lt;function three_way_cmp at 0x7f11801e8268&gt;, suiteClass=&lt;class 'unittest.suite.TestSuite'&gt;)" />
      <import module="os" />
      <import module="re" />
      <import module="suite" />
      <import module="sys" />
      <import module="traceback" />
      <import module="types" />
      <import module="util" />
      <import module="warnings" />
    </scope>
    <scope doc="Different kinds of SAX Exceptions&#10;" ilk="blob" lang="Python3" name="xml.sax._exceptions">
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain&#10;basic error or warning information from either the XML parser or the application: you can subclass it to provide additional functionality, or to add localization. Note that although you will receive a SAXException as the argument to the handlers in the ErrorHandler interface, you are not actually required to raise the exception; instead, you can simply read the information in it." ilk="class" name="SAXException">
        <scope doc="Return a message for this exception." ilk="function" name="getMessage" signature="getMessage(self)" />
        <scope doc="Avoids weird error messages if someone does exception[ix] by&#10;mistake, since Exception has __getitem__ defined." ilk="function" name="__getitem__" signature="__getitem__(self, ix)" />
        <scope doc="Creates an exception." ilk="function" name="__init__" signature="__init__(self, msg, exception=None)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return the embedded exception, or None if there was none." ilk="function" name="getException" signature="getException(self)" />
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.&#10;An XMLReader will raise this exception when it is confronted with an unrecognized feature or property. SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.&#10;An XMLReader will raise this exception when a service it cannot perform is requested (specifically setting a state or value). SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.&#10;This exception will include information for locating the error in the original XML document. Note that although the application will receive a SAXParseException as the argument to the handlers in the ErrorHandler interface, the application is not actually required to raise the exception; instead, it can simply read the information in it and take a different action.  Since this exception is a subclass of SAXException, it inherits the ability to wrap another exception." ilk="class" name="SAXParseException">
        <scope doc="Get the system identifier of the entity where the exception&#10;occurred." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="The line number of the end of the text where the exception&#10;occurred." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Get the public identifier of the entity where the exception&#10;occurred." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Creates the exception." ilk="function" name="__init__" signature="__init__(self, msg, exception, locator)" />
        <scope doc="The column number of the end of the text where the exception&#10;occurred." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
      </scope>
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.&#10;An XMLReader module (driver) should raise this exception when it is first imported, e.g. when a support module cannot be imported. It also may be raised during parsing, e.g. if executing an external program is not permitted." ilk="class" name="SAXReaderNotAvailable" />
    </scope>
    <scope doc="distutils.command.build_scripts&#10;Implements the Distutils 'build_scripts' command." ilk="blob" lang="Python3" name="distutils.command.build_scripts">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="object" doc="Mixin class for commands that run 2to3.&#10;To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands to override how 2to3 is invoked." ilk="class" name="Mixin2to3">
        <scope ilk="function" name="run_2to3" signature="run_2to3(self, files)" />
      </scope>
      <variable citdl="int" name="ST_MODE" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_scripts">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Copy each script listed in 'self.scripts'; if it's marked as&#10;a Python script in the Unix way (first line matches&#10;'first_line_re', ie." ilk="function" name="copy_scripts" signature="copy_scripts(self)" />
        <scope ilk="function" name="get_source_files" signature="get_source_files(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope classrefs="build_scripts Mixin2to3" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_scripts_2to3">
        <scope doc="Copy each script listed in 'self.scripts'; if it's marked as&#10;a Python script in the Unix way (first line matches&#10;'first_line_re', ie." ilk="function" name="copy_scripts" signature="copy_scripts(self)" />
      </scope>
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <variable citdl="SRE_Pattern" name="first_line_re" />
      <import module="log" />
      <scope doc="Return true if 'source' exists and is more recently modified&#10;than 'target', or if 'source' exists and 'target' doesn't." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="re" />
      <import module="sysconfig" />
      <import module="tokenize" />
    </scope>
    <scope doc="JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of&#10;JavaScript syntax (ECMA-262 3rd edition) used as a lightweight data interchange format.  :mod:`json` exposes an API familiar to users of the standard library :mod:`marshal` and :mod:`pickle` modules.  It is derived from a version of the externally maintained simplejson library.  Encoding basic Python object hierarchies::  &gt;&gt;&gt; import json" ilk="blob" lang="Python3" name="json">
      <scope classrefs="ValueError" doc="Subclass of ValueError with the following additional properties:&#10;msg: The unformatted error message doc: The JSON document being parsed pos: The start index of doc where parsing failed lineno: The line corresponding to pos colno: The column corresponding to pos" ilk="class" name="JSONDecodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, doc, pos)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="object" doc="Simple JSON &lt;http://json.org&gt; decoder&#10;Performs the following translations in decoding by default:  +---------------+-------------------+ | JSON          | Python            | +===============+===================+ | object        | dict              | +---------------+-------------------+ | array         | list              | +---------------+-------------------+ | string        | str               |" ilk="class" name="JSONDecoder">
        <scope doc="``object_hook``, if specified, will be called with the&#10;result of every JSON object decoded and its return value&#10;will be used in place of the given ``dict``." ilk="function" name="__init__" signature="__init__(self, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)" />
        <scope doc="Decode a JSON document from ``s`` (a ``str`` beginning with&#10;a JSON document) and return a 2-tuple of the Python&#10;representation and the index in ``s`` where the document&#10;ended." ilk="function" name="raw_decode" signature="raw_decode(self, s, idx=0)" />
        <scope doc="Return the Python representation of ``s`` (a ``str``&#10;instance containing a JSON document)." ilk="function" name="decode" signature="decode(self, s, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f117e2886f0&gt;)" />
      </scope>
      <scope classrefs="object" doc="Extensible JSON &lt;http://json.org&gt; encoder for Python data structures.&#10;Supports the following objects and types by default:  +-------------------+---------------+ | Python            | JSON          | +===================+===============+ | dict              | object        | +-------------------+---------------+ | list, tuple       | array         | +-------------------+---------------+ | str               | string        |" ilk="class" name="JSONEncoder">
        <scope doc="Encode the given object and yield each string representation&#10;as available." ilk="function" name="iterencode" signature="iterencode(self, o, _one_shot=False)" />
        <scope doc="Return a JSON string representation of a Python data&#10;structure." ilk="function" name="encode" signature="encode(self, o)" />
        <scope doc="Implement this method in a subclass such that it returns a&#10;serializable object for ``o``, or calls the base&#10;implementation (to raise a ``TypeError``)." ilk="function" name="default" signature="default(self, o)" />
        <scope doc="Constructor for JSONEncoder, with sensible defaults." ilk="function" name="__init__" signature="__init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="decoder" />
      <scope doc="Serialize ``obj`` as a JSON formatted stream to ``fp`` (a&#10;``.write()``-supporting file-like object)." ilk="function" name="dump" signature="dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)" />
      <scope doc="Serialize ``obj`` to a JSON formatted ``str``." ilk="function" name="dumps" signature="dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)" />
      <import module="encoder" />
      <scope doc="Deserialize ``fp`` (a ``.read()``-supporting file-like&#10;object containing a JSON document) to a Python object." ilk="function" name="load" signature="load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)" />
      <scope doc="Deserialize ``s`` (a ``str`` instance containing a JSON&#10;document) to a Python object." ilk="function" name="loads" signature="loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)" />
      <import module="scanner" />
    </scope>
    <scope doc="Mailcap file handling.  See RFC 1524.&#10;" ilk="blob" lang="Python3" name="mailcap">
      <variable citdl="list" name="__all__" />
      <scope doc="Find a match for a mailcap entry." ilk="function" name="findmatch" signature="findmatch(caps, MIMEtype, key='view', filename='/dev/null', plist=[])" />
      <scope ilk="function" name="findparam" signature="findparam(name, plist)" />
      <scope doc="Return a dictionary containing the mailcap database." ilk="function" name="getcaps" signature="getcaps()" />
      <scope doc="Return a list of all mailcap files found on the system." ilk="function" name="listmailcapfiles" signature="listmailcapfiles()" />
      <scope ilk="function" name="lookup" signature="lookup(caps, MIMEtype, key=None)" />
      <import module="os" />
      <scope doc="Separate one key-value pair in a mailcap entry." ilk="function" name="parsefield" signature="parsefield(line, i, n)" />
      <scope doc="Parse one entry in a mailcap file and return a dictionary." ilk="function" name="parseline" signature="parseline(line)" />
      <scope doc="Read a mailcap file and return a dictionary keyed by MIME&#10;type." ilk="function" name="readmailcapfile" signature="readmailcapfile(fp)" />
      <scope ilk="function" name="show" signature="show(caps)" />
      <scope ilk="function" name="subst" signature="subst(field, MIMEtype, filename, plist=[])" />
      <scope ilk="function" name="test" signature="test()" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-netbsd1.IN">
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ALLOWSRCRT" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBCAST" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_FORWSRCRT" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <scope ilk="function" name="in_nullhost" signature="in_nullhost(x)" />
    </scope>
    <scope doc="Event loop and event loop policy.&#10;" ilk="blob" lang="Python3" name="asyncio.events">
      <scope classrefs="object" doc="Abstract event loop.&#10;" ilk="class" name="AbstractEventLoop">
        <scope doc="Return whether the event loop is currently running." ilk="function" name="is_running" signature="is_running(self)" />
        <scope ilk="function" name="call_later" signature="call_later(self, delay, callback, *args)" />
        <scope ilk="function" name="sock_sendall" signature="sock_sendall(self, sock, data)" />
        <scope ilk="function" name="getnameinfo" signature="getnameinfo(self, sockaddr, flags=0)" />
        <scope ilk="function" name="create_task" signature="create_task(self, coro)" />
        <scope ilk="function" name="remove_reader" signature="remove_reader(self, fd)" />
        <scope doc="Run the event loop until stop() is called." ilk="function" name="run_forever" signature="run_forever(self)" />
        <scope doc="Run the event loop until a Future is done." ilk="function" name="run_until_complete" signature="run_until_complete(self, future)" />
        <scope doc="Close the loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="set_default_executor" signature="set_default_executor(self, executor)" />
        <scope ilk="function" name="time" signature="time(self)" />
        <scope ilk="function" name="call_soon" signature="call_soon(self, callback, *args)" />
        <scope ilk="function" name="remove_signal_handler" signature="remove_signal_handler(self, sig)" />
        <scope ilk="function" name="set_task_factory" signature="set_task_factory(self, factory)" />
        <scope ilk="function" name="sock_recv" signature="sock_recv(self, sock, nbytes)" />
        <scope ilk="function" name="sock_accept" signature="sock_accept(self, sock)" />
        <scope ilk="function" name="add_signal_handler" signature="add_signal_handler(self, sig, callback, *args)" />
        <scope ilk="function" name="set_debug" signature="set_debug(self, enabled)" />
        <scope doc="Notification that a TimerHandle has been cancelled." ilk="function" name="_timer_handle_cancelled" signature="_timer_handle_cancelled(self, handle)" />
        <scope ilk="function" name="sock_connect" signature="sock_connect(self, sock, address)" />
        <scope ilk="function" name="default_exception_handler" signature="default_exception_handler(self, context)" />
        <scope ilk="function" name="remove_writer" signature="remove_writer(self, fd)" />
        <scope ilk="function" name="get_task_factory" signature="get_task_factory(self)" />
        <scope ilk="function" name="get_debug" signature="get_debug(self)" />
        <scope ilk="function" name="subprocess_shell" signature="subprocess_shell(self, protocol_factory, cmd, *, stdin=-1, stdout=-1, stderr=-1, **kwargs)" />
        <scope ilk="function" name="getaddrinfo" signature="getaddrinfo(self, host, port, *, family=0, type=0, proto=0, flags=0)" />
        <scope ilk="function" name="call_at" signature="call_at(self, when, callback, *args)" />
        <scope ilk="function" name="add_writer" signature="add_writer(self, fd, callback, *args)" />
        <scope ilk="function" name="call_soon_threadsafe" signature="call_soon_threadsafe(self, callback, *args)" />
        <scope doc="A coroutine which creates a TCP server bound to host and&#10;port." ilk="function" name="create_server" signature="create_server(self, protocol_factory, host=None, port=None, *, family=&lt;AddressFamily.AF_UNSPEC: 0&gt;, flags=1, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None)" />
        <scope doc="Returns True if the event loop was closed." ilk="function" name="is_closed" signature="is_closed(self)" />
        <scope doc="A coroutine which creates a datagram endpoint." ilk="function" name="create_datagram_endpoint" signature="create_datagram_endpoint(self, protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)" />
        <scope doc="Stop the event loop as soon as reasonable." ilk="function" name="stop" signature="stop(self)" />
        <scope ilk="function" name="run_in_executor" signature="run_in_executor(self, executor, func, *args)" />
        <scope ilk="function" name="add_reader" signature="add_reader(self, fd, callback, *args)" />
        <scope ilk="function" name="subprocess_exec" signature="subprocess_exec(self, protocol_factory, *args, stdin=-1, stdout=-1, stderr=-1, **kwargs)" />
        <scope ilk="function" name="create_unix_connection" signature="create_unix_connection(self, protocol_factory, path, *, ssl=None, sock=None, server_hostname=None)" />
        <scope ilk="function" name="call_exception_handler" signature="call_exception_handler(self, context)" />
        <scope ilk="function" name="create_connection" signature="create_connection(self, protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None)" />
        <scope ilk="function" name="set_exception_handler" signature="set_exception_handler(self, handler)" />
        <scope doc="A coroutine which creates a UNIX Domain Socket server." ilk="function" name="create_unix_server" signature="create_unix_server(self, protocol_factory, path, *, sock=None, backlog=100, ssl=None)" />
        <scope doc="Register read pipe in event loop." ilk="function" name="connect_read_pipe" signature="connect_read_pipe(self, protocol_factory, pipe)" />
        <scope doc="Register write pipe in event loop." ilk="function" name="connect_write_pipe" signature="connect_write_pipe(self, protocol_factory, pipe)" />
      </scope>
      <scope classrefs="object" doc="Abstract policy for accessing the event loop.&#10;" ilk="class" name="AbstractEventLoopPolicy">
        <scope doc="Set the watcher for child processes." ilk="function" name="set_child_watcher" signature="set_child_watcher(self, watcher)" />
        <scope doc="Create and return a new event loop object according to this&#10;policy's rules." ilk="function" name="new_event_loop" signature="new_event_loop(self)" />
        <scope doc="Set the event loop for the current context to loop." ilk="function" name="set_event_loop" signature="set_event_loop(self, loop)" />
        <scope doc="Get the event loop for the current context." ilk="function" name="get_event_loop" signature="get_event_loop(self)" />
        <scope doc="Get the watcher for child processes." ilk="function" name="get_child_watcher" signature="get_child_watcher(self)" />
      </scope>
      <scope classrefs="object" doc="Abstract server returned by create_server().&#10;" ilk="class" name="AbstractServer">
        <scope doc="Stop serving. This leaves existing connections open." ilk="function" name="close" signature="close(self)" />
        <scope doc="Coroutine to wait until service is closed." ilk="function" name="wait_closed" signature="wait_closed(self)" />
      </scope>
      <scope classrefs="AbstractEventLoopPolicy" doc="Default policy implementation for accessing the event loop.&#10;In this policy, each thread has its own event loop.  However, we only automatically create an event loop by default for the main thread; other threads by default have no event loop.  Other policies may have different rules (e.g. a single global event loop, or automatically creating an event loop per thread, or using some other notion of context to which an event loop is associated)." ilk="class" name="BaseDefaultEventLoopPolicy">
        <scope doc="Create a new event loop." ilk="function" name="new_event_loop" signature="new_event_loop(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Set the event loop." ilk="function" name="set_event_loop" signature="set_event_loop(self, loop)" />
        <scope doc="Get the event loop." ilk="function" name="get_event_loop" signature="get_event_loop(self)" />
      </scope>
      <scope classrefs="object" doc="Object returned by callback registration methods.&#10;" ilk="class" name="Handle">
        <scope ilk="function" name="_run" signature="_run(self)" />
        <scope ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, callback, args, loop)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Handle" doc="Object returned by timed callback registration methods.&#10;" ilk="class" name="TimerHandle">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" signature="__ne__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, when, callback, args, loop)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="compat" />
      <import module="functools" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().get_child_watcher()." ilk="function" name="get_child_watcher" signature="get_child_watcher()" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().get_event_loop()." ilk="function" name="get_event_loop" signature="get_event_loop()" />
      <scope doc="Get the current event loop policy." ilk="function" name="get_event_loop_policy" signature="get_event_loop_policy()" />
      <import module="inspect" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().new_event_loop()." ilk="function" name="new_event_loop" signature="new_event_loop()" />
      <import module="reprlib" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().set_child_watcher(watcher)." ilk="function" name="set_child_watcher" signature="set_child_watcher(watcher)" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().set_event_loop(loop)." ilk="function" name="set_event_loop" signature="set_event_loop(loop)" />
      <scope doc="Set the current event loop policy." ilk="function" name="set_event_loop_policy" signature="set_event_loop_policy(policy)" />
      <import module="socket" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="threading" />
      <import module="traceback" />
    </scope>
    <scope doc="Routine to &quot;compile&quot; a .py file to a .pyc file.&#10;This module has intimate knowledge of the format of .pyc files." ilk="blob" lang="Python3" name="py_compile">
      <scope classrefs="Exception" doc="Exception raised when an error occurs while attempting to&#10;compile the file.  To raise this exception, use  raise PyCompileError(exc_type,exc_value,file[,msg])  where  exc_type:   exception type to be used in error message type name can be accesses as class variable" ilk="class" name="PyCompileError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, exc_type, exc_value, file, msg='')" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Byte-compile one Python source file to Python bytecode." ilk="function" name="compile" signature="compile(file, cfile=None, dfile=None, doraise=False, optimize=-1)" />
      <import module="importlib" />
      <scope doc="Compile several source files." ilk="function" name="main" signature="main(args=None)" />
      <import module="os" />
      <import module="sys" />
      <import module="traceback" />
    </scope>
    <scope doc="Internal classes used by the gzip, lzma and bz2 modules&#10;" ilk="blob" lang="Python3" name="_compression">
      <variable citdl="int" name="BUFFER_SIZE" />
      <scope classrefs="BufferedIOBase" doc="Mode-checking helper functions.&#10;" ilk="class" name="BaseStream">
        <scope ilk="function" name="_check_can_seek" signature="_check_can_seek(self)" />
        <scope ilk="function" name="_check_can_write" signature="_check_can_write(self)" />
        <scope ilk="function" name="_check_not_closed" signature="_check_not_closed(self)" />
        <scope ilk="function" name="_check_can_read" signature="_check_can_read(self)" />
      </scope>
      <scope classrefs="RawIOBase" doc="Adapts the decompressor API to a RawIOBase reader API&#10;" ilk="class" name="DecompressReader">
        <scope ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Return whether object supports random access." ilk="function" name="seekable" signature="seekable(self)" />
        <scope doc="# Rewind the file to the beginning of the data stream." ilk="function" name="_rewind" signature="_rewind(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, decomp_factory, trailing_error=(), **decomp_args)" />
        <scope doc="Return the current file position." ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope doc="Change stream position." ilk="function" name="seek" signature="seek(self, offset, whence=0)" />
      </scope>
      <import module="io" />
    </scope>
    <scope doc="Simple API for XML (SAX) implementation for Python.&#10;This module provides an implementation of the SAX 2 interface; information about the Java version of the interface can be found at http://www.megginson.com/SAX/.  The Python version of the interface is documented at &lt;...&gt;.  This package contains the following modules:  handler -- Base classes and constants which define the SAX 2 API for the 'client-side' of SAX for Python. " ilk="blob" lang="Python3" name="xml.sax">
      <scope classrefs="object" doc="Interface for receiving logical document content events.&#10;This is the main callback interface in SAX, and the one most important to applications. The order of events in this interface mirrors the order of the information in the document." ilk="class" name="ContentHandler">
        <scope doc="Begin the scope of a prefix-URI Namespace mapping." ilk="function" name="startPrefixMapping" signature="startPrefixMapping(self, prefix, uri)" />
        <scope doc="Signals the end of an element in non-namespace mode." ilk="function" name="endElement" signature="endElement(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Receive notification of ignorable whitespace in element&#10;content." ilk="function" name="ignorableWhitespace" signature="ignorableWhitespace(self, whitespace)" />
        <scope doc="Signals the end of an element in namespace mode." ilk="function" name="endElementNS" signature="endElementNS(self, name, qname)" />
        <scope doc="Receive notification of the end of a document." ilk="function" name="endDocument" signature="endDocument(self)" />
        <scope doc="End the scope of a prefix-URI mapping." ilk="function" name="endPrefixMapping" signature="endPrefixMapping(self, prefix)" />
        <scope doc="Receive notification of the beginning of a document." ilk="function" name="startDocument" signature="startDocument(self)" />
        <scope doc="Signals the start of an element in non-namespace mode." ilk="function" name="startElement" signature="startElement(self, name, attrs)" />
        <scope doc="Receive notification of a processing instruction." ilk="function" name="processingInstruction" signature="processingInstruction(self, target, data)" />
        <scope doc="Called by the parser to give the application a locator for&#10;locating the origin of document events." ilk="function" name="setDocumentLocator" signature="setDocumentLocator(self, locator)" />
        <scope doc="Receive notification of character data." ilk="function" name="characters" signature="characters(self, content)" />
        <scope doc="Signals the start of an element in namespace mode." ilk="function" name="startElementNS" signature="startElementNS(self, name, qname, attrs)" />
        <scope doc="Receive notification of a skipped entity." ilk="function" name="skippedEntity" signature="skippedEntity(self, name)" />
      </scope>
      <scope classrefs="object" doc="Basic interface for SAX error handlers.&#10;If you create an object that implements this interface, then register the object with your XMLReader, the parser will call the methods in your object to report all warnings and errors. There are three levels of errors available: warnings, (possibly) recoverable errors, and unrecoverable errors. All methods take a SAXParseException as the only parameter." ilk="class" name="ErrorHandler">
        <scope doc="Handle a warning." ilk="function" name="warning" signature="warning(self, exception)" />
        <scope doc="Handle a recoverable error." ilk="function" name="error" signature="error(self, exception)" />
        <scope doc="Handle a non-recoverable error." ilk="function" name="fatalError" signature="fatalError(self, exception)" />
      </scope>
      <scope classrefs="object" doc="Encapsulation of the information needed by the XMLReader to&#10;read entities.  This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/or the character stream of an entity.  Applications will create objects of this class for use in the XMLReader.parse method and for returning from EntityResolver.resolveEntity. " ilk="class" name="InputSource">
        <scope doc="Returns the system identifier of this InputSource." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Set the character stream for this input source." ilk="function" name="setCharacterStream" signature="setCharacterStream(self, charfile)" />
        <scope doc="Set the byte stream (a Python file-like object which does&#10;not perform byte-to-character conversion) for this input&#10;source." ilk="function" name="setByteStream" signature="setByteStream(self, bytefile)" />
        <scope doc="Sets the public identifier of this InputSource." ilk="function" name="setPublicId" signature="setPublicId(self, public_id)" />
        <scope doc="Sets the system identifier of this InputSource." ilk="function" name="setSystemId" signature="setSystemId(self, system_id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, system_id=None)" />
        <scope doc="Returns the public identifier of this InputSource." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Sets the character encoding of this InputSource." ilk="function" name="setEncoding" signature="setEncoding(self, encoding)" />
        <scope doc="Get the character encoding of this InputSource." ilk="function" name="getEncoding" signature="getEncoding(self)" />
        <scope doc="Get the byte stream for this input source." ilk="function" name="getByteStream" signature="getByteStream(self)" />
        <scope doc="Get the character stream for this input source." ilk="function" name="getCharacterStream" signature="getCharacterStream(self)" />
      </scope>
      <scope classrefs="Exception" doc="Encapsulate an XML error or warning. This class can contain&#10;basic error or warning information from either the XML parser or the application: you can subclass it to provide additional functionality, or to add localization. Note that although you will receive a SAXException as the argument to the handlers in the ErrorHandler interface, you are not actually required to raise the exception; instead, you can simply read the information in it." ilk="class" name="SAXException">
        <scope doc="Return a message for this exception." ilk="function" name="getMessage" signature="getMessage(self)" />
        <scope doc="Avoids weird error messages if someone does exception[ix] by&#10;mistake, since Exception has __getitem__ defined." ilk="function" name="__getitem__" signature="__getitem__(self, ix)" />
        <scope doc="Creates an exception." ilk="function" name="__init__" signature="__init__(self, msg, exception=None)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return the embedded exception, or None if there was none." ilk="function" name="getException" signature="getException(self)" />
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.&#10;An XMLReader will raise this exception when it is confronted with an unrecognized feature or property. SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.&#10;An XMLReader will raise this exception when a service it cannot perform is requested (specifically setting a state or value). SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="SAXException" doc="Encapsulate an XML parse error or warning.&#10;This exception will include information for locating the error in the original XML document. Note that although the application will receive a SAXParseException as the argument to the handlers in the ErrorHandler interface, the application is not actually required to raise the exception; instead, it can simply read the information in it and take a different action.  Since this exception is a subclass of SAXException, it inherits the ability to wrap another exception." ilk="class" name="SAXParseException">
        <scope doc="Get the system identifier of the entity where the exception&#10;occurred." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Create a string representation of the exception." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="The line number of the end of the text where the exception&#10;occurred." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Get the public identifier of the entity where the exception&#10;occurred." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Creates the exception." ilk="function" name="__init__" signature="__init__(self, msg, exception, locator)" />
        <scope doc="The column number of the end of the text where the exception&#10;occurred." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
      </scope>
      <scope classrefs="SAXNotSupportedException" doc="Exception class for a missing driver.&#10;An XMLReader module (driver) should raise this exception when it is first imported, e.g. when a support module cannot be imported. It also may be raised during parsing, e.g. if executing an external program is not permitted." ilk="class" name="SAXReaderNotAvailable" />
      <import module="_exceptions" />
      <variable citdl="list" name="default_parser_list" />
      <import module="handler" />
      <scope doc="Creates and returns a SAX parser." ilk="function" name="make_parser" signature="make_parser(parser_list=[])" />
      <scope ilk="function" name="parse" signature="parse(source, handler, errorHandler=&lt;xml.sax.handler.ErrorHandler object at 0x7f117be1c6a0&gt;)" />
      <scope ilk="function" name="parseString" signature="parseString(string, handler, errorHandler=&lt;xml.sax.handler.ErrorHandler object at 0x7f117be1c908&gt;)" />
      <import module="xmlreader" />
    </scope>
    <scope doc="email package exception classes.&#10;" ilk="blob" lang="Python3" name="email.errors">
      <scope classrefs="MessageParseError" doc="Couldn't find terminating boundary.&#10;" ilk="class" name="BoundaryError" />
      <scope classrefs="MessageError" doc="An illegal charset was given.&#10;" ilk="class" name="CharsetError" />
      <scope classrefs="MessageDefect" doc="A start boundary was found, but not the corresponding close boundary.&#10;" ilk="class" name="CloseBoundaryNotFoundDefect" />
      <scope classrefs="MessageDefect" doc="A message had a continuation line as its first header line.&#10;" ilk="class" name="FirstHeaderLineIsContinuationDefect" />
      <scope classrefs="MessageDefect" doc="Base class for a header defect.&#10;" ilk="class" name="HeaderDefect">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kw)" />
      </scope>
      <scope classrefs="HeaderDefect" doc="A header that must have a value had none&#10;" ilk="class" name="HeaderMissingRequiredValue" />
      <scope classrefs="MessageParseError" doc="Error while parsing headers.&#10;" ilk="class" name="HeaderParseError" />
      <scope classrefs="MessageDefect" doc="base64 encoded sequence had characters not in base64 alphabet&#10;" ilk="class" name="InvalidBase64CharactersDefect" />
      <scope classrefs="MessageDefect" doc="base64 encoded sequence had an incorrect length&#10;" ilk="class" name="InvalidBase64PaddingDefect" />
      <scope classrefs="HeaderDefect" doc="Header is not valid, message gives details.&#10;" ilk="class" name="InvalidHeaderDefect" />
      <scope classrefs="MessageDefect" doc="An invalid content transfer encoding was set on the multipart itself.&#10;" ilk="class" name="InvalidMultipartContentTransferEncodingDefect" />
      <scope classrefs="MessageDefect" doc="Found line with no leading whitespace and no colon before blank line.&#10;" ilk="class" name="MalformedHeaderDefect" />
      <scope classrefs="ValueError" doc="Base class for a message defect.&#10;" ilk="class" name="MessageDefect">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, line=None)" />
      </scope>
      <scope classrefs="Exception" doc="Base class for errors in the email package.&#10;" ilk="class" name="MessageError" />
      <scope classrefs="MessageError" doc="Base class for message parsing errors.&#10;" ilk="class" name="MessageParseError" />
      <scope classrefs="MessageDefect" doc="A 'Unix-from' header was found in the middle of a header block.&#10;" ilk="class" name="MisplacedEnvelopeHeaderDefect" />
      <scope classrefs="MessageDefect" doc="Found line with no leading whitespace and no colon before blank line.&#10;" ilk="class" name="MissingHeaderBodySeparatorDefect" />
      <scope classrefs="MessageError TypeError" doc="Conversion to a multipart is prohibited.&#10;" ilk="class" name="MultipartConversionError" />
      <scope classrefs="MessageDefect" doc="A message claimed to be a multipart but no subparts were found.&#10;" ilk="class" name="MultipartInvariantViolationDefect" />
      <scope classrefs="MessageDefect" doc="A message claimed to be a multipart but had no boundary parameter.&#10;" ilk="class" name="NoBoundaryInMultipartDefect" />
      <scope classrefs="HeaderDefect" doc="local_part contains non-ASCII characters&#10;" ilk="class" name="NonASCIILocalPartDefect" />
      <scope classrefs="HeaderDefect" doc="ASCII characters outside the ascii-printable range found&#10;" ilk="class" name="NonPrintableDefect">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, non_printables)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="HeaderDefect" doc="Header uses syntax declared obsolete by RFC 5322&#10;" ilk="class" name="ObsoleteHeaderDefect" />
      <scope classrefs="MessageDefect" doc="The claimed start boundary was never found.&#10;" ilk="class" name="StartBoundaryNotFoundDefect" />
      <scope classrefs="MessageDefect" doc="Header contained bytes that could not be decoded&#10;" ilk="class" name="UndecodableBytesDefect" />
    </scope>
    <scope doc="Queues&#10;" ilk="blob" lang="Python3" name="asyncio.queues">
      <scope classrefs="Queue" doc="A subclass of Queue that retrieves most recently added entries first.&#10;" ilk="class" name="LifoQueue">
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
      </scope>
      <scope classrefs="Queue" doc="A subclass of Queue; retrieves entries in priority order (lowest first).&#10;Entries are typically tuples of the form: (priority number, data)." ilk="class" name="PriorityQueue">
        <scope ilk="function" name="_put" signature="_put(self, item, heappush=&lt;built-in function heappush&gt;)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self, heappop=&lt;built-in function heappop&gt;)" />
      </scope>
      <scope classrefs="object" doc="A queue, useful for coordinating producer and consumer coroutines.&#10;If maxsize is less than or equal to zero, the queue size is infinite. If it is an integer greater than 0, then &quot;yield from put()&quot; will block when the queue reaches maxsize, until an item is removed by get().  Unlike the standard library Queue, you can reliably know this Queue's size with qsize(), since your single-threaded asyncio application won't be interrupted between calling qsize() and doing an operation on the Queue." ilk="class" name="Queue">
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope ilk="function" name="_wakeup_next" signature="_wakeup_next(self, waiters)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0, *, loop=None)" />
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item)" />
        <scope doc="Remove and return an item from the queue." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Block until all items in the queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Number of items in the queue." ilk="function" name="qsize" signature="qsize(self)" />
        <scope ilk="function" name="_format" signature="_format(self)" />
        <scope doc="Return True if there are maxsize items in the queue." ilk="function" name="full" signature="full(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Exception" doc="Exception raised when Queue.get_nowait() is called on a Queue object&#10;which is empty." ilk="class" name="QueueEmpty" />
      <scope classrefs="Exception" doc="Exception raised when the Queue.put_nowait() method is called on a Queue&#10;object which is full." ilk="class" name="QueueFull" />
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="compat" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="events" />
      <import module="futures" />
      <import module="heapq" />
      <import module="locks" />
    </scope>
    <scope doc="distutils.command.check&#10;Implements the Distutils 'check' command." ilk="blob" lang="Python3" name="distutils.command.check">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <variable citdl="bool" name="HAS_DOCUTILS" />
      <scope classrefs="Command" doc="This command checks the meta-data of the package.&#10;" ilk="class" name="check">
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Counts the number of warnings that occurs." ilk="function" name="warn" signature="warn(self, msg)" />
        <scope doc="Ensures that all required elements of meta-data are&#10;supplied." ilk="function" name="check_metadata" signature="check_metadata(self)" />
        <scope doc="Sets default values for options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Runs the command." ilk="function" name="run" signature="run(self)" />
        <scope doc="Returns warnings when the provided data doesn't compile." ilk="function" name="_check_rst_data" signature="_check_rst_data(self, data)" />
        <scope doc="Checks if the long string fields are reST-compliant." ilk="function" name="check_restructuredtext" signature="check_restructuredtext(self)" />
      </scope>
    </scope>
    <scope doc="More comprehensive traceback formatting for Python scripts.&#10;To enable this module, do:  import cgitb; cgitb.enable()  at the top of your script.  The optional arguments to enable() are:  display     - if true, tracebacks are displayed in the web browser logdir      - if set, tracebacks are written to files in this directory context     - number of lines of source code to show for each stack frame format      - 'text' or 'html' controls the output format" ilk="blob" lang="Python3" name="cgitb">
      <scope classrefs="object" doc="A hook to replace sys.excepthook that shows tracebacks in HTML.&#10;" ilk="class" name="Hook">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, display=1, logdir=None, context=5, file=None, format='html')" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, etype, evalue, etb)" />
        <scope ilk="function" name="handle" signature="handle(self, info=None)" />
      </scope>
      <variable citdl="list" name="__UNDEF__" />
      <scope doc="Install an exception handler that formats tracebacks as&#10;HTML." ilk="function" name="enable" signature="enable(display=1, logdir=None, context=5, format='html')" />
      <scope ilk="function" name="grey" signature="grey(text)" />
      <scope ilk="function" name="handler" />
      <scope doc="Return a nice HTML document describing a given traceback." ilk="function" name="html" signature="html(einfo, context=5)" />
      <import module="inspect" />
      <import module="keyword" />
      <import module="linecache" />
      <scope doc="Find the value for a given name in the given environment." ilk="function" name="lookup" signature="lookup(name, frame, locals)" />
      <import module="os" />
      <import module="pydoc" />
      <scope doc="Return a string that resets the CGI and browser to a known&#10;state." ilk="function" name="reset" signature="reset()" />
      <scope doc="Scan one logical line of Python and look up values of&#10;variables used." ilk="function" name="scanvars" signature="scanvars(reader, frame, locals)" />
      <scope ilk="function" name="small" signature="small(text)" />
      <scope ilk="function" name="strong" signature="strong(text)" />
      <import module="sys" />
      <import module="tempfile" />
      <scope doc="Return a plain text document describing a given traceback." ilk="function" name="text" signature="text(einfo, context=5)" />
      <import module="time" />
      <import module="tokenize" />
      <import module="traceback" />
    </scope>
    <scope doc="Generic (shallow and deep) copying operations.&#10;Interface summary:  import copy  x = copy.copy(y)        # make a shallow copy of y x = copy.deepcopy(y)    # make a deep copy of y  For module specific errors, copy.Error is raised.  The difference between shallow and deep copying is only relevant for" ilk="blob" lang="Python3" name="copy">
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="NoneType" name="PyStringMap" />
      <variable citdl="list" name="__all__" />
      <import module="builtins" />
      <scope doc="Shallow copy operation on arbitrary Python objects." ilk="function" name="copy" signature="copy(x)" />
      <scope doc="Deep copy operation on arbitrary Python objects." ilk="function" name="deepcopy" signature="deepcopy(x, memo=None, _nil=[])" />
      <variable citdl="dict" name="dispatch_table" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <variable citdl="str" name="name" />
      <scope classrefs="object" doc="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" name="t">
        <scope doc="Remove all elements from this set." ilk="function" name="clear" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Update a set with the symmetric difference of itself and&#10;another." ilk="function" name="symmetric_difference_update" />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Remove all elements of another set from this set." ilk="function" name="difference_update" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="Remove an element from a set; it must be a member." ilk="function" name="remove" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Update a set with the intersection of itself and another." ilk="function" name="intersection_update" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Add an element to a set." ilk="function" name="add" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Update a set with the union of itself and others." ilk="function" name="update" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Remove and return an arbitrary set element." ilk="function" name="pop" />
        <scope doc="Remove an element from a set if it is a member." ilk="function" name="discard" />
      </scope>
      <import module="weakref" />
    </scope>
    <scope doc="Base class for MIME type messages that are not multipart.&#10;" ilk="blob" lang="Python3" name="email.mime.nonmultipart">
      <scope classrefs="Message" doc="Base class for MIME specializations.&#10;" ilk="class" name="MIMEBase">
        <scope doc="This constructor adds a Content-Type: and a MIME-Version:&#10;header." ilk="function" name="__init__" signature="__init__(self, _maintype, _subtype, **_params)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="errors" />
    </scope>
    <scope doc="# Module which supports allocation of memory from an mmap&#10;# # multiprocessing/heap.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.heap">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Arena">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, size, fd=-1)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="BufferWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, size)" />
        <scope ilk="function" name="create_memoryview" signature="create_memoryview(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Heap">
        <scope ilk="function" name="_free" signature="_free(self, block)" />
        <scope ilk="function" name="_roundup" signature="_roundup(n, alignment)" />
        <scope ilk="function" name="malloc" signature="malloc(self, size)" />
        <scope ilk="function" name="_absorb" signature="_absorb(self, block)" />
        <scope ilk="function" name="_malloc" signature="_malloc(self, size)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, size=4096)" />
        <scope ilk="function" name="_free_pending_blocks" signature="_free_pending_blocks(self)" />
        <scope ilk="function" name="free" signature="free(self, block)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="bisect" />
      <import module="context" />
      <import module="mmap" />
      <import module="os" />
      <scope ilk="function" name="rebuild_arena" signature="rebuild_arena(size, dupfd)" />
      <scope ilk="function" name="reduce_arena" signature="reduce_arena(a)" />
      <import module="reduction" />
      <import module="sys" />
      <import module="tempfile" />
      <import module="threading" />
      <import module="util" />
    </scope>
    <scope doc="Read and write ZIP files.&#10;XXX references to utf-8 need further investigation." ilk="blob" lang="Python3" name="zipfile">
      <variable citdl="int" name="BZIP2_VERSION" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BadZipFile" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BadZipfile" />
      <variable citdl="int" name="DEFAULT_VERSION" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="LZMACompressor">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="compress" signature="compress(self, data)" />
        <scope ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="_init" signature="_init(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="LZMADecompressor">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="decompress" signature="decompress(self, data)" />
      </scope>
      <variable citdl="int" name="LZMA_VERSION" />
      <scope classrefs="Exception" doc="Raised when writing a zipfile, the zipfile requires ZIP64 extensions&#10;and those extensions are disabled." ilk="class" name="LargeZipFile" />
      <variable citdl="int" name="MAX_EXTRACT_VERSION" />
      <scope classrefs="ZipFile" doc="Class to create ZIP archives with Python library files and packages.&#10;" ilk="class" name="PyZipFile">
        <scope doc="Open the ZIP file with mode read 'r', write 'w', exclusive&#10;create 'x', or append 'a'." ilk="function" name="__init__" signature="__init__(self, file, mode='r', compression=0, allowZip64=True, optimize=-1)" />
        <scope doc="Add all files from &quot;pathname&quot; to the ZIP archive." ilk="function" name="writepy" signature="writepy(self, pathname, basename='', filterfunc=None)" />
        <scope doc="Given a module name path, return the correct file path and&#10;archive name, compiling if necessary." ilk="function" name="_get_codename" signature="Return (filename, archivename) for the path." />
      </scope>
      <variable citdl="int" name="ZIP64_LIMIT" />
      <variable citdl="int" name="ZIP64_VERSION" />
      <variable citdl="int" name="ZIP_BZIP2" />
      <variable citdl="int" name="ZIP_DEFLATED" />
      <variable citdl="int" name="ZIP_FILECOUNT_LIMIT" />
      <variable citdl="int" name="ZIP_LZMA" />
      <variable citdl="int" name="ZIP_MAX_COMMENT" />
      <variable citdl="int" name="ZIP_STORED" />
      <scope classrefs="BufferedIOBase" doc="File-like object for reading an archive member.&#10;Is returned by ZipFile.open()." ilk="class" name="ZipExtFile">
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Read up to n bytes with at most one read() system call." ilk="function" name="read1" signature="read1(self, n)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fileobj, mode, zipinfo, decrypter=None, close_fileobj=False)" />
        <scope ilk="function" name="_read2" signature="_read2(self, n)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" signature="readline(self, limit=-1)" />
        <scope ilk="function" name="_read1" signature="_read1(self, n)" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" signature="read(self, n=-1)" />
        <scope doc="Returns buffered bytes without advancing the position." ilk="function" name="peek" signature="peek(self, n=1)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_update_crc" signature="_update_crc(self, newdata)" />
      </scope>
      <scope classrefs="object" doc="Class with methods to open, read, write, close, list zip files.&#10;z = ZipFile(file, mode=&quot;r&quot;, compression=ZIP_STORED, allowZip64=True)  file: Either the path to the file, or a file-like object. If it is a path, the file will be opened and closed by ZipFile. mode: The mode can be either read 'r', write 'w', exclusive create 'x', or append 'a'. compression: ZIP_STORED (no compression), ZIP_DEFLATED (requires zlib), ZIP_BZIP2 (requires bz2) or ZIP_LZMA (requires lzma). allowZip64: if True ZipFile will create files with ZIP64 extensions when needed, otherwise it will raise an exception when this would" ilk="class" name="ZipFile">
        <scope doc="Print a table of contents for the zip file." ilk="function" name="printdir" signature="printdir(self, file=None)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope doc="Write a file into the archive." ilk="function" name="writestr" signature="writestr(self, zinfo_or_arcname, data, compress_type=None)" />
        <scope doc="Extract the ZipInfo object 'member' to a physical file on&#10;the path targetpath." ilk="function" name="_extract_member" signature="_extract_member(self, member, targetpath, pwd)" />
        <scope doc="Return a list of file names in the archive." ilk="function" name="namelist" signature="namelist(self)" />
        <scope ilk="function" name="_write_end_record" signature="_write_end_record(self)" />
        <scope doc="Read all the files and check the CRC." ilk="function" name="testzip" signature="testzip(self)" />
        <scope doc="Extract all members from the archive to the current working&#10;directory." ilk="function" name="extractall" signature="extractall(self, path=None, members=None, pwd=None)" />
        <scope doc="Return file bytes (as a string) for name." ilk="function" name="read" signature="read(self, name, pwd=None)" />
        <scope doc="Open the ZIP file with mode read 'r', write 'w', exclusive&#10;create 'x', or append 'a'." ilk="function" name="__init__" signature="__init__(self, file, mode='r', compression=0, allowZip64=True)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a list of class ZipInfo instances for files in the&#10;archive." ilk="function" name="infolist" signature="infolist(self)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return file-like object for 'name'." ilk="function" name="open" signature="open(self, name, mode='r', pwd=None)" />
        <scope doc="Close the file, and for mode 'w', 'x' and 'a' write the&#10;ending records." ilk="function" name="close" signature="close(self)" />
        <scope doc="Replace bad characters and remove trailing dots from parts." ilk="function" name="_sanitize_windows_name" />
        <scope doc="Put the bytes from filename into the archive under the name&#10;arcname." ilk="function" name="write" signature="write(self, filename, arcname=None, compress_type=None)" />
        <scope doc="Return the instance of ZipInfo given 'name'." ilk="function" name="getinfo" signature="getinfo(self, name)" />
        <scope ilk="function" name="_fpclose" signature="_fpclose(self, fp)" />
        <scope doc="Read in the table of contents for the ZIP file." ilk="function" name="_RealGetContents" signature="_RealGetContents(self)" />
        <scope doc="Call the &quot;close()&quot; method in case the user forgot." ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Set default password for encrypted files." ilk="function" name="setpassword" signature="setpassword(self, pwd)" />
        <scope doc="Extract a member from the archive to the current working&#10;directory, using its full name." ilk="function" name="extract" signature="extract(self, member, path=None, pwd=None)" />
        <scope doc="Check for errors before writing a file to the archive." ilk="function" name="_writecheck" signature="_writecheck(self, zinfo)" />
      </scope>
      <scope classrefs="object" doc="Class with attributes describing each file in the ZIP archive.&#10;" ilk="class" name="ZipInfo">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filename='NoName', date_time=(1980, 1, 1, 0, 0, 0))" />
        <scope ilk="function" name="_encodeFilenameFlags" signature="_encodeFilenameFlags(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the per-file header as a string." ilk="function" name="FileHeader" signature="FileHeader(self, zip64=None)" />
        <scope ilk="function" name="_decodeExtra" signature="_decodeExtra(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="binascii" />
      <variable citdl="NoneType" name="bz2" />
      <variable citdl="dict" name="compressor_names" />
      <scope doc="Compute a CRC-32 checksum of data." ilk="function" name="crc32" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <import module="importlib" />
      <import module="io" />
      <scope doc="Quickly see if a file is a ZIP file by checking the magic&#10;number." ilk="function" name="is_zipfile" signature="is_zipfile(filename)" />
      <variable citdl="NoneType" name="lzma" />
      <scope ilk="function" name="main" signature="main(args=None)" />
      <import module="os" />
      <import module="re" />
      <import module="shutil" />
      <variable citdl="int" name="sizeCentralDir" />
      <variable citdl="int" name="sizeEndCentDir" />
      <variable citdl="int" name="sizeEndCentDir64" />
      <variable citdl="int" name="sizeEndCentDir64Locator" />
      <variable citdl="int" name="sizeFileHeader" />
      <import module="stat" />
      <variable citdl="bytes" name="stringCentralDir" />
      <variable citdl="bytes" name="stringEndArchive" />
      <variable citdl="bytes" name="stringEndArchive64" />
      <variable citdl="bytes" name="stringEndArchive64Locator" />
      <variable citdl="bytes" name="stringFileHeader" />
      <import module="struct" />
      <variable citdl="str" name="structCentralDir" />
      <variable citdl="bytes" name="structEndArchive" />
      <variable citdl="str" name="structEndArchive64" />
      <variable citdl="str" name="structEndArchive64Locator" />
      <variable citdl="str" name="structFileHeader" />
      <import module="sys" />
      <import module="threading" />
      <import module="time" />
      <import module="zlib" />
    </scope>
    <scope doc="Convert use of sys.exitfunc to use the atexit module.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_exitfunc">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixExitfunc">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope doc="Initializer. Subclass may override." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A newline literal" ilk="function" name="Newline" signature="Newline()" />
      <import module="fixer_base" />
      <import module="pytree" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Basic statistics module.&#10;This module provides functions for calculating statistics of data, including averages, variance, and standard deviation.  Calculating averages --------------------  ==================  ============================================= Function            Description ==================  ============================================= mean                Arithmetic mean (average) of data." ilk="blob" lang="Python3" name="statistics">
      <scope classrefs="object" doc="Construct a new Decimal object. 'value' can be an integer, string, tuple,&#10;or another Decimal object. If no value is given, return Decimal('0'). The context does not affect the conversion and is only passed to determine if the InvalidOperation trap is active." ilk="class" name="Decimal">
        <scope ilk="function" name="__trunc__" />
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return True if the argument is a finite number, and False if&#10;the argument is infinite or a NaN." ilk="function" name="is_finite" />
        <scope doc="Return True if the argument is a (quiet or signaling) NaN&#10;and False otherwise." ilk="function" name="is_nan" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return the digit-wise 'and' of the two (logical) operands." ilk="function" name="logical_and" />
        <scope doc="Minimum of self and other." ilk="function" name="min" />
        <scope doc="Return True if the argument is a signaling NaN and False&#10;otherwise." ilk="function" name="is_snan" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return True if the argument is canonical and False&#10;otherwise." ilk="function" name="is_canonical" />
        <scope ilk="function" name="__round__" />
        <scope doc="Return the remainder from dividing self by other." ilk="function" name="remainder_near" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Normalize the number by stripping the rightmost trailing&#10;zeros and converting any result equal to Decimal('0') to&#10;Decimal('0e0')." ilk="function" name="normalize" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Similar to the max() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="max_mag" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="Round to the nearest integer without signaling Inexact or&#10;Rounded." ilk="function" name="to_integral_value" />
        <scope doc="Return the smallest number representable in the given&#10;context (or in the current default context if no context is&#10;given) that is larger than the given operand." ilk="function" name="next_plus" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return the canonical encoding of the argument." ilk="function" name="canonical" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Similar to the min() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="min_mag" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope ilk="function" name="__copy__" />
        <scope doc="Identical to the to_integral_value() method." ilk="function" name="to_integral" />
        <scope doc="Convert to an engineering-type string." ilk="function" name="to_eng_string" />
        <scope doc="Return the digit-wise 'exclusive or' of the two (logical)&#10;operands." ilk="function" name="logical_xor" />
        <scope ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return the square root of the argument to full precision." ilk="function" name="sqrt" />
        <scope doc="Return the first operand with the exponent adjusted the&#10;second." ilk="function" name="scaleb" />
        <scope doc="Return True if the argument is subnormal, and False&#10;otherwise." ilk="function" name="is_subnormal" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return True if the argument is a quiet NaN, and False&#10;otherwise." ilk="function" name="is_qnan" />
        <scope doc="Return True if the argument is a (positive or negative) zero&#10;and False otherwise." ilk="function" name="is_zero" />
        <scope doc="Return True if the argument has a negative sign and False&#10;otherwise." ilk="function" name="is_signed" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return a tuple representation of the number." ilk="function" name="as_tuple" />
        <scope ilk="function" name="__deepcopy__" />
        <scope doc="If the two operands are unequal, return the number closest&#10;to the first operand in the direction of the second operand." ilk="function" name="next_toward" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return a string describing the class of the operand." ilk="function" name="number_class" />
        <scope doc="Return the absolute value of the argument." ilk="function" name="copy_abs" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Maximum of self and other." ilk="function" name="max" />
        <scope doc="Fused multiply-add." ilk="function" name="fma" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their value as in compare_total(), but ignoring&#10;the sign of each operand." ilk="function" name="compare_total_mag" />
        <scope doc="Return the largest number representable in the given context&#10;(or in the current default context if no context is given)&#10;that is smaller than the given operand." ilk="function" name="next_minus" />
        <scope ilk="function" name="__complex__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Compare self to other." ilk="function" name="compare" />
        <scope doc="Return self." ilk="function" name="conjugate" />
        <scope doc="Return a copy of the first operand with the sign set to be&#10;the same as the sign of the second operand." ilk="function" name="copy_sign" />
        <scope doc="Return a value equal to the first operand after rounding and&#10;having the exponent of the second operand." ilk="function" name="quantize" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return the digit-wise 'or' of the two (logical) operands." ilk="function" name="logical_or" />
        <scope doc="Return the base ten logarithm of the operand." ilk="function" name="log10" />
        <scope doc="Return the value of the (natural) exponential function e**x&#10;at the given number." ilk="function" name="exp" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return the adjusted exponent of the number." ilk="function" name="adjusted" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their numerical value." ilk="function" name="compare_total" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return True if the argument is either positive or negative&#10;infinity and False otherwise." ilk="function" name="is_infinite" />
        <scope doc="Return True if the argument is a normal finite non-zero&#10;number with an adjusted exponent greater than or equal to&#10;Emin." ilk="function" name="is_normal" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return the natural (base e) logarithm of the operand." ilk="function" name="ln" />
        <scope doc="Test whether self and other have the same exponent or&#10;whether both are NaN." ilk="function" name="same_quantum" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Identical to compare, except that all NaNs signal." ilk="function" name="compare_signal" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return the result of shifting the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="shift" />
        <scope doc="Return the negation of the argument." ilk="function" name="copy_negate" />
        <scope doc="Return Decimal(10), the radix (base) in which the Decimal&#10;class does all its arithmetic." ilk="function" name="radix" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Round to the nearest integer, signaling Inexact or Rounded&#10;as appropriate if rounding occurs." ilk="function" name="to_integral_exact" />
        <scope doc="Return the digit-wise inversion of the (logical) operand." ilk="function" name="logical_invert" />
        <scope doc="For a non-zero number, return the adjusted exponent of the&#10;operand as a Decimal instance." ilk="function" name="logb" />
        <scope doc="Return the result of rotating the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="rotate" />
        <scope ilk="function" name="__ceil__" />
      </scope>
      <scope classrefs="Rational" doc="This class implements rational numbers.&#10;In the two-argument form of the constructor, Fraction(8, 6) will produce a rational number equivalent to 4/3. Both arguments must be Rational. The numerator defaults to 0 and the denominator defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.  Fractions can also be constructed from:  - numeric strings similar to those accepted by the float constructor (for example, '-2.3' or '1e10') " ilk="class" name="Fraction">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Will be math.floor(a) in 3.0." ilk="function" name="__floor__" signature="__floor__(a)" />
        <scope doc="a * b" ilk="function" name="__mul__" signature="__mul__(a, b)" />
        <scope doc="a / b" ilk="function" name="__rtruediv__" signature="__rtruediv__(b, a)" />
        <scope doc="trunc(a)" ilk="function" name="__trunc__" signature="trunc(a)" />
        <scope doc="a - b" ilk="function" name="_sub" signature="_sub(a, b)" />
        <scope doc="a // b" ilk="function" name="__rfloordiv__" signature="__rfloordiv__(b, a)" />
        <scope doc="Will be round(self, ndigits) in 3.0." ilk="function" name="__round__" signature="__round__(self, ndigits=None)" />
        <scope doc="+a: Coerces a subclass instance to Fraction" ilk="function" name="__pos__" signature="__pos__(a)" />
        <scope doc="a % b" ilk="function" name="__mod__" signature="__mod__(a, b)" />
        <scope doc="a ** b" ilk="function" name="__pow__" signature="__pow__(a, b)" />
        <scope doc="a / b" ilk="function" name="__truediv__" signature="__truediv__(a, b)" />
        <scope doc="Converts a finite float to a rational number, exactly." ilk="function" name="from_float" />
        <scope doc="a + b" ilk="function" name="__add__" signature="__add__(a, b)" />
        <scope doc="abs(a)" ilk="function" name="__abs__" signature="abs(a)" />
        <scope doc="a &lt;= b" ilk="function" name="__le__" signature="__le__(a, b)" />
        <scope doc="str(self)" ilk="function" name="__str__" signature="str(self)" />
        <scope doc="a ** b" ilk="function" name="__rpow__" signature="__rpow__(b, a)" />
        <scope doc="Generates forward and reverse operators given a purely-&#10;rational operator and a function from the operator module." ilk="function" name="_operator_fallbacks" signature="_operator_fallbacks(monomorphic_operator, fallback_operator)" />
        <scope doc="-a" ilk="function" name="__neg__" signature="__neg__(a)" />
        <scope doc="a &gt;= b" ilk="function" name="__ge__" signature="__ge__(a, b)" />
        <scope doc="a == b" ilk="function" name="__eq__" signature="__eq__(a, b)" />
        <scope doc="a + b" ilk="function" name="__radd__" signature="__radd__(b, a)" />
        <scope doc="a * b" ilk="function" name="__rmul__" signature="__rmul__(b, a)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope doc="hash(self)" ilk="function" name="__hash__" signature="hash(self)" />
        <scope doc="Closest Fraction to self with denominator at most&#10;max_denominator." ilk="function" name="limit_denominator" signature="limit_denominator(self, max_denominator=1000000)" />
        <scope doc="a // b" ilk="function" name="__floordiv__" signature="__floordiv__(a, b)" />
        <scope doc="a / b" ilk="function" name="_div" signature="_div(a, b)" />
        <scope doc="a % b" ilk="function" name="__rmod__" signature="__rmod__(b, a)" />
        <scope doc="repr(self)" ilk="function" name="__repr__" signature="repr(self)" />
        <scope doc="a * b" ilk="function" name="_mul" signature="_mul(a, b)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="a - b" ilk="function" name="__sub__" signature="__sub__(a, b)" />
        <scope doc="a &gt; b" ilk="function" name="__gt__" signature="__gt__(a, b)" />
        <scope doc="Converts a finite Decimal instance to a rational number,&#10;exactly." ilk="function" name="from_decimal" />
        <scope doc="a + b" ilk="function" name="_add" signature="_add(a, b)" />
        <scope doc="Constructs a Rational." ilk="function" name="__new__" signature="__new__(cls, numerator=0, denominator=None, _normalize=True)" />
        <scope doc="Helper for comparison operators, for internal use only." ilk="function" name="_richcmp" signature="_richcmp(self, other, op)" />
        <scope doc="Will be math.ceil(a) in 3.0." ilk="function" name="__ceil__" signature="__ceil__(a)" />
        <scope doc="a != 0" ilk="function" name="__bool__" signature="__bool__(a)" />
        <scope doc="a &lt; b" ilk="function" name="__lt__" signature="__lt__(a, b)" />
        <scope doc="a - b" ilk="function" name="__rsub__" signature="__rsub__(b, a)" />
      </scope>
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="StatisticsError" />
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="math" />
      <scope doc="Return the sample arithmetic mean of data." ilk="function" name="mean" signature="mean(data)" />
      <scope doc="Return the median (middle value) of numeric data." ilk="function" name="median" signature="median(data)" />
      <scope doc="Return the 50th percentile (median) of grouped continuous&#10;data." ilk="function" name="median_grouped" signature="median_grouped(data, interval=1)" />
      <scope doc="Return the high median of data." ilk="function" name="median_high" signature="median_high(data)" />
      <scope doc="Return the low median of numeric data." ilk="function" name="median_low" signature="median_low(data)" />
      <scope doc="Return the most common data point from discrete or nominal&#10;data." ilk="function" name="mode" signature="mode(data)" />
      <scope doc="Return the square root of the population variance." ilk="function" name="pstdev" signature="pstdev(data, mu=None)" />
      <scope doc="Return the population variance of ``data``." ilk="function" name="pvariance" signature="pvariance(data, mu=None)" />
      <scope doc="Return the square root of the sample variance." ilk="function" name="stdev" signature="stdev(data, xbar=None)" />
      <scope doc="Return the sample variance of data." ilk="function" name="variance" signature="variance(data, xbar=None)" />
    </scope>
    <scope doc="Implementation of JSONDecoder&#10;" ilk="blob" lang="Python3" name="json.decoder">
      <variable citdl="dict" name="BACKSLASH" />
      <variable citdl="int" name="FLAGS" />
      <scope ilk="function" name="JSONArray" signature="JSONArray(s_and_end, scan_once, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f117e2886f0&gt;, _ws=' \t\n\r')" />
      <scope classrefs="ValueError" doc="Subclass of ValueError with the following additional properties:&#10;msg: The unformatted error message doc: The JSON document being parsed pos: The start index of doc where parsing failed lineno: The line corresponding to pos colno: The column corresponding to pos" ilk="class" name="JSONDecodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, doc, pos)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="object" doc="Simple JSON &lt;http://json.org&gt; decoder&#10;Performs the following translations in decoding by default:  +---------------+-------------------+ | JSON          | Python            | +===============+===================+ | object        | dict              | +---------------+-------------------+ | array         | list              | +---------------+-------------------+ | string        | str               |" ilk="class" name="JSONDecoder">
        <scope doc="``object_hook``, if specified, will be called with the&#10;result of every JSON object decoded and its return value&#10;will be used in place of the given ``dict``." ilk="function" name="__init__" signature="__init__(self, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)" />
        <scope doc="Decode a JSON document from ``s`` (a ``str`` beginning with&#10;a JSON document) and return a 2-tuple of the Python&#10;representation and the index in ``s`` where the document&#10;ended." ilk="function" name="raw_decode" signature="raw_decode(self, s, idx=0)" />
        <scope doc="Return the Python representation of ``s`` (a ``str``&#10;instance containing a JSON document)." ilk="function" name="decode" signature="decode(self, s, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f117e2886f0&gt;)" />
      </scope>
      <scope ilk="function" name="JSONObject" signature="JSONObject(s_and_end, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f117e2886f0&gt;, _ws=' \t\n\r')" />
      <variable citdl="float" name="NaN" />
      <variable citdl="float" name="NegInf" />
      <variable citdl="float" name="PosInf" />
      <variable citdl="SRE_Pattern" name="STRINGCHUNK" />
      <variable citdl="SRE_Pattern" name="WHITESPACE" />
      <variable citdl="str" name="WHITESPACE_STR" />
      <variable citdl="list" name="__all__" />
      <scope doc="Scan the string s for a JSON string." ilk="function" name="c_scanstring" signature="scanstring(string, end, strict=True) -&gt; (string, end)" />
      <scope doc="Scan the string s for a JSON string." ilk="function" name="py_scanstring" signature="py_scanstring(s, end, strict=True, _b={'\\': '\\', 't': '\t', '/': '/', '&quot;': '&quot;', 'r': '\r', 'b': '\x08', 'f': '\x0c', 'n': '\n'}, _m=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f117e26a810&gt;)" />
      <import module="re" />
      <import module="scanner" />
      <scope doc="Scan the string s for a JSON string." ilk="function" name="scanstring" signature="scanstring(string, end, strict=True) -&gt; (string, end)" />
    </scope>
    <scope doc="A fast, lightweight IPv4/IPv6 manipulation library in Python.&#10;This library is used to create/poke/manipulate IPv4 and IPv6 addresses and networks." ilk="blob" lang="Python3" name="ipaddress">
      <scope classrefs="ValueError" doc="A Value Error related to the address.&#10;" ilk="class" name="AddressValueError" />
      <variable citdl="int" name="IPV4LENGTH" />
      <variable citdl="int" name="IPV6LENGTH" />
      <scope classrefs="_BaseV4 _BaseAddress" doc="Represent and manipulate single IPv4 Addresses.&#10;" ilk="class" name="IPv4Address">
        <scope doc="Args: address: A string or integer representing the IP" ilk="function" name="__init__" signature="__init__(self, address)" />
      </scope>
      <scope classrefs="IPv4Address" doc="Represent and manipulate single IPv4 Addresses.&#10;" ilk="class" name="IPv4Interface">
        <scope doc="Args: address: A string or integer representing the IP" ilk="function" name="__init__" signature="__init__(self, address)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="_BaseV4 _BaseNetwork" doc="This class represents and manipulates 32-bit IPv4 network + addresses..&#10;Attributes: [examples for IPv4Network('192.0.2.0/27')] .network_address: IPv4Address('192.0.2.0') .hostmask: IPv4Address('0.0.0.31') .broadcast_address: IPv4Address('192.0.2.32') .netmask: IPv4Address('255.255.255.224') .prefixlen: 27" ilk="class" name="IPv4Network">
        <scope doc="Instantiate a new IPv4 network object." ilk="function" name="__init__" signature="__init__(self, address, strict=True)" />
      </scope>
      <scope classrefs="_BaseV6 _BaseAddress" doc="Represent and manipulate single IPv6 Addresses.&#10;" ilk="class" name="IPv6Address">
        <scope doc="Instantiate a new IPv6 address object." ilk="function" name="__init__" signature="__init__(self, address)" />
      </scope>
      <scope classrefs="IPv6Address" doc="Represent and manipulate single IPv6 Addresses.&#10;" ilk="class" name="IPv6Interface">
        <scope doc="Instantiate a new IPv6 address object." ilk="function" name="__init__" signature="__init__(self, address)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="_BaseV6 _BaseNetwork" doc="This class represents and manipulates 128-bit IPv6 networks.&#10;Attributes: [examples for IPv6('2001:db8::1000/124')] .network_address: IPv6Address('2001:db8::1000') .hostmask: IPv6Address('::f') .broadcast_address: IPv6Address('2001:db8::100f') .netmask: IPv6Address('ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0') .prefixlen: 124" ilk="class" name="IPv6Network">
        <scope doc="Instantiate a new IPv6 Network object." ilk="function" name="__init__" signature="__init__(self, address, strict=True)" />
        <scope doc="Generate Iterator over usable hosts in a network." ilk="function" name="hosts" signature="hosts(self)" />
      </scope>
      <scope classrefs="ValueError" doc="A Value Error related to the netmask.&#10;" ilk="class" name="NetmaskValueError" />
      <scope doc="Collapse a list of IP objects." ilk="function" name="collapse_addresses" signature="collapse_addresses(addresses)" />
      <import module="functools" />
      <scope doc="Return a key suitable for sorting between networks and&#10;addresses." ilk="function" name="get_mixed_type_key" signature="get_mixed_type_key(obj)" />
      <scope doc="Take an IP string/int and return an object of the correct&#10;type." ilk="function" name="ip_address" signature="ip_address(address)" />
      <scope doc="Take an IP string/int and return an object of the correct&#10;type." ilk="function" name="ip_interface" signature="ip_interface(address)" />
      <scope doc="Take an IP string/int and return an object of the correct&#10;type." ilk="function" name="ip_network" signature="ip_network(address, strict=True)" />
      <scope doc="Summarize a network range given the first and last IP&#10;addresses." ilk="function" name="summarize_address_range" signature="summarize_address_range(first, last)" />
      <scope doc="Represent an address as 4 packed bytes in network (big-&#10;endian) order." ilk="function" name="v4_int_to_packed" signature="v4_int_to_packed(address)" />
      <scope doc="Represent an address as 16 packed bytes in network (big-&#10;endian) order." ilk="function" name="v6_int_to_packed" signature="v6_int_to_packed(address)" />
    </scope>
    <scope doc="Various types of useful iterators and generators.&#10;" ilk="blob" lang="Python3" name="email.iterators">
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Iterate over the parts, returning string payloads line-by-&#10;line." ilk="function" name="body_line_iterator" signature="body_line_iterator(msg, decode=False)" />
      <import module="sys" />
      <scope doc="Iterate over the subparts with a given MIME type." ilk="function" name="typed_subpart_iterator" signature="typed_subpart_iterator(msg, maintype='text', subtype=None)" />
      <scope doc="Walk over the message tree, yielding each subpart." ilk="function" name="walk" signature="walk(self)" />
    </scope>
    <scope doc="Convert a NT pathname to a file URL and vice versa.&#10;" ilk="blob" lang="Python3" name="nturl2path">
      <scope doc="OS-specific conversion from a file system path to a relative&#10;URL of the 'file' scheme; not recommended for general use." ilk="function" name="pathname2url" signature="pathname2url(p)" />
      <scope doc="OS-specific conversion from a relative URL of the 'file'&#10;scheme to a file system path; not recommended for general&#10;use." ilk="function" name="url2pathname" signature="url2pathname(url)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="tracemalloc">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Filter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, inclusive, filename_pattern, lineno=None, all_frames=False)" />
        <scope ilk="function" name="_match_frame" signature="_match_frame(self, filename, lineno)" />
        <scope ilk="function" name="_Filter__match_frame" signature="_Filter__match_frame(self, filename, lineno)" />
        <scope ilk="function" name="_match_traceback" signature="_match_traceback(self, traceback)" />
      </scope>
      <scope classrefs="object" doc="Frame of a traceback.&#10;" ilk="class" name="Frame">
        <scope doc="Return a &gt; b." ilk="function" name="__gt__" signature="__gt__(self, other, NotImplemented=NotImplemented)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a &gt;= b. Computed by @total_ordering from (not a &lt; b)." ilk="function" name="__ge__" signature="__ge__(self, other, NotImplemented=NotImplemented)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, frame)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a &lt;= b." ilk="function" name="__le__" signature="__le__(self, other, NotImplemented=NotImplemented)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Iterable">
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="Sequence">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self)" />
      </scope>
      <scope classrefs="object" doc="Snapshot of traces of memory blocks allocated by Python.&#10;" ilk="class" name="Snapshot">
        <scope ilk="function" name="_filter_trace" signature="_filter_trace(self, include_filters, exclude_filters, trace)" />
        <scope doc="Load a snapshot from a file." ilk="function" name="load" signature="load(filename)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, traces, traceback_limit)" />
        <scope doc="Group statistics by key_type." ilk="function" name="statistics" signature="statistics(self, key_type, cumulative=False)" />
        <scope doc="Write the snapshot into a file." ilk="function" name="dump" signature="dump(self, filename)" />
        <scope ilk="function" name="_group_by" signature="_group_by(self, key_type, cumulative)" />
        <scope doc="Create a new Snapshot instance with a filtered traces&#10;sequence, filters is a list of Filter instances." ilk="function" name="filter_traces" signature="filter_traces(self, filters)" />
        <scope doc="Compute the differences with an old snapshot old_snapshot." ilk="function" name="compare_to" signature="compare_to(self, old_snapshot, key_type, cumulative=False)" />
      </scope>
      <scope classrefs="object" doc="Statistic difference on memory allocations between two Snapshot instance.&#10;" ilk="class" name="Statistic">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="_sort_key" signature="_sort_key(self)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, traceback, size, count)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Statistic difference on memory allocations between an old and a new&#10;Snapshot instance." ilk="class" name="StatisticDiff">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="_sort_key" signature="_sort_key(self)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, traceback, size, size_diff, count, count_diff)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Trace of a memory block.&#10;" ilk="class" name="Trace">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, trace)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Sequence" doc="Sequence of Frame instances sorted from the most recent frame&#10;to the oldest frame." ilk="class" name="Traceback">
        <scope ilk="function" name="__contains__" signature="__contains__(self, frame)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope doc="Return a &gt;= b. Computed by @total_ordering from (not a &lt; b)." ilk="function" name="__ge__" signature="__ge__(self, other, NotImplemented=NotImplemented)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return a &gt; b." ilk="function" name="__gt__" signature="__gt__(self, other, NotImplemented=NotImplemented)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, frames)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="format" signature="format(self, limit=None)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return a &lt;= b." ilk="function" name="__le__" signature="__le__(self, other, NotImplemented=NotImplemented)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope doc="Clear traces of memory blocks allocated by Python." ilk="function" name="clear_traces" signature="clear_traces()" />
      <import module="fnmatch" />
      <scope doc="Get the traceback where the Python object *obj* was&#10;allocated." ilk="function" name="get_object_traceback" signature="get_object_traceback(obj)" />
      <scope doc="Get the maximum number of frames stored in the traceback of&#10;a trace." ilk="function" name="get_traceback_limit" returns="int" signature="get_traceback_limit() -&gt; int" />
      <scope doc="Get the current size and peak size of memory blocks traced&#10;by the tracemalloc module as a tuple: (current: int, peak:&#10;int)." ilk="function" name="get_traced_memory" signature="get_traced_memory() -&gt; (int, int)" />
      <scope doc="Get the memory usage in bytes of the tracemalloc module used&#10;internally to trace memory allocations." ilk="function" name="get_tracemalloc_memory" returns="int" signature="get_tracemalloc_memory() -&gt; int" />
      <scope doc="True if the tracemalloc module is tracing Python memory&#10;allocations, False otherwise." ilk="function" name="is_tracing" signature="is_tracing()-&gt;bool" />
      <import module="linecache" />
      <import module="os" />
      <import module="pickle" />
      <scope doc="Start tracing Python memory allocations." ilk="function" name="start" signature="start(nframe: int=1)" />
      <scope doc="Stop tracing Python memory allocations and clear traces of&#10;memory blocks allocated by Python." ilk="function" name="stop" signature="stop()" />
      <scope doc="Take a snapshot of traces of memory blocks allocated by&#10;Python." ilk="function" name="take_snapshot" signature="take_snapshot()" />
      <scope doc="Class decorator that fills in missing ordering methods" ilk="function" name="total_ordering" signature="total_ordering(cls)" />
    </scope>
    <scope doc="Simple class to read IFF chunks.&#10;An IFF chunk (used in formats such as AIFF, TIFF, RMFF (RealMedia File Format)) has the following structure:  +----------------+ | ID (4 bytes)   | +----------------+ | size (4 bytes) | +----------------+ | data           | | ...            |" ilk="blob" lang="Python3" name="chunk">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Chunk">
        <scope doc="Read at most size bytes from the chunk." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Skip the rest of the chunk." ilk="function" name="skip" signature="skip(self)" />
        <scope ilk="function" name="isatty" signature="isatty(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the name (ID) of the current chunk." ilk="function" name="getname" signature="getname(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Return the size of the current chunk." ilk="function" name="getsize" signature="getsize(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file, align=True, bigendian=True, inclheader=False)" />
        <scope doc="Seek to specified position into the chunk." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
    </scope>
    <scope doc="UUID objects (universally unique identifiers) according to RFC 4122.&#10;This module provides immutable UUID objects (class UUID) and the functions uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.  If all you want is a unique ID, you should probably call uuid1() or uuid4(). Note that uuid1() may compromise privacy since it creates a UUID containing the computer's network address.  uuid4() creates a random UUID.  Typical usage: " ilk="blob" lang="Python3" name="uuid">
      <variable citdl="UUID" name="NAMESPACE_DNS" />
      <variable citdl="UUID" name="NAMESPACE_OID" />
      <variable citdl="UUID" name="NAMESPACE_URL" />
      <variable citdl="UUID" name="NAMESPACE_X500" />
      <variable citdl="str" name="RESERVED_FUTURE" />
      <variable citdl="str" name="RESERVED_MICROSOFT" />
      <variable citdl="str" name="RESERVED_NCS" />
      <variable citdl="str" name="RFC_4122" />
      <scope classrefs="object" doc="Instances of the UUID class represent UUIDs as specified in RFC 4122.&#10;UUID objects are immutable, hashable, and usable as dictionary keys. Converting a UUID to a string with str() yields something in the form '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts five possible forms: a similar string of hexadecimal digits, or a tuple of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and 48-bit values respectively) as an argument named 'fields', or a string of 16 bytes (with all the integer fields in big-endian order) as an argument named 'bytes', or a string of 16 bytes (with the first three fields in little-endian order) as an argument named 'bytes_le', or a single 128-bit integer as an argument named 'int'." ilk="class" name="UUID">
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Create a UUID from either a string of 32 hexadecimal digits,&#10;a string of 16 bytes as the 'bytes' argument, a string of 16&#10;bytes in little-endian order as the 'bytes_le' argument, a&#10;tuple of six integers (32-bit time_low, 16-bit time_mid,&#10;16-bit time_hi_version," ilk="function" name="__init__" signature="__init__(self, hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__int__" signature="__int__(self)" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" signature="__setattr__(self, name, value)" />
      </scope>
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes&#10;bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes bytes() -&gt; empty bytes object  Construct an immutable array of bytes from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - any object implementing the buffer API. - an integer" ilk="class" name="bytes_">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return the lowest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="find" returns="int" signature="B.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="B.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Strip trailing bytes contained in the argument." ilk="function" name="rstrip" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="partition" />
        <scope doc="Return a copy of B with only its first character capitalized&#10;(ASCII) and the rest lower-cased." ilk="function" name="capitalize" signature="B.capitalize() -&gt; copy of B" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;uppercase." ilk="function" name="upper" signature="B.upper() -&gt; copy of B" />
        <scope doc="Decode the bytes using the codec registered for encoding." ilk="function" name="decode" />
        <scope doc="Return True if all cased characters in B are lowercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="islower" returns="bool" signature="B.islower() -&gt; bool" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="rsplit" />
        <scope doc="Strip leading and trailing bytes contained in the argument." ilk="function" name="strip" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return B right justified in a string of length width." ilk="function" name="rjust" signature="B.rjust(width[, fillchar]) -&gt; copy of B" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in B are alphabetic and there&#10;is at least one character in B, False otherwise." ilk="function" name="isalpha" returns="bool" signature="B.isalpha() -&gt; bool" />
        <scope doc="Like B.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="B.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of B where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" signature="B.expandtabs(tabsize=8) -&gt; copy of B" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string B[start:end]." ilk="function" name="count" returns="int" signature="B.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="rpartition" />
        <scope doc="Return B left justified in a string of length width." ilk="function" name="ljust" signature="B.ljust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return B centered in a string of length width." ilk="function" name="center" signature="B.center(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa." ilk="function" name="swapcase" signature="B.swapcase() -&gt; copy of B" />
        <scope doc="Return a titlecased version of B, i.e." ilk="function" name="title" signature="B.title() -&gt; copy of B" />
        <scope doc="Return a copy with each character mapped by the given&#10;translation table." ilk="function" name="translate" signature="translate(table, [deletechars])" />
        <scope doc="Return True if all characters in B are alphanumeric and&#10;there is at least one character in B, False otherwise." ilk="function" name="isalnum" returns="bool" signature="B.isalnum() -&gt; bool" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;lowercase." ilk="function" name="lower" signature="B.lower() -&gt; copy of B" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="split" />
        <scope doc="Strip leading bytes contained in the argument." ilk="function" name="lstrip" />
        <scope doc="Return True if all characters in B are digits and there is&#10;at least one character in B, False otherwise." ilk="function" name="isdigit" returns="bool" signature="B.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in B are uppercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="isupper" returns="bool" signature="B.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like B.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="B.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="B.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return a copy with all occurrences of substring old replaced&#10;by new." ilk="function" name="replace" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if B is a titlecased string and there is at&#10;least one character in B, i.e." ilk="function" name="istitle" returns="bool" signature="B.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string B with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" signature="B.zfill(width) -&gt; copy of B" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Concatenate any number of bytes objects." ilk="function" name="join" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in the bytes, breaking at line&#10;boundaries." ilk="function" name="splitlines" />
        <scope doc="Return True if all characters in B are whitespace and there&#10;is at least one character in B, False otherwise." ilk="function" name="isspace" returns="bool" signature="B.isspace() -&gt; bool" />
        <scope doc="Return the highest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="rfind" returns="int" signature="B.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Create a string of hexadecimal numbers from a bytes object." ilk="function" name="hex" returns="str" signature="B.hex() -&gt; string" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <import module="ctypes" />
      <scope doc="Get the hardware address as a 48-bit positive integer." ilk="function" name="getnode" signature="getnode()" />
      <scope classrefs="object" doc="int(x=0) -&gt; integer&#10;int(x, base=10) -&gt; integer  Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this truncates towards zero.  If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36." ilk="class" name="int_">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="Return an array of bytes representing an integer." ilk="function" name="to_bytes" signature="int.to_bytes(length, byteorder, *, signed=False) -&gt; bytes" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Rounding an Integral returns itself." ilk="function" name="__round__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Returns size in memory, in bytes" ilk="function" name="__sizeof__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Flooring an Integral returns itself." ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="Ceiling of an Integral returns itself." ilk="function" name="__ceil__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <variable citdl="NoneType" name="lib" />
      <variable citdl="str" name="libname" />
      <import module="os" />
      <import module="sys" />
      <scope doc="Generate a UUID from a host ID, sequence number, and the&#10;current time." ilk="function" name="uuid1" signature="uuid1(node=None, clock_seq=None)" />
      <scope doc="Generate a UUID from the MD5 hash of a namespace UUID and a&#10;name." ilk="function" name="uuid3" signature="uuid3(namespace, name)" />
      <scope doc="Generate a random UUID." ilk="function" name="uuid4" signature="uuid4()" />
      <scope doc="Generate a UUID from the SHA-1 hash of a namespace UUID and&#10;a name." ilk="function" name="uuid5" signature="uuid5(namespace, name)" />
    </scope>
    <scope doc="This module provides primitive operations to write multi-threaded programs.&#10;The 'threading' module provides a more convenient interface." ilk="blob" lang="Python3" name="_thread">
      <scope classrefs="object" doc="A lock object is a synchronization primitive.  To create a lock,&#10;call the PyThread_allocate_lock() function.  Methods are:  acquire() -- lock the lock, possibly blocking until it can be obtained release() -- unlock of the lock locked() -- test whether the lock is currently locked  A lock is not owned by the thread that locked it; another thread may unlock it.  A thread attempting to lock a lock that it has already locked will block until another thread unlocks it.  Deadlocks may ensue." ilk="class" name="LockType">
        <scope doc="(acquire_lock() is an obsolete synonym)" ilk="function" name="__enter__" returns="bool" signature="acquire([wait]) -&gt; bool" />
        <scope doc="(release_lock() is an obsolete synonym)" ilk="function" name="__exit__" signature="release()" />
        <scope doc="(acquire_lock() is an obsolete synonym)" ilk="function" name="acquire" returns="bool" signature="acquire([wait]) -&gt; bool" />
        <scope doc="(release_lock() is an obsolete synonym)" ilk="function" name="release" signature="release()" />
        <scope doc="(locked_lock() is an obsolete synonym)" ilk="function" name="locked_lock" returns="bool" signature="locked() -&gt; bool" />
        <scope doc="(locked_lock() is an obsolete synonym)" ilk="function" name="locked" returns="bool" signature="locked() -&gt; bool" />
        <scope doc="(release_lock() is an obsolete synonym)" ilk="function" name="release_lock" signature="release()" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="(acquire_lock() is an obsolete synonym)" ilk="function" name="acquire_lock" returns="bool" signature="acquire([wait]) -&gt; bool" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="RLock">
        <scope doc="Lock the lock." ilk="function" name="__enter__" returns="bool" signature="acquire(blocking=True) -&gt; bool" />
        <scope doc="Release the lock, allowing another thread that is blocked&#10;waiting for the lock to acquire the lock." ilk="function" name="__exit__" signature="release()" />
        <scope doc="Lock the lock." ilk="function" name="acquire" returns="bool" signature="acquire(blocking=True) -&gt; bool" />
        <scope doc="Release the lock, allowing another thread that is blocked&#10;waiting for the lock to acquire the lock." ilk="function" name="release" signature="release()" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_release_save" returns="tuple" signature="_release_save() -&gt; tuple" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_acquire_restore" signature="_acquire_restore(state) -&gt; None" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_is_owned" returns="bool" signature="_is_owned() -&gt; bool" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <variable citdl="float" name="TIMEOUT_MAX" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="allocate" signature="allocate_lock() -&gt; lock object" />
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="allocate_lock" signature="allocate_lock() -&gt; lock object" />
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="(exit_thread() is an obsolete synonym)" ilk="function" name="exit" signature="exit()" />
      <scope doc="(exit_thread() is an obsolete synonym)" ilk="function" name="exit_thread" signature="exit()" />
      <scope doc="Return a non-zero integer that uniquely identifies the&#10;current thread amongst other threads that exist&#10;simultaneously." ilk="function" name="get_ident" returns="int" signature="get_ident() -&gt; integer" />
      <scope doc="Raise a KeyboardInterrupt in the main thread." ilk="function" name="interrupt_main" signature="interrupt_main()" />
      <scope doc="Return the thread stack size used when creating new threads." ilk="function" name="stack_size" signature="stack_size([size]) -&gt; size" />
      <scope doc="(start_new() is an obsolete synonym)" ilk="function" name="start_new" signature="start_new_thread(function, args[, kwargs])" />
      <scope doc="(start_new() is an obsolete synonym)" ilk="function" name="start_new_thread" signature="start_new_thread(function, args[, kwargs])" />
    </scope>
    <scope doc="# Autogenerated by Sphinx on Sat Dec  5 17:02:49 2015&#10;" ilk="blob" lang="Python3" name="pydoc_data.topics">
      <variable citdl="dict" name="topics" />
    </scope>
    <scope doc="distutils.command.bdist_wininst&#10;Implements the Distutils 'bdist_wininst' command: create a windows installer exe-program." ilk="blob" lang="Python3" name="distutils.command.bdist_wininst">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="bdist_wininst">
        <scope ilk="function" name="get_installer_filename" signature="get_installer_filename(self, fullname)" />
        <scope ilk="function" name="get_exe_bytes" signature="get_exe_bytes(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="get_inidata" signature="get_inidata(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="create_exe" signature="create_exe(self, arcname, fullname, bitmap=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope doc="Create all the empty directories under 'base_dir' needed to&#10;put 'files' there." ilk="function" name="create_tree" signature="create_tree(base_dir, files, mode=511, verbose=1, dry_run=0)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope doc="Return a string containing the major and minor Python&#10;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
      <import module="sys" />
    </scope>
    <scope doc="Fixer that changes input(...) into eval(input(...)).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_input">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixInput">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="NodePattern" name="context" />
      <import module="fixer_base" />
      <import module="patcomp" />
    </scope>
    <scope doc="Encodings and related functions.&#10;" ilk="blob" lang="Python3" name="email.encoders">
      <variable citdl="list" name="__all__" />
      <scope doc="Set the Content-Transfer-Encoding header to 7bit or 8bit." ilk="function" name="encode_7or8bit" signature="encode_7or8bit(msg)" />
      <scope doc="Encode the message's payload in Base64." ilk="function" name="encode_base64" signature="encode_base64(msg)" />
      <scope doc="Do nothing." ilk="function" name="encode_noop" signature="encode_noop(msg)" />
      <scope doc="Encode the message's payload in quoted-printable." ilk="function" name="encode_quopri" signature="encode_quopri(msg)" />
    </scope>
    <scope doc="Thread module emulating a subset of Java's threading model.&#10;" ilk="blob" lang="Python3" name="threading">
      <scope classrefs="object" doc="Implements a Barrier.&#10;Useful for synchronizing a fixed number of threads at known synchronization points.  Threads block on 'wait()' and are simultaneously once they have all made that call." ilk="class" name="Barrier">
        <scope doc="Reset the barrier to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="# Optionally run the 'action' and release the threads&#10;waiting # in the barrier." ilk="function" name="_release" signature="_release(self)" />
        <scope ilk="function" name="_break" signature="_break(self)" />
        <scope doc="# Wait in the barrier until we are relased." ilk="function" name="_wait" signature="_wait(self, timeout)" />
        <scope doc="Create a barrier, initialised to 'parties' threads." ilk="function" name="__init__" signature="__init__(self, parties, action=None, timeout=None)" />
        <scope doc="Wait for the barrier." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="# If we are the last thread to exit the barrier, signal any&#10;threads # waiting for the barrier to drain." ilk="function" name="_exit" signature="_exit(self)" />
        <scope doc="Place the barrier into a 'broken' state." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="# Block until the barrier is ready for us, or raise an&#10;exception # if it is broken." ilk="function" name="_enter" signature="_enter(self)" />
      </scope>
      <scope classrefs="Semaphore" doc="Implements a bounded semaphore.&#10;A bounded semaphore checks to make sure its current value doesn't exceed its initial value. If it does, ValueError is raised. In most situations semaphores are used to guard resources with limited capacity.  If the semaphore is released too many times it's a sign of a bug. If not given, value defaults to 1.  Like regular semaphores, bounded semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return" ilk="class" name="BoundedSemaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope classrefs="RuntimeError" doc="Unspecified run-time error.&#10;" ilk="class" name="BrokenBarrierError" />
      <scope classrefs="object" doc="Class that implements a condition variable.&#10;A condition variable allows one or more threads to wait until they are notified by another thread.  If the lock argument is given and not None, it must be a Lock or RLock object, and it is used as the underlying lock. Otherwise, a new RLock object is created and used as the underlying lock." ilk="class" name="Condition">
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notifyAll" signature="notifyAll(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Wait until a condition evaluates to True." ilk="function" name="wait_for" signature="wait_for(self, predicate, timeout=None)" />
        <scope ilk="function" name="_release_save" signature="_release_save(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lock=None)" />
        <scope doc="Wait until notified or until a timeout occurs." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope doc="Wake up one or more threads waiting on this condition, if&#10;any." ilk="function" name="notify" signature="notify(self, n=1)" />
        <scope ilk="function" name="_acquire_restore" signature="_acquire_restore(self, x)" />
        <scope ilk="function" name="_is_owned" signature="_is_owned(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="object" doc="Class implementing event objects.&#10;Events manage a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true.  The flag is initially false." ilk="class" name="Event">
        <scope doc="Reset the internal flag to false." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Set the internal flag to true." ilk="function" name="set" signature="set(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="isSet" signature="isSet(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Block until the internal flag is true." ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="_reset_internal_locks" signature="_reset_internal_locks(self)" />
        <scope doc="Return true if and only if the internal flag is true." ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope doc="(allocate() is an obsolete synonym)" ilk="function" name="Lock" signature="allocate_lock() -&gt; lock object" />
      <scope doc="Factory function that returns a new reentrant lock." ilk="function" name="RLock" signature="RLock(*args, **kwargs)" />
      <scope classrefs="object" doc="This class implements semaphore objects.&#10;Semaphores manage a counter representing the number of release() calls minus the number of acquire() calls, plus an initial value. The acquire() method blocks if necessary until it can return without making the counter negative. If not given, value defaults to 1." ilk="class" name="Semaphore">
        <scope ilk="function" name="__exit__" signature="__exit__(self, t, v, tb)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="acquire" signature="acquire(self, blocking=True, timeout=None)" />
        <scope doc="Acquire a semaphore, decrementing the internal counter by&#10;one." ilk="function" name="__enter__" signature="__enter__(self, blocking=True, timeout=None)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1)" />
      </scope>
      <variable citdl="float" name="TIMEOUT_MAX" />
      <scope classrefs="object" doc="A class that represents a thread of control.&#10;This class can be safely subclassed in a limited fashion. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the run() method in a subclass." ilk="class" name="Thread">
        <scope doc="Return whether the thread is alive." ilk="function" name="is_alive" signature="is_alive(self)" />
        <scope ilk="function" name="getName" signature="getName(self)" />
        <scope doc="Return whether the thread is alive." ilk="function" name="isAlive" signature="isAlive(self)" />
        <scope doc="Method representing the thread's activity." ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="_stop" signature="_stop(self)" />
        <scope ilk="function" name="_bootstrap" signature="_bootstrap(self)" />
        <scope doc="Set a lock object which will be released by the interpreter&#10;when the underlying thread state (see pystate.h) gets&#10;deleted." ilk="function" name="_set_tstate_lock" signature="_set_tstate_lock(self)" />
        <scope ilk="function" name="_wait_for_tstate_lock" signature="_wait_for_tstate_lock(self, block=True, timeout=-1)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_reset_internal_locks" signature="_reset_internal_locks(self, is_alive)" />
        <scope ilk="function" name="setDaemon" signature="setDaemon(self, daemonic)" />
        <scope doc="This constructor should always be called with keyword&#10;arguments." ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None)" />
        <scope doc="Wait until the thread terminates." ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope ilk="function" name="setName" signature="setName(self, name)" />
        <scope ilk="function" name="_set_ident" signature="_set_ident(self)" />
        <scope ilk="function" name="isDaemon" signature="isDaemon(self)" />
        <scope ilk="function" name="_bootstrap_inner" signature="_bootstrap_inner(self)" />
        <scope doc="Start the thread's activity." ilk="function" name="start" signature="start(self)" />
        <scope doc="Remove current thread from the dict of currently running&#10;threads." ilk="function" name="_delete" signature="_delete(self)" />
      </scope>
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="ThreadError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Thread" doc="Call a function after a specified number of seconds:&#10;t = Timer(30.0, f, args=None, kwargs=None) t.start() t.cancel()     # stop the timer's action if it's still waiting" ilk="class" name="Timer">
        <scope doc="This constructor should always be called with keyword&#10;arguments." ilk="function" name="__init__" signature="__init__(self, interval, function, args=None, kwargs=None)" />
        <scope doc="Stop the timer if it hasn't finished yet." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Method representing the thread's activity." ilk="function" name="run" signature="run(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="WeakSet">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="symmetric_difference_update" signature="symmetric_difference_update(self, other)" />
        <scope ilk="function" name="union" signature="union(self, other)" />
        <scope ilk="function" name="difference_update" signature="difference_update(self, other)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope ilk="function" name="difference" signature="difference(self, other)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope ilk="function" name="symmetric_difference" signature="symmetric_difference(self, other)" />
        <scope ilk="function" name="remove" signature="remove(self, item)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="issuperset" signature="issuperset(self, other)" />
        <scope ilk="function" name="intersection_update" signature="intersection_update(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope ilk="function" name="intersection" signature="intersection(self, other)" />
        <scope ilk="function" name="add" signature="add(self, item)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope ilk="function" name="update" signature="update(self, other)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="issubset" signature="issubset(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, other)" />
        <scope ilk="function" name="discard" signature="discard(self, item)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_sys" />
      <scope doc="Return the number of Thread objects currently alive." ilk="function" name="activeCount" signature="activeCount()" />
      <scope doc="Return the number of Thread objects currently alive." ilk="function" name="active_count" signature="active_count()" />
      <scope doc="Return the current Thread object, corresponding to the&#10;caller's thread of control." ilk="function" name="currentThread" signature="currentThread()" />
      <scope doc="Return the current Thread object, corresponding to the&#10;caller's thread of control." ilk="function" name="current_thread" signature="current_thread()" />
      <scope doc="Return a list of all Thread objects currently alive." ilk="function" name="enumerate" signature="enumerate()" />
      <scope doc="Return a non-zero integer that uniquely identifies the&#10;current thread amongst other threads that exist&#10;simultaneously." ilk="function" name="get_ident" returns="int" signature="get_ident() -&gt; integer" />
      <scope classrefs="object" doc="Thread-local data&#10;" ilk="class" name="local">
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
      </scope>
      <scope doc="Return the main thread object." ilk="function" name="main_thread" signature="main_thread()" />
      <scope doc="Set a profile function for all threads started from the&#10;threading module." ilk="function" name="setprofile" signature="setprofile(func)" />
      <scope doc="Set a trace function for all threads started from the&#10;threading module." ilk="function" name="settrace" signature="settrace(func)" />
      <scope doc="Return the thread stack size used when creating new threads." ilk="function" name="stack_size" signature="stack_size([size]) -&gt; size" />
    </scope>
    <scope doc="Configuration functions for the logging package for Python. The core package&#10;is based on PEP 282 and comments thereto in comp.lang.python, and influenced by Apache's log4j system.  Copyright (C) 2001-2014 Vinay Sajip. All Rights Reserved.  To use, simply 'import logging' and log away!" ilk="blob" lang="Python3" name="logging.config">
      <scope classrefs="object" doc="The configurator base class which defines some useful defaults.&#10;" ilk="class" name="BaseConfigurator">
        <scope doc="Configure an object with a user-supplied factory." ilk="function" name="configure_custom" signature="configure_custom(self, config)" />
        <scope doc="Convert values to an appropriate type." ilk="function" name="convert" signature="convert(self, value)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, config)" />
        <scope doc="Default converter for the ext:// protocol." ilk="function" name="ext_convert" signature="ext_convert(self, value)" />
        <scope doc="Default converter for the cfg:// protocol." ilk="function" name="cfg_convert" signature="cfg_convert(self, value)" />
        <scope doc="Resolve strings to objects using standard import and&#10;attribute syntax." ilk="function" name="resolve" signature="resolve(self, s)" />
        <scope doc="Utility function which converts lists to tuples." ilk="function" name="as_tuple" signature="as_tuple(self, value)" />
      </scope>
      <scope classrefs="dict ConvertingMixin" doc="A converting dictionary wrapper.&#10;" ilk="class" name="ConvertingDict">
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
      </scope>
      <scope classrefs="list ConvertingMixin" doc="A converting list wrapper.&#10;" ilk="class" name="ConvertingList">
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
      </scope>
      <scope classrefs="object" doc="For ConvertingXXX's, this mixin class provides common functions&#10;" ilk="class" name="ConvertingMixin">
        <scope ilk="function" name="convert" signature="convert(self, value)" />
        <scope ilk="function" name="convert_with_key" signature="convert_with_key(self, key, value, replace=True)" />
      </scope>
      <scope classrefs="tuple ConvertingMixin" doc="A converting tuple wrapper.&#10;" ilk="class" name="ConvertingTuple">
        <scope doc="Return self[key]." ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
      </scope>
      <variable citdl="int" name="DEFAULT_LOGGING_CONFIG_PORT" />
      <scope classrefs="BaseConfigurator" doc="Configure logging using a dictionary-like object to describe the&#10;configuration." ilk="class" name="DictConfigurator">
        <scope doc="Configure a handler from a dictionary." ilk="function" name="configure_handler" signature="configure_handler(self, config)" />
        <scope doc="Perform configuration which is common to root and non-root&#10;loggers." ilk="function" name="common_logger_config" signature="common_logger_config(self, logger, config, incremental=False)" />
        <scope doc="Configure a formatter from a dictionary." ilk="function" name="configure_formatter" signature="configure_formatter(self, config)" />
        <scope doc="Configure a filter from a dictionary." ilk="function" name="configure_filter" signature="configure_filter(self, config)" />
        <scope doc="Add handlers to a logger from a list of names." ilk="function" name="add_handlers" signature="add_handlers(self, logger, handlers)" />
        <scope doc="Add filters to a filterer from a list of names." ilk="function" name="add_filters" signature="add_filters(self, filterer, filters)" />
        <scope doc="Configure a non-root logger from a dictionary." ilk="function" name="configure_logger" signature="configure_logger(self, name, config, incremental=False)" />
        <scope doc="Do the configuration." ilk="function" name="configure" signature="configure(self)" />
        <scope doc="Configure a root logger from a dictionary." ilk="function" name="configure_root" signature="configure_root(self, config, incremental=False)" />
      </scope>
      <variable citdl="SRE_Pattern" name="IDENTIFIER" />
      <variable citdl="int" name="RESET_ERROR" />
      <scope classrefs="BaseRequestHandler" doc="Define self.rfile and self.wfile for stream sockets.&#10;" ilk="class" name="StreamRequestHandler">
        <scope ilk="function" name="finish" signature="finish(self)" />
        <scope ilk="function" name="setup" signature="setup(self)" />
      </scope>
      <scope classrefs="ThreadingMixIn TCPServer" doc="Mix-in class to handle each request in a new thread.&#10;" ilk="class" name="ThreadingTCPServer" />
      <scope doc="Configure logging using a dictionary." ilk="function" name="dictConfig" signature="dictConfig(config)" />
      <scope classrefs="BaseConfigurator" doc="Configure logging using a dictionary-like object to describe the&#10;configuration." ilk="class" name="dictConfigClass">
        <scope doc="Configure a handler from a dictionary." ilk="function" name="configure_handler" signature="configure_handler(self, config)" />
        <scope doc="Perform configuration which is common to root and non-root&#10;loggers." ilk="function" name="common_logger_config" signature="common_logger_config(self, logger, config, incremental=False)" />
        <scope doc="Configure a formatter from a dictionary." ilk="function" name="configure_formatter" signature="configure_formatter(self, config)" />
        <scope doc="Configure a filter from a dictionary." ilk="function" name="configure_filter" signature="configure_filter(self, config)" />
        <scope doc="Add handlers to a logger from a list of names." ilk="function" name="add_handlers" signature="add_handlers(self, logger, handlers)" />
        <scope doc="Add filters to a filterer from a list of names." ilk="function" name="add_filters" signature="add_filters(self, filterer, filters)" />
        <scope doc="Configure a non-root logger from a dictionary." ilk="function" name="configure_logger" signature="configure_logger(self, name, config, incremental=False)" />
        <scope doc="Do the configuration." ilk="function" name="configure" signature="configure(self)" />
        <scope doc="Configure a root logger from a dictionary." ilk="function" name="configure_root" signature="configure_root(self, config, incremental=False)" />
      </scope>
      <import module="errno" />
      <scope doc="Read the logging configuration from a ConfigParser-format&#10;file." ilk="function" name="fileConfig" signature="fileConfig(fname, defaults=None, disable_existing_loggers=True)" />
      <import module="io" />
      <scope doc="Start up a socket server on the specified port, and listen&#10;for new configurations." ilk="function" name="listen" signature="listen(port=9030, verify=None)" />
      <import module="logging" />
      <import module="re" />
      <scope doc="Stop the listening server which was created with a call to&#10;listen()." ilk="function" name="stopListening" signature="stopListening()" />
      <import module="struct" />
      <import module="sys" />
      <import module="thread" />
      <import module="threading" />
      <import module="traceback" />
      <scope ilk="function" name="valid_ident" signature="valid_ident(s)" />
    </scope>
    <scope doc="Fixer for removing uses of the types module.&#10;These work for only the known names in the types module.  The forms above can include types. or not.  ie, It is assumed the module is imported either as:  import types from types import ... # either * or specific types  The import statements are not modified.  There should be another fixer that handles at least the following constants: " ilk="blob" lang="Python3" name="lib2to3.fixes.fix_types">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixTypes">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="# Module which deals with pickling of objects.&#10;# # multiprocessing/reduction.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.reduction">
      <variable citdl="bool" name="ACKNOWLEDGE" />
      <scope doc="Return a wrapper for an fd." ilk="function" name="DupFd" signature="DupFd(fd)" />
      <scope classrefs="Pickler" doc="Pickler subclass used by multiprocessing.&#10;" ilk="class" name="ForkingPickler">
        <scope doc="Register a reduce function for a type." ilk="function" name="register" />
        <scope ilk="function" name="dumps" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <variable citdl="bool" name="HAVE_SEND_HANDLE" />
      <variable citdl="list" name="__all__" />
      <import module="array" />
      <import module="context" />
      <import module="copyreg" />
      <scope doc="Replacement for pickle.dump() using ForkingPickler." ilk="function" name="dump" signature="dump(obj, file, protocol=None)" />
      <import module="functools" />
      <import module="io" />
      <import module="os" />
      <import module="pickle" />
      <scope doc="Receive a handle over a local connection." ilk="function" name="recv_handle" signature="recv_handle(conn)" />
      <scope doc="Receive an array of fds over an AF_UNIX socket." ilk="function" name="recvfds" signature="recvfds(sock, size)" />
      <scope doc="Register a reduce function for a type." ilk="function" name="register" />
      <scope doc="Send a handle over a local connection." ilk="function" name="send_handle" signature="send_handle(conn, handle, destination_pid)" />
      <scope doc="Send an array of fds over an AF_UNIX socket." ilk="function" name="sendfds" signature="sendfds(sock, fds)" />
      <import module="socket" />
      <import module="sys" />
    </scope>
    <scope doc="# This directory is a Python package.&#10;" ilk="blob" lang="Python3" name="concurrent">
      <import module="futures" />
    </scope>
    <scope doc="Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings&#10;" ilk="blob" lang="Python3" name="base64">
      <variable citdl="int" name="MAXBINSIZE" />
      <variable citdl="int" name="MAXLINESIZE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Decode an Ascii85 encoded byte string." ilk="function" name="a85decode" signature="a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \t\n\r\x0b')" />
      <scope doc="Encode a byte string using Ascii85." ilk="function" name="a85encode" signature="a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, adobe=False)" />
      <scope doc="Decode a Base16 encoded byte string." ilk="function" name="b16decode" signature="b16decode(s, casefold=False)" />
      <scope doc="Encode a byte string using Base16." ilk="function" name="b16encode" signature="b16encode(s)" />
      <scope doc="Decode a Base32 encoded byte string." ilk="function" name="b32decode" signature="b32decode(s, casefold=False, map01=None)" />
      <scope doc="Encode a byte string using Base32." ilk="function" name="b32encode" signature="b32encode(s)" />
      <scope doc="Decode a Base64 encoded byte string." ilk="function" name="b64decode" signature="b64decode(s, altchars=None, validate=False)" />
      <scope doc="Encode a byte string using Base64." ilk="function" name="b64encode" signature="b64encode(s, altchars=None)" />
      <scope doc="Decode base85-encoded byte array" ilk="function" name="b85decode" signature="b85decode(b)" />
      <scope doc="Encode an ASCII-encoded byte array in base85 format." ilk="function" name="b85encode" signature="b85encode(b, pad=False)" />
      <import module="binascii" />
      <variable citdl="tuple" name="bytes_types" />
      <scope doc="Decode a file; input and output are binary files." ilk="function" name="decode" signature="decode(input, output)" />
      <scope doc="Decode a bytestring of base-64 data into a bytestring." ilk="function" name="decodebytes" signature="decodebytes(s)" />
      <scope doc="Legacy alias of decodebytes()." ilk="function" name="decodestring" signature="decodestring(s)" />
      <scope doc="Encode a file; input and output are binary files." ilk="function" name="encode" signature="encode(input, output)" />
      <scope doc="Encode a bytestring into a bytestring containing multiple&#10;lines of base-64 data." ilk="function" name="encodebytes" signature="encodebytes(s)" />
      <scope doc="Legacy alias of encodebytes()." ilk="function" name="encodestring" signature="encodestring(s)" />
      <scope doc="Small main program" ilk="function" name="main" signature="main()" />
      <import module="re" />
      <scope doc="Decode a byte string encoded with the standard Base64&#10;alphabet." ilk="function" name="standard_b64decode" signature="standard_b64decode(s)" />
      <scope doc="Encode a byte string using the standard Base64 alphabet." ilk="function" name="standard_b64encode" signature="standard_b64encode(s)" />
      <import module="struct" />
      <scope ilk="function" name="test" signature="test()" />
      <scope doc="Decode a byte string encoded with the standard Base64&#10;alphabet." ilk="function" name="urlsafe_b64decode" signature="urlsafe_b64decode(s)" />
      <scope doc="Encode a byte string using a url-safe Base64 alphabet." ilk="function" name="urlsafe_b64encode" signature="urlsafe_b64encode(s)" />
    </scope>
    <scope doc="Implements ThreadPoolExecutor.&#10;" ilk="blob" lang="Python3" name="concurrent.futures.thread">
      <scope classrefs="Executor" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="ThreadPoolExecutor">
        <scope doc="Initializes a new ThreadPoolExecutor instance." ilk="function" name="__init__" signature="__init__(self, max_workers=None)" />
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="_adjust_thread_count" signature="_adjust_thread_count(self)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
      </scope>
      <import module="_base" />
      <import module="atexit" />
      <import module="os" />
      <import module="queue" />
      <import module="threading" />
      <import module="weakref" />
    </scope>
    <scope doc="# This module is used to map the old Python 2 names to the new names used in&#10;# Python 3 for the pickle module.  This needed to make pickle streams # generated with Python 2 loadable by Python 3." ilk="blob" lang="Python3" name="_compat_pickle">
      <variable citdl="dict" name="IMPORT_MAPPING" />
      <variable citdl="tuple" name="MULTIPROCESSING_EXCEPTIONS" />
      <variable citdl="dict" name="NAME_MAPPING" />
      <variable citdl="tuple" name="PYTHON2_EXCEPTIONS" />
      <variable citdl="tuple" name="PYTHON3_OSERROR_EXCEPTIONS" />
      <variable citdl="dict" name="REVERSE_IMPORT_MAPPING" />
      <variable citdl="dict" name="REVERSE_NAME_MAPPING" />
      <variable citdl="str" name="excname" />
    </scope>
    <scope doc="This module provides access to the Unix password database.&#10;It is available on all Unix versions.  Password database entries are reported as 7-tuples containing the following items from the password database (see `&lt;pwd.h&gt;'), in order: pw_name, pw_passwd, pw_uid, pw_gid, pw_gecos, pw_dir, pw_shell. The uid and gid items are integers, all others are strings. An exception is raised if the entry asked for cannot be found." ilk="blob" lang="Python3" name="pwd">
      <scope doc="Return a list of all available password database entries, in&#10;arbitrary order." ilk="function" name="getpwall" />
      <scope doc="Return the password database entry for the given user name." ilk="function" name="getpwnam" />
      <scope doc="Return the password database entry for the given numeric&#10;user ID." ilk="function" name="getpwuid" />
      <scope classrefs="tuple" doc="pwd.struct_passwd: Results from getpw*() routines.&#10;This object may be accessed either as a tuple of (pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell) or via the object attributes as named in the above tuple." ilk="class" name="struct_passwd">
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
    </scope>
    <scope doc="Heap queue algorithm (a.k.a. priority queue).&#10;Heaps are arrays for which a[k] &lt;= a[2*k+1] and a[k] &lt;= a[2*k+2] for all k, counting elements from 0.  For the sake of comparison, non-existing elements are considered to be infinite.  The interesting property of a heap is that a[0] is always its smallest element.  Usage:  heap = []            # creates an empty heap heappush(heap, item) # pushes a new item on the heap item = heappop(heap) # pops the smallest item from the heap" ilk="blob" lang="Python3" name="heapq">
      <variable citdl="str" name="__about__" />
      <variable citdl="list" name="__all__" />
      <scope doc="Transform list into a heap, in-place, in O(len(heap)) time." ilk="function" name="heapify" />
      <scope doc="Pop the smallest item off the heap, maintaining the heap&#10;invariant." ilk="function" name="heappop" />
      <scope doc="heappush(heap, item) -&gt; None. Push item onto heap, maintaining the heap invariant." ilk="function" name="heappush" signature="heappush(heap, item) -&gt; None. Push item onto heap, maintaining the heap invariant." />
      <scope doc="from the heap." ilk="function" name="heappushpop" signature="heappushpop(heap, item) -&gt; value. Push item on the heap, then pop and return the smallest item" />
      <scope doc="This is more efficient than heappop() followed by&#10;heappush(), and can be more appropriate when using a fixed-&#10;size heap." ilk="function" name="heapreplace" signature="heapreplace(heap, item) -&gt; value. Pop and return the current smallest value, and add the new item." />
      <scope doc="Merge multiple sorted inputs into a single sorted output." ilk="function" name="merge" signature="merge(*iterables, key=None, reverse=False)" />
      <scope doc="Find the n largest elements in a dataset." ilk="function" name="nlargest" signature="nlargest(n, iterable, key=None)" />
      <scope doc="Find the n smallest elements in a dataset." ilk="function" name="nsmallest" signature="nsmallest(n, iterable, key=None)" />
    </scope>
    <scope doc="Implements (a subset of) Sun XDR -- eXternal Data Representation.&#10;See: RFC 1014" ilk="blob" lang="Python3" name="xdrlib">
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="Error" doc="Exception class for this module. Use:&#10;except xdrlib.Error as var: # var has the Error instance for the exception  Public ivars: msg -- contains the message" ilk="class" name="ConversionError" />
      <scope classrefs="Exception" doc="Exception class for this module. Use:&#10;except xdrlib.Error as var: # var has the Error instance for the exception  Public ivars: msg -- contains the message" ilk="class" name="Error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Pack various data representations into a buffer.&#10;" ilk="class" name="Packer">
        <scope ilk="function" name="pack_float" signature="pack_float(self, value)" />
        <scope ilk="function" name="pack_double" signature="pack_double(self, value)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="get_buf" signature="get_buf(self)" />
        <scope ilk="function" name="pack_opaque" signature="pack_opaque(self, s)" />
        <scope ilk="function" name="get_buffer" signature="get_buffer(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="pack_hyper" signature="pack_hyper(self, x)" />
        <scope ilk="function" name="pack_string" signature="pack_string(self, s)" />
        <scope ilk="function" name="pack_bytes" signature="pack_bytes(self, s)" />
        <scope ilk="function" name="pack_array" signature="pack_array(self, list, pack_item)" />
        <scope ilk="function" name="pack_fopaque" signature="pack_fopaque(self, n, s)" />
        <scope ilk="function" name="pack_uhyper" signature="pack_uhyper(self, x)" />
        <scope ilk="function" name="pack_int" signature="pack_int(self, value)" />
        <scope ilk="function" name="pack_list" signature="pack_list(self, list, pack_item)" />
        <scope ilk="function" name="pack_fstring" signature="pack_fstring(self, n, s)" />
        <scope ilk="function" name="pack_uint" signature="pack_uint(self, value)" />
        <scope ilk="function" name="pack_bool" signature="pack_bool(self, x)" />
        <scope ilk="function" name="pack_farray" signature="pack_farray(self, n, list, pack_item)" />
        <scope ilk="function" name="pack_enum" signature="pack_enum(self, value)" />
      </scope>
      <scope classrefs="object" doc="Unpacks various data representations from the given buffer.&#10;" ilk="class" name="Unpacker">
        <scope ilk="function" name="unpack_enum" signature="unpack_enum(self)" />
        <scope ilk="function" name="unpack_opaque" signature="unpack_opaque(self)" />
        <scope ilk="function" name="unpack_bool" signature="unpack_bool(self)" />
        <scope ilk="function" name="unpack_list" signature="unpack_list(self, unpack_item)" />
        <scope ilk="function" name="reset" signature="reset(self, data)" />
        <scope ilk="function" name="unpack_fstring" signature="unpack_fstring(self, n)" />
        <scope ilk="function" name="unpack_fopaque" signature="unpack_fopaque(self, n)" />
        <scope ilk="function" name="get_buffer" signature="get_buffer(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data)" />
        <scope ilk="function" name="unpack_farray" signature="unpack_farray(self, n, unpack_item)" />
        <scope ilk="function" name="unpack_uhyper" signature="unpack_uhyper(self)" />
        <scope ilk="function" name="unpack_double" signature="unpack_double(self)" />
        <scope ilk="function" name="unpack_int" signature="unpack_int(self)" />
        <scope ilk="function" name="unpack_hyper" signature="unpack_hyper(self)" />
        <scope ilk="function" name="unpack_string" signature="unpack_string(self)" />
        <scope ilk="function" name="get_position" signature="get_position(self)" />
        <scope ilk="function" name="unpack_float" signature="unpack_float(self)" />
        <scope ilk="function" name="unpack_bytes" signature="unpack_bytes(self)" />
        <scope ilk="function" name="unpack_uint" signature="unpack_uint(self)" />
        <scope ilk="function" name="done" signature="done(self)" />
        <scope ilk="function" name="unpack_array" signature="unpack_array(self, unpack_item)" />
        <scope ilk="function" name="set_position" signature="set_position(self, position)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Wrap any raised struct.errors in a ConversionError." ilk="function" name="raise_conversion_error" signature="raise_conversion_error(function)" />
      <import module="struct" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="Utility code for constructing importers, etc.&#10;" ilk="blob" lang="Python3" name="importlib.util">
      <scope classrefs="Loader" doc="A loader that creates a module which defers loading until attribute access.&#10;" ilk="class" name="LazyLoader">
        <scope ilk="function" name="_LazyLoader__check_eager_loader" signature="_LazyLoader__check_eager_loader(loader)" />
        <scope doc="Make the module load lazily." ilk="function" name="exec_module" signature="exec_module(self, module)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, loader)" />
        <scope doc="Create a module which can have its __class__ manipulated." ilk="function" name="create_module" signature="create_module(self, spec)" />
        <scope doc="Construct a callable which returns the eager loader made&#10;lazy." ilk="function" name="factory" />
      </scope>
      <variable citdl="bytes" name="MAGIC_NUMBER" />
      <import module="abc" />
      <scope doc="Given the path to a .py file, return the path to its .pyc&#10;file." ilk="function" name="cache_from_source" signature="cache_from_source(path, debug_override=None, *, optimization=None)" />
      <scope doc="@contextmanager decorator." ilk="function" name="contextmanager" signature="contextmanager(func)" />
      <scope doc="Decode bytes representing source code and return the string." ilk="function" name="decode_source" signature="decode_source(source_bytes)" />
      <scope doc="Return the spec for the specified module." ilk="function" name="find_spec" signature="find_spec(name, package=None)" />
      <import module="functools" />
      <scope doc="Decorator to handle selecting the proper module for loaders." ilk="function" name="module_for_loader" signature="module_for_loader(fxn)" />
      <scope doc="Create a module based on the provided spec." ilk="function" name="module_from_spec" signature="module_from_spec(spec)" />
      <scope doc="Resolve a relative module name to an absolute one." ilk="function" name="resolve_name" signature="resolve_name(name, package)" />
      <scope doc="Set __loader__ on the returned module." ilk="function" name="set_loader" signature="set_loader(fxn)" />
      <scope doc="Set __package__ on the returned module." ilk="function" name="set_package" signature="set_package(fxn)" />
      <scope doc="Given the path to a .pyc." ilk="function" name="source_from_cache" signature="source_from_cache(path)" />
      <scope doc="Return a module spec based on a file location." ilk="function" name="spec_from_file_location" signature="spec_from_file_location(name, location=None, *, loader=None, submodule_search_locations=&lt;object object at 0x7f11880dc040&gt;)" />
      <scope doc="Return a module spec based on various loader methods." ilk="function" name="spec_from_loader" signature="spec_from_loader(name, loader, *, origin=None, is_package=None)" />
      <import module="sys" />
      <import module="types" />
      <import module="warnings" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="enum">
      <scope classrefs="object" doc="Route attribute access on a class to __getattr__.&#10;This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class.  Instance access remains normal, but access to an attribute through a class will be routed to the class's __getattr__ method; this is done by raising AttributeError.  This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example)." ilk="class" name="DynamicClassAttribute">
        <scope ilk="function" name="__delete__" signature="__delete__(self, instance)" />
        <scope ilk="function" name="deleter" signature="deleter(self, fdel)" />
        <scope ilk="function" name="__set__" signature="__set__(self, instance, value)" />
        <scope ilk="function" name="setter" signature="setter(self, fset)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fget=None, fset=None, fdel=None, doc=None)" />
        <scope ilk="function" name="__get__" signature="__get__(self, instance, ownerclass=None)" />
        <scope ilk="function" name="getter" signature="getter(self, fget)" />
      </scope>
      <scope classrefs="object" doc="Generic enumeration.&#10;Derive from this class to define new enumerations." ilk="class" name="Enum" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="_sre">
      <variable citdl="int" name="CODESIZE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="int" name="MAXGROUPS" />
      <variable citdl="int" name="MAXREPEAT" />
      <scope ilk="function" name="compile" />
      <variable citdl="str" name="copyright" />
      <scope ilk="function" name="getcodesize" />
      <scope ilk="function" name="getlower" />
    </scope>
    <scope doc="Terminal utilities.&#10;" ilk="blob" lang="Python3" name="tty">
      <variable citdl="int" name="B0" />
      <variable citdl="int" name="B1000000" />
      <variable citdl="int" name="B110" />
      <variable citdl="int" name="B115200" />
      <variable citdl="int" name="B1152000" />
      <variable citdl="int" name="B1200" />
      <variable citdl="int" name="B134" />
      <variable citdl="int" name="B150" />
      <variable citdl="int" name="B1500000" />
      <variable citdl="int" name="B1800" />
      <variable citdl="int" name="B19200" />
      <variable citdl="int" name="B200" />
      <variable citdl="int" name="B2000000" />
      <variable citdl="int" name="B230400" />
      <variable citdl="int" name="B2400" />
      <variable citdl="int" name="B2500000" />
      <variable citdl="int" name="B300" />
      <variable citdl="int" name="B3000000" />
      <variable citdl="int" name="B3500000" />
      <variable citdl="int" name="B38400" />
      <variable citdl="int" name="B4000000" />
      <variable citdl="int" name="B460800" />
      <variable citdl="int" name="B4800" />
      <variable citdl="int" name="B50" />
      <variable citdl="int" name="B500000" />
      <variable citdl="int" name="B57600" />
      <variable citdl="int" name="B576000" />
      <variable citdl="int" name="B600" />
      <variable citdl="int" name="B75" />
      <variable citdl="int" name="B921600" />
      <variable citdl="int" name="B9600" />
      <variable citdl="int" name="BRKINT" />
      <variable citdl="int" name="BS0" />
      <variable citdl="int" name="BS1" />
      <variable citdl="int" name="BSDLY" />
      <variable citdl="int" name="CBAUD" />
      <variable citdl="int" name="CBAUDEX" />
      <variable citdl="int" name="CC" />
      <variable citdl="int" name="CDSUSP" />
      <variable citdl="int" name="CEOF" />
      <variable citdl="int" name="CEOL" />
      <variable citdl="int" name="CEOT" />
      <variable citdl="int" name="CERASE" />
      <variable citdl="int" name="CFLAG" />
      <variable citdl="int" name="CFLUSH" />
      <variable citdl="int" name="CIBAUD" />
      <variable citdl="int" name="CINTR" />
      <variable citdl="int" name="CKILL" />
      <variable citdl="int" name="CLNEXT" />
      <variable citdl="int" name="CLOCAL" />
      <variable citdl="int" name="CQUIT" />
      <variable citdl="int" name="CR0" />
      <variable citdl="int" name="CR1" />
      <variable citdl="int" name="CR2" />
      <variable citdl="int" name="CR3" />
      <variable citdl="int" name="CRDLY" />
      <variable citdl="int" name="CREAD" />
      <variable citdl="int" name="CRPRNT" />
      <variable citdl="int" name="CRTSCTS" />
      <variable citdl="int" name="CS5" />
      <variable citdl="int" name="CS6" />
      <variable citdl="int" name="CS7" />
      <variable citdl="int" name="CS8" />
      <variable citdl="int" name="CSIZE" />
      <variable citdl="int" name="CSTART" />
      <variable citdl="int" name="CSTOP" />
      <variable citdl="int" name="CSTOPB" />
      <variable citdl="int" name="CSUSP" />
      <variable citdl="int" name="CWERASE" />
      <variable citdl="int" name="ECHO" />
      <variable citdl="int" name="ECHOCTL" />
      <variable citdl="int" name="ECHOE" />
      <variable citdl="int" name="ECHOK" />
      <variable citdl="int" name="ECHOKE" />
      <variable citdl="int" name="ECHONL" />
      <variable citdl="int" name="ECHOPRT" />
      <variable citdl="int" name="EXTA" />
      <variable citdl="int" name="EXTB" />
      <variable citdl="int" name="FF0" />
      <variable citdl="int" name="FF1" />
      <variable citdl="int" name="FFDLY" />
      <variable citdl="int" name="FIOASYNC" />
      <variable citdl="int" name="FIOCLEX" />
      <variable citdl="int" name="FIONBIO" />
      <variable citdl="int" name="FIONCLEX" />
      <variable citdl="int" name="FIONREAD" />
      <variable citdl="int" name="FLUSHO" />
      <variable citdl="int" name="HUPCL" />
      <variable citdl="int" name="ICANON" />
      <variable citdl="int" name="ICRNL" />
      <variable citdl="int" name="IEXTEN" />
      <variable citdl="int" name="IFLAG" />
      <variable citdl="int" name="IGNBRK" />
      <variable citdl="int" name="IGNCR" />
      <variable citdl="int" name="IGNPAR" />
      <variable citdl="int" name="IMAXBEL" />
      <variable citdl="int" name="INLCR" />
      <variable citdl="int" name="INPCK" />
      <variable citdl="int" name="IOCSIZE_MASK" />
      <variable citdl="int" name="IOCSIZE_SHIFT" />
      <variable citdl="int" name="ISIG" />
      <variable citdl="int" name="ISPEED" />
      <variable citdl="int" name="ISTRIP" />
      <variable citdl="int" name="IUCLC" />
      <variable citdl="int" name="IXANY" />
      <variable citdl="int" name="IXOFF" />
      <variable citdl="int" name="IXON" />
      <variable citdl="int" name="LFLAG" />
      <variable citdl="int" name="NCC" />
      <variable citdl="int" name="NCCS" />
      <variable citdl="int" name="NL0" />
      <variable citdl="int" name="NL1" />
      <variable citdl="int" name="NLDLY" />
      <variable citdl="int" name="NOFLSH" />
      <variable citdl="int" name="N_MOUSE" />
      <variable citdl="int" name="N_PPP" />
      <variable citdl="int" name="N_SLIP" />
      <variable citdl="int" name="N_STRIP" />
      <variable citdl="int" name="N_TTY" />
      <variable citdl="int" name="OCRNL" />
      <variable citdl="int" name="OFDEL" />
      <variable citdl="int" name="OFILL" />
      <variable citdl="int" name="OFLAG" />
      <variable citdl="int" name="OLCUC" />
      <variable citdl="int" name="ONLCR" />
      <variable citdl="int" name="ONLRET" />
      <variable citdl="int" name="ONOCR" />
      <variable citdl="int" name="OPOST" />
      <variable citdl="int" name="OSPEED" />
      <variable citdl="int" name="PARENB" />
      <variable citdl="int" name="PARMRK" />
      <variable citdl="int" name="PARODD" />
      <variable citdl="int" name="PENDIN" />
      <variable citdl="int" name="TAB0" />
      <variable citdl="int" name="TAB1" />
      <variable citdl="int" name="TAB2" />
      <variable citdl="int" name="TAB3" />
      <variable citdl="int" name="TABDLY" />
      <variable citdl="int" name="TCFLSH" />
      <variable citdl="int" name="TCGETA" />
      <variable citdl="int" name="TCGETS" />
      <variable citdl="int" name="TCIFLUSH" />
      <variable citdl="int" name="TCIOFF" />
      <variable citdl="int" name="TCIOFLUSH" />
      <variable citdl="int" name="TCION" />
      <variable citdl="int" name="TCOFLUSH" />
      <variable citdl="int" name="TCOOFF" />
      <variable citdl="int" name="TCOON" />
      <variable citdl="int" name="TCSADRAIN" />
      <variable citdl="int" name="TCSAFLUSH" />
      <variable citdl="int" name="TCSANOW" />
      <variable citdl="int" name="TCSBRK" />
      <variable citdl="int" name="TCSBRKP" />
      <variable citdl="int" name="TCSETA" />
      <variable citdl="int" name="TCSETAF" />
      <variable citdl="int" name="TCSETAW" />
      <variable citdl="int" name="TCSETS" />
      <variable citdl="int" name="TCSETSF" />
      <variable citdl="int" name="TCSETSW" />
      <variable citdl="int" name="TCXONC" />
      <variable citdl="int" name="TIOCCONS" />
      <variable citdl="int" name="TIOCEXCL" />
      <variable citdl="int" name="TIOCGETD" />
      <variable citdl="int" name="TIOCGICOUNT" />
      <variable citdl="int" name="TIOCGLCKTRMIOS" />
      <variable citdl="int" name="TIOCGPGRP" />
      <variable citdl="int" name="TIOCGSERIAL" />
      <variable citdl="int" name="TIOCGSOFTCAR" />
      <variable citdl="int" name="TIOCGWINSZ" />
      <variable citdl="int" name="TIOCINQ" />
      <variable citdl="int" name="TIOCLINUX" />
      <variable citdl="int" name="TIOCMBIC" />
      <variable citdl="int" name="TIOCMBIS" />
      <variable citdl="int" name="TIOCMGET" />
      <variable citdl="int" name="TIOCMIWAIT" />
      <variable citdl="int" name="TIOCMSET" />
      <variable citdl="int" name="TIOCM_CAR" />
      <variable citdl="int" name="TIOCM_CD" />
      <variable citdl="int" name="TIOCM_CTS" />
      <variable citdl="int" name="TIOCM_DSR" />
      <variable citdl="int" name="TIOCM_DTR" />
      <variable citdl="int" name="TIOCM_LE" />
      <variable citdl="int" name="TIOCM_RI" />
      <variable citdl="int" name="TIOCM_RNG" />
      <variable citdl="int" name="TIOCM_RTS" />
      <variable citdl="int" name="TIOCM_SR" />
      <variable citdl="int" name="TIOCM_ST" />
      <variable citdl="int" name="TIOCNOTTY" />
      <variable citdl="int" name="TIOCNXCL" />
      <variable citdl="int" name="TIOCOUTQ" />
      <variable citdl="int" name="TIOCPKT" />
      <variable citdl="int" name="TIOCPKT_DATA" />
      <variable citdl="int" name="TIOCPKT_DOSTOP" />
      <variable citdl="int" name="TIOCPKT_FLUSHREAD" />
      <variable citdl="int" name="TIOCPKT_FLUSHWRITE" />
      <variable citdl="int" name="TIOCPKT_NOSTOP" />
      <variable citdl="int" name="TIOCPKT_START" />
      <variable citdl="int" name="TIOCPKT_STOP" />
      <variable citdl="int" name="TIOCSCTTY" />
      <variable citdl="int" name="TIOCSERCONFIG" />
      <variable citdl="int" name="TIOCSERGETLSR" />
      <variable citdl="int" name="TIOCSERGETMULTI" />
      <variable citdl="int" name="TIOCSERGSTRUCT" />
      <variable citdl="int" name="TIOCSERGWILD" />
      <variable citdl="int" name="TIOCSERSETMULTI" />
      <variable citdl="int" name="TIOCSERSWILD" />
      <variable citdl="int" name="TIOCSER_TEMT" />
      <variable citdl="int" name="TIOCSETD" />
      <variable citdl="int" name="TIOCSLCKTRMIOS" />
      <variable citdl="int" name="TIOCSPGRP" />
      <variable citdl="int" name="TIOCSSERIAL" />
      <variable citdl="int" name="TIOCSSOFTCAR" />
      <variable citdl="int" name="TIOCSTI" />
      <variable citdl="int" name="TIOCSWINSZ" />
      <variable citdl="int" name="TOSTOP" />
      <variable citdl="int" name="VDISCARD" />
      <variable citdl="int" name="VEOF" />
      <variable citdl="int" name="VEOL" />
      <variable citdl="int" name="VEOL2" />
      <variable citdl="int" name="VERASE" />
      <variable citdl="int" name="VINTR" />
      <variable citdl="int" name="VKILL" />
      <variable citdl="int" name="VLNEXT" />
      <variable citdl="int" name="VMIN" />
      <variable citdl="int" name="VQUIT" />
      <variable citdl="int" name="VREPRINT" />
      <variable citdl="int" name="VSTART" />
      <variable citdl="int" name="VSTOP" />
      <variable citdl="int" name="VSUSP" />
      <variable citdl="int" name="VSWTC" />
      <variable citdl="int" name="VSWTCH" />
      <variable citdl="int" name="VT0" />
      <variable citdl="int" name="VT1" />
      <variable citdl="int" name="VTDLY" />
      <variable citdl="int" name="VTIME" />
      <variable citdl="int" name="VWERASE" />
      <variable citdl="int" name="XCASE" />
      <variable citdl="int" name="XTABS" />
      <variable citdl="list" name="__all__" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <scope doc="Put terminal into a cbreak mode." ilk="function" name="setcbreak" signature="setcbreak(fd, when=2)" />
      <scope doc="Put terminal into a raw mode." ilk="function" name="setraw" signature="setraw(fd, when=2)" />
      <scope doc="Wait until all output written to file descriptor fd has been&#10;transmitted." ilk="function" name="tcdrain" signature="tcdrain(fd) -&gt; None" />
      <scope doc="Suspend or resume input or output on file descriptor fd." ilk="function" name="tcflow" signature="tcflow(fd, action) -&gt; None" />
      <scope doc="Discard queued data on file descriptor fd." ilk="function" name="tcflush" signature="tcflush(fd, queue) -&gt; None" />
      <scope doc="Get the tty attributes for file descriptor fd, as follows:&#10;[iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is&#10;a list of the tty special characters (each a string of&#10;length 1, except the items with indices VMIN and VTIME,&#10;which are integers when these fields are" ilk="function" name="tcgetattr" signature="tcgetattr(fd) -&gt; list_of_attrs" />
      <scope doc="Send a break on file descriptor fd." ilk="function" name="tcsendbreak" signature="tcsendbreak(fd, duration) -&gt; None" />
      <scope doc="Set the tty attributes for file descriptor fd." ilk="function" name="tcsetattr" signature="tcsetattr(fd, when, attributes) -&gt; None" />
    </scope>
    <scope doc="XML-RPC Servers.&#10;This module can be used to create simple XML-RPC servers by creating a server and either installing functions, a class instance, or by extending the SimpleXMLRPCServer class.  It can also be used to handle XML-RPC requests in a CGI environment using CGIXMLRPCRequestHandler.  The Doc* classes can be used to create XML-RPC servers that serve pydoc-style documentation in response to HTTP" ilk="blob" lang="Python3" name="xmlrpc.server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="BaseHTTPRequestHandler">
        <scope doc="Decide what to do with an &quot;Expect: 100-continue&quot; header." ilk="function" name="handle_expect_100" signature="handle_expect_100(self)" />
        <scope doc="Return the client address." ilk="function" name="address_string" signature="address_string(self)" />
        <scope doc="Parse a request (internal)." ilk="function" name="parse_request" signature="parse_request(self)" />
        <scope doc="Log an arbitrary message." ilk="function" name="log_message" signature="log_message(self, format, *args)" />
        <scope doc="Log an accepted request." ilk="function" name="log_request" signature="log_request(self, code='-', size='-')" />
        <scope doc="Send a MIME header to the headers buffer." ilk="function" name="send_header" signature="send_header(self, keyword, value)" />
        <scope doc="Return the current time formatted for logging." ilk="function" name="log_date_time_string" signature="log_date_time_string(self)" />
        <scope doc="Send the blank line ending the MIME headers." ilk="function" name="end_headers" signature="end_headers(self)" />
        <scope doc="Add the response header to the headers buffer and log the&#10;response code." ilk="function" name="send_response" signature="send_response(self, code, message=None)" />
        <scope ilk="function" name="flush_headers" signature="flush_headers(self)" />
        <scope doc="Send the response header only." ilk="function" name="send_response_only" signature="send_response_only(self, code, message=None)" />
        <scope doc="Handle multiple requests if necessary." ilk="function" name="handle" signature="handle(self)" />
        <scope doc="Return the server software version string." ilk="function" name="version_string" signature="version_string(self)" />
        <scope doc="Handle a single HTTP request." ilk="function" name="handle_one_request" signature="handle_one_request(self)" />
        <scope doc="Return the current date and time formatted for a message&#10;header." ilk="function" name="date_time_string" signature="date_time_string(self, timestamp=None)" />
        <scope doc="Log an error." ilk="function" name="log_error" signature="log_error(self, format, *args)" />
        <scope doc="Send and log an error reply." ilk="function" name="send_error" signature="send_error(self, code, message=None, explain=None)" />
      </scope>
      <scope classrefs="SimpleXMLRPCDispatcher" doc="Simple handler for XML-RPC data passed through CGI.&#10;" ilk="class" name="CGIXMLRPCRequestHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, allow_none=False, encoding=None, use_builtin_types=False)" />
        <scope doc="Handle a single XML-RPC request" ilk="function" name="handle_xmlrpc" signature="handle_xmlrpc(self, request_text)" />
        <scope doc="Handle a single XML-RPC request passed through a CGI post&#10;method." ilk="function" name="handle_request" signature="handle_request(self, request_text=None)" />
        <scope doc="Handle a single HTTP GET request." ilk="function" name="handle_get" signature="handle_get(self)" />
      </scope>
      <scope classrefs="CGIXMLRPCRequestHandler XMLRPCDocGenerator" doc="Handler for XML-RPC data and documentation requests passed through&#10;CGI" ilk="class" name="DocCGIXMLRPCRequestHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Handles the HTTP GET request." ilk="function" name="handle_get" signature="handle_get(self)" />
      </scope>
      <scope classrefs="SimpleXMLRPCRequestHandler" doc="XML-RPC and documentation request handler class.&#10;Handles all HTTP POST requests and attempts to decode them as XML-RPC requests.  Handles all HTTP GET requests and interprets them as requests for documentation." ilk="class" name="DocXMLRPCRequestHandler">
        <scope doc="Handles the HTTP GET request." ilk="function" name="do_GET" signature="do_GET(self)" />
      </scope>
      <scope classrefs="SimpleXMLRPCServer XMLRPCDocGenerator" doc="XML-RPC and HTML documentation server.&#10;Adds the ability to serve server documentation to the capabilities of SimpleXMLRPCServer." ilk="class" name="DocXMLRPCServer">
        <scope doc="Constructor. May be extended, do not override." ilk="function" name="__init__" signature="__init__(self, addr, requestHandler=&lt;class 'xmlrpc.server.DocXMLRPCRequestHandler'&gt;, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)" />
      </scope>
      <scope classrefs="Error" doc="Indicates an XML-RPC fault package.&#10;" ilk="class" name="Fault">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, faultCode, faultString, **extra)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="SimpleXMLRPCServer" doc="Multipath XML-RPC Server&#10;This specialization of SimpleXMLRPCServer allows the user to create multiple Dispatcher instances and assign them to different HTTP request paths.  This makes it possible to run two or more 'virtual XML-RPC servers' at the same port. Make sure that the requestHandler accepts the paths in question." ilk="class" name="MultiPathXMLRPCServer">
        <scope doc="Constructor. May be extended, do not override." ilk="function" name="__init__" signature="__init__(self, addr, requestHandler=&lt;class 'xmlrpc.server.SimpleXMLRPCRequestHandler'&gt;, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)" />
        <scope doc="Dispatches an XML-RPC method from marshalled (XML) data." ilk="function" name="_marshaled_dispatch" signature="_marshaled_dispatch(self, data, dispatch_method=None, path=None)" />
        <scope ilk="function" name="add_dispatcher" signature="add_dispatcher(self, path, dispatcher)" />
        <scope ilk="function" name="get_dispatcher" signature="get_dispatcher(self, path)" />
      </scope>
      <scope classrefs="HTMLDoc" doc="Class used to generate pydoc HTML document for a server&#10;" ilk="class" name="ServerHTMLDoc">
        <scope doc="Produce HTML documentation for a function or method object." ilk="function" name="docroutine" signature="docroutine(self, object, name, mod=None, funcs={}, classes={}, methods={}, cl=None)" />
        <scope doc="Mark up some plain text, given a context of symbols to look&#10;for." ilk="function" name="markup" signature="markup(self, text, escape=None, funcs={}, classes={}, methods={})" />
        <scope doc="Produce HTML documentation for an XML-RPC server." ilk="function" name="docserver" signature="docserver(self, server_name, package_documentation, methods)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class that dispatches XML-RPC requests.&#10;This class is used to register XML-RPC method handlers and then to dispatch them. This class doesn't need to be instanced directly when used by SimpleXMLRPCServer but it can be instanced when used by the MultiPathXMLRPCServer" ilk="class" name="SimpleXMLRPCDispatcher">
        <scope doc="Dispatches an XML-RPC method from marshalled (XML) data." ilk="function" name="_marshaled_dispatch" signature="_marshaled_dispatch(self, data, dispatch_method=None, path=None)" />
        <scope doc="Registers the XML-RPC multicall method in the system&#10;namespace." ilk="function" name="register_multicall_functions" signature="register_multicall_functions(self)" />
        <scope doc="Registers the XML-RPC introspection methods in the system&#10;namespace." ilk="function" name="register_introspection_functions" signature="register_introspection_functions(self)" />
        <scope doc="Returns a list of the methods supported by the server." ilk="function" name="system_listMethods" signature="system.listMethods() =&gt; ['add', 'subtract', 'multiple']" />
        <scope doc="Returns a string containing documentation for the specified&#10;method." ilk="function" name="system_methodHelp" signature="system.methodHelp('add') =&gt; &quot;Adds two integers together&quot;" />
        <scope doc="Dispatches the XML-RPC method." ilk="function" name="_dispatch" signature="_dispatch(self, method, params)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, allow_none=False, encoding=None, use_builtin_types=False)" />
        <scope doc="Registers a function to respond to XML-RPC requests." ilk="function" name="register_function" signature="register_function(self, function, name=None)" />
        <scope doc="Allows the caller to package multiple XML-RPC calls into a&#10;single request." ilk="function" name="system_multicall" signature="system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) =&gt; [[4], ...]" />
        <scope doc="Registers an instance to respond to XML-RPC requests." ilk="function" name="register_instance" signature="register_instance(self, instance, allow_dotted_names=False)" />
        <scope doc="Returns a list describing the signature of the method." ilk="function" name="system_methodSignature" signature="system.methodSignature('add') =&gt; [double, int, int]" />
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="Simple XML-RPC request handler class.&#10;Handles all HTTP POST requests and attempts to decode them as XML-RPC requests." ilk="class" name="SimpleXMLRPCRequestHandler">
        <scope ilk="function" name="is_rpc_path_valid" signature="is_rpc_path_valid(self)" />
        <scope doc="Handles the HTTP POST request." ilk="function" name="do_POST" signature="do_POST(self)" />
        <scope ilk="function" name="accept_encodings" signature="accept_encodings(self)" />
        <scope doc="Selectively log an accepted request." ilk="function" name="log_request" signature="log_request(self, code='-', size='-')" />
        <scope ilk="function" name="report_404" signature="report_404(self)" />
        <scope ilk="function" name="decode_request_content" signature="decode_request_content(self, data)" />
      </scope>
      <scope classrefs="TCPServer SimpleXMLRPCDispatcher" doc="Simple XML-RPC server.&#10;Simple XML-RPC server that allows functions and a single instance to be installed to handle requests. The default implementation attempts to dispatch XML-RPC calls to the functions or instance installed in the server. Override the _dispatch method inherited from SimpleXMLRPCDispatcher to change this behavior." ilk="class" name="SimpleXMLRPCServer">
        <scope doc="Constructor. May be extended, do not override." ilk="function" name="__init__" signature="__init__(self, addr, requestHandler=&lt;class 'xmlrpc.server.SimpleXMLRPCRequestHandler'&gt;, logRequests=True, allow_none=False, encoding=None, bind_and_activate=True, use_builtin_types=False)" />
      </scope>
      <scope classrefs="object" doc="Generates documentation for an XML-RPC server.&#10;This class is designed as mix-in and should not be constructed directly." ilk="class" name="XMLRPCDocGenerator">
        <scope doc="Set the name of the generated HTML server documentation" ilk="function" name="set_server_name" signature="set_server_name(self, server_name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Set the documentation string for the entire server." ilk="function" name="set_server_documentation" signature="set_server_documentation(self, server_documentation)" />
        <scope doc="Generates HTML documentation for the server using&#10;introspection for installed functions and instances that do&#10;not implement the _dispatch method." ilk="function" name="generate_html_documentation" signature="generate_html_documentation() =&gt; html documentation for the server" />
        <scope doc="Set the HTML title of the generated server documentation" ilk="function" name="set_server_title" signature="set_server_title(self, server_title)" />
      </scope>
      <scope doc="data [,options] -&gt; marshalled data" ilk="function" name="dumps" signature="dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)" />
      <import module="fcntl" />
      <scope doc="gzip encoded data -&gt; unencoded data" ilk="function" name="gzip_decode" signature="gzip_decode(data, max_decode=20971520)" />
      <scope doc="data -&gt; gzip encoded data" ilk="function" name="gzip_encode" signature="gzip_encode(data)" />
      <import module="http" />
      <import module="inspect" />
      <scope doc="Returns a list of attribute strings, found in the specified&#10;object, which represent callable attributes" ilk="function" name="list_public_methods" signature="list_public_methods(obj)" />
      <scope doc="data -&gt; unmarshalled data, method name" ilk="function" name="loads" signature="loads(data, use_datetime=False, use_builtin_types=False)" />
      <import module="os" />
      <import module="pydoc" />
      <import module="re" />
      <scope doc="Resolves a dotted attribute name to an object." ilk="function" name="resolve_dotted_attribute" signature="resolve_dotted_attribute(a, 'b.c.d') =&gt; a.b.c.d" />
      <import module="socketserver" />
      <import module="sys" />
      <import module="traceback" />
    </scope>
    <scope doc="Generic framework path manipulation&#10;" ilk="blob" lang="Python3" name="ctypes.macholib.framework">
      <variable citdl="SRE_Pattern" name="STRICT_FRAMEWORK_RE" />
      <variable citdl="list" name="__all__" />
      <scope doc="A framework name can take one of the following four forms:&#10;Location/Name.framework/Versions/SomeVersion/Name_Suffix&#10;Location/Name.framework/Versions/SomeVersion/Name&#10;Location/Name.framework/Name_Suffix" ilk="function" name="framework_info" signature="framework_info(filename)" />
      <import module="re" />
      <scope ilk="function" name="test_framework_info" signature="test_framework_info()" />
    </scope>
    <scope doc="Filename globbing utility.&#10;" ilk="blob" lang="Python3" name="glob">
      <variable citdl="list" name="__all__" />
      <scope doc="Escape all special characters." ilk="function" name="escape" signature="escape(pathname)" />
      <import module="fnmatch" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" name="glob" signature="glob(pathname, *, recursive=False)" />
      <scope ilk="function" name="glob0" signature="glob0(dirname, basename)" />
      <scope ilk="function" name="glob1" signature="glob1(dirname, pattern)" />
      <scope ilk="function" name="glob2" signature="glob2(dirname, pattern)" />
      <scope ilk="function" name="has_magic" signature="has_magic(s)" />
      <scope doc="Return an iterator which yields the paths matching a&#10;pathname pattern." ilk="function" name="iglob" signature="iglob(pathname, *, recursive=False)" />
      <variable citdl="SRE_Pattern" name="magic_check" />
      <variable citdl="SRE_Pattern" name="magic_check_bytes" />
      <import module="os" />
      <import module="re" />
    </scope>
    <scope doc="Common operations on Posix pathnames.&#10;Instead of importing this module directly, import os and refer to this module as os.path.  The &quot;os.path&quot; name is an alias for this module on Posix systems; on other systems (e.g. Mac, Windows), os.path provides the same operations in a manner specific to that platform, and is an alias to another module (e.g. macpath, ntpath).  Some of this can actually be useful on non-Posix systems too, e.g. for manipulation of the pathname component of URLs." ilk="blob" lang="Python3" name="posixpath">
      <variable citdl="list" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="NoneType" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" name="basename" signature="basename(p)" />
      <scope doc="Given a sequence of path names, returns the longest common&#10;sub-path." ilk="function" name="commonpath" signature="commonpath(paths)" />
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructions." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Expand shell variables of form $var and ${var}." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by&#10;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#10;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#10;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test whether a path is a symbolic link" ilk="function" name="islink" signature="islink(path)" />
      <scope doc="Test whether a path is a mount point" ilk="function" name="ismount" signature="ismount(path)" />
      <scope doc="Join two or more pathname components, inserting '/' as&#10;needed." ilk="function" name="join" signature="join(a, *p)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" name="normcase" signature="normcase(s)" />
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" name="normpath" signature="normpath(path)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Return the canonical path of the specified filename,&#10;eliminating any symbolic links encountered in the path." ilk="function" name="realpath" signature="realpath(filename)" />
      <scope doc="Return a relative version of a path" ilk="function" name="relpath" signature="relpath(path, start=None)" />
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" name="samefile" signature="samefile(f1, f2)" />
      <scope doc="Test whether two open file objects reference the same file" ilk="function" name="sameopenfile" signature="sameopenfile(fp1, fp2)" />
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" name="samestat" signature="samestat(s1, s2)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Split a pathname into drive and path." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <import module="stat" />
      <variable citdl="bool" name="supports_unicode_filenames" />
      <import module="sys" />
    </scope>
    <scope doc="Fixer for callable().&#10;This converts callable(obj) into isinstance(obj, collections.Callable), adding a collections import if needed." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_callable">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixCallable">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Base classes for server/gateway implementations&#10;" ilk="blob" lang="Python3" name="wsgiref.handlers">
      <scope classrefs="SimpleHandler" doc="CGI-like systems using input/output/error streams and environ mapping&#10;Usage::  handler = BaseCGIHandler(inp,out,err,env) handler.run(app)  This handler class is useful for gateway protocols like ReadyExec and FastCGI, that have usable input/output/error streams and an environment mapping.  It's also the base class for CGIHandler, which just uses sys.stdin, os.environ, and so on. " ilk="class" name="BaseCGIHandler" />
      <scope classrefs="object" doc="Manage the invocation of a WSGI application&#10;" ilk="class" name="BaseHandler">
        <scope doc="Log current error, and send error output to client if&#10;possible" ilk="function" name="handle_error" signature="handle_error(self)" />
        <scope doc="Send any iterable data, then close self and the iterable" ilk="function" name="finish_response" signature="finish_response(self)" />
        <scope doc="Transmit headers to the client, via self._write()" ilk="function" name="send_headers" signature="send_headers(self)" />
        <scope doc="Platform-specific file transmission" ilk="function" name="sendfile" signature="sendfile(self)" />
        <scope doc="Convert/check value type." ilk="function" name="_convert_string_type" signature="_convert_string_type(self, value, title)" />
        <scope doc="Close the iterable (if needed) and reset all instance vars" ilk="function" name="close" signature="close(self)" />
        <scope doc="Ensure headers and content have both been sent" ilk="function" name="finish_content" signature="finish_content(self)" />
        <scope doc="Transmit version/status/date/server, via self._write()" ilk="function" name="send_preamble" signature="send_preamble(self)" />
        <scope doc="True if 'self.result' is an instance of&#10;'self.wsgi_file_wrapper'" ilk="function" name="result_is_file" signature="result_is_file(self)" />
        <scope doc="Override in subclass to return suitable 'wsgi.errors'" ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope doc="Return the URL scheme being used" ilk="function" name="get_scheme" signature="get_scheme(self)" />
        <scope doc="'start_response()' callable as specified by PEP 3333" ilk="function" name="start_response" signature="start_response(self, status, headers, exc_info=None)" />
        <scope doc="Invoke the application" ilk="function" name="run" signature="run(self, application)" />
        <scope doc="Override in subclass to insert CGI variables in&#10;'self.environ'" ilk="function" name="add_cgi_vars" signature="add_cgi_vars(self)" />
        <scope doc="Set up the environment for one request" ilk="function" name="setup_environ" signature="setup_environ(self)" />
        <scope doc="True if client can accept status and headers" ilk="function" name="client_is_modern" signature="client_is_modern(self)" />
        <scope doc="Override in subclass to force sending of recent '_write()'&#10;calls" ilk="function" name="_flush" signature="_flush(self)" />
        <scope doc="Compute Content-Length or switch to chunked encoding if&#10;possible" ilk="function" name="set_content_length" signature="set_content_length(self)" />
        <scope doc="'write()' callable as specified by PEP 3333" ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Override in subclass to return suitable 'wsgi.input'" ilk="function" name="get_stdin" signature="get_stdin(self)" />
        <scope doc="WSGI mini-app to create error output" ilk="function" name="error_output" signature="error_output(self, environ, start_response)" />
        <scope doc="Log the 'exc_info' tuple in the server log" ilk="function" name="log_exception" signature="log_exception(self, exc_info)" />
        <scope doc="Override in subclass to buffer data for send to client" ilk="function" name="_write" signature="_write(self, data)" />
        <scope doc="Make any necessary header changes or defaults" ilk="function" name="cleanup_headers" signature="cleanup_headers(self)" />
      </scope>
      <scope classrefs="BaseCGIHandler" doc="CGI-based invocation via sys.stdin/stdout/stderr and os.environ&#10;Usage::  CGIHandler().run(app)  The difference between this class and BaseCGIHandler is that it always uses 'wsgi.run_once' of 'True', 'wsgi.multithread' of 'False', and 'wsgi.multiprocess' of 'True'.  It does not take any initialization parameters, but always uses 'sys.stdin', 'os.environ', and friends.  If you need to override any of these parameters, use BaseCGIHandler" ilk="class" name="CGIHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
      </scope>
      <scope classrefs="object" doc="Wrapper to convert file-like objects to iterables&#10;" ilk="class" name="FileWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filelike, blksize=8192)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <scope classrefs="object" doc="Manage a collection of HTTP response headers&#10;" ilk="class" name="Headers">
        <scope doc="Return true if the message contains the header." ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope doc="Get the first header value for 'name'" ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Return a list of all header values." ilk="function" name="values" signature="values(self)" />
        <scope doc="Delete all occurrences of a header, if present." ilk="function" name="__delitem__" signature="__delitem__(self, name)" />
        <scope doc="Extended header setting." ilk="function" name="add_header" signature="add_header(self, _name, _value, **_params)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, headers=None)" />
        <scope doc="Set the value of a header." ilk="function" name="__setitem__" signature="__setitem__(self, name, val)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__bytes__" signature="__bytes__(self)" />
        <scope doc="Get all the header fields and values." ilk="function" name="items" signature="items(self)" />
        <scope doc="Convert/check value type." ilk="function" name="_convert_string_type" signature="_convert_string_type(self, value)" />
        <scope doc="Get the first header value for 'name', or return 'default'" ilk="function" name="get" signature="get(self, name, default=None)" />
        <scope doc="Return a list of all the header field names." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Return a list of all the values for the named field." ilk="function" name="get_all" signature="get_all(self, name)" />
        <scope doc="Return first matching header value for 'name', or 'value'" ilk="function" name="setdefault" signature="setdefault(self, name, value)" />
        <scope doc="suitable for direct HTTP transmission." ilk="function" name="__str__" signature="str() returns the formatted headers, complete with end line," />
        <scope doc="Return the total number of headers, including duplicates." ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="BaseCGIHandler" doc="CGI-based invocation with workaround for IIS path bug&#10;This handler should be used in preference to CGIHandler when deploying on Microsoft IIS without having set the config allowPathInfo option (IIS&gt;=7) or metabase allowPathInfoForScriptMappings (IIS&lt;7)." ilk="class" name="IISCGIHandler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
      </scope>
      <scope classrefs="BaseHandler" doc="Handler that's just initialized with streams, environment, etc.&#10;This handler subclass is intended for synchronous HTTP/1.0 origin servers, and handles sending the entire response output, given the correct inputs.  Usage::  handler = SimpleHandler( inp,out,err,env, multithread=False, multiprocess=True ) handler.run(app)" ilk="class" name="SimpleHandler">
        <scope doc="Override in subclass to return suitable 'wsgi.errors'" ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope doc="Override in subclass to return suitable 'wsgi.input'" ilk="function" name="get_stdin" signature="get_stdin(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stdin, stdout, stderr, environ, multithread=True, multiprocess=False)" />
        <scope doc="Override in subclass to insert CGI variables in&#10;'self.environ'" ilk="function" name="add_cgi_vars" signature="add_cgi_vars(self)" />
        <scope doc="Override in subclass to buffer data for send to client" ilk="function" name="_write" signature="_write(self, data)" />
        <scope doc="Override in subclass to force sending of recent '_write()'&#10;calls" ilk="function" name="_flush" signature="_flush(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="format_date_time" signature="format_date_time(timestamp)" />
      <scope doc="Return a guess for whether 'wsgi.url_scheme' should be&#10;'http' or 'https'" ilk="function" name="guess_scheme" signature="guess_scheme(environ)" />
      <scope doc="Return true if 'header_name' is an HTTP/1.1 &quot;Hop-by-Hop&quot;&#10;header" ilk="function" name="is_hop_by_hop" signature="is_hop_by_hop(header_name)" />
      <import module="os" />
      <scope doc="Read environment, fixing HTTP variables" ilk="function" name="read_environ" signature="read_environ()" />
      <import module="sys" />
      <import module="time" />
    </scope>
    <scope doc="Python interfaces to XML parsers.&#10;This package contains one module:  expat -- Python wrapper for James Clark's Expat parser, with namespace support." ilk="blob" lang="Python3" name="xml.parsers">
      <import module="expat" />
    </scope>
    <scope doc="# Copyright 2004-2005 Elemental Security, Inc. All Rights Reserved.&#10;# Licensed to PSF under a Contributor Agreement." ilk="blob" lang="Python3" name="lib2to3.pgen2.pgen">
      <scope classrefs="object" doc="&#10;" ilk="class" name="DFAState">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, nfaset, final)" />
        <scope ilk="function" name="unifystate" signature="unifystate(self, old, new)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="addarc" signature="addarc(self, next, label)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="NFAState">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="addarc" signature="addarc(self, next, label=None)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ParserGenerator">
        <scope ilk="function" name="parse_item" signature="parse_item(self)" />
        <scope ilk="function" name="parse_rhs" signature="parse_rhs(self)" />
        <scope ilk="function" name="make_first" signature="make_first(self, c, name)" />
        <scope ilk="function" name="raise_error" signature="raise_error(self, msg, *args)" />
        <scope ilk="function" name="addfirstsets" signature="addfirstsets(self)" />
        <scope ilk="function" name="expect" signature="expect(self, type, value=None)" />
        <scope ilk="function" name="dump_nfa" signature="dump_nfa(self, name, start, finish)" />
        <scope ilk="function" name="parse_alt" signature="parse_alt(self)" />
        <scope ilk="function" name="make_grammar" signature="make_grammar(self)" />
        <scope ilk="function" name="calcfirst" signature="calcfirst(self, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filename, stream=None)" />
        <scope ilk="function" name="make_label" signature="make_label(self, c, label)" />
        <scope ilk="function" name="parse" signature="parse(self)" />
        <scope ilk="function" name="gettoken" signature="gettoken(self)" />
        <scope ilk="function" name="parse_atom" signature="parse_atom(self)" />
        <scope ilk="function" name="dump_dfa" signature="dump_dfa(self, name, dfa)" />
        <scope ilk="function" name="simplify_dfa" signature="simplify_dfa(self, dfa)" />
        <scope ilk="function" name="make_dfa" signature="make_dfa(self, start, finish)" />
      </scope>
      <scope classrefs="Grammar" doc="Pgen parsing tables conversion class.&#10;Once initialized, this class supplies the grammar tables for the parsing engine implemented by parse.py.  The parsing engine accesses the instance variables directly.  The class here does not provide initialization of the tables; several subclasses exist to do this (see the conv and pgen modules).  The load() method reads the tables from a pickle file, which is much faster than the other ways offered by subclasses.  The pickle file is written by calling dump() (after loading the grammar tables using a subclass).  The report() method prints a readable" ilk="class" name="PgenGrammar" />
      <scope ilk="function" name="generate_grammar" signature="generate_grammar(filename='Grammar.txt')" />
      <import module="grammar" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="The idlelib package implements the Idle application.&#10;Idle includes an interactive shell and editor. Use the files named idle.* to start Idle.  The other files are private implementations.  Their details are subject to change.  See PEP 434 for more.  Import them at your own risk." ilk="blob" lang="Python3" name="idlelib" />
    <scope doc="Running tests&#10;" ilk="blob" lang="Python3" name="unittest.runner">
      <scope classrefs="TestResult" doc="A test result class that can print formatted text results to a stream.&#10;Used by TextTestRunner." ilk="class" name="TextTestResult">
        <scope ilk="function" name="printErrorList" signature="printErrorList(self, flavour, errors)" />
        <scope ilk="function" name="getDescription" signature="getDescription(self, test)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream, descriptions, verbosity)" />
        <scope doc="Called when a test has completed successfully" ilk="function" name="addSuccess" signature="addSuccess(self, test)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addFailure" signature="addFailure(self, test, err)" />
        <scope doc="Called by TestRunner after test run" ilk="function" name="printErrors" signature="printErrors(self)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addError" signature="addError(self, test, err)" />
        <scope doc="Called when a test was expected to fail, but succeed." ilk="function" name="addUnexpectedSuccess" signature="addUnexpectedSuccess(self, test)" />
        <scope doc="Called when an expected failure/error occured." ilk="function" name="addExpectedFailure" signature="addExpectedFailure(self, test, err)" />
        <scope doc="Called when the given test is about to be run" ilk="function" name="startTest" signature="startTest(self, test)" />
        <scope doc="Called when a test is skipped." ilk="function" name="addSkip" signature="addSkip(self, test, reason)" />
      </scope>
      <scope classrefs="object" doc="A test runner class that displays results in textual form.&#10;It prints out the names of tests as they are run, errors as they occur, and a summary of the results at the end of the test run." ilk="class" name="TextTestRunner">
        <scope doc="Construct a TextTestRunner." ilk="function" name="__init__" signature="__init__(self, stream=None, descriptions=True, verbosity=1, failfast=False, buffer=False, resultclass=None, warnings=None, *, tb_locals=False)" />
        <scope ilk="function" name="_makeResult" signature="_makeResult(self)" />
        <scope doc="Run the given test case or test suite." ilk="function" name="run" signature="run(self, test)" />
      </scope>
      <scope ilk="function" name="registerResult" signature="registerResult(result)" />
      <import module="result" />
      <import module="sys" />
      <import module="time" />
      <import module="warnings" />
    </scope>
    <scope doc="# pysqlite2/dbapi2.py: the DB-API 2.0 interface&#10;# # Copyright (C) 2004-2005 Gerhard Häring &lt;gh@ghaering.de&gt; # # This file is part of pysqlite. # # This software is provided 'as-is', without any express or implied # warranty.  In no event will the authors be held liable for any damages # arising from the use of this software. # # Permission is granted to anyone to use this software for any purpose," ilk="blob" lang="Python3" name="sqlite3.dbapi2">
      <scope classrefs="object" doc="Create a new memoryview object which references the given object.&#10;" ilk="class" name="Binary">
        <scope ilk="function" name="__exit__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the data in the buffer as a byte string." ilk="function" name="tobytes" />
        <scope ilk="function" name="__enter__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Cast a memoryview to a new format or shape." ilk="function" name="cast" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Release the underlying buffer exposed by the memoryview&#10;object." ilk="function" name="release" />
        <scope doc="Return the data in the buffer as a list of elements." ilk="function" name="tolist" />
        <scope doc="Return the data in the buffer as a string of hexadecimal&#10;numbers." ilk="function" name="hex" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Cache">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Gets an entry from the cache or calls the factory function&#10;to produce one." ilk="function" name="get" />
        <scope doc="For debugging only." ilk="function" name="display" />
      </scope>
      <scope classrefs="object" doc="SQLite database connection object.&#10;" ilk="class" name="Connection">
        <scope doc="For context manager. Non-standard." ilk="function" name="__exit__" />
        <scope doc="Sets authorizer callback. Non-standard." ilk="function" name="set_authorizer" />
        <scope doc="Creates a new function. Non-standard." ilk="function" name="create_function" />
        <scope doc="For context manager. Non-standard." ilk="function" name="__enter__" />
        <scope doc="Return a cursor for the connection." ilk="function" name="cursor" />
        <scope doc="Commit the current transaction." ilk="function" name="commit" />
        <scope doc="Executes a multiple SQL statements at once. Non-standard." ilk="function" name="executescript" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Creates a collation function. Non-standard." ilk="function" name="create_collation" />
        <scope doc="Closes the connection." ilk="function" name="close" />
        <scope doc="Returns iterator to the dump of the database in an SQL text&#10;format." ilk="function" name="iterdump" />
        <scope doc="Repeatedly executes a SQL statement. Non-standard." ilk="function" name="executemany" />
        <scope doc="Creates a new aggregate. Non-standard." ilk="function" name="create_aggregate" />
        <scope doc="Abort any pending database operation. Non-standard." ilk="function" name="interrupt" />
        <scope doc="Sets a trace callback called for each SQL statement (passed&#10;as unicode)." ilk="function" name="set_trace_callback" />
        <scope doc="Executes a SQL statement. Non-standard." ilk="function" name="execute" />
        <scope doc="Sets progress handler callback. Non-standard." ilk="function" name="set_progress_handler" />
        <scope doc="Roll back the current transaction." ilk="function" name="rollback" />
      </scope>
      <scope classrefs="object" doc="SQLite database cursor class.&#10;" ilk="class" name="Cursor">
        <scope doc="Fetches all rows from the resultset." ilk="function" name="fetchall" />
        <scope doc="Fetches one row from the resultset." ilk="function" name="fetchone" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Closes the cursor." ilk="function" name="close" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Repeatedly executes a SQL statement." ilk="function" name="executemany" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Executes a SQL statement." ilk="function" name="execute" />
        <scope doc="Fetches several rows from the resultset." ilk="function" name="fetchmany" />
        <scope doc="Required by DB-API. Does nothing in pysqlite." ilk="function" name="setoutputsize" />
        <scope doc="Required by DB-API. Does nothing in pysqlite." ilk="function" name="setinputsizes" />
        <scope doc="Executes a multiple SQL statements at once. Non-standard." ilk="function" name="executescript" />
      </scope>
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="DataError" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="DatabaseError" />
      <scope classrefs="object" doc="date(year, month, day) --&gt; date object&#10;" ilk="class" name="Date">
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return a 3-tuple containing ISO year, week number, and&#10;weekday." ilk="function" name="isocalendar" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="weekday" />
        <scope doc="Return date with new specified fields." ilk="function" name="replace" />
        <scope doc="Return proleptic Gregorian ordinal." ilk="function" name="toordinal" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return the day of the week represented by the date." ilk="function" name="isoweekday" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, YYYY-MM-DD." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope ilk="function" name="DateFromTicks" signature="DateFromTicks(ticks)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="IntegrityError" />
      <scope classrefs="Error" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="InterfaceError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="InternalError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="NotSupportedError" />
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="OperationalError" />
      <scope classrefs="object" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="OptimizedUnicode">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if S ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;mapping." ilk="function" name="format_map" returns="str" signature="S.format_map(mapping) -&gt; str" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of the string S with trailing whitespace&#10;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; str" />
        <scope doc="Search for the separator sep in S, and return the part&#10;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; str" />
        <scope doc="Return a version of S suitable for caseless comparisons." ilk="function" name="casefold" returns="str" signature="S.casefold() -&gt; str" />
        <scope doc="Return True if there are only numeric characters in S, False&#10;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; str" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; str" />
        <scope doc="Return True if all cased characters in S are lowercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string, starting at the end of the string and working to the&#10;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading and trailing&#10;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; str" />
        <scope doc="Return a copy of S with all occurrences of substring old&#10;replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; str" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; str" />
        <scope doc="Encode S using the codec registered for encoding." ilk="function" name="encode" signature="S.encode(encoding='utf-8', errors='strict') -&gt; bytes" />
        <scope doc="Return True if all characters in S are alphabetic and there&#10;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of S where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs(tabsize=8) -&gt; str" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#10;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#10;and return the part before it, the separator itself, and the&#10;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; str" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; str" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of S with uppercase characters converted to&#10;lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; str" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; str" />
        <scope doc="Return a copy of the string S in which each character has&#10;been mapped through the given translation table." ilk="function" name="translate" returns="str" signature="S.translate(table) -&gt; str" />
        <scope doc="Return True if all characters in S are considered printable&#10;in repr() or S is empty, False otherwise." ilk="function" name="isprintable" returns="bool" signature="S.isprintable() -&gt; bool" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; str" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string." ilk="function" name="split" returns="list" signature="S.split(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading whitespace&#10;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; str" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return True if all characters in S are digits and there is&#10;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in S are uppercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="S.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if S is a titlecased string and there is at&#10;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; str" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; str" />
        <scope doc="Return True if S is a valid identifier according to the&#10;language definition." ilk="function" name="isidentifier" returns="bool" signature="S.isidentifier() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#10;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; str" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in S, breaking at line&#10;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return True if all characters in S are whitespace and there&#10;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="Return True if S starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if all characters in S are alphanumeric and&#10;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <variable citdl="int" name="PARSE_COLNAMES" />
      <variable citdl="int" name="PARSE_DECLTYPES" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="PrepareProtocol">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="DatabaseError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ProgrammingError" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Row">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Returns the keys of the row." ilk="function" name="keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <variable citdl="int" name="SQLITE_ALTER_TABLE" />
      <variable citdl="int" name="SQLITE_ANALYZE" />
      <variable citdl="int" name="SQLITE_ATTACH" />
      <variable citdl="int" name="SQLITE_CREATE_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_CREATE_TRIGGER" />
      <variable citdl="int" name="SQLITE_CREATE_VIEW" />
      <variable citdl="int" name="SQLITE_DELETE" />
      <variable citdl="int" name="SQLITE_DENY" />
      <variable citdl="int" name="SQLITE_DETACH" />
      <variable citdl="int" name="SQLITE_DROP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_INDEX" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TABLE" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_TEMP_VIEW" />
      <variable citdl="int" name="SQLITE_DROP_TRIGGER" />
      <variable citdl="int" name="SQLITE_DROP_VIEW" />
      <variable citdl="int" name="SQLITE_IGNORE" />
      <variable citdl="int" name="SQLITE_INSERT" />
      <variable citdl="int" name="SQLITE_OK" />
      <variable citdl="int" name="SQLITE_PRAGMA" />
      <variable citdl="int" name="SQLITE_READ" />
      <variable citdl="int" name="SQLITE_REINDEX" />
      <variable citdl="int" name="SQLITE_SELECT" />
      <variable citdl="int" name="SQLITE_TRANSACTION" />
      <variable citdl="int" name="SQLITE_UPDATE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Statement" />
      <scope classrefs="object" doc="time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --&gt; a time object&#10;All arguments are optional. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="Time">
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Formats self with strftime." ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="format -&gt; strftime() style string." ilk="function" name="strftime" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return time with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope ilk="function" name="TimeFromTicks" signature="TimeFromTicks(ticks)" />
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="Timestamp">
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Return time object with same time but with tzinfo=None." ilk="function" name="time" />
        <scope doc="Return UTC time tuple, compatible with time.localtime()." ilk="function" name="utctimetuple" />
        <scope doc="tz -&gt; convert to local time in new timezone tz" ilk="function" name="astimezone" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return POSIX timestamp as float." ilk="function" name="timestamp" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return date object with same year, month and day." ilk="function" name="date" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return datetime with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return time object with same time and tzinfo." ilk="function" name="timetz" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="[sep] -&gt; string in ISO 8601 format, YYYY-MM-&#10;DDTHH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <scope ilk="function" name="TimestampFromTicks" signature="TimestampFromTicks(ticks)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Warning" />
      <scope doc="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." ilk="function" name="adapt" signature="adapt(obj, protocol, alternate) -&gt; adapt obj to given protocol. Non-standard." />
      <variable citdl="dict" name="adapters" />
      <variable citdl="str" name="apilevel" />
      <import module="collections" />
      <scope doc="Checks if a string contains a complete SQL statement." ilk="function" name="complete_statement" signature="complete_statement(sql)" />
      <scope doc="connect(database[, timeout, detect_types, isolation_level,&#10;check_same_thread, factory, cached_statements, uri])" ilk="function" name="connect" />
      <variable citdl="dict" name="converters" />
      <import module="datetime" />
      <scope doc="Enable or disable callback functions throwing errors to&#10;stderr." ilk="function" name="enable_callback_tracebacks" signature="enable_callback_tracebacks(flag)" />
      <scope doc="Enable or disable shared cache mode for the calling thread." ilk="function" name="enable_shared_cache" signature="enable_shared_cache(do_enable)" />
      <variable citdl="str" name="paramstyle" />
      <scope doc="Registers an adapter with pysqlite's adapter registry." ilk="function" name="register_adapter" signature="register_adapter(type, callable)" />
      <scope doc="Registers a converter with pysqlite. Non-standard." ilk="function" name="register_converter" signature="register_converter(typename, callable)" />
      <variable citdl="str" name="sqlite_version" />
      <variable citdl="tuple" name="sqlite_version_info" />
      <variable citdl="int" name="threadsafety" />
      <import module="time" />
      <variable citdl="str" name="version" />
      <variable citdl="tuple" name="version_info" />
    </scope>
    <scope doc="distutils.command.register&#10;Implements the Distutils 'register' command (register with the repository)." ilk="blob" lang="Python3" name="distutils.command.register">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="PyPIRCCommand">
        <scope doc="Reads the .pypirc file." ilk="function" name="_read_pypirc" signature="_read_pypirc(self)" />
        <scope doc="Creates a default .pypirc file." ilk="function" name="_store_pypirc" signature="_store_pypirc(self, username, password)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Returns rc file path." ilk="function" name="_get_rc_file" signature="_get_rc_file(self)" />
        <scope doc="Read and decode a PyPI HTTP response." ilk="function" name="_read_pypi_response" signature="_read_pypi_response(self, response)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <import module="getpass" />
      <import module="io" />
      <import module="log" />
      <import module="os" />
      <scope classrefs="PyPIRCCommand" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="register">
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Deprecated API." ilk="function" name="check_metadata" signature="check_metadata(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="build_post_data" signature="build_post_data(self, action)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Send the metadata to the package index server." ilk="function" name="send_metadata" signature="send_metadata(self)" />
        <scope doc="Reads the configuration file and set attributes." ilk="function" name="_set_config" signature="_set_config(self)" />
        <scope doc="Fetch the list of classifiers from the server." ilk="function" name="classifiers" signature="classifiers(self)" />
        <scope doc="Send the metadata to the package index server to be checked." ilk="function" name="verify_metadata" signature="verify_metadata(self)" />
        <scope doc="Post a query to the server, and return a string response." ilk="function" name="post_to_server" signature="post_to_server(self, data, auth=None)" />
      </scope>
      <import module="string" />
      <import module="urllib" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="Here's a sample session to show how to use this module.&#10;At the moment, this is the only documentation.  The Basics ----------  Importing is easy...  &gt;&gt;&gt; from http import cookies  Most of the time you start by creating a cookie." ilk="blob" lang="Python3" name="http.cookies">
      <scope classrefs="dict" doc="A container class for a set of Morsels.&#10;" ilk="class" name="BaseCookie">
        <scope doc="Return a string suitable for JavaScript." ilk="function" name="js_output" signature="js_output(self, attrs=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Load cookies from a string (presumably HTTP_COOKIE) or from&#10;a dictionary." ilk="function" name="load" signature="load(self, rawdata)" />
        <scope doc="Dictionary style assignment." ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input=None)" />
        <scope doc="Return a string suitable for HTTP." ilk="function" name="__str__" signature="__str__(self, attrs=None, header='Set-Cookie:', sep='\r\n')" />
        <scope ilk="function" name="_BaseCookie__parse_string" signature="_BaseCookie__parse_string(self, str, patt=re.compile('\n    (?x)                           # This is a verbose pattern\n    \\s*                            # Optional whitespace at start of cookie\n    (?P&lt;key&gt;                       # Start of group \'k, re.VERBOSE|re.ASCII))" />
        <scope doc="Private method for setting a cookie's value" ilk="function" name="_BaseCookie__set" signature="_BaseCookie__set(self, key, real_value, coded_value)" />
        <scope doc="Return a string suitable for HTTP." ilk="function" name="output" signature="output(self, attrs=None, header='Set-Cookie:', sep='\r\n')" />
        <scope doc="Called prior to setting a cookie's value from the network&#10;representation." ilk="function" name="value_decode" signature="value_decode(STRING) -&gt; real_value, coded_value" />
        <scope doc="Called prior to setting a cookie's value from the dictionary&#10;representation." ilk="function" name="value_encode" signature="value_encode(VALUE) -&gt; real_value, coded_value" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="CookieError" />
      <scope classrefs="dict" doc="A class to hold ONE (key, value) pair.&#10;In a cookie, each such pair may have several attributes, so this class is used to keep the attributes associated with the appropriate key,value pair. This class also includes a coded_value attribute, which is used to hold the network representation of the value.  This is most useful when Python objects are pickled for network transit." ilk="class" name="Morsel">
        <scope ilk="function" name="isReservedKey" signature="isReservedKey(self, K)" />
        <scope ilk="function" name="js_output" signature="js_output(self, attrs=None)" />
        <scope ilk="function" name="set" signature="set(self, key, val, coded_val, LegalChars=&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&amp;'*+-.^_`|~:&quot;)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, morsel)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" signature="__setitem__(self, K, V)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="OutputString" signature="OutputString(self, attrs=None)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope ilk="function" name="output" signature="output(self, attrs=None, header='Set-Cookie:')" />
        <scope ilk="function" name="__str__" signature="__str__(self, attrs=None, header='Set-Cookie:')" />
      </scope>
      <scope classrefs="BaseCookie" doc="SimpleCookie supports strings as cookie values.  When setting&#10;the value using the dictionary assignment notation, SimpleCookie calls the builtin str() to convert the value to a string.  Values received from HTTP are kept as strings." ilk="class" name="SimpleCookie">
        <scope doc="Called prior to setting a cookie's value from the network&#10;representation." ilk="function" name="value_decode" signature="value_decode(STRING) -&gt; real_value, coded_value" />
        <scope doc="Called prior to setting a cookie's value from the dictionary&#10;representation." ilk="function" name="value_encode" signature="value_encode(VALUE) -&gt; real_value, coded_value" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="re" />
      <import module="string" />
    </scope>
    <scope doc="distutils.core&#10;The only module that needs to be imported to use the Distutils; provides the 'setup' function (which is to be called from the setup script).  Also indirectly provides the Distribution and Command classes, although they are really defined in distutils.dist and distutils.cmd." ilk="blob" lang="Python3" name="distutils.core">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="object" doc="The core of the Distutils.  Most of the work hiding behind 'setup'&#10;is really done within a Distribution instance, which farms the work out to the Distutils commands specified on the command line.  Setup scripts will almost never instantiate Distribution directly, unless the 'setup()' function is totally inadequate to their needs. However, it is conceivable that a setup script might wish to subclass Distribution for some specialized purpose, and then pass the subclass to 'setup()' as the 'distclass' keyword argument.  If so, it is necessary to respect the expectations that 'setup' has of Distribution. See the code for 'setup()', in core.py, for details." ilk="class" name="Distribution">
        <scope doc="If there were any non-global &quot;display-only&quot; options (--help-&#10;commands or the metadata display options) on the command&#10;line, display the requested info and return true; else&#10;return false." ilk="function" name="handle_display_options" signature="handle_display_options(self, option_order)" />
        <scope doc="Reinitializes a command to the state it was in when first&#10;returned by 'get_command_obj()': ie., initialized but not&#10;yet finalized." ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope doc="Return the command object for 'command'." ilk="function" name="get_command_obj" signature="get_command_obj(self, command, create=1)" />
        <scope ilk="function" name="has_headers" signature="has_headers(self)" />
        <scope ilk="function" name="has_c_libraries" signature="has_c_libraries(self)" />
        <scope ilk="function" name="parse_config_files" signature="parse_config_files(self, filenames=None)" />
        <scope ilk="function" name="has_pure_modules" signature="has_pure_modules(self)" />
        <scope doc="Print out a help message listing all available commands with&#10;a description of each." ilk="function" name="print_commands" signature="print_commands(self)" />
        <scope doc="Get the option dictionary for a given command." ilk="function" name="get_option_dict" signature="get_option_dict(self, command)" />
        <scope doc="Find as many configuration files as should be processed for&#10;this platform, and return a list of filenames in the order&#10;in which they should be parsed." ilk="function" name="find_config_files" signature="find_config_files(self)" />
        <scope doc="Return the class that implements the Distutils command named&#10;by 'command'." ilk="function" name="get_command_class" signature="get_command_class(self, command)" />
        <scope doc="Do whatever it takes to run a command (including nothing at&#10;all, if the command has already been run)." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope ilk="function" name="is_pure" signature="is_pure(self)" />
        <scope doc="Set the options for 'command_obj' from 'option_dict'." ilk="function" name="_set_command_options" signature="_set_command_options(self, command_obj, option_dict=None)" />
        <scope ilk="function" name="has_scripts" signature="has_scripts(self)" />
        <scope doc="Set final values for all the options on the Distribution&#10;instance, analogous to the .finalize_options() method of&#10;Command objects." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="has_data_files" signature="has_data_files(self)" />
        <scope doc="Parse the setup script's command line, taken from the&#10;'script_args' instance attribute (which defaults to&#10;'sys.argv[1:]' -- see 'setup()' in core.py)." ilk="function" name="parse_command_line" signature="parse_command_line(self)" />
        <scope doc="Construct a new Distribution instance: initialize all the&#10;attributes of a Distribution, and then use 'attrs' (a&#10;dictionary mapping attribute names to values) to assign some&#10;of those attributes their &quot;real&quot; values." ilk="function" name="__init__" signature="__init__(self, attrs=None)" />
        <scope ilk="function" name="dump_option_dicts" signature="dump_option_dicts(self, header=None, commands=None, indent='')" />
        <scope doc="Get a list of (command, description) tuples." ilk="function" name="get_command_list" signature="get_command_list(self)" />
        <scope doc="Show help for the setup script command-line in the form of&#10;several lists of command-line options." ilk="function" name="_show_help" signature="_show_help(self, parser, global_options=1, display_options=1, commands=[])" />
        <scope doc="Run each command that was seen on the setup script command&#10;line." ilk="function" name="run_commands" signature="run_commands(self)" />
        <scope ilk="function" name="has_modules" signature="has_modules(self)" />
        <scope doc="Return a list of packages from which commands are loaded." ilk="function" name="get_command_packages" signature="get_command_packages(self)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=2)" />
        <scope doc="Print a subset of the list of all commands -- used by&#10;'print_commands()'." ilk="function" name="print_command_list" signature="print_command_list(self, commands, header, max_length)" />
        <scope doc="Parse the command-line options for a single command." ilk="function" name="_parse_command_opts" signature="_parse_command_opts(self, parser, args)" />
        <scope ilk="function" name="has_ext_modules" signature="has_ext_modules(self)" />
        <scope doc="Return the non-display options recognized at the top level." ilk="function" name="_get_toplevel_options" signature="_get_toplevel_options(self)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension&#10;module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need).  Instance attributes: name : string the full name of the extension, including any packages -- ie. *not* a filename or pathname, but Python dotted name sources : [string] list of source filenames, relative to the distribution root (where the setup script lives), in Unix form (slash-separated)" ilk="class" name="Extension">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, optional=None, **kw)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="PyPIRCCommand">
        <scope doc="Reads the .pypirc file." ilk="function" name="_read_pypirc" signature="_read_pypirc(self)" />
        <scope doc="Creates a default .pypirc file." ilk="function" name="_store_pypirc" signature="_store_pypirc(self, username, password)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Returns rc file path." ilk="function" name="_get_rc_file" signature="_get_rc_file(self)" />
        <scope doc="Read and decode a PyPI HTTP response." ilk="function" name="_read_pypi_response" signature="_read_pypi_response(self, response)" />
      </scope>
      <variable citdl="str" name="USAGE" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <variable citdl="tuple" name="extension_keywords" />
      <scope ilk="function" name="gen_usage" signature="gen_usage(script_name)" />
      <import module="os" />
      <scope doc="Run a setup script in a somewhat controlled environment, and&#10;return the Distribution instance that drives things." ilk="function" name="run_setup" signature="run_setup(script_name, script_args=None, stop_after='run')" />
      <scope doc="The gateway to the Distutils: do everything your setup&#10;script needs to do, in a highly flexible and user-driven&#10;way." ilk="function" name="setup" signature="setup(**attrs)" />
      <variable citdl="tuple" name="setup_keywords" />
      <import module="sys" />
    </scope>
    <scope doc="distutils.command.install_egg_info&#10;Implements the Distutils 'install_egg_info' command, for installing a package's PKG-INFO metadata." ilk="blob" lang="Python3" name="distutils.command.install_egg_info">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <import module="dir_util" />
      <scope classrefs="Command" doc="Install an .egg-info file for the package&#10;" ilk="class" name="install_egg_info">
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
      </scope>
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Convert an arbitrary string to a standard distribution name" ilk="function" name="safe_name" signature="safe_name(name)" />
      <scope doc="Convert an arbitrary string to a standard version string" ilk="function" name="safe_version" signature="safe_version(version)" />
      <import module="sys" />
      <scope doc="Convert a project or version name to its filename-escaped&#10;form" ilk="function" name="to_filename" signature="to_filename(name)" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/sys/cdio.h&#10;" ilk="blob" lang="Python3" name="plat-sunos5.CDIO">
      <variable citdl="int" name="CDIOC" />
      <variable citdl="int" name="CDROMCDDA" />
      <variable citdl="int" name="CDROMCDXA" />
      <variable citdl="int" name="CDROMEJECT" />
      <variable citdl="int" name="CDROMGBLKMODE" />
      <variable citdl="int" name="CDROMGDRVSPEED" />
      <variable citdl="int" name="CDROMPAUSE" />
      <variable citdl="int" name="CDROMPLAYMSF" />
      <variable citdl="int" name="CDROMPLAYTRKIND" />
      <variable citdl="int" name="CDROMREADMODE1" />
      <variable citdl="int" name="CDROMREADMODE2" />
      <variable citdl="int" name="CDROMREADOFFSET" />
      <variable citdl="int" name="CDROMREADTOCENTRY" />
      <variable citdl="int" name="CDROMREADTOCHDR" />
      <variable citdl="int" name="CDROMRESUME" />
      <variable citdl="int" name="CDROMSBLKMODE" />
      <variable citdl="int" name="CDROMSDRVSPEED" />
      <variable citdl="int" name="CDROMSTART" />
      <variable citdl="int" name="CDROMSTOP" />
      <variable citdl="int" name="CDROMSUBCHNL" />
      <variable citdl="int" name="CDROMSUBCODE" />
      <variable citdl="int" name="CDROMVOLCTRL" />
      <variable citdl="int" name="CDROM_AUDIO_COMPLETED" />
      <variable citdl="int" name="CDROM_AUDIO_ERROR" />
      <variable citdl="int" name="CDROM_AUDIO_INVALID" />
      <variable citdl="int" name="CDROM_AUDIO_NO_STATUS" />
      <variable citdl="int" name="CDROM_AUDIO_PAUSED" />
      <variable citdl="int" name="CDROM_AUDIO_PLAY" />
      <variable citdl="int" name="CDROM_BLK_1024" />
      <variable citdl="int" name="CDROM_BLK_2048" />
      <variable citdl="int" name="CDROM_BLK_2056" />
      <variable citdl="int" name="CDROM_BLK_2336" />
      <variable citdl="int" name="CDROM_BLK_2340" />
      <variable citdl="int" name="CDROM_BLK_2352" />
      <variable citdl="int" name="CDROM_BLK_2368" />
      <variable citdl="int" name="CDROM_BLK_2448" />
      <variable citdl="int" name="CDROM_BLK_2646" />
      <variable citdl="int" name="CDROM_BLK_2647" />
      <variable citdl="int" name="CDROM_BLK_512" />
      <variable citdl="int" name="CDROM_BLK_SUBCODE" />
      <variable citdl="int" name="CDROM_DATA_TRACK" />
      <variable citdl="int" name="CDROM_DA_ALL_SUBCODE" />
      <variable citdl="int" name="CDROM_DA_NO_SUBCODE" />
      <variable citdl="int" name="CDROM_DA_SUBCODE_ONLY" />
      <variable citdl="int" name="CDROM_DA_SUBQ" />
      <variable citdl="int" name="CDROM_DOUBLE_SPEED" />
      <variable citdl="int" name="CDROM_LBA" />
      <variable citdl="int" name="CDROM_LEADOUT" />
      <variable citdl="int" name="CDROM_MAXIMUM_SPEED" />
      <variable citdl="int" name="CDROM_MODE2_SIZE" />
      <variable citdl="int" name="CDROM_MSF" />
      <variable citdl="int" name="CDROM_NORMAL_SPEED" />
      <variable citdl="int" name="CDROM_QUAD_SPEED" />
      <variable citdl="int" name="CDROM_TWELVE_SPEED" />
      <variable citdl="int" name="CDROM_XA_DATA" />
      <variable citdl="int" name="CDROM_XA_DATA_W_ERROR" />
      <variable citdl="int" name="CDROM_XA_SECTOR_DATA" />
      <variable citdl="int" name="SCMD_CD_PLAYBACK_CONTROL" />
      <variable citdl="int" name="SCMD_CD_PLAYBACK_STATUS" />
      <variable citdl="int" name="SCMD_PAUSE_RESUME" />
      <variable citdl="int" name="SCMD_PLAYAUDIO10" />
      <variable citdl="int" name="SCMD_PLAYAUDIO12" />
      <variable citdl="int" name="SCMD_PLAYAUDIO_MSF" />
      <variable citdl="int" name="SCMD_PLAYAUDIO_TI" />
      <variable citdl="int" name="SCMD_PLAYTRACK_REL10" />
      <variable citdl="int" name="SCMD_PLAYTRACK_REL12" />
      <variable citdl="int" name="SCMD_READ_ALL_SUBCODES" />
      <variable citdl="int" name="SCMD_READ_CDDA" />
      <variable citdl="int" name="SCMD_READ_CDXA" />
      <variable citdl="int" name="SCMD_READ_HEADER" />
      <variable citdl="int" name="SCMD_READ_SUBCHANNEL" />
      <variable citdl="int" name="SCMD_READ_TOC" />
    </scope>
    <scope doc="Standard &quot;encodings&quot; Package&#10;Standard Python encoding modules are stored in this package directory.  Codec modules must have names corresponding to normalized encoding names as defined in the normalize_encoding() function below, e.g. 'utf-8' must be implemented by the module 'utf_8.py'.  Each codec module must export the following interface:  * getregentry() -&gt; codecs.CodecInfo object" ilk="blob" lang="Python3" name="encodings">
      <scope classrefs="LookupError SystemError" doc="Base class for lookup errors.&#10;" ilk="class" name="CodecRegistryError" />
      <import module="aliases" />
      <import module="codecs" />
      <import module="latin_1" />
      <scope doc="Normalize an encoding name." ilk="function" name="normalize_encoding" signature="normalize_encoding(encoding)" />
      <scope ilk="function" name="search_function" signature="search_function(encoding)" />
      <import module="utf_8" />
    </scope>
    <scope doc="distutils.command.clean&#10;Implements the Distutils 'clean' command." ilk="blob" lang="Python3" name="distutils.command.clean">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="clean">
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <import module="log" />
      <import module="os" />
      <scope doc="Recursively remove an entire directory tree." ilk="function" name="remove_tree" signature="remove_tree(directory, verbose=1, dry_run=0)" />
    </scope>
    <scope doc="A package for parsing, handling, and generating email messages.&#10;" ilk="blob" lang="Python3" name="email">
      <variable citdl="list" name="__all__" />
      <import module="_encoded_words" />
      <import module="_parseaddr" />
      <import module="_policybase" />
      <import module="base64mime" />
      <import module="charset" />
      <import module="encoders" />
      <import module="errors" />
      <import module="feedparser" />
      <import module="header" />
      <import module="iterators" />
      <import module="message" />
      <scope doc="Read a binary file and parse its contents into a Message&#10;object model." ilk="function" name="message_from_binary_file" signature="message_from_binary_file(fp, *args, **kws)" />
      <scope doc="Parse a bytes string into a Message object model." ilk="function" name="message_from_bytes" signature="message_from_bytes(s, *args, **kws)" />
      <scope doc="Read a file and parse its contents into a Message object&#10;model." ilk="function" name="message_from_file" signature="message_from_file(fp, *args, **kws)" />
      <scope doc="Parse a string into a Message object model." ilk="function" name="message_from_string" signature="message_from_string(s, *args, **kws)" />
      <import module="parser" />
      <import module="quoprimime" />
      <import module="utils" />
    </scope>
    <scope doc="Module/script to byte-compile all .py files to .pyc files.&#10;When called as a script with arguments, this compiles the directories given as arguments recursively; the -l option prevents it from recursing into directories.  Without arguments, if compiles all modules on sys.path, without recursing into subdirectories.  (Even though it should do so for packages -- for now, you'll have to deal with packages separately.)  See module py_compile for details of the actual byte-compilation." ilk="blob" lang="Python3" name="compileall">
      <scope classrefs="Executor" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="ProcessPoolExecutor">
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="_adjust_process_count" signature="_adjust_process_count(self)" />
        <scope doc="Returns an iterator equivalent to map(fn, iter)." ilk="function" name="map" signature="map(self, fn, *iterables, timeout=None, chunksize=1)" />
        <scope doc="Initializes a new ProcessPoolExecutor instance." ilk="function" name="__init__" signature="__init__(self, max_workers=None)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
        <scope ilk="function" name="_start_queue_management_thread" signature="_start_queue_management_thread(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Byte-compile all modules in the given directory tree." ilk="function" name="compile_dir" signature="compile_dir(dir, maxlevels=10, ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=-1, workers=1)" />
      <scope doc="Byte-compile one file." ilk="function" name="compile_file" signature="compile_file(fullname, ddir=None, force=False, rx=None, quiet=0, legacy=False, optimize=-1)" />
      <scope doc="Byte-compile all module on sys.path." ilk="function" name="compile_path" signature="compile_path(skip_curdir=1, maxlevels=0, force=False, quiet=0, legacy=False, optimize=-1)" />
      <import module="importlib" />
      <scope doc="Script main program." ilk="function" name="main" signature="main()" />
      <import module="os" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <import module="py_compile" />
      <import module="struct" />
      <import module="sys" />
    </scope>
    <scope doc="Miscellaneous utilities.&#10;" ilk="blob" lang="Python3" name="email.utils">
      <variable citdl="str" name="COMMASPACE" />
      <variable citdl="str" name="CRLF" />
      <scope classrefs="object" doc="Map character sets to their email properties.&#10;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" name="Charset">
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode_lines" signature="header_encode_lines(self, string, maxlengths)" />
        <scope doc="Return the output character set." ilk="function" name="get_output_charset" signature="get_output_charset(self)" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" name="get_body_encoding" signature="get_body_encoding(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self, header_bytes)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input_charset='us-ascii')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" name="body_encode" signature="body_encode(self, string)" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode" signature="header_encode(self, string)" />
      </scope>
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="str" name="TICK" />
      <variable citdl="str" name="UEMPTYSTRING" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="collapse_rfc2231_value" signature="collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii')" />
      <import module="datetime" />
      <scope doc="Decode parameters list according to RFC 2231." ilk="function" name="decode_params" signature="decode_params(params)" />
      <scope doc="Decode string according to RFC 2231" ilk="function" name="decode_rfc2231" signature="decode_rfc2231(s)" />
      <variable citdl="SRE_Pattern" name="ecre" />
      <scope doc="Encode string according to RFC 2231." ilk="function" name="encode_rfc2231" signature="encode_rfc2231(s, charset=None, language=None)" />
      <variable citdl="SRE_Pattern" name="escapesre" />
      <scope doc="Turn a datetime into a date string as specified in RFC 2822." ilk="function" name="format_datetime" signature="format_datetime(dt, usegmt=False)" />
      <scope doc="The inverse of parseaddr(), this takes a 2-tuple of the form&#10;(realname, email_address) and returns the string value&#10;suitable for an RFC 2822 From, To or Cc header." ilk="function" name="formataddr" signature="formataddr(pair, charset='utf-8')" />
      <scope doc="Returns a date string as specified by RFC 2822, e.g.:" ilk="function" name="formatdate" signature="formatdate(timeval=None, localtime=False, usegmt=False)" />
      <scope doc="Return a list of (REALNAME, EMAIL) for each fieldvalue." ilk="function" name="getaddresses" signature="getaddresses(fieldvalues)" />
      <scope doc="Return local time as an aware datetime object." ilk="function" name="localtime" signature="localtime(dt=None, isdst=-1)" />
      <scope doc="Returns a string suitable for RFC 2822 compliant Message-ID,&#10;e.g:" ilk="function" name="make_msgid" signature="make_msgid(idstring=None, domain=None)" />
      <scope doc="Turn a 10-tuple as returned by parsedate_tz() into a POSIX&#10;timestamp." ilk="function" name="mktime_tz" signature="mktime_tz(data)" />
      <import module="os" />
      <scope ilk="function" name="parseaddr" signature="parseaddr(addr)" />
      <scope doc="Convert a time string to a time tuple." ilk="function" name="parsedate" signature="parsedate(data)" />
      <scope ilk="function" name="parsedate_to_datetime" signature="parsedate_to_datetime(data)" />
      <scope doc="Convert a date string to a time tuple." ilk="function" name="parsedate_tz" signature="parsedate_tz(data)" />
      <scope doc="Prepare string to be used in a quoted string." ilk="function" name="quote" signature="quote(str)" />
      <import module="random" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="rfc2231_continuation" />
      <import module="socket" />
      <variable citdl="SRE_Pattern" name="specialsre" />
      <import module="time" />
      <scope doc="Remove quotes from a string." ilk="function" name="unquote" signature="unquote(str)" />
      <import module="urllib" />
    </scope>
    <scope doc="Fixer for generator.throw(E, V, T).&#10;g.throw(E)       -&gt; g.throw(E) g.throw(E, V)    -&gt; g.throw(E(V)) g.throw(E, V, T) -&gt; g.throw(E(V).with_traceback(T))  g.throw(&quot;foo&quot;[, V[, T]]) will warn about string exceptions." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_throw">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, '('), rparen=Leaf(8, ')'))" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixThrow">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Conversions to/from quoted-printable transport encoding as per RFC 1521.&#10;" ilk="blob" lang="Python3" name="quopri">
      <variable citdl="bytes" name="EMPTYSTRING" />
      <variable citdl="bytes" name="ESCAPE" />
      <variable citdl="bytes" name="HEX" />
      <variable citdl="int" name="MAXLINESIZE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Decode a string of qp-encoded data." ilk="function" name="a2b_qp" />
      <scope doc="Encode a string using quoted-printable encoding." ilk="function" name="b2a_qp" />
      <scope doc="Read 'input', apply quoted-printable decoding, and write to&#10;'output'." ilk="function" name="decode" signature="decode(input, output, header=False)" />
      <scope ilk="function" name="decodestring" signature="decodestring(s, header=False)" />
      <scope doc="Read 'input', apply quoted-printable encoding, and write to&#10;'output'." ilk="function" name="encode" signature="encode(input, output, quotetabs, header=False)" />
      <scope ilk="function" name="encodestring" signature="encodestring(s, quotetabs=False, header=False)" />
      <scope doc="Return true if the byte ordinal 'c' is a hexadecimal digit&#10;in ASCII." ilk="function" name="ishex" signature="ishex(c)" />
      <scope ilk="function" name="main" signature="main()" />
      <scope doc="Decide whether a particular byte ordinal needs to be quoted." ilk="function" name="needsquoting" signature="needsquoting(c, quotetabs, header)" />
      <scope doc="Quote a single character." ilk="function" name="quote" signature="quote(c)" />
      <scope doc="Get the integer value of a hexadecimal number." ilk="function" name="unhex" signature="unhex(s)" />
    </scope>
    <scope doc="Stuff to parse AIFF-C and AIFF files.&#10;Unless explicitly stated otherwise, the description below is true both for AIFF-C files and AIFF files.  An AIFF-C file has the following structure.  +-----------------+ | FORM            | +-----------------+ | &lt;size&gt;          | +----+------------+" ilk="blob" lang="Python3" name="aifc">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Aifc_read">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="setpos" signature="setpos(self, pos)" />
        <scope ilk="function" name="getmark" signature="getmark(self, id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="_read_comm_chunk" signature="_read_comm_chunk(self, chunk)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope doc="# User visible methods." ilk="function" name="getfp" signature="getfp(self)" />
        <scope ilk="function" name="getmarkers" signature="getmarkers(self)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="_readmark" signature="_readmark(self, chunk)" />
        <scope ilk="function" name="_alaw2lin" signature="_alaw2lin(self, data)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="rewind" signature="rewind(self)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="_ulaw2lin" signature="_ulaw2lin(self, data)" />
        <scope ilk="function" name="readframes" signature="readframes(self, nframes)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="_adpcm2lin" signature="_adpcm2lin(self, data)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Aifc_write">
        <scope doc="# User visible methods." ilk="function" name="aiff" signature="aiff(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="_ensure_header_written" signature="_ensure_header_written(self, datasize)" />
        <scope ilk="function" name="getmark" signature="getmark(self, id)" />
        <scope ilk="function" name="_write_header" signature="_write_header(self, initlength)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="setparams" signature="setparams(self, params)" />
        <scope ilk="function" name="_write_form_length" signature="_write_form_length(self, datalength)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="setmark" signature="setmark(self, id, pos, name)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_lin2ulaw" signature="_lin2ulaw(self, data)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="setframerate" signature="setframerate(self, framerate)" />
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="writeframesraw" signature="writeframesraw(self, data)" />
        <scope ilk="function" name="writeframes" signature="writeframes(self, data)" />
        <scope ilk="function" name="setcomptype" signature="setcomptype(self, comptype, compname)" />
        <scope ilk="function" name="setnchannels" signature="setnchannels(self, nchannels)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
        <scope ilk="function" name="_writemarkers" signature="_writemarkers(self)" />
        <scope ilk="function" name="aifc" signature="aifc(self)" />
        <scope ilk="function" name="getmarkers" signature="getmarkers(self)" />
        <scope ilk="function" name="setsampwidth" signature="setsampwidth(self, sampwidth)" />
        <scope ilk="function" name="setnframes" signature="setnframes(self, nframes)" />
        <scope ilk="function" name="_init_compression" signature="_init_compression(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope ilk="function" name="_patchheader" signature="_patchheader(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="_lin2alaw" signature="_lin2alaw(self, data)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
        <scope ilk="function" name="_lin2adpcm" signature="_lin2adpcm(self, data)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Chunk">
        <scope doc="Read at most size bytes from the chunk." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Skip the rest of the chunk." ilk="function" name="skip" signature="skip(self)" />
        <scope ilk="function" name="isatty" signature="isatty(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the name (ID) of the current chunk." ilk="function" name="getname" signature="getname(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Return the size of the current chunk." ilk="function" name="getsize" signature="getsize(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file, align=True, bigendian=True, inclheader=False)" />
        <scope doc="Seek to specified position into the chunk." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="list" name="__all__" />
      <import module="builtins" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope ilk="function" name="open" signature="open(f, mode=None)" />
      <scope ilk="function" name="openfp" signature="openfp(f, mode=None)" />
      <import module="struct" />
      <import module="warnings" />
    </scope>
    <scope doc="Read from and write to tar format archives.&#10;" ilk="blob" lang="Python3" name="tarfile">
      <variable citdl="bytes" name="AREGTYPE" />
      <variable citdl="bytes" name="BLKTYPE" />
      <variable citdl="int" name="BLOCKSIZE" />
      <variable citdl="bytes" name="CHRTYPE" />
      <variable citdl="bytes" name="CONTTYPE" />
      <scope classrefs="TarError" doc="Exception for unavailable compression methods.&#10;" ilk="class" name="CompressionError" />
      <variable citdl="int" name="DEFAULT_FORMAT" />
      <variable citdl="bytes" name="DIRTYPE" />
      <variable citdl="str" name="ENCODING" />
      <scope classrefs="HeaderError" doc="Exception for end of file headers.&#10;" ilk="class" name="EOFHeaderError" />
      <scope classrefs="HeaderError" doc="Exception for empty headers.&#10;" ilk="class" name="EmptyHeaderError" />
      <scope classrefs="BufferedReader" doc="Create a new buffered reader using the given readable raw IO object.&#10;" ilk="class" name="ExFileObject">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, tarfile, tarinfo)" />
      </scope>
      <scope classrefs="TarError" doc="General exception for extract errors.&#10;" ilk="class" name="ExtractError" />
      <variable citdl="bytes" name="FIFOTYPE" />
      <variable citdl="bytes" name="GNUTYPE_LONGLINK" />
      <variable citdl="bytes" name="GNUTYPE_LONGNAME" />
      <variable citdl="bytes" name="GNUTYPE_SPARSE" />
      <variable citdl="int" name="GNU_FORMAT" />
      <variable citdl="bytes" name="GNU_MAGIC" />
      <variable citdl="tuple" name="GNU_TYPES" />
      <scope classrefs="TarError" doc="Base exception for header errors.&#10;" ilk="class" name="HeaderError" />
      <scope classrefs="HeaderError" doc="Exception for invalid headers.&#10;" ilk="class" name="InvalidHeaderError" />
      <variable citdl="int" name="LENGTH_LINK" />
      <variable citdl="int" name="LENGTH_NAME" />
      <variable citdl="int" name="LENGTH_PREFIX" />
      <variable citdl="bytes" name="LNKTYPE" />
      <variable citdl="bytes" name="NUL" />
      <variable citdl="tuple" name="PAX_FIELDS" />
      <variable citdl="int" name="PAX_FORMAT" />
      <variable citdl="set" name="PAX_NAME_FIELDS" />
      <variable citdl="dict" name="PAX_NUMBER_FIELDS" />
      <variable citdl="bytes" name="POSIX_MAGIC" />
      <variable citdl="int" name="RECORDSIZE" />
      <variable citdl="bytes" name="REGTYPE" />
      <variable citdl="tuple" name="REGULAR_TYPES" />
      <scope classrefs="TarError" doc="Exception for unreadable tar archives.&#10;" ilk="class" name="ReadError" />
      <variable citdl="bytes" name="SOLARIS_XHDTYPE" />
      <variable citdl="tuple" name="SUPPORTED_TYPES" />
      <variable citdl="bytes" name="SYMTYPE" />
      <scope classrefs="TarError" doc="Exception for unsupported operations on stream-like TarFiles.&#10;" ilk="class" name="StreamError" />
      <scope classrefs="HeaderError" doc="Exception for missing and invalid extended headers.&#10;" ilk="class" name="SubsequentHeaderError" />
      <scope classrefs="Exception" doc="Base exception.&#10;" ilk="class" name="TarError" />
      <scope classrefs="object" doc="The TarFile Class provides an interface to tar archives.&#10;" ilk="class" name="TarFile">
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope doc="Make a (symbolic) link called targetpath." ilk="function" name="makelink" signature="makelink(self, tarinfo, targetpath)" />
        <scope doc="Return a TarInfo object for member `name'." ilk="function" name="getmember" signature="getmember(self, name)" />
        <scope doc="Provide an iterator object." ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Add the TarInfo object `tarinfo' to the archive." ilk="function" name="addfile" signature="addfile(self, tarinfo, fileobj=None)" />
        <scope doc="Print a table of contents to sys.stdout." ilk="function" name="list" signature="list(self, verbose=True, *, members=None)" />
        <scope doc="Make a file from a TarInfo object with an unknown type at&#10;targetpath." ilk="function" name="makeunknown" signature="makeunknown(self, tarinfo, targetpath)" />
        <scope doc="Make a directory called targetpath." ilk="function" name="makedir" signature="makedir(self, tarinfo, targetpath)" />
        <scope doc="Open gzip compressed tar archive name for reading or&#10;writing." ilk="function" name="gzopen" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return the members of the archive as a list of their names." ilk="function" name="getnames" signature="getnames(self)" />
        <scope doc="Close the TarFile." ilk="function" name="close" signature="close(self)" />
        <scope doc="Write debugging output to sys.stderr." ilk="function" name="_dbg" signature="_dbg(self, level, msg)" />
        <scope doc="Check if TarFile is still open, and if the operation's mode&#10;corresponds to TarFile's mode." ilk="function" name="_check" signature="_check(self, mode=None)" />
        <scope doc="Return the members of the archive as a list of TarInfo&#10;objects." ilk="function" name="getmembers" signature="getmembers(self)" />
        <scope doc="Set file permissions of targetpath according to tarinfo." ilk="function" name="chmod" signature="chmod(self, tarinfo, targetpath)" />
        <scope doc="Open uncompressed tar archive name for reading or writing." ilk="function" name="taropen" />
        <scope doc="Set owner of targetpath according to tarinfo." ilk="function" name="chown" signature="chown(self, tarinfo, targetpath, numeric_owner)" />
        <scope doc="Extract a member from the archive as a file object." ilk="function" name="extractfile" signature="extractfile(self, member)" />
        <scope doc="Extract the TarInfo object tarinfo to a physical file called&#10;targetpath." ilk="function" name="_extract_member" signature="_extract_member(self, tarinfo, targetpath, set_attrs=True, numeric_owner=False)" />
        <scope doc="Find the target member of a symlink or hardlink member in&#10;the archive." ilk="function" name="_find_link_target" signature="_find_link_target(self, tarinfo)" />
        <scope doc="Open an (uncompressed) tar archive `name'." ilk="function" name="__init__" signature="__init__(self, name=None, mode='r', fileobj=None, format=None, tarinfo=None, dereference=None, ignore_zeros=None, encoding=None, errors='surrogateescape', pax_headers=None, debug=None, errorlevel=None)" />
        <scope doc="Open bzip2 compressed tar archive name for reading or&#10;writing." ilk="function" name="bz2open" />
        <scope doc="Add the file `name' to the archive." ilk="function" name="add" signature="add(self, name, arcname=None, recursive=True, exclude=None, *, filter=None)" />
        <scope doc="Make a character or block device called targetpath." ilk="function" name="makedev" signature="makedev(self, tarinfo, targetpath)" />
        <scope doc="Extract all members from the archive to the current working&#10;directory and set owner, modification time and permissions&#10;on directories afterwards." ilk="function" name="extractall" signature="extractall(self, path='.', members=None, *, numeric_owner=False)" />
        <scope doc="Find an archive member by name from bottom to top." ilk="function" name="_getmember" signature="_getmember(self, name, tarinfo=None, normalize=False)" />
        <scope doc="Return the next member of the archive as a TarInfo object,&#10;when TarFile is opened for reading." ilk="function" name="next" signature="next(self)" />
        <scope doc="Open a tar archive for reading, writing or appending." ilk="function" name="open" />
        <scope doc="Make a file called targetpath." ilk="function" name="makefile" signature="makefile(self, tarinfo, targetpath)" />
        <scope doc="Set modification time of targetpath according to tarinfo." ilk="function" name="utime" signature="utime(self, tarinfo, targetpath)" />
        <scope doc="Open lzma compressed tar archive name for reading or&#10;writing." ilk="function" name="xzopen" />
        <scope doc="Read through the entire archive file and look for readable&#10;members." ilk="function" name="_load" signature="_load(self)" />
        <scope doc="Create a TarInfo object for either the file `name' or the&#10;file object `fileobj' (using os.fstat on its file&#10;descriptor)." ilk="function" name="gettarinfo" signature="gettarinfo(self, name=None, arcname=None, fileobj=None)" />
        <scope doc="Make a fifo called targetpath." ilk="function" name="makefifo" signature="makefifo(self, tarinfo, targetpath)" />
        <scope doc="Extract a member from the archive to the current working&#10;directory, using its full name." ilk="function" name="extract" signature="extract(self, member, path='', set_attrs=True, *, numeric_owner=False)" />
      </scope>
      <scope classrefs="object" doc="Informational class which holds the details about an&#10;archive member given by a tar header block. TarInfo objects are returned by TarFile.getmember(), TarFile.getmembers() and TarFile.gettarinfo() and are usually created internally." ilk="class" name="TarInfo">
        <scope doc="Process a GNU sparse header plus extra headers." ilk="function" name="_proc_sparse" signature="_proc_sparse(self, tarfile)" />
        <scope ilk="function" name="_setlinkpath" signature="_setlinkpath(self, linkname)" />
        <scope doc="Split a name longer than 100 chars into a prefix and a name&#10;part." ilk="function" name="_posix_split_name" signature="_posix_split_name(self, name)" />
        <scope ilk="function" name="isreg" signature="isreg(self)" />
        <scope doc="Return the object as a ustar header block." ilk="function" name="create_ustar_header" signature="create_ustar_header(self, info, encoding, errors)" />
        <scope doc="Return a POSIX.1-2008 extended or global header sequence&#10;that contains a list of keyword, value pairs." ilk="function" name="_create_pax_generic_header" />
        <scope doc="Return the object as a pax global header block sequence." ilk="function" name="create_pax_global_header" />
        <scope doc="Decode a single field from a pax record." ilk="function" name="_decode_pax_field" signature="_decode_pax_field(self, value, encoding, fallback_encoding, fallback_errors)" />
        <scope ilk="function" name="islnk" signature="islnk(self)" />
        <scope doc="Process a builtin type or an unknown type which will be&#10;treated as a regular file." ilk="function" name="_proc_builtin" signature="_proc_builtin(self, tarfile)" />
        <scope ilk="function" name="isfifo" signature="isfifo(self)" />
        <scope doc="Return the TarInfo's attributes as a dictionary." ilk="function" name="get_info" signature="get_info(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the object as a GNU header block sequence." ilk="function" name="create_gnu_header" signature="create_gnu_header(self, info, encoding, errors)" />
        <scope ilk="function" name="isfile" signature="isfile(self)" />
        <scope doc="Process a GNU tar extended sparse header, version 0.1." ilk="function" name="_proc_gnusparse_01" signature="_proc_gnusparse_01(self, next, pax_headers)" />
        <scope ilk="function" name="isblk" signature="isblk(self)" />
        <scope ilk="function" name="isdev" signature="isdev(self)" />
        <scope doc="Round up a byte count by BLOCKSIZE and return it, e.g." ilk="function" name="_block" signature="_block(self, count)" />
        <scope doc="Return the string payload filled with zero bytes up to the&#10;next 512 byte border." ilk="function" name="_create_payload" signature="_create_payload(payload)" />
        <scope doc="Replace fields with supplemental information from a previous&#10;pax extended or global header." ilk="function" name="_apply_pax_info" signature="_apply_pax_info(self, pax_headers, encoding, errors)" />
        <scope ilk="function" name="issparse" signature="issparse(self)" />
        <scope doc="Process the blocks that hold a GNU longname or longlink&#10;member." ilk="function" name="_proc_gnulong" signature="_proc_gnulong(self, tarfile)" />
        <scope ilk="function" name="_setpath" signature="_setpath(self, name)" />
        <scope doc="Process a GNU tar extended sparse header, version 1.0." ilk="function" name="_proc_gnusparse_10" signature="_proc_gnusparse_10(self, next, pax_headers, tarfile)" />
        <scope doc="Construct a TarInfo object from a 512 byte bytes object." ilk="function" name="frombuf" />
        <scope doc="Return a header block." ilk="function" name="_create_header" signature="_create_header(info, format, encoding, errors)" />
        <scope doc="Construct a TarInfo object." ilk="function" name="__init__" signature="__init__(self, name='')" />
        <scope doc="Return the object as a ustar header block." ilk="function" name="create_pax_header" signature="create_pax_header(self, info, encoding)" />
        <scope ilk="function" name="isdir" signature="isdir(self)" />
        <scope ilk="function" name="_getlinkpath" signature="_getlinkpath(self)" />
        <scope doc="Return a tar header as a string of 512 byte blocks." ilk="function" name="tobuf" signature="tobuf(self, format=1, encoding='utf-8', errors='surrogateescape')" />
        <scope doc="Process a GNU tar extended sparse header, version 0.0." ilk="function" name="_proc_gnusparse_00" signature="_proc_gnusparse_00(self, next, pax_headers, buf)" />
        <scope ilk="function" name="ischr" signature="ischr(self)" />
        <scope doc="# In pax headers the &quot;name&quot; and &quot;linkname&quot; field are called&#10;# &quot;path&quot; and &quot;linkpath&quot;." ilk="function" name="_getpath" signature="_getpath(self)" />
        <scope doc="Process an extended or global header as described in&#10;POSIX.1-2008." ilk="function" name="_proc_pax" signature="_proc_pax(self, tarfile)" />
        <scope doc="Choose the right processing method depending on the type and&#10;call it." ilk="function" name="_proc_member" signature="_proc_member(self, tarfile)" />
        <scope doc="Return the next TarInfo object from TarFile object tarfile." ilk="function" name="fromtarfile" />
        <scope doc="Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence for&#10;name." ilk="function" name="_create_gnu_long_header" />
        <scope ilk="function" name="issym" signature="issym(self)" />
      </scope>
      <scope classrefs="object" doc="Iterator Class.&#10;for tarinfo in TarFile(...): suite..." ilk="class" name="TarIter">
        <scope doc="Construct a TarIter object." ilk="function" name="__init__" signature="__init__(self, tarfile)" />
        <scope doc="Return iterator object." ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Return the next item using TarFile's next() method." ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <scope classrefs="HeaderError" doc="Exception for truncated headers.&#10;" ilk="class" name="TruncatedHeaderError" />
      <variable citdl="int" name="USTAR_FORMAT" />
      <variable citdl="bytes" name="XGLTYPE" />
      <variable citdl="bytes" name="XHDTYPE" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__cvsid__" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="bltn_open" />
      <scope doc="Calculate the checksum for a member's header by summing up&#10;all characters except for the chksum field which is treated&#10;as if it was filled with spaces." ilk="function" name="calc_chksums" signature="calc_chksums(buf)" />
      <import module="copy" />
      <scope doc="Copy length bytes from fileobj src to fileobj dst." ilk="function" name="copyfileobj" signature="copyfileobj(src, dst, length=None, exception=&lt;class 'OSError'&gt;)" />
      <scope doc="Deprecated in this location; use stat.filemode." ilk="function" name="filemode" signature="filemode(mode)" />
      <import module="grp" />
      <import module="io" />
      <scope doc="Return True if name points to a tar archive that we are able&#10;to handle, else return False." ilk="function" name="is_tarfile" signature="is_tarfile(name)" />
      <scope doc="Convert a python number to a number field." ilk="function" name="itn" signature="itn(n, digits=8, format=1)" />
      <scope ilk="function" name="main" signature="main()" />
      <scope doc="Convert a number field to a python number." ilk="function" name="nti" signature="nti(s)" />
      <scope doc="Convert a null-terminated bytes object to a string." ilk="function" name="nts" signature="nts(s, encoding, errors)" />
      <scope doc="Open a tar archive for reading, writing or appending." ilk="function" name="open" />
      <import module="os" />
      <import module="pwd" />
      <import module="re" />
      <import module="shutil" />
      <import module="stat" />
      <scope doc="Convert a string to a null-terminated bytes object." ilk="function" name="stn" signature="stn(s, length, encoding, errors)" />
      <import module="struct" />
      <variable citdl="tuple" name="symlink_exception" />
      <import module="sys" />
      <import module="time" />
      <variable citdl="str" name="version" />
    </scope>
    <scope doc="This module provides access to operating system functionality that is&#10;standardized by the C Standard and the POSIX standard (a thinly disguised Unix interface).  Refer to the library manual and corresponding Unix manual entries for more information on calls." ilk="blob" lang="Python3" name="posix">
      <variable citdl="int" name="CLD_CONTINUED" />
      <variable citdl="int" name="CLD_DUMPED" />
      <variable citdl="int" name="CLD_EXITED" />
      <variable citdl="int" name="CLD_TRAPPED" />
      <variable citdl="int" name="EX_CANTCREAT" />
      <variable citdl="int" name="EX_CONFIG" />
      <variable citdl="int" name="EX_DATAERR" />
      <variable citdl="int" name="EX_IOERR" />
      <variable citdl="int" name="EX_NOHOST" />
      <variable citdl="int" name="EX_NOINPUT" />
      <variable citdl="int" name="EX_NOPERM" />
      <variable citdl="int" name="EX_NOUSER" />
      <variable citdl="int" name="EX_OK" />
      <variable citdl="int" name="EX_OSERR" />
      <variable citdl="int" name="EX_OSFILE" />
      <variable citdl="int" name="EX_PROTOCOL" />
      <variable citdl="int" name="EX_SOFTWARE" />
      <variable citdl="int" name="EX_TEMPFAIL" />
      <variable citdl="int" name="EX_UNAVAILABLE" />
      <variable citdl="int" name="EX_USAGE" />
      <variable citdl="int" name="F_LOCK" />
      <variable citdl="int" name="F_OK" />
      <variable citdl="int" name="F_TEST" />
      <variable citdl="int" name="F_TLOCK" />
      <variable citdl="int" name="F_ULOCK" />
      <variable citdl="int" name="NGROUPS_MAX" />
      <variable citdl="int" name="O_ACCMODE" />
      <variable citdl="int" name="O_APPEND" />
      <variable citdl="int" name="O_ASYNC" />
      <variable citdl="int" name="O_CLOEXEC" />
      <variable citdl="int" name="O_CREAT" />
      <variable citdl="int" name="O_DIRECT" />
      <variable citdl="int" name="O_DIRECTORY" />
      <variable citdl="int" name="O_DSYNC" />
      <variable citdl="int" name="O_EXCL" />
      <variable citdl="int" name="O_LARGEFILE" />
      <variable citdl="int" name="O_NDELAY" />
      <variable citdl="int" name="O_NOATIME" />
      <variable citdl="int" name="O_NOCTTY" />
      <variable citdl="int" name="O_NOFOLLOW" />
      <variable citdl="int" name="O_NONBLOCK" />
      <variable citdl="int" name="O_PATH" />
      <variable citdl="int" name="O_RDONLY" />
      <variable citdl="int" name="O_RDWR" />
      <variable citdl="int" name="O_RSYNC" />
      <variable citdl="int" name="O_SYNC" />
      <variable citdl="int" name="O_TMPFILE" />
      <variable citdl="int" name="O_TRUNC" />
      <variable citdl="int" name="O_WRONLY" />
      <variable citdl="int" name="POSIX_FADV_DONTNEED" />
      <variable citdl="int" name="POSIX_FADV_NOREUSE" />
      <variable citdl="int" name="POSIX_FADV_NORMAL" />
      <variable citdl="int" name="POSIX_FADV_RANDOM" />
      <variable citdl="int" name="POSIX_FADV_SEQUENTIAL" />
      <variable citdl="int" name="POSIX_FADV_WILLNEED" />
      <variable citdl="int" name="PRIO_PGRP" />
      <variable citdl="int" name="PRIO_PROCESS" />
      <variable citdl="int" name="PRIO_USER" />
      <variable citdl="int" name="P_ALL" />
      <variable citdl="int" name="P_PGID" />
      <variable citdl="int" name="P_PID" />
      <variable citdl="int" name="RTLD_DEEPBIND" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LAZY" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <variable citdl="int" name="RTLD_NODELETE" />
      <variable citdl="int" name="RTLD_NOLOAD" />
      <variable citdl="int" name="RTLD_NOW" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" name="SCHED_BATCH" />
      <variable citdl="int" name="SCHED_FIFO" />
      <variable citdl="int" name="SCHED_IDLE" />
      <variable citdl="int" name="SCHED_OTHER" />
      <variable citdl="int" name="SCHED_RESET_ON_FORK" />
      <variable citdl="int" name="SCHED_RR" />
      <variable citdl="int" name="SEEK_DATA" />
      <variable citdl="int" name="SEEK_HOLE" />
      <variable citdl="int" name="ST_APPEND" />
      <variable citdl="int" name="ST_MANDLOCK" />
      <variable citdl="int" name="ST_NOATIME" />
      <variable citdl="int" name="ST_NODEV" />
      <variable citdl="int" name="ST_NODIRATIME" />
      <variable citdl="int" name="ST_NOEXEC" />
      <variable citdl="int" name="ST_NOSUID" />
      <variable citdl="int" name="ST_RDONLY" />
      <variable citdl="int" name="ST_RELATIME" />
      <variable citdl="int" name="ST_SYNCHRONOUS" />
      <variable citdl="int" name="ST_WRITE" />
      <variable citdl="int" name="TMP_MAX" />
      <variable citdl="int" name="WCONTINUED" />
      <scope doc="Return True if the process returning status was dumped to a&#10;core file." ilk="function" name="WCOREDUMP" />
      <variable citdl="int" name="WEXITED" />
      <scope doc="Return the process return code from status." ilk="function" name="WEXITSTATUS" />
      <scope doc="Return True if a particular process was continued from a job&#10;control stop." ilk="function" name="WIFCONTINUED" />
      <scope doc="Return True if the process returning status exited via the&#10;exit() system call." ilk="function" name="WIFEXITED" />
      <scope doc="Return True if the process returning status was terminated&#10;by a signal." ilk="function" name="WIFSIGNALED" />
      <scope doc="Return True if the process returning status was stopped." ilk="function" name="WIFSTOPPED" />
      <variable citdl="int" name="WNOHANG" />
      <variable citdl="int" name="WNOWAIT" />
      <variable citdl="int" name="WSTOPPED" />
      <scope doc="Return the signal that stopped the process that provided the&#10;status value." ilk="function" name="WSTOPSIG" />
      <scope doc="Return the signal that terminated the process that provided&#10;the status value." ilk="function" name="WTERMSIG" />
      <variable citdl="int" name="WUNTRACED" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="XATTR_CREATE" />
      <variable citdl="int" name="XATTR_REPLACE" />
      <variable citdl="int" name="XATTR_SIZE_MAX" />
      <variable citdl="int" name="X_OK" />
      <scope doc="Abort the interpreter immediately." ilk="function" name="abort" />
      <scope doc="Use the real uid/gid to test for access to a path." ilk="function" name="access" />
      <scope doc="Change the current working directory to the specified path." ilk="function" name="chdir" />
      <scope doc="Change the access permissions of a file." ilk="function" name="chmod" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#10;gid.\" ilk="function" name="chown" />
      <scope doc="Change root directory to path." ilk="function" name="chroot" />
      <scope doc="Close a file descriptor." ilk="function" name="close" />
      <scope doc="Closes all file descriptors in [fd_low, fd_high), ignoring&#10;errors." ilk="function" name="closerange" />
      <scope doc="Return a string-valued system configuration variable." ilk="function" name="confstr" />
      <variable citdl="dict" name="confstr_names" />
      <scope doc="Return the number of CPUs in the system; return None if&#10;indeterminable." ilk="function" name="cpu_count" />
      <scope doc="Return the name of the controlling terminal for this&#10;process." ilk="function" name="ctermid" />
      <scope doc="Return a string describing the encoding of a terminal's file&#10;descriptor." ilk="function" name="device_encoding" />
      <scope doc="Return a duplicate of a file descriptor." ilk="function" name="dup" />
      <scope doc="Duplicate file descriptor." ilk="function" name="dup2" />
      <variable citdl="dict" name="environ" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Execute an executable path with arguments, replacing current&#10;process." ilk="function" name="execv" />
      <scope doc="Execute an executable path with arguments, replacing current&#10;process." ilk="function" name="execve" />
      <scope doc="Change to the directory of the given file descriptor." ilk="function" name="fchdir" />
      <scope doc="Change the access permissions of the file given by file&#10;descriptor fd." ilk="function" name="fchmod" />
      <scope doc="Change the owner and group id of the file specified by file&#10;descriptor." ilk="function" name="fchown" />
      <scope doc="Force write of fd to disk without forcing update of&#10;metadata." ilk="function" name="fdatasync" />
      <scope doc="Fork a child process." ilk="function" name="fork" />
      <scope doc="Fork a new process with a new pseudo-terminal as controlling&#10;tty." ilk="function" name="forkpty" />
      <scope doc="Return the configuration limit name for the file descriptor&#10;fd." ilk="function" name="fpathconf" />
      <scope doc="Perform a stat system call on the given file descriptor." ilk="function" name="fstat" />
      <scope doc="Perform an fstatvfs system call on the given fd." ilk="function" name="fstatvfs" />
      <scope doc="Force write of fd to disk." ilk="function" name="fsync" />
      <scope doc="Truncate a file, specified by file descriptor, to a specific&#10;length." ilk="function" name="ftruncate" />
      <scope doc="Get the blocking mode of the file descriptor: False if the&#10;O_NONBLOCK flag is set, True if the flag is cleared." ilk="function" name="get_blocking" returns="bool" signature="get_blocking(fd) -&gt; bool" />
      <scope doc="Get the close-on-exe flag of the specified file descriptor." ilk="function" name="get_inheritable" />
      <scope doc="Return the size of the terminal window as (columns, lines)." ilk="function" name="get_terminal_size" />
      <scope doc="Return a unicode string representing the current working&#10;directory." ilk="function" name="getcwd" />
      <scope doc="Return a bytes string representing the current working&#10;directory." ilk="function" name="getcwdb" />
      <scope doc="Return the current process's effective group id." ilk="function" name="getegid" />
      <scope doc="Return the current process's effective user id." ilk="function" name="geteuid" />
      <scope doc="Return the current process's group id." ilk="function" name="getgid" />
      <scope doc="Returns a list of groups to which a user belongs." ilk="function" name="getgrouplist" returns="list" signature="getgrouplist(user, group) -&gt; list of groups to which a user belongs" />
      <scope doc="Return list of supplemental group IDs for the process." ilk="function" name="getgroups" />
      <scope doc="Return average recent system load information." ilk="function" name="getloadavg" />
      <scope doc="Return the actual login name." ilk="function" name="getlogin" />
      <scope doc="Call the system call getpgid(), and return the result." ilk="function" name="getpgid" />
      <scope doc="Return the current process group id." ilk="function" name="getpgrp" />
      <scope doc="Return the current process id." ilk="function" name="getpid" />
      <scope doc="Return the parent's process id." ilk="function" name="getppid" />
      <scope doc="Return program scheduling priority." ilk="function" name="getpriority" />
      <scope doc="Return a tuple of the current process's real, effective, and&#10;saved group ids." ilk="function" name="getresgid" />
      <scope doc="Return a tuple of the current process's real, effective, and&#10;saved user ids." ilk="function" name="getresuid" />
      <scope doc="Call the system call getsid(pid) and return the result." ilk="function" name="getsid" />
      <scope doc="Return the current process's user id." ilk="function" name="getuid" />
      <scope doc="Return the value of extended attribute attribute on path." ilk="function" name="getxattr" />
      <scope doc="Call the system initgroups() to initialize the group access&#10;list with all of the groups of which the specified username&#10;is a member, plus the specified group id." ilk="function" name="initgroups" signature="initgroups(username, gid) -&gt; None" />
      <scope doc="Return True if the fd is connected to a terminal." ilk="function" name="isatty" />
      <scope doc="Kill a process with a signal." ilk="function" name="kill" />
      <scope doc="Kill a process group with a signal." ilk="function" name="killpg" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#10;gid." ilk="function" name="lchown" />
      <scope doc="Create a hard link to a file." ilk="function" name="link" />
      <scope doc="Return a list containing the names of the files in the&#10;directory." ilk="function" name="listdir" />
      <scope doc="Return a list of extended attributes on path." ilk="function" name="listxattr" />
      <scope doc="Apply, test or remove a POSIX lock on an open file&#10;descriptor." ilk="function" name="lockf" />
      <scope doc="Set the position of a file descriptor." ilk="function" name="lseek" />
      <scope doc="Perform a stat system call on the given path, without&#10;following symbolic links." ilk="function" name="lstat" />
      <scope doc="Extracts a device major number from a raw device number." ilk="function" name="major" />
      <scope doc="Composes a raw device number from the major and minor device&#10;numbers." ilk="function" name="makedev" />
      <scope doc="Extracts a device minor number from a raw device number." ilk="function" name="minor" />
      <scope doc="Create a directory." ilk="function" name="mkdir" />
      <scope doc="Create a &quot;fifo&quot; (a POSIX named pipe)." ilk="function" name="mkfifo" />
      <scope doc="Create a node in the file system." ilk="function" name="mknod" />
      <scope doc="Add increment to the priority of process and return the new&#10;priority." ilk="function" name="nice" />
      <scope doc="Open a file for low level IO." ilk="function" name="open" />
      <scope doc="Open a pseudo-terminal." ilk="function" name="openpty" />
      <scope doc="Return the configuration limit name for the file or&#10;directory path." ilk="function" name="pathconf" />
      <variable citdl="dict" name="pathconf_names" />
      <scope doc="Create a pipe." ilk="function" name="pipe" />
      <scope doc="Create a pipe with flags set atomically." ilk="function" name="pipe2" />
      <scope doc="Announce an intention to access data in a specific pattern." ilk="function" name="posix_fadvise" />
      <scope doc="Ensure a file has allocated at least a particular number of&#10;bytes on disk." ilk="function" name="posix_fallocate" />
      <scope doc="Read a number of bytes from a file descriptor starting at a&#10;particular offset." ilk="function" name="pread" />
      <scope doc="Change or add an environment variable." ilk="function" name="putenv" />
      <scope doc="Write bytes to a file descriptor starting at a particular&#10;offset." ilk="function" name="pwrite" />
      <scope doc="Read from a file descriptor. Returns a bytes object." ilk="function" name="read" />
      <scope doc="Return a string representing the path to which the symbolic&#10;link points." ilk="function" name="readlink" signature="readlink(path, *, dir_fd=None) -&gt; path" />
      <scope doc="Read from a file descriptor fd into an iterable of buffers." ilk="function" name="readv" />
      <scope doc="Remove a file (same as unlink())." ilk="function" name="remove" />
      <scope doc="Remove extended attribute attribute on path." ilk="function" name="removexattr" />
      <scope doc="Rename a file or directory." ilk="function" name="rename" />
      <scope doc="Rename a file or directory, overwriting the destination." ilk="function" name="replace" />
      <scope doc="Remove a directory." ilk="function" name="rmdir" />
      <scope doc="scandir(path='.') -&gt; iterator of DirEntry objects for given path" ilk="function" name="scandir" signature="scandir(path='.') -&gt; iterator of DirEntry objects for given path" />
      <scope doc="Get the maximum scheduling priority for policy." ilk="function" name="sched_get_priority_max" />
      <scope doc="Get the minimum scheduling priority for policy." ilk="function" name="sched_get_priority_min" />
      <scope doc="Return the affinity of the process identified by pid." ilk="function" name="sched_getaffinity" />
      <scope doc="Returns scheduling parameters for the process identified by&#10;pid." ilk="function" name="sched_getparam" />
      <scope doc="Get the scheduling policy for the process identifiedy by&#10;pid." ilk="function" name="sched_getscheduler" />
      <scope classrefs="tuple" doc="Current has only one field: sched_priority&quot;);&#10;sched_priority A scheduling parameter." ilk="class" name="sched_param">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Return the round-robin quantum for the process identified by&#10;pid, in seconds." ilk="function" name="sched_rr_get_interval" />
      <scope doc="Set the CPU affinity of the process identified by pid to&#10;mask." ilk="function" name="sched_setaffinity" />
      <scope doc="Set scheduling parameters for the process identified by pid." ilk="function" name="sched_setparam" />
      <scope doc="Set the scheduling policy for the process identified by pid." ilk="function" name="sched_setscheduler" />
      <scope doc="Voluntarily relinquish the CPU." ilk="function" name="sched_yield" />
      <scope doc="-&gt; byteswritten Copy count bytes from file descriptor in to&#10;file descriptor out." ilk="function" name="sendfile" signature="sendfile(out, in, offset, count) -&gt; byteswritten&#10;sendfile(out, in, offset, count[, headers][, trailers], flags=0)" />
      <scope doc="Set the blocking mode of the specified file descriptor." ilk="function" name="set_blocking" signature="set_blocking(fd, blocking)" />
      <scope doc="Set the inheritable flag of the specified file descriptor." ilk="function" name="set_inheritable" />
      <scope doc="Set the current process's effective group id." ilk="function" name="setegid" />
      <scope doc="Set the current process's effective user id." ilk="function" name="seteuid" />
      <scope doc="Set the current process's group id." ilk="function" name="setgid" />
      <scope doc="Set the groups of the current process to list." ilk="function" name="setgroups" />
      <scope doc="Call the system call setpgid(pid, pgrp)." ilk="function" name="setpgid" />
      <scope doc="Make the current process the leader of its process group." ilk="function" name="setpgrp" />
      <scope doc="Set program scheduling priority." ilk="function" name="setpriority" />
      <scope doc="Set the current process's real and effective group ids." ilk="function" name="setregid" />
      <scope doc="Set the current process's real, effective, and saved group&#10;ids." ilk="function" name="setresgid" />
      <scope doc="Set the current process's real, effective, and saved user&#10;ids." ilk="function" name="setresuid" />
      <scope doc="Set the current process's real and effective user ids." ilk="function" name="setreuid" />
      <scope doc="Call the system call setsid()." ilk="function" name="setsid" />
      <scope doc="Set the current process's user id." ilk="function" name="setuid" />
      <scope doc="Set extended attribute attribute on path to value." ilk="function" name="setxattr" />
      <scope doc="Perform a stat system call on the given path." ilk="function" name="stat" />
      <scope doc="Determine whether os.[lf]stat represents time stamps as&#10;float objects." ilk="function" name="stat_float_times" signature="stat_float_times([newval]) -&gt; oldval" />
      <scope classrefs="tuple" doc="stat_result: Result from stat, fstat, or lstat.&#10;This object may be accessed either as a tuple of (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.  Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev, or st_flags, they are available as attributes only.  See os.stat for more information." ilk="class" name="stat_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Perform a statvfs system call on the given path." ilk="function" name="statvfs" />
      <scope classrefs="tuple" doc="statvfs_result: Result from statvfs or fstatvfs.&#10;This object may be accessed either as a tuple of (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax), or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.  See os.statvfs for more information." ilk="class" name="statvfs_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Translate an error code to a message string." ilk="function" name="strerror" />
      <scope doc="Create a symbolic link pointing to src named dst." ilk="function" name="symlink" />
      <scope doc="Force write of everything to disk." ilk="function" name="sync" />
      <scope doc="Return an integer-valued system configuration variable." ilk="function" name="sysconf" />
      <variable citdl="dict" name="sysconf_names" />
      <scope doc="Execute the command in a subshell." ilk="function" name="system" />
      <scope doc="Return the process group associated with the terminal&#10;specified by fd." ilk="function" name="tcgetpgrp" />
      <scope doc="Set the process group associated with the terminal specified&#10;by fd." ilk="function" name="tcsetpgrp" />
      <scope classrefs="tuple" doc="A tuple of (columns, lines) for holding terminal window size&#10;" ilk="class" name="terminal_size">
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope doc="Return a collection containing process timing information." ilk="function" name="times" />
      <scope classrefs="tuple" doc="times_result: Result from os.times().&#10;This object may be accessed either as a tuple of (user, system, children_user, children_system, elapsed), or via the attributes user, system, children_user, children_system, and elapsed.  See os.times for more information." ilk="class" name="times_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Truncate a file, specified by path, to a specific length." ilk="function" name="truncate" />
      <scope doc="Return the name of the terminal device connected to 'fd'." ilk="function" name="ttyname" />
      <scope doc="Set the current numeric umask and return the previous umask." ilk="function" name="umask" />
      <scope doc="Return an object identifying the current operating system." ilk="function" name="uname" />
      <scope classrefs="tuple" doc="uname_result: Result from os.uname().&#10;This object may be accessed either as a tuple of (sysname, nodename, release, version, machine), or via the attributes sysname, nodename, release, version, and machine.  See os.uname for more information." ilk="class" name="uname_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Remove a file (same as remove())." ilk="function" name="unlink" />
      <scope doc="Delete an environment variable." ilk="function" name="unsetenv" />
      <scope doc="Return a bytes object containing random bytes suitable for&#10;cryptographic use." ilk="function" name="urandom" />
      <scope doc="Set the access and modified time of path." ilk="function" name="utime" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait3" />
      <scope doc="Wait for completion of a specific child process." ilk="function" name="wait4" />
      <scope doc="Returns the result of waiting for a process or processes." ilk="function" name="waitid" />
      <scope classrefs="tuple" doc="waitid_result: Result from waitid.&#10;This object may be accessed either as a tuple of (si_pid, si_uid, si_signo, si_status, si_code), or via the attributes si_pid, si_uid, and so on.  See os.waitid for more information." ilk="class" name="waitid_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Wait for completion of a given child process." ilk="function" name="waitpid" />
      <scope doc="Write a bytes object to a file descriptor." ilk="function" name="write" />
      <scope doc="Iterate over buffers, and write the contents of each to a&#10;file descriptor." ilk="function" name="writev" />
    </scope>
    <scope doc="Create portable serialized representations of Python objects.&#10;See module copyreg for a mechanism for registering custom picklers. See module pickletools source for extensive comments.  Classes:  Pickler Unpickler  Functions: " ilk="blob" lang="Python3" name="pickle">
      <variable citdl="bytes" name="ADDITEMS" />
      <variable citdl="bytes" name="APPEND" />
      <variable citdl="bytes" name="APPENDS" />
      <variable citdl="bytes" name="BINBYTES" />
      <variable citdl="bytes" name="BINBYTES8" />
      <variable citdl="bytes" name="BINFLOAT" />
      <variable citdl="bytes" name="BINGET" />
      <variable citdl="bytes" name="BININT" />
      <variable citdl="bytes" name="BININT1" />
      <variable citdl="bytes" name="BININT2" />
      <variable citdl="bytes" name="BINPERSID" />
      <variable citdl="bytes" name="BINPUT" />
      <variable citdl="bytes" name="BINSTRING" />
      <variable citdl="bytes" name="BINUNICODE" />
      <variable citdl="bytes" name="BINUNICODE8" />
      <variable citdl="bytes" name="BUILD" />
      <variable citdl="int" name="DEFAULT_PROTOCOL" />
      <variable citdl="bytes" name="DICT" />
      <variable citdl="bytes" name="DUP" />
      <variable citdl="bytes" name="EMPTY_DICT" />
      <variable citdl="bytes" name="EMPTY_LIST" />
      <variable citdl="bytes" name="EMPTY_SET" />
      <variable citdl="bytes" name="EMPTY_TUPLE" />
      <variable citdl="bytes" name="EXT1" />
      <variable citdl="bytes" name="EXT2" />
      <variable citdl="bytes" name="EXT4" />
      <variable citdl="bytes" name="FALSE" />
      <variable citdl="bytes" name="FLOAT" />
      <variable citdl="bytes" name="FRAME" />
      <variable citdl="bytes" name="FROZENSET" />
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#10;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="FunctionType">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <variable citdl="bytes" name="GET" />
      <variable citdl="bytes" name="GLOBAL" />
      <variable citdl="int" name="HIGHEST_PROTOCOL" />
      <variable citdl="bytes" name="INST" />
      <variable citdl="bytes" name="INT" />
      <variable citdl="bytes" name="LIST" />
      <variable citdl="bytes" name="LONG" />
      <variable citdl="bytes" name="LONG1" />
      <variable citdl="bytes" name="LONG4" />
      <variable citdl="bytes" name="LONG_BINGET" />
      <variable citdl="bytes" name="LONG_BINPUT" />
      <variable citdl="bytes" name="MARK" />
      <variable citdl="bytes" name="MEMOIZE" />
      <variable citdl="bytes" name="NEWFALSE" />
      <variable citdl="bytes" name="NEWOBJ" />
      <variable citdl="bytes" name="NEWOBJ_EX" />
      <variable citdl="bytes" name="NEWTRUE" />
      <variable citdl="bytes" name="NONE" />
      <variable citdl="bytes" name="OBJ" />
      <variable citdl="bytes" name="PERSID" />
      <variable citdl="bytes" name="POP" />
      <variable citdl="bytes" name="POP_MARK" />
      <variable citdl="bytes" name="PROTO" />
      <variable citdl="bytes" name="PUT" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="PickleError" />
      <scope classrefs="object" doc="This takes a binary file for writing a pickle data stream.&#10;The optional *protocol* argument tells the pickler to use the given protocol; supported protocols are 0, 1, 2, 3 and 4.  The default protocol is 3; a backward-incompatible protocol designed for Python 3.  Specifying a negative protocol version selects the highest protocol version supported.  The higher the protocol used, the more recent the version of Python needed to read the pickle produced.  The *file* argument must have a write() method that accepts a single bytes argument. It can thus be a file object opened for binary" ilk="class" name="Pickler">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Clears the pickler's &quot;memo&quot;." ilk="function" name="clear_memo" />
        <scope doc="Write a pickled representation of the given object to the&#10;open file." ilk="function" name="dump" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
      </scope>
      <scope classrefs="PickleError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="PicklingError" />
      <variable citdl="NoneType" name="PyStringMap" />
      <variable citdl="bytes" name="REDUCE" />
      <variable citdl="bytes" name="SETITEM" />
      <variable citdl="bytes" name="SETITEMS" />
      <variable citdl="bytes" name="SHORT_BINBYTES" />
      <variable citdl="bytes" name="SHORT_BINSTRING" />
      <variable citdl="bytes" name="SHORT_BINUNICODE" />
      <variable citdl="bytes" name="STACK_GLOBAL" />
      <variable citdl="bytes" name="STOP" />
      <variable citdl="bytes" name="STRING" />
      <variable citdl="bytes" name="TRUE" />
      <variable citdl="bytes" name="TUPLE" />
      <variable citdl="bytes" name="TUPLE1" />
      <variable citdl="bytes" name="TUPLE2" />
      <variable citdl="bytes" name="TUPLE3" />
      <variable citdl="bytes" name="UNICODE" />
      <scope classrefs="object" doc="This takes a binary file for reading a pickle data stream.&#10;The protocol version of the pickle is detected automatically, so no protocol argument is needed.  Bytes past the pickled object's representation are ignored.  The argument *file* must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.  Both methods should return bytes.  Thus *file* can be a binary file object opened for reading, an io.BytesIO object, or any other custom object that meets this interface. " ilk="class" name="Unpickler">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an object from a specified module." ilk="function" name="find_class" />
        <scope doc="Load a pickle." ilk="function" name="load" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
      </scope>
      <scope classrefs="PickleError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="UnpicklingError" />
      <variable citdl="list" name="__all__" />
      <import module="_compat_pickle" />
      <variable citdl="tuple" name="bytes_types" />
      <import module="codecs" />
      <variable citdl="list" name="compatible_formats" />
      <scope doc="Decode a long from a two's complement little-endian binary&#10;string." ilk="function" name="decode_long" signature="decode_long(data)" />
      <variable citdl="dict" name="dispatch_table" />
      <scope doc="Write a pickled representation of obj to the open file&#10;object file." ilk="function" name="dump" />
      <scope doc="Return the pickled representation of the object as a bytes&#10;object." ilk="function" name="dumps" />
      <scope doc="Encode a long to a two's complement little-endian binary&#10;string." ilk="function" name="encode_long" signature="encode_long(x)" />
      <variable citdl="str" name="format_version" />
      <import module="io" />
      <scope classrefs="object" doc="islice(iterable, stop) --&gt; islice object&#10;islice(iterable, start, stop[, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Read and return an object from the pickle data stored in a&#10;file." ilk="function" name="load" />
      <scope doc="Read and return an object from the given pickle data." ilk="function" name="loads" />
      <variable citdl="int" name="maxsize" />
      <scope doc="Return a bytes object containing the values v1, v2, ..." ilk="function" name="pack" signature="pack(fmt, v1, v2, ...) -&gt; bytes" />
      <import module="re" />
      <import module="sys" />
      <scope doc="Return a tuple containing values unpacked according to the&#10;format string fmt." ilk="function" name="unpack" signature="unpack(fmt, buffer) -&gt; (v1, v2, ...)" />
      <scope doc="Find the module an object belong to." ilk="function" name="whichmodule" signature="whichmodule(obj, name)" />
    </scope>
    <scope doc="Fixer for reduce().&#10;Makes sure reduce() is imported from the functools module if reduce is used in that module." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_reduce">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixReduce">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="S_IFMT_: file type bits&#10;S_IFDIR: directory S_IFCHR: character device S_IFBLK: block device S_IFREG: regular file S_IFIFO: fifo (named pipe) S_IFLNK: symbolic link S_IFSOCK: socket file S_IFDOOR: door S_IFPORT: event port S_IFWHT: whiteout" ilk="blob" lang="Python3" name="_stat">
      <variable citdl="int" name="SF_APPEND" />
      <variable citdl="int" name="SF_ARCHIVED" />
      <variable citdl="int" name="SF_IMMUTABLE" />
      <variable citdl="int" name="SF_NOUNLINK" />
      <variable citdl="int" name="SF_SNAPSHOT" />
      <variable citdl="int" name="ST_ATIME" />
      <variable citdl="int" name="ST_CTIME" />
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_GID" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MODE" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" name="ST_NLINK" />
      <variable citdl="int" name="ST_SIZE" />
      <variable citdl="int" name="ST_UID" />
      <variable citdl="int" name="S_ENFMT" />
      <variable citdl="int" name="S_IEXEC" />
      <variable citdl="int" name="S_IFBLK" />
      <variable citdl="int" name="S_IFCHR" />
      <variable citdl="int" name="S_IFDIR" />
      <variable citdl="int" name="S_IFDOOR" />
      <variable citdl="int" name="S_IFIFO" />
      <variable citdl="int" name="S_IFLNK" />
      <scope doc="Return the portion of the file's mode that describes the&#10;file type." ilk="function" name="S_IFMT" />
      <variable citdl="int" name="S_IFPORT" />
      <variable citdl="int" name="S_IFREG" />
      <variable citdl="int" name="S_IFSOCK" />
      <variable citdl="int" name="S_IFWHT" />
      <scope doc="Return the portion of the file's mode that can be set by&#10;os.chmod()." ilk="function" name="S_IMODE" />
      <variable citdl="int" name="S_IREAD" />
      <variable citdl="int" name="S_IRGRP" />
      <variable citdl="int" name="S_IROTH" />
      <variable citdl="int" name="S_IRUSR" />
      <variable citdl="int" name="S_IRWXG" />
      <variable citdl="int" name="S_IRWXO" />
      <variable citdl="int" name="S_IRWXU" />
      <scope doc="Return True if mode is from a block special device file." ilk="function" name="S_ISBLK" returns="bool" signature="S_ISBLK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a character special device file." ilk="function" name="S_ISCHR" returns="bool" signature="S_ISCHR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a directory." ilk="function" name="S_ISDIR" returns="bool" signature="S_ISDIR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a door." ilk="function" name="S_ISDOOR" returns="bool" signature="S_ISDOOR(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a FIFO (named pipe)." ilk="function" name="S_ISFIFO" returns="bool" signature="S_ISFIFO(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISGID" />
      <scope doc="Return True if mode is from a symbolic link." ilk="function" name="S_ISLNK" returns="bool" signature="S_ISLNK(mode) -&gt; bool" />
      <scope doc="Return True if mode is from an event port." ilk="function" name="S_ISPORT" returns="bool" signature="S_ISPORT(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a regular file." ilk="function" name="S_ISREG" returns="bool" signature="S_ISREG(mode) -&gt; bool" />
      <scope doc="Return True if mode is from a socket." ilk="function" name="S_ISSOCK" returns="bool" signature="S_ISSOCK(mode) -&gt; bool" />
      <variable citdl="int" name="S_ISUID" />
      <variable citdl="int" name="S_ISVTX" />
      <scope doc="Return True if mode is from a whiteout." ilk="function" name="S_ISWHT" returns="bool" signature="S_ISWHT(mode) -&gt; bool" />
      <variable citdl="int" name="S_IWGRP" />
      <variable citdl="int" name="S_IWOTH" />
      <variable citdl="int" name="S_IWRITE" />
      <variable citdl="int" name="S_IWUSR" />
      <variable citdl="int" name="S_IXGRP" />
      <variable citdl="int" name="S_IXOTH" />
      <variable citdl="int" name="S_IXUSR" />
      <variable citdl="int" name="UF_APPEND" />
      <variable citdl="int" name="UF_COMPRESSED" />
      <variable citdl="int" name="UF_HIDDEN" />
      <variable citdl="int" name="UF_IMMUTABLE" />
      <variable citdl="int" name="UF_NODUMP" />
      <variable citdl="int" name="UF_NOUNLINK" />
      <variable citdl="int" name="UF_OPAQUE" />
      <scope doc="Convert a file's mode to a string of the form '-rwxrwxrwx'" ilk="function" name="filemode" />
    </scope>
    <scope doc="Wrapper to the POSIX crypt library call and associated functionality.&#10;" ilk="blob" lang="Python3" name="crypt">
      <variable citdl="_Method" name="METHOD_CRYPT" />
      <variable citdl="_Method" name="METHOD_MD5" />
      <variable citdl="_Method" name="METHOD_SHA256" />
      <variable citdl="_Method" name="METHOD_SHA512" />
      <import module="_crypt" />
      <import module="_string" />
      <scope doc="Return a string representing the one-way hash of a password,&#10;with a salt prepended." ilk="function" name="crypt" signature="crypt(word, salt=None)" />
      <variable citdl="list" name="methods" />
      <scope doc="Generate a salt for the specified method." ilk="function" name="mksalt" signature="mksalt(method=None)" />
    </scope>
    <scope doc="Read/write support for Maildir, mbox, MH, Babyl, and MMDF mailboxes.&#10;" ilk="blob" lang="Python3" name="mailbox">
      <scope classrefs="_singlefileMailbox" doc="An Rmail-style Babyl mailbox.&#10;" ilk="class" name="Babyl">
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" name="get_file" signature="get_file(self, key)" />
        <scope doc="Called before writing each message to file f." ilk="function" name="_pre_message_hook" signature="_pre_message_hook(self, f)" />
        <scope doc="Return a list of user-defined labels in the mailbox." ilk="function" name="get_labels" signature="get_labels(self)" />
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" name="get_message" signature="get_message(self, key)" />
        <scope doc="Initialize a Babyl mailbox." ilk="function" name="__init__" signature="__init__(self, path, factory=None, create=True)" />
        <scope doc="Generate key-to-(start, stop) table of contents." ilk="function" name="_generate_toc" signature="_generate_toc(self)" />
        <scope doc="Replace the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="__setitem__" signature="__setitem__(self, key, message)" />
        <scope doc="Return a string representation or raise a KeyError." ilk="function" name="get_bytes" signature="get_bytes(self, key)" />
        <scope doc="Add message and return assigned key." ilk="function" name="add" signature="add(self, message)" />
        <scope doc="Called before writing the mailbox to file f." ilk="function" name="_pre_mailbox_hook" signature="_pre_mailbox_hook(self, f)" />
        <scope doc="Called after writing each message to file f." ilk="function" name="_post_message_hook" signature="_post_message_hook(self, f)" />
        <scope doc="Write message contents and return (start, stop)." ilk="function" name="_install_message" signature="_install_message(self, message)" />
        <scope doc="Remove the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="remove" signature="remove(self, key)" />
      </scope>
      <scope classrefs="Message" doc="Message with Babyl-specific properties.&#10;" ilk="class" name="BabylMessage">
        <scope doc="Return a list of labels on the message." ilk="function" name="get_labels" signature="get_labels(self)" />
        <scope doc="Set the list of labels on the message." ilk="function" name="set_labels" signature="set_labels(self, labels)" />
        <scope doc="Return a Message representation of visible headers." ilk="function" name="get_visible" signature="get_visible(self)" />
        <scope doc="Add label to list of labels on the message." ilk="function" name="add_label" signature="add_label(self, label)" />
        <scope doc="Initialize an BabylMessage instance." ilk="function" name="__init__" signature="__init__(self, message=None)" />
        <scope doc="Remove label from the list of labels on the message." ilk="function" name="remove_label" signature="remove_label(self, label)" />
        <scope doc="Update and/or sensibly generate a set of visible headers." ilk="function" name="update_visible" signature="update_visible(self)" />
        <scope doc="Copy Babyl-specific state to message insofar as possible." ilk="function" name="_explain_to" signature="_explain_to(self, message)" />
        <scope doc="Set the Message representation of visible headers." ilk="function" name="set_visible" signature="set_visible(self, visible)" />
      </scope>
      <scope classrefs="Exception" doc="Raised for module-specific errors.&#10;" ilk="class" name="Error" />
      <scope classrefs="Error" doc="Another process caused an action to fail.&#10;" ilk="class" name="ExternalClashError" />
      <scope classrefs="Error" doc="A file appears to have an invalid format.&#10;" ilk="class" name="FormatError" />
      <scope classrefs="Mailbox" doc="An MH mailbox.&#10;" ilk="class" name="MH">
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" name="get_file" signature="get_file(self, key)" />
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="Delete the named folder, which must be empty." ilk="function" name="remove_folder" signature="remove_folder(self, folder)" />
        <scope doc="Lock the mailbox." ilk="function" name="lock" signature="lock(self)" />
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" name="get_message" signature="get_message(self, key)" />
        <scope doc="Set sequences using the given name-to-key-list dictionary." ilk="function" name="set_sequences" signature="set_sequences(self, sequences)" />
        <scope doc="Create a folder and return an MH instance representing it." ilk="function" name="add_folder" signature="add_folder(self, folder)" />
        <scope doc="Initialize an MH instance." ilk="function" name="__init__" signature="__init__(self, path, factory=None, create=True)" />
        <scope doc="Replace the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="__setitem__" signature="__setitem__(self, key, message)" />
        <scope doc="Unlock the mailbox if it is locked." ilk="function" name="unlock" signature="unlock(self)" />
        <scope doc="Return a bytes representation or raise a KeyError." ilk="function" name="get_bytes" signature="get_bytes(self, key)" />
        <scope doc="Add message and return assigned key." ilk="function" name="add" signature="add(self, message)" />
        <scope doc="Return a list of folder names." ilk="function" name="list_folders" signature="list_folders(self)" />
        <scope doc="Return an MH instance for the named folder." ilk="function" name="get_folder" signature="get_folder(self, folder)" />
        <scope doc="Re-name messages to eliminate numbering gaps." ilk="function" name="pack" signature="pack(self)" />
        <scope doc="Flush and close the mailbox." ilk="function" name="close" signature="close(self)" />
        <scope doc="Write any pending changes to the disk." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Return a count of messages in the mailbox." ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Return an iterator over keys." ilk="function" name="iterkeys" signature="iterkeys(self)" />
        <scope doc="Inspect a new MHMessage and update sequences appropriately." ilk="function" name="_dump_sequences" signature="_dump_sequences(self, message, key)" />
        <scope doc="Return a name-to-key-list dictionary to define each&#10;sequence." ilk="function" name="get_sequences" signature="get_sequences(self)" />
        <scope doc="Remove the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="remove" signature="remove(self, key)" />
      </scope>
      <scope classrefs="Message" doc="Message with MH-specific properties.&#10;" ilk="class" name="MHMessage">
        <scope doc="Set the list of sequences that include the message." ilk="function" name="set_sequences" signature="set_sequences(self, sequences)" />
        <scope doc="Remove sequence from the list of sequences including the&#10;message." ilk="function" name="remove_sequence" signature="remove_sequence(self, sequence)" />
        <scope doc="Add sequence to list of sequences including the message." ilk="function" name="add_sequence" signature="add_sequence(self, sequence)" />
        <scope doc="Return a list of sequences that include the message." ilk="function" name="get_sequences" signature="get_sequences(self)" />
        <scope doc="Initialize an MHMessage instance." ilk="function" name="__init__" signature="__init__(self, message=None)" />
        <scope doc="Copy MH-specific state to message insofar as possible." ilk="function" name="_explain_to" signature="_explain_to(self, message)" />
      </scope>
      <scope classrefs="_mboxMMDF" doc="An MMDF mailbox.&#10;" ilk="class" name="MMDF">
        <scope doc="Initialize an MMDF mailbox." ilk="function" name="__init__" signature="__init__(self, path, factory=None, create=True)" />
        <scope doc="Generate key-to-(start, stop) table of contents." ilk="function" name="_generate_toc" signature="_generate_toc(self)" />
        <scope doc="Called before writing each message to file f." ilk="function" name="_pre_message_hook" signature="_pre_message_hook(self, f)" />
        <scope doc="Called after writing each message to file f." ilk="function" name="_post_message_hook" signature="_post_message_hook(self, f)" />
      </scope>
      <scope classrefs="_mboxMMDFMessage" doc="Message with MMDF-specific properties.&#10;" ilk="class" name="MMDFMessage" />
      <scope classrefs="object" doc="A group of messages in a particular place.&#10;" ilk="class" name="Mailbox">
        <scope doc="Delete all messages." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="Lock the mailbox." ilk="function" name="lock" signature="lock(self)" />
        <scope doc="Return a list of messages. Memory intensive." ilk="function" name="values" signature="values(self)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Unlock the mailbox if it is locked." ilk="function" name="unlock" signature="unlock(self)" />
        <scope doc="Return a byte string representation or raise a KeyError." ilk="function" name="get_bytes" signature="get_bytes(self, key)" />
        <scope doc="Return an iterator over keys." ilk="function" name="iterkeys" signature="iterkeys(self)" />
        <scope doc="Return a string representation or raise a KeyError." ilk="function" name="get_string" signature="get_string(self, key)" />
        <scope doc="Flush and close the mailbox." ilk="function" name="close" signature="close(self)" />
        <scope doc="Write any pending changes to the disk." ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="_string_to_bytes" signature="_string_to_bytes(self, message)" />
        <scope doc="Delete an arbitrary (key, message) pair and return it." ilk="function" name="popitem" signature="popitem(self)" />
        <scope doc="Dump message contents to target file." ilk="function" name="_dump_message" signature="_dump_message(self, message, target, mangle_from_=False)" />
        <scope doc="Remove the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="remove" signature="remove(self, key)" />
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" name="get_file" signature="get_file(self, key)" />
        <scope doc="Return the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" name="get_message" signature="get_message(self, key)" />
        <scope doc="Initialize a Mailbox instance." ilk="function" name="__init__" signature="__init__(self, path, factory=None, create=True)" />
        <scope doc="Replace the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="__setitem__" signature="__setitem__(self, key, message)" />
        <scope doc="Return an iterator over (key, message) tuples." ilk="function" name="iteritems" signature="iteritems(self)" />
        <scope doc="Add message and return assigned key." ilk="function" name="add" signature="add(self, message)" />
        <scope doc="Return a list of (key, message) tuples. Memory intensive." ilk="function" name="items" signature="items(self)" />
        <scope doc="Return the keyed message, or default if it doesn't exist." ilk="function" name="get" signature="get(self, key, default=None)" />
        <scope doc="Return a list of keys." ilk="function" name="keys" signature="keys(self)" />
        <scope doc="Delete the keyed message and return it, or default." ilk="function" name="pop" signature="pop(self, key, default=None)" />
        <scope doc="Change the messages that correspond to certain keys." ilk="function" name="update" signature="update(self, arg=None)" />
        <scope doc="Return an iterator over all messages." ilk="function" name="itervalues" signature="itervalues(self)" />
        <scope doc="Return a count of messages in the mailbox." ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="If the keyed message exists, remove it." ilk="function" name="discard" signature="discard(self, key)" />
      </scope>
      <scope classrefs="Mailbox" doc="A qmail-style Maildir mailbox.&#10;" ilk="class" name="Maildir">
        <scope doc="Create a file in the tmp subdirectory and open and return&#10;it." ilk="function" name="_create_tmp" signature="_create_tmp(self)" />
        <scope doc="Return a file-like representation or raise a KeyError." ilk="function" name="get_file" signature="get_file(self, key)" />
        <scope doc="Return True if the keyed message exists, False otherwise." ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="Unlock the mailbox if it is locked." ilk="function" name="unlock" signature="unlock(self)" />
        <scope doc="Lock the mailbox." ilk="function" name="lock" signature="lock(self)" />
        <scope doc="Delete old files in &quot;tmp&quot;." ilk="function" name="clean" signature="clean(self)" />
        <scope doc="Return a Message representation or raise a KeyError." ilk="function" name="get_message" signature="get_message(self, key)" />
        <scope doc="Create a folder and return a Maildir instance representing&#10;it." ilk="function" name="add_folder" signature="add_folder(self, folder)" />
        <scope doc="Initialize a Maildir instance." ilk="function" name="__init__" signature="__init__(self, dirname, factory=None, create=True)" />
        <scope doc="Remove the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="remove" signature="remove(self, key)" />
        <scope doc="Replace the keyed message; raise KeyError if it doesn't&#10;exist." ilk="function" name="__setitem__" signature="__setitem__(self, key, message)" />
        <scope doc="Delete the named folder, which must be empty." ilk="function" name="remove_folder" signature="remove_folder(self, folder)" />
        <scope doc="Return a bytes representation or raise a KeyError." ilk="function" name="get_bytes" signature="get_bytes(self, key)" />
        <scope doc="Add message and return assigned key." ilk="function" name="add" signature="add(self, message)" />
        <scope doc="Return a list of folder names." ilk="function" name="list_folders" signature="list_folders(self)" />
        <scope doc="Return a Maildir instance for the named folder." ilk="function" name="get_folder" signature="get_folder(self, folder)" />
        <scope doc="Return the next message in a one-time iteration." ilk="function" name="next" signature="next(self)" />
        <scope doc="Use TOC to return subpath for given key, or raise a&#10;KeyError." ilk="function" name="_lookup" signature="_lookup(self, key)" />
        <scope doc="Flush and close the mailbox." ilk="function" name="close" signature="close(self)" />
        <scope doc="Write any pending changes to disk." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Return a count of messages in the mailbox." ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Return an iterator over keys." ilk="function" name="iterkeys" signature="iterkeys(self)" />
        <scope doc="Update table of contents mapping." ilk="function" name="_refresh" signature="_refresh(self)" />
        <scope doc="If the keyed message exists, remove it." ilk="function" name="discard" signature="discard(self, key)" />
      </scope>
      <scope classrefs="Message" doc="Message with Maildir-specific properties.&#10;" ilk="class" name="MaildirMessage">
        <scope doc="Return as a string the flags that are set." ilk="function" name="get_flags" signature="get_flags(self)" />
        <scope doc="Set the message's &quot;info&quot; string." ilk="function" name="set_info" signature="set_info(self, info)" />
        <scope doc="Get the message's &quot;info&quot; as a string." ilk="function" name="get_info" signature="get_info(self)" />
        <scope doc="Set the given flag(s) without changing others." ilk="function" name="add_flag" signature="add_flag(self, flag)" />
        <scope doc="Initialize a MaildirMessage instance." ilk="function" name="__init__" signature="__init__(self, message=None)" />
        <scope doc="Set the given flags and unset all others." ilk="function" name="set_flags" signature="set_flags(self, flags)" />
        <scope doc="Return delivery date of message, in seconds since the epoch." ilk="function" name="get_date" signature="get_date(self)" />
        <scope doc="Copy Maildir-specific state to message insofar as possible." ilk="function" name="_explain_to" signature="_explain_to(self, message)" />
        <scope doc="Unset the given string flag(s) without changing others." ilk="function" name="remove_flag" signature="remove_flag(self, flag)" />
        <scope doc="Return 'new' or 'cur'." ilk="function" name="get_subdir" signature="get_subdir(self)" />
        <scope doc="Set delivery date of message, in seconds since the epoch." ilk="function" name="set_date" signature="set_date(self, date)" />
        <scope doc="Set subdir to 'new' or 'cur'." ilk="function" name="set_subdir" signature="set_subdir(self, subdir)" />
      </scope>
      <scope classrefs="Message" doc="Message with mailbox-format-specific properties.&#10;" ilk="class" name="Message">
        <scope doc="Initialize a Message instance." ilk="function" name="__init__" signature="__init__(self, message=None)" />
        <scope doc="Assume the non-format-specific state of message." ilk="function" name="_become_message" signature="_become_message(self, message)" />
        <scope doc="Copy format-specific state to message insofar as possible." ilk="function" name="_explain_to" signature="_explain_to(self, message)" />
      </scope>
      <scope classrefs="Error" doc="The specified mailbox does not exist and won't be created.&#10;" ilk="class" name="NoSuchMailboxError" />
      <scope classrefs="Error" doc="The specified mailbox is not empty and deletion was requested.&#10;" ilk="class" name="NotEmptyError" />
      <variable citdl="list" name="__all__" />
      <import module="calendar" />
      <import module="contextlib" />
      <import module="copy" />
      <import module="email" />
      <import module="errno" />
      <import module="fcntl" />
      <import module="io" />
      <variable citdl="bytes" name="linesep" />
      <scope classrefs="_mboxMMDF" doc="A classic mbox mailbox.&#10;" ilk="class" name="mbox">
        <scope doc="Called after writing each message to file f." ilk="function" name="_post_message_hook" signature="_post_message_hook(self, f)" />
        <scope doc="Initialize an mbox mailbox." ilk="function" name="__init__" signature="__init__(self, path, factory=None, create=True)" />
        <scope doc="Generate key-to-(start, stop) table of contents." ilk="function" name="_generate_toc" signature="_generate_toc(self)" />
      </scope>
      <scope classrefs="_mboxMMDFMessage" doc="Message with mbox-specific properties.&#10;" ilk="class" name="mboxMessage" />
      <import module="os" />
      <import module="socket" />
      <import module="time" />
      <import module="warnings" />
    </scope>
    <scope doc="&quot;Executable documentation&quot; for the pickle module.&#10;Extensive comments about the pickle protocols and pickle-machine opcodes can be found here.  Some functions meant for external use:  genops(pickle) Generate all the opcodes in a pickle, as (opcode, arg, position) triples.  dis(pickle, out=None, memo=None, indentlevel=4) Print a symbolic disassembly of a pickle." ilk="blob" lang="Python3" name="pickletools">
      <scope classrefs="object" doc="&#10;" ilk="class" name="ArgumentDescriptor">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, n, reader, doc)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="OpcodeInfo">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, code, arg, stack_before, stack_after, proto, doc)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="StackObject">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, obtype, doc)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="TAKEN_FROM_ARGUMENT1" />
      <variable citdl="int" name="TAKEN_FROM_ARGUMENT4" />
      <variable citdl="int" name="TAKEN_FROM_ARGUMENT4U" />
      <variable citdl="int" name="TAKEN_FROM_ARGUMENT8U" />
      <variable citdl="int" name="UP_TO_NEWLINE" />
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="__test__" />
      <variable citdl="StackObject" name="anyobject" />
      <variable citdl="ArgumentDescriptor" name="bytes1" />
      <variable citdl="ArgumentDescriptor" name="bytes4" />
      <variable citdl="ArgumentDescriptor" name="bytes8" />
      <variable citdl="tuple" name="bytes_types" />
      <variable citdl="dict" name="code2op" />
      <import module="codecs" />
      <variable citdl="ArgumentDescriptor" name="decimalnl_long" />
      <variable citdl="ArgumentDescriptor" name="decimalnl_short" />
      <scope doc="Decode a long from a two's complement little-endian binary&#10;string." ilk="function" name="decode_long" signature="decode_long(data)" />
      <scope doc="Produce a symbolic disassembly of a pickle." ilk="function" name="dis" signature="dis(pickle, out=None, memo=None, indentlevel=4, annotate=0)" />
      <variable citdl="ArgumentDescriptor" name="float8" />
      <variable citdl="ArgumentDescriptor" name="floatnl" />
      <scope doc="Generate all the opcodes in a pickle." ilk="function" name="genops" signature="genops(pickle)" />
      <variable citdl="ArgumentDescriptor" name="int4" />
      <import module="io" />
      <variable citdl="ArgumentDescriptor" name="long1" />
      <variable citdl="ArgumentDescriptor" name="long4" />
      <variable citdl="StackObject" name="markobject" />
      <variable citdl="list" name="opcodes" />
      <scope doc="Optimize a pickle string by removing unused PUT opcodes" ilk="function" name="optimize" signature="optimize(p)" />
      <import module="pickle" />
      <variable citdl="StackObject" name="pybool" />
      <variable citdl="StackObject" name="pybytes" />
      <variable citdl="StackObject" name="pybytes_or_str" />
      <variable citdl="StackObject" name="pydict" />
      <variable citdl="StackObject" name="pyfloat" />
      <variable citdl="StackObject" name="pyfrozenset" />
      <variable citdl="StackObject" name="pyint" />
      <variable citdl="StackObject" name="pyinteger_or_bool" />
      <variable citdl="StackObject" name="pylist" />
      <variable citdl="StackObject" name="pylong" />
      <variable citdl="StackObject" name="pynone" />
      <variable citdl="StackObject" name="pyset" />
      <variable citdl="StackObject" name="pystring" />
      <variable citdl="StackObject" name="pytuple" />
      <variable citdl="StackObject" name="pyunicode" />
      <import module="re" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_bytes1(io.BytesIO(b&quot;\x00&quot;)) b'' &gt;&gt;&gt;&#10;read_bytes1(io.BytesIO(b&quot;\x03abcdef&quot;))" ilk="function" name="read_bytes1" signature="read_bytes1(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_bytes4(io.BytesIO(b&quot;\x00\x00\x00\x00abc&quot;)) b'' &gt;&gt;&gt;&#10;read_bytes4(io.BytesIO(b&quot;\x03\x00\x00\x00abcdef&quot;))" ilk="function" name="read_bytes4" signature="read_bytes4(f)" />
      <scope doc="&gt;&gt;&gt; import io, struct, sys &gt;&gt;&gt; read_bytes8(io.BytesIO(b&quot;\x00&#10;\x00\x00\x00\x00\x00\x00\x00abc&quot;)) b'' &gt;&gt;&gt; read_bytes8(io.By&#10;tesIO(b&quot;\x03\x00\x00\x00\x00\x00\x00\x00abcdef&quot;))" ilk="function" name="read_bytes8" signature="read_bytes8(f)" />
      <scope doc="&gt;&gt;&gt; import io" ilk="function" name="read_decimalnl_long" signature="read_decimalnl_long(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_decimalnl_short(io.BytesIO(b&quot;1234\n56&quot;)) 1234" ilk="function" name="read_decimalnl_short" signature="read_decimalnl_short(f)" />
      <scope doc="&gt;&gt;&gt; import io, struct &gt;&gt;&gt; raw = struct.pack(&quot;&gt;d&quot;, -1.25) &gt;&gt;&gt;&#10;raw b'\xbf\xf4\x00\x00\x00\x00\x00\x00'" ilk="function" name="read_float8" signature="read_float8(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_floatnl(io.BytesIO(b&quot;-1.25\n6&quot;))&#10;-1.25" ilk="function" name="read_floatnl" signature="read_floatnl(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_int4(io.BytesIO(b'\xff\x00\x00\x00'))&#10;255 &gt;&gt;&gt; read_int4(io.BytesIO(b'\x00\x00\x00\x80')) ==&#10;-(2**31)" ilk="function" name="read_int4" signature="read_int4(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_long1(io.BytesIO(b&quot;\x00&quot;)) 0 &gt;&gt;&gt;&#10;read_long1(io.BytesIO(b&quot;\x02\xff\x00&quot;))" ilk="function" name="read_long1" signature="read_long1(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_long4(io.BytesIO(b&quot;\x02\x00\x00\x00\xff\x00&quot;)) 255 &gt;&gt;&gt;&#10;read_long4(io.BytesIO(b&quot;\x02\x00\x00\x00\xff\x7f&quot;))" ilk="function" name="read_long4" signature="read_long4(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_string1(io.BytesIO(b&quot;\x00&quot;)) '' &gt;&gt;&gt;&#10;read_string1(io.BytesIO(b&quot;\x03abcdef&quot;))" ilk="function" name="read_string1" signature="read_string1(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_string4(io.BytesIO(b&quot;\x00\x00\x00\x00abc&quot;)) '' &gt;&gt;&gt;&#10;read_string4(io.BytesIO(b&quot;\x03\x00\x00\x00abcdef&quot;))" ilk="function" name="read_string4" signature="read_string4(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_stringnl(io.BytesIO(b&quot;'abcd'\nefg\n&quot;)) 'abcd'" ilk="function" name="read_stringnl" signature="read_stringnl(f, decode=True, stripquotes=True)" />
      <scope ilk="function" name="read_stringnl_noescape" signature="read_stringnl_noescape(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_stringnl_noescape_pair(io.BytesIO(b&quot;Q&#10;ueue\nEmpty\njunk&quot;)) 'Queue Empty'" ilk="function" name="read_stringnl_noescape_pair" signature="read_stringnl_noescape_pair(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_uint1(io.BytesIO(b'\xff')) 255" ilk="function" name="read_uint1" signature="read_uint1(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; read_uint2(io.BytesIO(b'\xff\x00')) 255&#10;&gt;&gt;&gt; read_uint2(io.BytesIO(b'\xff\xff'))" ilk="function" name="read_uint2" signature="read_uint2(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_uint4(io.BytesIO(b'\xff\x00\x00\x00')) 255 &gt;&gt;&gt;&#10;read_uint4(io.BytesIO(b'\x00\x00\x00\x80')) == 2**31" ilk="function" name="read_uint4" signature="read_uint4(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_uint8(io.BytesIO(b'\xff\x00\x00\x00\x00\x00\x00\x00'))&#10;255 &gt;&gt;&gt; read_uint8(io.BytesIO(b'\xff' * 8)) == 2**64-1" ilk="function" name="read_uint8" signature="read_uint8(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; s = 'abcd\uabcd' &gt;&gt;&gt; enc =&#10;s.encode('utf-8') &gt;&gt;&gt; enc" ilk="function" name="read_unicodestring1" signature="read_unicodestring1(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; s = 'abcd\uabcd' &gt;&gt;&gt; enc =&#10;s.encode('utf-8') &gt;&gt;&gt; enc" ilk="function" name="read_unicodestring4" signature="read_unicodestring4(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt; s = 'abcd\uabcd' &gt;&gt;&gt; enc =&#10;s.encode('utf-8') &gt;&gt;&gt; enc" ilk="function" name="read_unicodestring8" signature="read_unicodestring8(f)" />
      <scope doc="&gt;&gt;&gt; import io &gt;&gt;&gt;&#10;read_unicodestringnl(io.BytesIO(b&quot;abc\\uabcd\njunk&quot;)) ==&#10;'abc\uabcd' True" ilk="function" name="read_unicodestringnl" signature="read_unicodestringnl(f)" />
      <variable citdl="StackObject" name="stackslice" />
      <variable citdl="ArgumentDescriptor" name="string1" />
      <variable citdl="ArgumentDescriptor" name="string4" />
      <variable citdl="ArgumentDescriptor" name="stringnl" />
      <variable citdl="ArgumentDescriptor" name="stringnl_noescape" />
      <variable citdl="ArgumentDescriptor" name="stringnl_noescape_pair" />
      <import module="sys" />
      <variable citdl="ArgumentDescriptor" name="uint1" />
      <variable citdl="ArgumentDescriptor" name="uint2" />
      <variable citdl="ArgumentDescriptor" name="uint4" />
      <variable citdl="ArgumentDescriptor" name="uint8" />
      <variable citdl="ArgumentDescriptor" name="unicodestring1" />
      <variable citdl="ArgumentDescriptor" name="unicodestring4" />
      <variable citdl="ArgumentDescriptor" name="unicodestring8" />
      <variable citdl="ArgumentDescriptor" name="unicodestringnl" />
    </scope>
    <scope doc="An XML Reader is the SAX 2 name for an XML parser. XML Parsers&#10;should be based on this code." ilk="blob" lang="Python3" name="xml.sax.xmlreader">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AttributesImpl">
        <scope ilk="function" name="getValue" signature="getValue(self, name)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, name)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope ilk="function" name="getType" signature="getType(self, name)" />
        <scope ilk="function" name="getQNameByName" signature="getQNameByName(self, name)" />
        <scope doc="Non-NS-aware implementation." ilk="function" name="__init__" signature="__init__(self, attrs)" />
        <scope ilk="function" name="getNames" signature="getNames(self)" />
        <scope ilk="function" name="items" signature="items(self)" />
        <scope ilk="function" name="get" signature="get(self, name, alternative=None)" />
        <scope ilk="function" name="getNameByQName" signature="getNameByQName(self, name)" />
        <scope ilk="function" name="keys" signature="keys(self)" />
        <scope ilk="function" name="values" signature="values(self)" />
        <scope ilk="function" name="getLength" signature="getLength(self)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="getValueByQName" signature="getValueByQName(self, name)" />
        <scope ilk="function" name="getQNames" signature="getQNames(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="AttributesImpl" doc="&#10;" ilk="class" name="AttributesNSImpl">
        <scope ilk="function" name="getNameByQName" signature="getNameByQName(self, name)" />
        <scope ilk="function" name="getQNameByName" signature="getQNameByName(self, name)" />
        <scope ilk="function" name="getValueByQName" signature="getValueByQName(self, name)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope doc="NS-aware implementation." ilk="function" name="__init__" signature="__init__(self, attrs, qnames)" />
        <scope ilk="function" name="getQNames" signature="getQNames(self)" />
      </scope>
      <scope classrefs="XMLReader" doc="This interface adds three extra methods to the XMLReader&#10;interface that allow XML parsers to support incremental parsing. Support for this interface is optional, since not all underlying XML parsers support this functionality.  When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method. " ilk="class" name="IncrementalParser">
        <scope doc="This method gives the raw XML data in the data parameter to&#10;the parser and makes it parse the data, emitting the&#10;corresponding events." ilk="function" name="feed" signature="feed(self, data)" />
        <scope doc="This method is called after close has been called to reset&#10;the parser so that it is ready to parse new documents." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="This method is called when the entire XML document has been&#10;passed to the parser through the feed method, to notify the&#10;parser that there are no more data." ilk="function" name="close" signature="close(self)" />
        <scope doc="This method is called by the parse implementation to allow&#10;the SAX 2.0 driver to prepare itself for parsing." ilk="function" name="prepareParser" signature="prepareParser(self, source)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, bufsize=65536)" />
        <scope doc="Parse an XML document from a system identifier or an&#10;InputSource." ilk="function" name="parse" signature="parse(self, source)" />
      </scope>
      <scope classrefs="object" doc="Encapsulation of the information needed by the XMLReader to&#10;read entities.  This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/or the character stream of an entity.  Applications will create objects of this class for use in the XMLReader.parse method and for returning from EntityResolver.resolveEntity. " ilk="class" name="InputSource">
        <scope doc="Returns the system identifier of this InputSource." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Set the character stream for this input source." ilk="function" name="setCharacterStream" signature="setCharacterStream(self, charfile)" />
        <scope doc="Set the byte stream (a Python file-like object which does&#10;not perform byte-to-character conversion) for this input&#10;source." ilk="function" name="setByteStream" signature="setByteStream(self, bytefile)" />
        <scope doc="Sets the public identifier of this InputSource." ilk="function" name="setPublicId" signature="setPublicId(self, public_id)" />
        <scope doc="Sets the system identifier of this InputSource." ilk="function" name="setSystemId" signature="setSystemId(self, system_id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, system_id=None)" />
        <scope doc="Returns the public identifier of this InputSource." ilk="function" name="getPublicId" signature="getPublicId(self)" />
        <scope doc="Sets the character encoding of this InputSource." ilk="function" name="setEncoding" signature="setEncoding(self, encoding)" />
        <scope doc="Get the character encoding of this InputSource." ilk="function" name="getEncoding" signature="getEncoding(self)" />
        <scope doc="Get the byte stream for this input source." ilk="function" name="getByteStream" signature="getByteStream(self)" />
        <scope doc="Get the character stream for this input source." ilk="function" name="getCharacterStream" signature="getCharacterStream(self)" />
      </scope>
      <scope classrefs="object" doc="Interface for associating a SAX event with a document&#10;location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable." ilk="class" name="Locator">
        <scope doc="Return the system identifier for the current event." ilk="function" name="getSystemId" signature="getSystemId(self)" />
        <scope doc="Return the column number where the current event ends." ilk="function" name="getColumnNumber" signature="getColumnNumber(self)" />
        <scope doc="Return the line number where the current event ends." ilk="function" name="getLineNumber" signature="getLineNumber(self)" />
        <scope doc="Return the public identifier for the current event." ilk="function" name="getPublicId" signature="getPublicId(self)" />
      </scope>
      <scope classrefs="SAXException" doc="Exception class for an unrecognized identifier.&#10;An XMLReader will raise this exception when it is confronted with an unrecognized feature or property. SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotRecognizedException" />
      <scope classrefs="SAXException" doc="Exception class for an unsupported operation.&#10;An XMLReader will raise this exception when a service it cannot perform is requested (specifically setting a state or value). SAX applications and extensions may use this class for similar purposes." ilk="class" name="SAXNotSupportedException" />
      <scope classrefs="object" doc="Interface for reading an XML document using callbacks.&#10;XMLReader is the interface that an XML parser's SAX2 driver must implement. This interface allows an application to set and query features and properties in the parser, to register event handlers for document processing, and to initiate a document parse.  All SAX interfaces are assumed to be synchronous: the parse methods must not return until parsing is complete, and readers must wait for an event-handler callback to return before reporting the next event." ilk="class" name="XMLReader">
        <scope doc="Returns the current EntityResolver." ilk="function" name="getEntityResolver" signature="getEntityResolver(self)" />
        <scope doc="Returns the current ErrorHandler." ilk="function" name="getErrorHandler" signature="getErrorHandler(self)" />
        <scope doc="Sets the value of a SAX2 property." ilk="function" name="setProperty" signature="setProperty(self, name, value)" />
        <scope doc="Register an object to resolve external entities." ilk="function" name="setEntityResolver" signature="setEntityResolver(self, resolver)" />
        <scope doc="Allow an application to set the locale for errors and&#10;warnings." ilk="function" name="setLocale" signature="setLocale(self, locale)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Registers a new object to receive document content events." ilk="function" name="setContentHandler" signature="setContentHandler(self, handler)" />
        <scope doc="Sets the state of a SAX2 feature." ilk="function" name="setFeature" signature="setFeature(self, name, state)" />
        <scope doc="Register an object to receive error-message events." ilk="function" name="setErrorHandler" signature="setErrorHandler(self, handler)" />
        <scope doc="Returns the current DTD handler." ilk="function" name="getDTDHandler" signature="getDTDHandler(self)" />
        <scope doc="Register an object to receive basic DTD-related events." ilk="function" name="setDTDHandler" signature="setDTDHandler(self, handler)" />
        <scope doc="Looks up and returns the state of a SAX2 feature." ilk="function" name="getFeature" signature="getFeature(self, name)" />
        <scope doc="Parse an XML document from a system identifier or an&#10;InputSource." ilk="function" name="parse" signature="parse(self, source)" />
        <scope doc="Returns the current ContentHandler." ilk="function" name="getContentHandler" signature="getContentHandler(self)" />
        <scope doc="Looks up and returns the value of a SAX2 property." ilk="function" name="getProperty" signature="getProperty(self, name)" />
      </scope>
      <import module="handler" />
    </scope>
    <scope doc="Base class for MIME specializations.&#10;" ilk="blob" lang="Python3" name="email.mime.base">
      <scope classrefs="Message" doc="Base class for MIME specializations.&#10;" ilk="class" name="MIMEBase">
        <scope doc="This constructor adds a Content-Type: and a MIME-Version:&#10;header." ilk="function" name="__init__" signature="__init__(self, _maintype, _subtype, **_params)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="message" />
    </scope>
    <scope doc="Functional tools for creating and using iterators.&#10;Infinite iterators: count(start=0, step=1) --&gt; start, start+step, start+2*step, ... cycle(p) --&gt; p0, p1, ... plast, p0, p1, ... repeat(elem [,n]) --&gt; elem, elem, elem, ... endlessly or up to n times  Iterators terminating on the shortest input sequence: accumulate(p[, func]) --&gt; p0, p0+p1, p0+p1+p2 chain(p, q, ...) --&gt; p0, p1, ... plast, q0, q1, ... chain.from_iterable([p, q, ...]) --&gt; p0, p1, ... plast, q0, q1, ... compress(data, selectors) --&gt; (d[0] if s[0]), (d[1] if s[1]), ..." ilk="blob" lang="Python3" name="itertools">
      <scope classrefs="object" doc="accumulate(iterable[, func]) --&gt; accumulate object&#10;Return series of accumulated sums (or other binary function results)." ilk="class" name="accumulate">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#10;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
      </scope>
      <scope classrefs="object" doc="combinations(iterable, r) --&gt; combinations object&#10;Return successive r-length combinations of elements in the iterable.  combinations(range(4), 3) --&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)" ilk="class" name="combinations">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="combinations_with_replacement(iterable, r) --&gt; combinations_with_replacement object&#10;Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats. combinations_with_replacement('ABC', 2) --&gt; AA AB AC BB BC CC" ilk="class" name="combinations_with_replacement">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="compress(data, selectors) --&gt; iterator over selected data&#10;Return data elements corresponding to true selector elements. Forms a shorter iterator from selected data elements using the selectors to choose the data elements." ilk="class" name="compress">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="count(start=0, step=1) --&gt; count object&#10;Return a count object whose .__next__() method returns consecutive values. Equivalent to:  def count(firstval=0, step=1): x = firstval while 1: yield x x += step" ilk="class" name="count">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="cycle(iterable) --&gt; cycle object&#10;Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely." ilk="class" name="cycle">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="dropwhile(predicate, iterable) --&gt; dropwhile object&#10;Drop items from the iterable while predicate(item) is true. Afterwards, return every element until the iterable is exhausted." ilk="class" name="dropwhile">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object&#10;Return those items of sequence for which function(item) is false. If function is None, return the items that are false." ilk="class" name="filterfalse">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="groupby(iterable[, keyfunc]) -&gt; create an iterator which returns&#10;(key, sub-iterator) grouped by each value of key(value)." ilk="class" name="groupby">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="islice(iterable, stop) --&gt; islice object&#10;islice(iterable, start, stop[, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="permutations(iterable[, r]) --&gt; permutations object&#10;Return successive r-length permutations of elements in the iterable.  permutations(range(3), 2) --&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)" ilk="class" name="permutations">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="product(*iterables, repeat=1) --&gt; product object&#10;Cartesian product of input iterables.  Equivalent to nested for-loops.  For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B). The leftmost iterators are in the outermost for-loop, so the output tuples cycle in a manner similar to an odometer (with the rightmost element changing on every iteration).  To compute the product of an iterable with itself, specify the number of repetitions with the optional repeat keyword argument. For example, product(A, repeat=4) means the same as product(A, A, A, A)." ilk="class" name="product">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object&#10;for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="starmap(function, sequence) --&gt; starmap object&#10;Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence." ilk="class" name="starmap">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="takewhile(predicate, iterable) --&gt; takewhile object&#10;Return successive entries from an iterable as long as the predicate evaluates to true for each entry." ilk="class" name="takewhile">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <scope classrefs="object" doc="zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --&gt; zip_longest object&#10;Return an zip_longest object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the longest iterable in the argument sequence is exhausted and then it raises StopIteration.  When the shorter iterables are exhausted, the fillvalue is substituted in their place.  The fillvalue defaults to None or can be specified by a keyword argument." ilk="class" name="zip_longest">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Simple textbox editing widget with Emacs-like keybindings.&#10;" ilk="blob" lang="Python3" name="curses.textpad">
      <scope classrefs="object" doc="Editing widget using the interior of a window object.&#10;Supports the following Emacs-like key bindings:  Ctrl-A      Go to left edge of window. Ctrl-B      Cursor left, wrapping to previous line if appropriate. Ctrl-D      Delete character under cursor. Ctrl-E      Go to right edge (stripspaces off) or end of line (stripspaces on). Ctrl-F      Cursor right, wrapping to next line when appropriate. Ctrl-G      Terminate, returning the window contents. Ctrl-H      Delete character backward. Ctrl-J      Terminate if the window is 1 line, otherwise insert newline." ilk="class" name="Textbox">
        <scope doc="Edit in the widget window and collect the results." ilk="function" name="edit" signature="edit(self, validate=None)" />
        <scope doc="Collect and return the contents of the window." ilk="function" name="gather" signature="gather(self)" />
        <scope doc="Process a single editing command." ilk="function" name="do_command" signature="do_command(self, ch)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, win, insert_mode=False)" />
        <scope ilk="function" name="_insert_printable_char" signature="_insert_printable_char(self, ch)" />
        <scope doc="Go to the location of the first blank on the given line,&#10;returning the index of the last non-blank character." ilk="function" name="_end_of_line" signature="_end_of_line(self, y)" />
      </scope>
      <import module="curses" />
      <scope doc="Draw a rectangle with corners at the provided upper-left and&#10;lower-right coordinates." ilk="function" name="rectangle" signature="rectangle(win, uly, ulx, lry, lrx)" />
    </scope>
    <scope doc="#empty&#10;" ilk="blob" lang="Python3" name="lib2to3" />
    <scope doc="# Module providing the `SyncManager` class for dealing&#10;# with shared objects # # multiprocessing/managers.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.managers">
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="AcquirerProxy">
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="acquire" signature="acquire(self, blocking=True, timeout=None)" />
        <scope ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope ilk="function" name="Array" signature="Array(typecode, sequence, lock=True)" />
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="ArrayProxy">
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
      </scope>
      <scope doc="Return an auto-proxy for `token`" ilk="function" name="AutoProxy" signature="AutoProxy(token, serializer, manager=None, authkey=None, exposed=None, incref=True)" />
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="BarrierProxy">
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="abort" signature="abort(self)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="BaseListProxy">
        <scope ilk="function" name="reverse" signature="reverse(self, *args, **kwds)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, *args, **kwds)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__rmul__" signature="__rmul__(self, *args, **kwds)" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self, *args, **kwds)" />
        <scope ilk="function" name="__mul__" signature="__mul__(self, *args, **kwds)" />
        <scope ilk="function" name="index" signature="index(self, *args, **kwds)" />
        <scope ilk="function" name="sort" signature="sort(self, *args, **kwds)" />
        <scope ilk="function" name="append" signature="append(self, *args, **kwds)" />
        <scope ilk="function" name="__imul__" signature="__imul__(self, *args, **kwds)" />
        <scope ilk="function" name="extend" signature="extend(self, *args, **kwds)" />
        <scope ilk="function" name="pop" signature="pop(self, *args, **kwds)" />
        <scope ilk="function" name="count" signature="count(self, *args, **kwds)" />
        <scope ilk="function" name="__add__" signature="__add__(self, *args, **kwds)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
        <scope ilk="function" name="insert" signature="insert(self, *args, **kwds)" />
        <scope ilk="function" name="remove" signature="remove(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Base class for managers&#10;" ilk="class" name="BaseManager">
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope doc="Create a new shared object; return the token and exposed&#10;tuple" ilk="function" name="_create" signature="_create(self, typeid, *args, **kwds)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, address=None, authkey=None, serializer='pickle', ctx=None)" />
        <scope doc="Return server object with serve_forever() method and address&#10;attribute" ilk="function" name="get_server" signature="get_server(self)" />
        <scope doc="Register a typeid with the manager type" ilk="function" name="register" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Join the manager process (if it has been spawned)" ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope doc="Return the number of shared objects" ilk="function" name="_number_of_objects" signature="_number_of_objects(self)" />
        <scope doc="Connect manager object to the server process" ilk="function" name="connect" signature="connect(self)" />
        <scope doc="Create a server, report its address and run it" ilk="function" name="_run_server" />
        <scope doc="Return some info about the servers shared objects and&#10;connections" ilk="function" name="_debug_info" signature="_debug_info(self)" />
        <scope doc="Spawn a server process for this manager object" ilk="function" name="start" signature="start(self, initializer=None, initargs=())" />
        <scope doc="Shutdown the manager process; will be registered as a&#10;finalizer" ilk="function" name="_finalize_manager" signature="_finalize_manager(process, address, authkey, state, _Client)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="BasePoolProxy">
        <scope ilk="function" name="imap_unordered" signature="imap_unordered(self, *args, **kwds)" />
        <scope ilk="function" name="starmap_async" signature="starmap_async(self, *args, **kwds)" />
        <scope ilk="function" name="apply_async" signature="apply_async(self, *args, **kwds)" />
        <scope ilk="function" name="terminate" signature="terminate(self, *args, **kwds)" />
        <scope ilk="function" name="join" signature="join(self, *args, **kwds)" />
        <scope ilk="function" name="close" signature="close(self, *args, **kwds)" />
        <scope ilk="function" name="map" signature="map(self, *args, **kwds)" />
        <scope ilk="function" name="imap" signature="imap(self, *args, **kwds)" />
        <scope ilk="function" name="apply" signature="apply(self, *args, **kwds)" />
        <scope ilk="function" name="map_async" signature="map_async(self, *args, **kwds)" />
        <scope ilk="function" name="starmap" signature="starmap(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="A base for proxies of shared objects&#10;" ilk="class" name="BaseProxy">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope doc="Get a copy of the value of the referent" ilk="function" name="_getvalue" signature="_getvalue(self)" />
        <scope ilk="function" name="_after_fork" signature="_after_fork(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, token, serializer, manager=None, authkey=None, exposed=None, incref=True)" />
        <scope ilk="function" name="_incref" signature="_incref(self)" />
        <scope ilk="function" name="_decref" signature="_decref(token, authkey, state, tls, idset, _Client)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="_connect" signature="_connect(self)" />
        <scope doc="Try to call a method of the referrent and return a copy of&#10;the result" ilk="function" name="_callmethod" signature="_callmethod(self, methodname, args=(), kwds={})" />
        <scope doc="Return representation of the referent (or a fall-back if&#10;that fails)" ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="AcquirerProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="ConditionProxy">
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="wait_for" signature="wait_for(self, predicate, timeout=None)" />
        <scope ilk="function" name="notify" signature="notify(self)" />
        <scope ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="DictProxy">
        <scope ilk="function" name="clear" signature="clear(self, *args, **kwds)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, *args, **kwds)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, *args, **kwds)" />
        <scope ilk="function" name="values" signature="values(self, *args, **kwds)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, *args, **kwds)" />
        <scope ilk="function" name="has_key" signature="has_key(self, *args, **kwds)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, *args, **kwds)" />
        <scope ilk="function" name="popitem" signature="popitem(self, *args, **kwds)" />
        <scope ilk="function" name="items" signature="items(self, *args, **kwds)" />
        <scope ilk="function" name="get" signature="get(self, *args, **kwds)" />
        <scope ilk="function" name="keys" signature="keys(self, *args, **kwds)" />
        <scope ilk="function" name="pop" signature="pop(self, *args, **kwds)" />
        <scope ilk="function" name="update" signature="update(self, *args, **kwds)" />
        <scope ilk="function" name="copy" signature="copy(self, *args, **kwds)" />
        <scope ilk="function" name="setdefault" signature="setdefault(self, *args, **kwds)" />
        <scope ilk="function" name="__len__" signature="__len__(self, *args, **kwds)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="EventProxy">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="set" signature="set(self)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="IteratorProxy">
        <scope ilk="function" name="send" signature="send(self, *args)" />
        <scope ilk="function" name="__next__" signature="__next__(self, *args)" />
        <scope ilk="function" name="close" signature="close(self, *args)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="throw" signature="throw(self, *args)" />
      </scope>
      <scope classrefs="BaseListProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="ListProxy">
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, value)" />
        <scope ilk="function" name="__imul__" signature="__imul__(self, value)" />
      </scope>
      <scope doc="Return an proxy type whose methods are given by `exposed`" ilk="function" name="MakeProxyType" signature="MakeProxyType(name, exposed, _cache={('DictProxy', ('__contains__', '__delitem__', '__getitem__', '__len__', '__setitem__', 'clear', 'copy', 'get', 'has_key', 'items', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values')): &lt;class 'multiprocessing.managers.DictProxy'&gt;, ('BaseListProxy', ('__add__', '__contains__', '__delitem__', '__getitem__', '__len__', '__mul__', '__reversed__', '__rmul__', '__setitem__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort', '__imul__')): &lt;class 'multiprocessing.managers.BaseListProxy'&gt;, ('PoolProxy', ('apply', 'apply_async', 'close', 'imap', 'imap_unordered', 'join', 'map', 'map_async', 'starmap', 'starmap_async', 'terminate')): &lt;class 'multiprocessing.managers.PoolProxy'&gt;, ('ArrayProxy', ('__len__', '__getitem__', '__setitem__')): &lt;class 'multiprocessing.managers.ArrayProxy'&gt;})" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Namespace">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, **kwds)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="NamespaceProxy">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, key)" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" signature="__setattr__(self, key, value)" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" signature="__delattr__(self, key)" />
      </scope>
      <scope classrefs="PoolProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="PoolProxy">
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
      </scope>
      <scope classrefs="set" doc="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" name="ProcessLocalSet">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope doc="Function used for unpickling proxy objects." ilk="function" name="RebuildProxy" signature="RebuildProxy(func, token, serializer, kwds)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="RemoteError">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Server class which runs in a process controlled by a manager object&#10;" ilk="class" name="Server">
        <scope ilk="function" name="incref" signature="incref(self, c, ident)" />
        <scope ilk="function" name="dummy" signature="dummy(self, c)" />
        <scope doc="Handle requests from the proxies in a particular&#10;process/thread" ilk="function" name="serve_client" signature="serve_client(self, conn)" />
        <scope doc="Number of shared objects" ilk="function" name="number_of_objects" signature="number_of_objects(self, c)" />
        <scope doc="Create a new shared object and return its id" ilk="function" name="create" signature="create(self, c, typeid, *args, **kwds)" />
        <scope ilk="function" name="fallback_str" signature="fallback_str(self, conn, ident, obj)" />
        <scope ilk="function" name="accepter" signature="accepter(self)" />
        <scope doc="Run the server forever" ilk="function" name="serve_forever" signature="serve_forever(self)" />
        <scope doc="Return some info --- useful to spot problems with&#10;refcounting" ilk="function" name="debug_info" signature="debug_info(self, c)" />
        <scope ilk="function" name="fallback_repr" signature="fallback_repr(self, conn, ident, obj)" />
        <scope doc="Shutdown this process" ilk="function" name="shutdown" signature="shutdown(self, c)" />
        <scope doc="Return the methods of the shared object indicated by token" ilk="function" name="get_methods" signature="get_methods(self, c, token)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, registry, address, authkey, serializer)" />
        <scope doc="Spawn a new thread to serve this connection" ilk="function" name="accept_connection" signature="accept_connection(self, c, name)" />
        <scope ilk="function" name="fallback_getvalue" signature="fallback_getvalue(self, conn, ident, obj)" />
        <scope doc="Handle a new connection" ilk="function" name="handle_request" signature="handle_request(self, c)" />
        <scope ilk="function" name="decref" signature="decref(self, c, ident)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="State" />
      <scope classrefs="BaseManager" doc="Subclass of `BaseManager` which supports a number of shared object types.&#10;The types registered are those intended for the synchronization of threads, plus `dict`, `list` and `Namespace`.  The `multiprocessing.Manager()` function creates started instances of this class." ilk="class" name="SyncManager">
        <scope ilk="function" name="Lock" signature="Lock(self, *args, **kwds)" />
        <scope ilk="function" name="dict" signature="dict(self, *args, **kwds)" />
        <scope ilk="function" name="Event" signature="Event(self, *args, **kwds)" />
        <scope ilk="function" name="Semaphore" signature="Semaphore(self, *args, **kwds)" />
        <scope ilk="function" name="Barrier" signature="Barrier(self, *args, **kwds)" />
        <scope ilk="function" name="Array" signature="Array(self, *args, **kwds)" />
        <scope ilk="function" name="Queue" signature="Queue(self, *args, **kwds)" />
        <scope ilk="function" name="JoinableQueue" signature="JoinableQueue(self, *args, **kwds)" />
        <scope ilk="function" name="Value" signature="Value(self, *args, **kwds)" />
        <scope ilk="function" name="RLock" signature="RLock(self, *args, **kwds)" />
        <scope ilk="function" name="list" signature="list(self, *args, **kwds)" />
        <scope ilk="function" name="Condition" signature="Condition(self, *args, **kwds)" />
        <scope ilk="function" name="Namespace" signature="Namespace(self, *args, **kwds)" />
        <scope ilk="function" name="BoundedSemaphore" signature="BoundedSemaphore(self, *args, **kwds)" />
        <scope ilk="function" name="Pool" signature="Pool(self, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Type to uniquely indentify a shared object&#10;" ilk="class" name="Token">
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, typeid, address, id)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Value">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, typecode, value, lock=True)" />
        <scope ilk="function" name="set" signature="set(self, value)" />
        <scope ilk="function" name="get" signature="get(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="BaseProxy" doc="A base for proxies of shared objects&#10;" ilk="class" name="ValueProxy">
        <scope ilk="function" name="get" signature="get(self)" />
        <scope ilk="function" name="set" signature="set(self, value)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return a list of names of methods of `obj`" ilk="function" name="all_methods" signature="all_methods(obj)" />
      <import module="array" />
      <import module="connection" />
      <import module="context" />
      <scope ilk="function" name="convert_to_error" signature="convert_to_error(kind, result)" />
      <scope doc="Send a message to manager using connection `c` and return&#10;response" ilk="function" name="dispatch" signature="dispatch(c, id, methodname, args=(), kwds={})" />
      <scope doc="Like print_exc() but return a string." ilk="function" name="format_exc" signature="format_exc(limit=None, chain=True)" />
      <scope ilk="function" name="get_context" />
      <variable citdl="dict" name="listener_client" />
      <import module="pool" />
      <import module="process" />
      <scope doc="Return a list of names of methods of `obj` which do not&#10;start with '_'" ilk="function" name="public_methods" signature="public_methods(obj)" />
      <import module="queue" />
      <scope ilk="function" name="rebuild_as_list" signature="rebuild_as_list(obj)" />
      <scope ilk="function" name="reduce_array" signature="reduce_array(a)" />
      <import module="reduction" />
      <import module="sys" />
      <import module="threading" />
      <import module="util" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="view_type">
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <variable citdl="list" name="view_types" />
    </scope>
    <scope doc="Safely evaluate Python string literals without using eval().&#10;" ilk="blob" lang="Python3" name="lib2to3.pgen2.literals">
      <scope ilk="function" name="escape" signature="escape(m)" />
      <scope ilk="function" name="evalString" signature="evalString(s)" />
      <import module="re" />
      <variable citdl="dict" name="simple_escapes" />
      <scope ilk="function" name="test" signature="test()" />
    </scope>
    <scope doc="################################################################################&#10;### Simple tests ################################################################################" ilk="blob" lang="Python3" name="collections.__main__">
      <scope classrefs="Point" doc="Point class with optimized _make() and _replace() without error-checking&#10;" ilk="class" name="Point">
        <scope doc="Return a new Point object replacing specified fields with&#10;new values" ilk="function" name="_replace" signature="_replace(self, _map=&lt;class 'map'&gt;, **kwds)" />
      </scope>
      <scope classrefs="tuple" doc="Point3D(x, y, z)&#10;" ilk="class" name="Point3D">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new Point3D object replacing specified fields with&#10;new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of Point3D(x, y, z)" ilk="function" name="__new__" signature="__new__(_cls, x, y, z)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new Point3D object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="tuple" doc="TestResults(failed, attempted)&#10;" ilk="class" name="TestResults">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new TestResults object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of TestResults(failed, attempted)" ilk="function" name="__new__" signature="__new__(_cls, failed, attempted)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new TestResults object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <import module="collections" />
      <import module="doctest" />
      <scope doc="Return the pickled representation of the object as a bytes&#10;object." ilk="function" name="dumps" />
      <scope doc="Read and return an object from the given pickle data." ilk="function" name="loads" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <variable citdl="Point" name="p" />
    </scope>
    <scope doc="Stream-related things.&#10;" ilk="blob" lang="Python3" name="asyncio.streams">
      <scope classrefs="Protocol" doc="Reusable flow control logic for StreamWriter.drain().&#10;This implements the protocol methods pause_writing(), resume_reading() and connection_lost().  If the subclass overrides these it must call the super methods.  StreamWriter.drain() must wait for _drain_helper() coroutine." ilk="class" name="FlowControlMixin">
        <scope doc="Called when the transport's buffer drains below the low-&#10;water mark." ilk="function" name="resume_writing" signature="resume_writing(self)" />
        <scope doc="Called when the transport's buffer goes over the high-water&#10;mark." ilk="function" name="pause_writing" signature="pause_writing(self)" />
        <scope ilk="function" name="_drain_helper" signature="_drain_helper(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, loop=None)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
      </scope>
      <scope classrefs="EOFError" doc="Incomplete read error. Attributes:&#10;- partial: read bytes string before the end of stream was reached - expected: total number of expected bytes" ilk="class" name="IncompleteReadError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, partial, expected)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="StreamReader">
        <scope ilk="function" name="exception" signature="exception(self)" />
        <scope doc="Wait until feed_data() or feed_eof() is called." ilk="function" name="_wait_for_data" signature="_wait_for_data(self, func_name)" />
        <scope ilk="function" name="__aiter__" signature="__aiter__(*args, **kw)" />
        <scope doc="Wakeup read() or readline() function waiting for data or&#10;EOF." ilk="function" name="_wakeup_waiter" signature="_wakeup_waiter(self)" />
        <scope ilk="function" name="_maybe_resume_transport" signature="_maybe_resume_transport(self)" />
        <scope ilk="function" name="readexactly" signature="readexactly(self, n)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="feed_eof" signature="feed_eof(self)" />
        <scope ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, limit=65536, loop=None)" />
        <scope doc="Return True if the buffer is empty and 'feed_eof' was&#10;called." ilk="function" name="at_eof" signature="at_eof(self)" />
        <scope ilk="function" name="set_exception" signature="set_exception(self, exc)" />
        <scope ilk="function" name="read" signature="read(self, n=-1)" />
        <scope ilk="function" name="feed_data" signature="feed_data(self, data)" />
        <scope ilk="function" name="set_transport" signature="set_transport(self, transport)" />
        <scope ilk="function" name="__anext__" signature="__anext__(self)" />
      </scope>
      <scope classrefs="FlowControlMixin Protocol" doc="Helper class to adapt between Protocol and StreamReader.&#10;(This is a helper class instead of making StreamReader itself a Protocol subclass, because the StreamReader has other potential uses, and to prevent the user of the StreamReader to accidentally call inappropriate methods of the protocol.)" ilk="class" name="StreamReaderProtocol">
        <scope doc="Called when the other end calls write_eof() or equivalent." ilk="function" name="eof_received" signature="eof_received(self)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream_reader, client_connected_cb=None, loop=None)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
        <scope doc="Called when some data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <scope classrefs="object" doc="Wraps a Transport.&#10;This exposes write(), writelines(), [can_]write_eof(), get_extra_info() and close().  It adds drain() which returns an optional Future on which you can wait for flow control.  It also adds a transport property which references the Transport directly." ilk="class" name="StreamWriter">
        <scope doc="Flush the write buffer." ilk="function" name="drain" signature="drain(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="write_eof" signature="write_eof(self)" />
        <scope ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, transport, protocol, reader, loop)" />
        <scope ilk="function" name="can_write_eof" signature="can_write_eof(self)" />
        <scope ilk="function" name="writelines" signature="writelines(self, data)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="get_extra_info" signature="get_extra_info(self, name, default=None)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="compat" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="coroutines" />
      <import module="events" />
      <import module="futures" />
      <variable citdl="Logger" name="logger" />
      <scope doc="A wrapper for create_connection() returning a (reader,&#10;writer) pair." ilk="function" name="open_connection" signature="open_connection(host=None, port=None, *, loop=None, limit=65536, **kwds)" />
      <scope doc="Similar to `open_connection` but works with UNIX Domain&#10;Sockets." ilk="function" name="open_unix_connection" signature="open_unix_connection(path=None, *, loop=None, limit=65536, **kwds)" />
      <import module="protocols" />
      <import module="socket" />
      <scope doc="Start a socket server, call back for each client connected." ilk="function" name="start_server" signature="start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=65536, **kwds)" />
      <scope doc="Similar to `start_server` but works with UNIX Domain&#10;Sockets." ilk="function" name="start_unix_server" signature="start_unix_server(client_connected_cb, path=None, *, loop=None, limit=65536, **kwds)" />
    </scope>
    <scope doc="distutils.command.upload&#10;Implements the Distutils 'upload' subcommand (upload package to a package index)." ilk="blob" lang="Python3" name="distutils.command.upload">
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="URLError addinfourl" doc="Raised when HTTP error occurs, but also acts like non-error return&#10;" ilk="class" name="HTTPError">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="_HTTPError__super_init" signature="_HTTPError__super_init(self, fp, headers, url, code=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, code, msg, hdrs, fp)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Command" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="PyPIRCCommand">
        <scope doc="Reads the .pypirc file." ilk="function" name="_read_pypirc" signature="_read_pypirc(self)" />
        <scope doc="Creates a default .pypirc file." ilk="function" name="_store_pypirc" signature="_store_pypirc(self, username, password)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Returns rc file path." ilk="function" name="_get_rc_file" signature="_get_rc_file(self)" />
        <scope doc="Read and decode a PyPI HTTP response." ilk="function" name="_read_pypi_response" signature="_read_pypi_response(self, response)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Request">
        <scope ilk="function" name="get_full_url" signature="get_full_url(self)" />
        <scope ilk="function" name="add_header" signature="add_header(self, key, val)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None)" />
        <scope ilk="function" name="set_proxy" signature="set_proxy(self, host, type)" />
        <scope ilk="function" name="add_unredirected_header" signature="add_unredirected_header(self, key, val)" />
        <scope ilk="function" name="remove_header" signature="remove_header(self, header_name)" />
        <scope doc="Return a string indicating the HTTP request method." ilk="function" name="get_method" signature="get_method(self)" />
        <scope ilk="function" name="get_header" signature="get_header(self, header_name, default=None)" />
        <scope ilk="function" name="_parse" signature="_parse(self)" />
        <scope ilk="function" name="header_items" signature="header_items(self)" />
        <scope ilk="function" name="has_proxy" signature="has_proxy(self)" />
        <scope ilk="function" name="has_header" signature="has_header(self, header_name)" />
      </scope>
      <import module="hashlib" />
      <import module="io" />
      <import module="log" />
      <import module="os" />
      <import module="platform" />
      <scope doc="Run another program, specified as a command list 'cmd', in a&#10;new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Encode a byte string using the standard Base64 alphabet." ilk="function" name="standard_b64encode" signature="standard_b64encode(s)" />
      <scope classrefs="PyPIRCCommand" doc="Base command that knows how to handle the .pypirc file&#10;" ilk="class" name="upload">
        <scope ilk="function" name="upload_file" signature="upload_file(self, command, pyversion, filename)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Initialize options." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Finalizes options." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope ilk="function" name="urlopen" signature="urlopen(url, data=None, timeout=&lt;object object at 0x7f11880dc170&gt;, *, cafile=None, capath=None, cadefault=False, context=None)" />
      <scope doc="Parse a URL into 6 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt;&#10;Return a 6-tuple: (scheme, netloc, path, params, query,&#10;fragment)." ilk="function" name="urlparse" signature="urlparse(url, scheme='', allow_fragments=True)" />
    </scope>
    <scope doc="Fix function attribute names (f.func_x -&gt; f.__x__).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_funcattrs">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixFuncattrs">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="BaseHTTPServer that implements the Python WSGI protocol (PEP 3333)&#10;This is both an example of how WSGI can be implemented, and a basis for running simple web applications on a local machine, such as might be done when testing or debugging an application.  It has not been reviewed for security issues, however, and we strongly recommend that you use a &quot;real&quot; web server for production use.  For example usage, see the 'if __name__==&quot;__main__&quot;' block at the end of the module.  See also the BaseHTTPServer module docs for other API information." ilk="blob" lang="Python3" name="wsgiref.simple_server">
      <scope classrefs="StreamRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="BaseHTTPRequestHandler">
        <scope doc="Decide what to do with an &quot;Expect: 100-continue&quot; header." ilk="function" name="handle_expect_100" signature="handle_expect_100(self)" />
        <scope doc="Return the client address." ilk="function" name="address_string" signature="address_string(self)" />
        <scope doc="Parse a request (internal)." ilk="function" name="parse_request" signature="parse_request(self)" />
        <scope doc="Log an arbitrary message." ilk="function" name="log_message" signature="log_message(self, format, *args)" />
        <scope doc="Log an accepted request." ilk="function" name="log_request" signature="log_request(self, code='-', size='-')" />
        <scope doc="Send a MIME header to the headers buffer." ilk="function" name="send_header" signature="send_header(self, keyword, value)" />
        <scope doc="Return the current time formatted for logging." ilk="function" name="log_date_time_string" signature="log_date_time_string(self)" />
        <scope doc="Send the blank line ending the MIME headers." ilk="function" name="end_headers" signature="end_headers(self)" />
        <scope doc="Add the response header to the headers buffer and log the&#10;response code." ilk="function" name="send_response" signature="send_response(self, code, message=None)" />
        <scope ilk="function" name="flush_headers" signature="flush_headers(self)" />
        <scope doc="Send the response header only." ilk="function" name="send_response_only" signature="send_response_only(self, code, message=None)" />
        <scope doc="Handle multiple requests if necessary." ilk="function" name="handle" signature="handle(self)" />
        <scope doc="Return the server software version string." ilk="function" name="version_string" signature="version_string(self)" />
        <scope doc="Handle a single HTTP request." ilk="function" name="handle_one_request" signature="handle_one_request(self)" />
        <scope doc="Return the current date and time formatted for a message&#10;header." ilk="function" name="date_time_string" signature="date_time_string(self, timestamp=None)" />
        <scope doc="Log an error." ilk="function" name="log_error" signature="log_error(self, format, *args)" />
        <scope doc="Send and log an error reply." ilk="function" name="send_error" signature="send_error(self, code, message=None, explain=None)" />
      </scope>
      <scope classrefs="TCPServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="HTTPServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
      </scope>
      <scope classrefs="SimpleHandler" doc="Handler that's just initialized with streams, environment, etc.&#10;This handler subclass is intended for synchronous HTTP/1.0 origin servers, and handles sending the entire response output, given the correct inputs.  Usage::  handler = SimpleHandler( inp,out,err,env, multithread=False, multiprocess=True ) handler.run(app)" ilk="class" name="ServerHandler">
        <scope doc="Close the iterable (if needed) and reset all instance vars" ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="BaseHandler" doc="Handler that's just initialized with streams, environment, etc.&#10;This handler subclass is intended for synchronous HTTP/1.0 origin servers, and handles sending the entire response output, given the correct inputs.  Usage::  handler = SimpleHandler( inp,out,err,env, multithread=False, multiprocess=True ) handler.run(app)" ilk="class" name="SimpleHandler">
        <scope doc="Override in subclass to return suitable 'wsgi.errors'" ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope doc="Override in subclass to return suitable 'wsgi.input'" ilk="function" name="get_stdin" signature="get_stdin(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stdin, stdout, stderr, environ, multithread=True, multiprocess=False)" />
        <scope doc="Override in subclass to insert CGI variables in&#10;'self.environ'" ilk="function" name="add_cgi_vars" signature="add_cgi_vars(self)" />
        <scope doc="Override in subclass to buffer data for send to client" ilk="function" name="_write" signature="_write(self, data)" />
        <scope doc="Override in subclass to force sending of recent '_write()'&#10;calls" ilk="function" name="_flush" signature="_flush(self)" />
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="WSGIRequestHandler">
        <scope ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope ilk="function" name="get_environ" signature="get_environ(self)" />
        <scope doc="Handle a single HTTP request" ilk="function" name="handle" signature="handle(self)" />
      </scope>
      <scope classrefs="HTTPServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="WSGIServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
        <scope ilk="function" name="set_app" signature="set_app(self, application)" />
        <scope ilk="function" name="setup_environ" signature="setup_environ(self)" />
        <scope ilk="function" name="get_app" signature="get_app(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="demo_app" signature="demo_app(environ, start_response)" />
      <scope doc="Create a new WSGI server listening on `host` and `port` for&#10;`app`" ilk="function" name="make_server" signature="make_server(host, port, app, server_class=&lt;class 'wsgiref.simple_server.WSGIServer'&gt;, handler_class=&lt;class 'wsgiref.simple_server.WSGIRequestHandler'&gt;)" />
      <scope doc="Returns a string identifying the Python implementation." ilk="function" name="python_implementation" signature="python_implementation()" />
      <variable citdl="str" name="server_version" />
      <variable citdl="str" name="software_version" />
      <import module="sys" />
      <variable citdl="str" name="sys_version" />
      <import module="urllib" />
    </scope>
    <scope doc="Bisection algorithms.&#10;" ilk="blob" lang="Python3" name="bisect">
      <scope doc="Alias for bisect_right()." ilk="function" name="bisect" />
      <scope doc="Return the index where to insert item x in list a, assuming&#10;a is sorted." ilk="function" name="bisect_left" signature="bisect_left(a, x[, lo[, hi]]) -&gt; index" />
      <scope doc="Return the index where to insert item x in list a, assuming&#10;a is sorted." ilk="function" name="bisect_right" signature="bisect_right(a, x[, lo[, hi]]) -&gt; index" />
      <scope doc="Alias for insort_right()." ilk="function" name="insort" />
      <scope doc="Insert item x in list a, and keep it sorted assuming a is&#10;sorted." ilk="function" name="insort_left" signature="insort_left(a, x[, lo[, hi]])" />
      <scope doc="Insert item x in list a, and keep it sorted assuming a is&#10;sorted." ilk="function" name="insort_right" signature="insort_right(a, x[, lo[, hi]])" />
    </scope>
    <scope doc="Fixer that addes parentheses where they are required&#10;This converts ``[x for x in 1, 2]`` to ``[x for x in (1, 2)]``." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_paren">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixParen">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope ilk="function" name="RParen" signature="RParen()" />
      <import module="fixer_base" />
    </scope>
    <scope doc="distutils.bcppcompiler&#10;Contains BorlandCCompiler, an implementation of the abstract CCompiler class for the Borland C++ compiler." ilk="blob" lang="Python3" name="distutils.bcppcompiler">
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to the Borland C/C++&#10;compiler, as defined by the CCompiler abstract class." ilk="class" name="BCPPCompiler">
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope doc="# overwrite the one from CCompiler to support rc and res-&#10;files" ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
      </scope>
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="CCompiler">
        <scope doc="Add 'libname' to the list of libraries that will be included&#10;in all links driven by this compiler object." ilk="function" name="add_library" signature="add_library(self, libname)" />
        <scope doc="Define the executables (and options for them) that will be&#10;run to perform the various stages of compilation." ilk="function" name="set_executables" signature="set_executables(self, **kwargs)" />
        <scope doc="Add 'object' to the list of object files (or analogues, such&#10;as explicitly named library files or the output of &quot;resource&#10;compilers&quot;) to be included in every link driven by this&#10;compiler object." ilk="function" name="add_link_object" signature="add_link_object(self, object)" />
        <scope doc="Detect the language of a given file, or list of files." ilk="function" name="detect_language" signature="detect_language(self, sources)" />
        <scope ilk="function" name="shared_object_filename" signature="shared_object_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for libraries specified to 'add_library()' and&#10;'set_libraries()'." ilk="function" name="add_library_dir" signature="add_library_dir(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope ilk="function" name="link_shared_lib" signature="link_shared_lib(self, objects, output_libname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope ilk="function" name="move_file" signature="move_file(self, src, dst)" />
        <scope doc="Return true if we need to relink the files listed in&#10;'objects' to recreate 'output_file'." ilk="function" name="_need_link" signature="_need_link(self, objects, output_file)" />
        <scope ilk="function" name="_find_macro" signature="_find_macro(self, name)" />
        <scope doc="Set the list of directories that will be searched to 'dirs'&#10;(a list of strings)." ilk="function" name="set_include_dirs" signature="set_include_dirs(self, dirs)" />
        <scope doc="Typecheck and fix up some arguments supplied to various&#10;methods." ilk="function" name="_fix_object_args" signature="_fix_object_args(self, objects, output_dir)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
        <scope ilk="function" name="_get_cc_args" signature="_get_cc_args(self, pp_opts, debug, before)" />
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="set_executable" signature="set_executable(self, key, value)" />
        <scope doc="Typecheck and fix-up some of the arguments to the&#10;'compile()' method, and return fixed-up values." ilk="function" name="_fix_compile_args" signature="_fix_compile_args(self, output_dir, macros, include_dirs)" />
        <scope ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope ilk="function" name="executable_filename" signature="executable_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Set the list of libraries to be included in all links driven&#10;by this compiler object to 'libnames' (a list of strings)." ilk="function" name="set_libraries" signature="set_libraries(self, libnames)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Set the list of library search directories to 'dirs' (a list&#10;of strings)." ilk="function" name="set_library_dirs" signature="set_library_dirs(self, dirs)" />
        <scope doc="Undefine a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="undefine_macro" signature="undefine_macro(self, name)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for shared libraries at runtime." ilk="function" name="add_runtime_library_dir" signature="add_runtime_library_dir(self, dir)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope ilk="function" name="library_filename" signature="library_filename(self, libname, lib_type='static', strip_dir=0, output_dir='')" />
        <scope ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Typecheck and fix up some of the arguments supplied to the&#10;'link_*' methods." ilk="function" name="_fix_lib_args" signature="_fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)" />
        <scope doc="Set the list of object files (or analogues) to be included&#10;in every link to 'objects'." ilk="function" name="set_link_objects" signature="set_link_objects(self, objects)" />
        <scope doc="Return a boolean indicating whether funcname is supported on&#10;the current platform." ilk="function" name="has_function" signature="has_function(self, funcname, includes=None, include_dirs=None, libraries=None, library_dirs=None)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Set the list of directories to search for shared libraries&#10;at runtime to 'dirs' (a list of strings)." ilk="function" name="set_runtime_library_dirs" signature="set_runtime_library_dirs(self, dirs)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Process arguments and decide which source files to compile." ilk="function" name="_setup_compile" signature="_setup_compile(self, outdir, macros, incdirs, sources, depends, extra)" />
        <scope ilk="function" name="spawn" signature="spawn(self, cmd)" />
        <scope ilk="function" name="link_executable" signature="link_executable(self, objects, output_progname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None)" />
        <scope doc="Decide which souce files must be recompiled." ilk="function" name="_prep_compile" signature="_prep_compile(self, sources, output_dir, depends=None)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="link_shared_object" signature="link_shared_object(self, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Define a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="define_macro" signature="define_macro(self, name, value=None)" />
        <scope doc="Ensures that every element of 'definitions' is a valid macro&#10;definition, ie." ilk="function" name="_check_macro_definitions" signature="_check_macro_definitions(self, definitions)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for header files." ilk="function" name="add_include_dir" signature="add_include_dir(self, dir)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope doc="Generate linker options for searching library directories&#10;and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at&#10;least two types of compilers: the typical Unix compiler and&#10;Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <import module="log" />
      <scope doc="Return true if 'source' exists and is more recently modified&#10;than 'target', or if 'source' exists and 'target' doesn't." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <scope doc="Create a file with the specified name and write 'contents'&#10;(a sequence of strings without line terminators) to it." ilk="function" name="write_file" signature="write_file(filename, contents)" />
    </scope>
    <scope doc="Fixer that cleans up a tuple argument to isinstance after the tokens&#10;in it were fixed.  This is mainly used to remove double occurrences of tokens as a leftover of the long -&gt; int / unicode -&gt; str conversion.  eg.  isinstance(x, (int, long)) -&gt; isinstance(x, (int, int)) -&gt; isinstance(x, int)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_isinstance">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixIsinstance">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="Basic infrastructure for asynchronous socket service clients and servers.&#10;There are only two ways to have a program on a single processor do &quot;more than one thing at a time&quot;.  Multi-threaded programming is the simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of multi-threading, without actually using multiple threads. it's really only practical if your program is largely I/O bound. If your program is CPU bound, then pre-emptive scheduled threads are probably what you really need. Network servers are rarely CPU-bound, however.  If your operating system supports the select() system call in its I/O" ilk="blob" lang="Python3" name="asyncore">
      <variable citdl="int" name="EAGAIN" />
      <variable citdl="int" name="EALREADY" />
      <variable citdl="int" name="EBADF" />
      <variable citdl="int" name="ECONNABORTED" />
      <variable citdl="int" name="ECONNRESET" />
      <variable citdl="int" name="EINPROGRESS" />
      <variable citdl="int" name="EINVAL" />
      <variable citdl="int" name="EISCONN" />
      <variable citdl="int" name="ENOTCONN" />
      <variable citdl="int" name="EPIPE" />
      <variable citdl="int" name="ESHUTDOWN" />
      <variable citdl="int" name="EWOULDBLOCK" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ExitNow" />
      <scope ilk="function" name="close_all" signature="close_all(map=None, ignore_all=False)" />
      <scope ilk="function" name="compact_traceback" signature="compact_traceback()" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="dispatcher">
        <scope ilk="function" name="handle_error" signature="handle_error(self)" />
        <scope ilk="function" name="listen" signature="listen(self, num)" />
        <scope ilk="function" name="readable" signature="readable(self)" />
        <scope ilk="function" name="add_channel" signature="add_channel(self, map=None)" />
        <scope ilk="function" name="handle_connect" signature="handle_connect(self)" />
        <scope ilk="function" name="handle_read_event" signature="handle_read_event(self)" />
        <scope ilk="function" name="set_reuse_addr" signature="set_reuse_addr(self)" />
        <scope ilk="function" name="handle_write" signature="handle_write(self)" />
        <scope ilk="function" name="send" signature="send(self, data)" />
        <scope ilk="function" name="del_channel" signature="del_channel(self, map=None)" />
        <scope ilk="function" name="handle_write_event" signature="handle_write_event(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="connect" signature="connect(self, address)" />
        <scope ilk="function" name="accept" signature="accept(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="log_info" signature="log_info(self, message, type='info')" />
        <scope ilk="function" name="set_socket" signature="set_socket(self, sock, map=None)" />
        <scope ilk="function" name="handle_close" signature="handle_close(self)" />
        <scope ilk="function" name="handle_connect_event" signature="handle_connect_event(self)" />
        <scope ilk="function" name="bind" signature="bind(self, addr)" />
        <scope ilk="function" name="recv" signature="recv(self, buffer_size)" />
        <scope ilk="function" name="handle_expt" signature="handle_expt(self)" />
        <scope ilk="function" name="handle_expt_event" signature="handle_expt_event(self)" />
        <scope ilk="function" name="create_socket" signature="create_socket(self, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketKind.SOCK_STREAM: 1&gt;)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock=None, map=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="writable" signature="writable(self)" />
        <scope ilk="function" name="log" signature="log(self, message)" />
        <scope ilk="function" name="handle_accept" signature="handle_accept(self)" />
        <scope ilk="function" name="handle_read" signature="handle_read(self)" />
        <scope ilk="function" name="handle_accepted" signature="handle_accepted(self, sock, addr)" />
      </scope>
      <scope classrefs="dispatcher" doc="&#10;" ilk="class" name="dispatcher_with_send">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock=None, map=None)" />
        <scope ilk="function" name="send" signature="send(self, data)" />
        <scope ilk="function" name="initiate_send" signature="initiate_send(self)" />
        <scope ilk="function" name="writable" signature="writable(self)" />
        <scope ilk="function" name="handle_write" signature="handle_write(self)" />
      </scope>
      <variable citdl="dict" name="errorcode" />
      <scope classrefs="dispatcher" doc="&#10;" ilk="class" name="file_dispatcher">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fd, map=None)" />
        <scope ilk="function" name="set_file" signature="set_file(self, fd)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="file_wrapper">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="send" signature="send(self, *args)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getsockopt" signature="getsockopt(self, level, optname, buflen=None)" />
        <scope ilk="function" name="recv" signature="recv(self, *args)" />
        <scope ilk="function" name="write" signature="write(self, *args)" />
        <scope ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="read" signature="read(self, *args)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fd)" />
      </scope>
      <scope ilk="function" name="loop" signature="loop(timeout=30.0, use_poll=False, map=None, count=None)" />
      <import module="os" />
      <scope ilk="function" name="poll" signature="poll(timeout=0.0, map=None)" />
      <scope ilk="function" name="poll2" signature="poll2(timeout=0.0, map=None)" />
      <scope ilk="function" name="poll3" signature="poll3(timeout=0.0, map=None)" />
      <scope ilk="function" name="read" signature="read(obj)" />
      <scope ilk="function" name="readwrite" signature="readwrite(obj, flags)" />
      <import module="select" />
      <import module="socket" />
      <variable citdl="dict" name="socket_map" />
      <import module="sys" />
      <import module="time" />
      <import module="warnings" />
      <scope ilk="function" name="write" signature="write(obj)" />
    </scope>
    <scope doc="Generic interface to all dbm clones.&#10;Use  import dbm d = dbm.open(file, 'w', 0o666)  The returned object is a dbm.gnu, dbm.ndbm or dbm.dumb object, dependent on the type of database being opened (determined by the whichdb function) in the case of an existing dbm. If the dbm does not exist and the create or new flag ('c' or 'n') was specified, the dbm type will be determined by the availability of the modules (tested in the above order)." ilk="blob" lang="Python3" name="dbm">
      <variable citdl="list" name="__all__" />
      <variable citdl="tuple" name="error" />
      <import module="io" />
      <import module="ndbm" />
      <scope doc="Open or create database at path given by *file*." ilk="function" name="open" signature="open(file, flag='r', mode=438)" />
      <import module="os" />
      <import module="struct" />
      <import module="sys" />
      <scope doc="Guess which db package to use to open a db file." ilk="function" name="whichdb" signature="whichdb(filename)" />
    </scope>
    <scope doc="Python parse tree definitions.&#10;This is a very concrete parse tree; we need to keep every token and even the comments and whitespace between tokens.  There's also a pattern matching implementation here." ilk="blob" lang="Python3" name="lib2to3.pytree">
      <scope classrefs="object" doc="Abstract base class for Node and Leaf.&#10;This provides some default functionality and boilerplate using the template pattern.  A node may be a subnode of at most one parent." ilk="class" name="Base">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope ilk="function" name="depth" signature="depth(self)" />
        <scope doc="Return the string immediately following the invocant node." ilk="function" name="get_suffix" signature="get_suffix(self)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Constructor that prevents Base from being instantiated." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
        <scope doc="Return the line number which generated the invocant node." ilk="function" name="get_lineno" signature="get_lineno(self)" />
        <scope doc="Replace this node with a new one in the parent." ilk="function" name="replace" signature="replace(self, new)" />
        <scope ilk="function" name="changed" signature="changed(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope ilk="function" name="leaves" signature="leaves(self)" />
        <scope doc="Remove the node from the tree." ilk="function" name="remove" signature="remove(self)" />
      </scope>
      <scope classrefs="object" doc="A pattern is a tree matching pattern.&#10;It looks for a specific node type (token or symbol), and optionally for a specific content.  This is an abstract base class.  There are three concrete subclasses:  - LeafPattern matches a single leaf node; - NodePattern matches a single node (usually non-leaf); - WildcardPattern matches a sequence of nodes of variable length." ilk="class" name="BasePattern">
        <scope doc="Does this pattern exactly match a node?" ilk="function" name="match" signature="match(self, node, results=None)" />
        <scope doc="Generator yielding all matches for this pattern." ilk="function" name="generate_matches" signature="generate_matches(self, nodes)" />
        <scope doc="Does this pattern exactly match a sequence of nodes?" ilk="function" name="match_seq" signature="match_seq(self, nodes, results=None)" />
        <scope doc="Constructor that prevents BasePattern from being&#10;instantiated." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
        <scope doc="A subclass can define this as a hook for optimizations." ilk="function" name="optimize" signature="optimize(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="HUGE" />
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes.&#10;" ilk="class" name="Leaf">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="The whitespace and comments preceding this token in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, value, context=None, prefix=None, fixers_applied=[])" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope ilk="function" name="leaves" signature="leaves(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="BasePattern" doc="A pattern is a tree matching pattern.&#10;It looks for a specific node type (token or symbol), and optionally for a specific content.  This is an abstract base class.  There are three concrete subclasses:  - LeafPattern matches a single leaf node; - NodePattern matches a single node (usually non-leaf); - WildcardPattern matches a sequence of nodes of variable length." ilk="class" name="LeafPattern">
        <scope doc="Initializer. Takes optional type, content, and name." ilk="function" name="__init__" signature="__init__(self, type=None, content=None, name=None)" />
        <scope doc="Match the pattern's content to the node's children." ilk="function" name="_submatch" signature="_submatch(self, node, results=None)" />
        <scope doc="Override match() to insist on a leaf node." ilk="function" name="match" signature="match(self, node, results=None)" />
      </scope>
      <scope classrefs="BasePattern" doc="A pattern is a tree matching pattern.&#10;It looks for a specific node type (token or symbol), and optionally for a specific content.  This is an abstract base class.  There are three concrete subclasses:  - LeafPattern matches a single leaf node; - NodePattern matches a single node (usually non-leaf); - WildcardPattern matches a sequence of nodes of variable length." ilk="class" name="NegatedPattern">
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, content=None)" />
        <scope doc="Does this pattern exactly match a sequence of nodes?" ilk="function" name="match_seq" signature="match_seq(self, nodes)" />
        <scope doc="Does this pattern exactly match a node?" ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Generator yielding all matches for this pattern." ilk="function" name="generate_matches" signature="generate_matches(self, nodes)" />
      </scope>
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope classrefs="BasePattern" doc="A pattern is a tree matching pattern.&#10;It looks for a specific node type (token or symbol), and optionally for a specific content.  This is an abstract base class.  There are three concrete subclasses:  - LeafPattern matches a single leaf node; - NodePattern matches a single node (usually non-leaf); - WildcardPattern matches a sequence of nodes of variable length." ilk="class" name="NodePattern">
        <scope doc="Initializer. Takes optional type, content, and name." ilk="function" name="__init__" signature="__init__(self, type=None, content=None, name=None)" />
        <scope doc="Match the pattern's content to the node's children." ilk="function" name="_submatch" signature="_submatch(self, node, results=None)" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="BasePattern" doc="A wildcard pattern can match zero or more nodes.&#10;This has all the flexibility needed to implement patterns like:  .*      .+      .?      .{m,n} (a b c | d e | f) (...)*  (...)+  (...)?  (...){m,n}  except it always uses non-greedy matching." ilk="class" name="WildcardPattern">
        <scope doc="Does this pattern exactly match a node?" ilk="function" name="match" signature="match(self, node, results=None)" />
        <scope doc="Helper to iteratively yield the matches." ilk="function" name="_iterative_matches" signature="_iterative_matches(self, nodes)" />
        <scope doc="Helper to recursively yield the matches." ilk="function" name="_recursive_matches" signature="_recursive_matches(self, nodes, count)" />
        <scope doc="Generator yielding matches for a sequence of nodes." ilk="function" name="generate_matches" signature="generate_matches(self, nodes)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, content=None, min=0, max=2147483647, name=None)" />
        <scope doc="Does this pattern exactly match a sequence of nodes?" ilk="function" name="match_seq" signature="match_seq(self, nodes, results=None)" />
        <scope doc="Special optimized matcher for bare_name." ilk="function" name="_bare_name_matches" signature="_bare_name_matches(self, nodes)" />
        <scope doc="Optimize certain stacked wildcard patterns." ilk="function" name="optimize" signature="optimize(self)" />
      </scope>
      <scope doc="Convert raw node information to a Node or Leaf instance." ilk="function" name="convert" signature="convert(gr, raw_node)" />
      <scope doc="Generator yielding matches for a sequence of patterns and&#10;nodes." ilk="function" name="generate_matches" signature="generate_matches(patterns, nodes)" />
      <import module="sys" />
      <scope ilk="function" name="type_repr" signature="type_repr(type_num)" />
      <import module="warnings" />
    </scope>
    <scope doc="robotparser.py&#10;Copyright (C) 2000  Bastian Kleineidam  You can choose between two licenses when using this package: 1) GNU GPLv2 2) PSF license for Python 2.2  The robots.txt Exclusion Protocol is implemented as specified in http://www.robotstxt.org/norobots-rfc.txt" ilk="blob" lang="Python3" name="urllib.robotparser">
      <scope classrefs="object" doc="An entry has one or more user-agents and zero or more rulelines&#10;" ilk="class" name="Entry">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Preconditions: - our agent applies to this entry - filename&#10;is URL decoded" ilk="function" name="allowance" signature="allowance(self, filename)" />
        <scope doc="check if this entry applies to the specified agent" ilk="function" name="applies_to" signature="applies_to(self, useragent)" />
      </scope>
      <scope classrefs="object" doc="This class provides a set of methods to read, parse and answer&#10;questions about a single robots.txt file." ilk="class" name="RobotFileParser">
        <scope doc="Reads the robots.txt URL and feeds it to the parser." ilk="function" name="read" signature="read(self)" />
        <scope doc="Returns the time the robots.txt file was last fetched." ilk="function" name="mtime" signature="mtime(self)" />
        <scope doc="using the parsed robots.txt decide if useragent can fetch&#10;url" ilk="function" name="can_fetch" signature="can_fetch(self, useragent, url)" />
        <scope ilk="function" name="_add_entry" signature="_add_entry(self, entry)" />
        <scope doc="Parse the input lines from a robots.txt file." ilk="function" name="parse" signature="parse(self, lines)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url='')" />
        <scope doc="Sets the time the robots.txt file was last fetched to the&#10;current time." ilk="function" name="modified" signature="modified(self)" />
        <scope doc="Sets the URL referring to a robots.txt file." ilk="function" name="set_url" signature="set_url(self, url)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="A rule line is a single &quot;Allow:&quot; (allowance==True) or &quot;Disallow:&quot;&#10;(allowance==False) followed by a path." ilk="class" name="RuleLine">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, path, allowance)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="applies_to" signature="applies_to(self, filename)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="urllib" />
    </scope>
    <scope doc="distutils.command.config&#10;Implements the Distutils 'config' command, a (mostly) empty command class that exists mainly to be sub-classed by specific module distributions and applications.  The idea is that while every &quot;config&quot; command is different, at least they're all named the same, and users always see &quot;config&quot; in the list of standard commands.  Also, this is a good place to put common configure-like tasks: &quot;try to compile this C code&quot;, or &quot;figure out where this header file lives&quot;." ilk="blob" lang="Python3" name="distutils.command.config">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <variable citdl="dict" name="LANG_EXT" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="config">
        <scope doc="Try to compile a source file built from 'body' and&#10;'headers'." ilk="function" name="try_compile" signature="try_compile(self, body, headers=None, include_dirs=None, lang='c')" />
        <scope doc="Construct a source file from 'body' (a string containing&#10;lines of C/C++ code) and 'headers' (a list of header files&#10;to include) and run it through the preprocessor." ilk="function" name="try_cpp" signature="try_cpp(self, body=None, headers=None, include_dirs=None, lang='c')" />
        <scope doc="Try to compile and link a source file, built from 'body' and&#10;'headers', to executable form." ilk="function" name="try_link" signature="try_link(self, body, headers=None, include_dirs=None, libraries=None, library_dirs=None, lang='c')" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Try to compile, link to an executable, and run a program&#10;built from 'body' and 'headers'." ilk="function" name="try_run" signature="try_run(self, body, headers=None, include_dirs=None, libraries=None, library_dirs=None, lang='c')" />
        <scope doc="Check that 'self.compiler' really is a CCompiler object; if&#10;not, make it one." ilk="function" name="_check_compiler" signature="_check_compiler(self)" />
        <scope doc="Determine if function 'func' is available by constructing a&#10;source file that refers to 'func', and compiles and links&#10;it." ilk="function" name="check_func" signature="check_func(self, func, headers=None, include_dirs=None, libraries=None, library_dirs=None, decl=0, call=0)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="_compile" signature="_compile(self, body, headers, include_dirs, lang)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="_preprocess" signature="_preprocess(self, body, headers, include_dirs, lang)" />
        <scope ilk="function" name="_link" signature="_link(self, body, headers, include_dirs, libraries, library_dirs, lang)" />
        <scope doc="Determine if 'library' is available to be linked against,&#10;without actually checking that any particular symbols are&#10;provided by it." ilk="function" name="check_lib" signature="check_lib(self, library, library_dirs=None, headers=None, include_dirs=None, other_libraries=[])" />
        <scope ilk="function" name="_clean" signature="_clean(self, *filenames)" />
        <scope doc="Construct a source file (just like 'try_cpp()'), run it&#10;through the preprocessor, and return true if any line of the&#10;output matches 'pattern'." ilk="function" name="search_cpp" signature="search_cpp(self, pattern, body=None, headers=None, include_dirs=None, lang='c')" />
        <scope doc="Determine if the system header file named by 'header_file'&#10;exists and can be found by the preprocessor; return true if&#10;so, false otherwise." ilk="function" name="check_header" signature="check_header(self, header, include_dirs=None, library_dirs=None, lang='c')" />
        <scope ilk="function" name="_gen_temp_sourcefile" signature="_gen_temp_sourcefile(self, body, headers, lang)" />
      </scope>
      <scope doc="Do any platform-specific customization of a CCompiler&#10;instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <scope doc="Dumps a file content into log.info." ilk="function" name="dump_file" signature="dump_file(filename, head=None)" />
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="CSV parsing and writing.&#10;This module provides classes that assist in the reading and writing of Comma Separated Value (CSV) files, and implements the interface described by PEP 305.  Although many CSV files are simple to parse, the format is not formally defined by a stable specification and is subtle enough that parsing lines of a CSV file with something like line.split(&quot;,&quot;) is bound to fail.  The module supports three basic APIs: reading, writing, and registration of dialects.   DIALECT REGISTRATION:" ilk="blob" lang="Python3" name="csv">
      <scope classrefs="object" doc="Describe a CSV dialect.&#10;This must be subclassed (see csv.excel).  Valid attributes are: delimiter, quotechar, escapechar, doublequote, skipinitialspace, lineterminator, quoting." ilk="class" name="Dialect">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_validate" signature="_validate(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DictReader">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="DictWriter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)" />
        <scope ilk="function" name="writerow" signature="writerow(self, rowdict)" />
        <scope ilk="function" name="writerows" signature="writerows(self, rowdicts)" />
        <scope ilk="function" name="_dict_to_list" signature="_dict_to_list(self, rowdict)" />
        <scope ilk="function" name="writeheader" signature="writeheader(self)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="int" name="QUOTE_ALL" />
      <variable citdl="int" name="QUOTE_MINIMAL" />
      <variable citdl="int" name="QUOTE_NONE" />
      <variable citdl="int" name="QUOTE_NONNUMERIC" />
      <scope classrefs="object" doc="&quot;Sniffs&quot; the format of a CSV file (i.e. delimiter, quotechar)&#10;Returns a Dialect object." ilk="class" name="Sniffer">
        <scope doc="The delimiter /should/ occur the same number of times on&#10;each row." ilk="function" name="_guess_delimiter" signature="_guess_delimiter(self, data, delimiters)" />
        <scope doc="Looks for text enclosed between two identical quotes (the&#10;probable quotechar) which are preceded and followed by the&#10;same character (the probable delimiter)." ilk="function" name="_guess_quote_and_delimiter" signature="_guess_quote_and_delimiter(self, data, delimiters)" />
        <scope doc="Returns a dialect (or None) corresponding to the sample" ilk="function" name="sniff" signature="sniff(self, sample, delimiters=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="has_header" signature="has_header(self, sample)" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="Dialect" doc="Describe the usual properties of Excel-generated CSV files.&#10;" ilk="class" name="excel" />
      <scope classrefs="excel" doc="Describe the usual properties of Excel-generated TAB-delimited files.&#10;" ilk="class" name="excel_tab" />
      <scope doc="Sets an upper limit on parsed fields." ilk="function" name="field_size_limit" />
      <scope doc="Return the dialect instance associated with name." ilk="function" name="get_dialect" />
      <scope doc="Return a list of all know dialect names." ilk="function" name="list_dialects" />
      <import module="re" />
      <scope doc="csv_reader = reader(iterable [, dialect='excel'] [optional&#10;keyword args]) for row in csv_reader: process(row)" ilk="function" name="reader" />
      <scope doc="Create a mapping from a string name to a dialect class." ilk="function" name="register_dialect" />
      <scope classrefs="Dialect" doc="Describe the usual properties of Unix-generated CSV files.&#10;" ilk="class" name="unix_dialect" />
      <scope doc="Delete the name/dialect mapping associated with a string&#10;name." ilk="function" name="unregister_dialect" />
      <scope doc="csv_writer = csv.writer(fileobj [, dialect='excel']&#10;[optional keyword args]) for row in sequence:&#10;csv_writer.writerow(row)" ilk="function" name="writer" />
    </scope>
    <scope doc="Fixer for __metaclass__ = X -&gt; (metaclass=X) methods.&#10;The various forms of classef (inherits nothing, inherits once, inherints many) don't parse the same in the CST so we look at ALL classes for a __metaclass__ and if we find one normalize the inherits to all be an arglist.  For one-liner classes ('class X: pass') there is no indent/dedent so we normalize those into having a suite.  Moving the __metaclass__ into the classdef can also cause the class body to be empty so there is some special casing for that as well." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_metaclass">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixMetaclass">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope classrefs="Base" doc="Concrete implementation for leaf nodes.&#10;" ilk="class" name="Leaf">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="The whitespace and comments preceding this token in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, value, context=None, prefix=None, fixers_applied=[])" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope ilk="function" name="leaves" signature="leaves(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope ilk="function" name="find_metas" signature="find_metas(cls_node)" />
      <import module="fixer_base" />
      <scope doc="If an INDENT is followed by a thing with a prefix then nuke&#10;the prefix Otherwise we get in trouble when removing&#10;__metaclass__ at suite start" ilk="function" name="fixup_indent" signature="fixup_indent(suite)" />
      <scope doc="one-line classes don't get a suite in the parse tree so we&#10;add one to normalize the tree" ilk="function" name="fixup_parse_tree" signature="fixup_parse_tree(cls_node)" />
      <scope doc="if there is a semi-colon all the parts count as part of the&#10;same simple_stmt." ilk="function" name="fixup_simple_stmt" signature="fixup_simple_stmt(parent, i, stmt_node)" />
      <scope doc="we have to check the cls_node without changing it." ilk="function" name="has_metaclass" signature="has_metaclass(parent)" />
      <scope ilk="function" name="remove_trailing_newline" signature="remove_trailing_newline(node)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="distutils.extension&#10;Provides the Extension class, used to describe C/C++ extension modules in setup scripts." ilk="blob" lang="Python3" name="distutils.extension">
      <scope classrefs="object" doc="Just a collection of attributes that describes an extension&#10;module and everything needed to build it (hopefully in a portable way, but there are hooks that let you be as unportable as you need).  Instance attributes: name : string the full name of the extension, including any packages -- ie. *not* a filename or pathname, but Python dotted name sources : [string] list of source filenames, relative to the distribution root (where the setup script lives), in Unix form (slash-separated)" ilk="class" name="Extension">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, sources, include_dirs=None, define_macros=None, undef_macros=None, library_dirs=None, libraries=None, runtime_library_dirs=None, extra_objects=None, extra_compile_args=None, extra_link_args=None, export_symbols=None, swig_opts=None, depends=None, language=None, optional=None, **kw)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <import module="os" />
      <scope doc="Reads a Setup file and returns Extension instances." ilk="function" name="read_setup_file" signature="read_setup_file(filename)" />
      <import module="sys" />
      <import module="warnings" />
    </scope>
    <scope doc="# A higher level module for using sockets (or Windows named pipes)&#10;# # multiprocessing/connection.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.connection">
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="AuthenticationError" />
      <variable citdl="int" name="BUFSIZE" />
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BufferTooShort" />
      <variable citdl="bytes" name="CHALLENGE" />
      <variable citdl="float" name="CONNECTION_TIMEOUT" />
      <scope doc="Returns a connection to the address of a `Listener`" ilk="function" name="Client" signature="Client(address, family=None, authkey=None)" />
      <scope classrefs="_ConnectionBase" doc="Connection class based on an arbitrary file descriptor (Unix only), or&#10;a socket handle (Windows)." ilk="class" name="Connection">
        <scope ilk="function" name="_recv_bytes" signature="_recv_bytes(self, maxsize=None)" />
        <scope ilk="function" name="_recv" signature="_recv(self, size, read=&lt;built-in function read&gt;)" />
        <scope ilk="function" name="_send_bytes" signature="_send_bytes(self, buf)" />
        <scope ilk="function" name="_send" signature="_send(self, buf, write=&lt;built-in function write&gt;)" />
        <scope ilk="function" name="_close" signature="_close(self, _close=&lt;built-in function close&gt;)" />
        <scope ilk="function" name="_poll" signature="_poll(self, timeout)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ConnectionWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, conn, dumps, loads)" />
        <scope ilk="function" name="send" signature="send(self, obj)" />
        <scope ilk="function" name="recv" signature="recv(self)" />
      </scope>
      <variable citdl="bytes" name="FAILURE" />
      <scope classrefs="Pickler" doc="Pickler subclass used by multiprocessing.&#10;" ilk="class" name="ForkingPickler">
        <scope doc="Register a reduce function for a type." ilk="function" name="register" />
        <scope ilk="function" name="dumps" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args)" />
      </scope>
      <scope classrefs="object" doc="Returns a listener object.&#10;This is a wrapper for a bound socket which is 'listening' for connections, or for a Windows named pipe." ilk="class" name="Listener">
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_value, exc_tb)" />
        <scope doc="Close the bound socket or named pipe of `self`." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, address=None, family=None, backlog=1, authkey=None)" />
        <scope doc="Accept a connection on the bound socket or named pipe of&#10;`self`." ilk="function" name="accept" signature="accept(self)" />
      </scope>
      <variable citdl="int" name="MESSAGE_LENGTH" />
      <scope doc="Returns pair of connection objects at either end of a pipe" ilk="function" name="Pipe" signature="Pipe(duplex=True)" />
      <scope doc="Return a connection object connected to the socket given by&#10;`address`" ilk="function" name="SocketClient" signature="SocketClient(address)" />
      <scope classrefs="object" doc="Representation of a socket which is bound to an address and listening&#10;" ilk="class" name="SocketListener">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, address, family, backlog=1)" />
        <scope ilk="function" name="accept" signature="accept(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
      </scope>
      <variable citdl="bytes" name="WELCOME" />
      <scope ilk="function" name="XmlClient" signature="XmlClient(*args, **kwds)" />
      <scope classrefs="Listener" doc="Returns a listener object.&#10;This is a wrapper for a bound socket which is 'listening' for connections, or for a Windows named pipe." ilk="class" name="XmlListener">
        <scope doc="Accept a connection on the bound socket or named pipe of&#10;`self`." ilk="function" name="accept" signature="accept(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_multiprocessing" />
      <scope doc="Return the types of the address" ilk="function" name="address_type" signature="address_type(address)" />
      <scope ilk="function" name="answer_challenge" signature="answer_challenge(connection, authkey)" />
      <scope doc="Return an arbitrary free address for the given family" ilk="function" name="arbitrary_address" signature="arbitrary_address(family)" />
      <variable citdl="str" name="default_family" />
      <scope ilk="function" name="deliver_challenge" signature="deliver_challenge(connection, authkey)" />
      <variable citdl="list" name="families" />
      <import module="io" />
      <import module="itertools" />
      <import module="os" />
      <scope ilk="function" name="rebuild_connection" signature="rebuild_connection(df, readable, writable)" />
      <scope ilk="function" name="reduce_connection" signature="reduce_connection(conn)" />
      <import module="reduction" />
      <import module="selectors" />
      <import module="socket" />
      <import module="struct" />
      <import module="sys" />
      <import module="tempfile" />
      <import module="time" />
      <import module="util" />
      <scope doc="Wait till an object in object_list is ready/readable." ilk="function" name="wait" signature="wait(object_list, timeout=None)" />
    </scope>
    <scope doc="distutils.spawn&#10;Provides the 'spawn()' function, a front-end to various platform- specific functions for launching another program in a sub-process. Also provides the 'find_executable()' to search the path for a given executable name." ilk="blob" lang="Python3" name="distutils.spawn">
      <variable citdl="NoneType" name="DEBUG" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope doc="Tries to find 'executable' in the directories listed in&#10;'path'." ilk="function" name="find_executable" signature="find_executable(executable, path=None)" />
      <import module="log" />
      <import module="os" />
      <scope doc="Run another program, specified as a command list 'cmd', in a&#10;new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <import module="sys" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="email.contentmanager">
      <scope classrefs="object" doc="&#10;" ilk="class" name="ContentManager">
        <scope ilk="function" name="add_get_handler" signature="add_get_handler(self, key, handler)" />
        <scope ilk="function" name="_find_set_handler" signature="_find_set_handler(self, msg, obj)" />
        <scope ilk="function" name="set_content" signature="set_content(self, msg, obj, *args, **kw)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="get_content" signature="get_content(self, msg, *args, **kw)" />
        <scope ilk="function" name="add_set_handler" signature="add_set_handler(self, typekey, handler)" />
      </scope>
      <import module="binascii" />
      <import module="email" />
      <scope ilk="function" name="get_and_fixup_unknown_message_content" signature="get_and_fixup_unknown_message_content(msg)" />
      <scope ilk="function" name="get_message_content" signature="get_message_content(msg)" />
      <scope ilk="function" name="get_non_text_content" signature="get_non_text_content(msg)" />
      <scope ilk="function" name="get_text_content" signature="get_text_content(msg, errors='replace')" />
      <variable citdl="str" name="maintype" />
      <import module="quoprimime" />
      <variable citdl="ContentManager" name="raw_data_manager" />
      <scope ilk="function" name="set_bytes_content" signature="set_bytes_content(msg, data, maintype, subtype, cte='base64', disposition=None, filename=None, cid=None, params=None, headers=None)" />
      <scope ilk="function" name="set_message_content" signature="set_message_content(msg, message, subtype='rfc822', cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)" />
      <scope ilk="function" name="set_text_content" signature="set_text_content(msg, string, subtype='plain', charset='utf-8', cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)" />
      <variable citdl="str" name="subtype" />
      <scope classrefs="object" doc="Create a new memoryview object which references the given object.&#10;" ilk="class" name="typ">
        <scope ilk="function" name="__exit__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the data in the buffer as a byte string." ilk="function" name="tobytes" />
        <scope ilk="function" name="__enter__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Cast a memoryview to a new format or shape." ilk="function" name="cast" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Release the underlying buffer exposed by the memoryview&#10;object." ilk="function" name="release" />
        <scope doc="Return the data in the buffer as a list of elements." ilk="function" name="tolist" />
        <scope doc="Return the data in the buffer as a string of hexadecimal&#10;numbers." ilk="function" name="hex" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
    </scope>
    <scope doc="# Copyright 2009 Brian Quinlan. All Rights Reserved.&#10;# Licensed to PSF under a Contributor Agreement." ilk="blob" lang="Python3" name="concurrent.futures._base">
      <variable citdl="str" name="ALL_COMPLETED" />
      <variable citdl="str" name="CANCELLED" />
      <variable citdl="str" name="CANCELLED_AND_NOTIFIED" />
      <scope classrefs="Error" doc="The Future was cancelled.&#10;" ilk="class" name="CancelledError" />
      <scope classrefs="tuple" doc="DoneAndNotDoneFutures(done, not_done)&#10;" ilk="class" name="DoneAndNotDoneFutures">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new DoneAndNotDoneFutures object replacing&#10;specified fields with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create new instance of DoneAndNotDoneFutures(done, not_done)" ilk="function" name="__new__" signature="__new__(_cls, done, not_done)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new DoneAndNotDoneFutures object from a sequence or&#10;iterable" ilk="function" name="_make" />
      </scope>
      <scope classrefs="Exception" doc="Base class for all future-related exceptions.&#10;" ilk="class" name="Error" />
      <scope classrefs="object" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="Executor">
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, exc_type, exc_val, exc_tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Returns an iterator equivalent to map(fn, iter)." ilk="function" name="map" signature="map(self, fn, *iterables, timeout=None, chunksize=1)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
      </scope>
      <variable citdl="str" name="FINISHED" />
      <variable citdl="str" name="FIRST_COMPLETED" />
      <variable citdl="str" name="FIRST_EXCEPTION" />
      <scope classrefs="object" doc="Represents the result of an asynchronous computation.&#10;" ilk="class" name="Future">
        <scope doc="Return the exception raised by the call that the future&#10;represents." ilk="function" name="exception" signature="exception(self, timeout=None)" />
        <scope ilk="function" name="_Future__get_result" signature="_Future__get_result(self)" />
        <scope doc="Cancel the future if possible." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Attaches a callable that will be called when the future&#10;finishes." ilk="function" name="add_done_callback" signature="add_done_callback(self, fn)" />
        <scope doc="Mark the future as running or process any cancel&#10;notifications." ilk="function" name="set_running_or_notify_cancel" signature="set_running_or_notify_cancel(self)" />
        <scope doc="Initializes the future. Should not be called by clients." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return True if the future is currently executing." ilk="function" name="running" signature="running(self)" />
        <scope doc="Return True of the future was cancelled or finished&#10;executing." ilk="function" name="done" signature="done(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the result of the call that the future represents." ilk="function" name="result" signature="result(self, timeout=None)" />
        <scope ilk="function" name="_invoke_callbacks" signature="_invoke_callbacks(self)" />
        <scope doc="Sets the result of the future as being the given exception." ilk="function" name="set_exception" signature="set_exception(self, exception)" />
        <scope doc="Sets the return value of work associated with the future." ilk="function" name="set_result" signature="set_result(self, result)" />
        <scope doc="Return True if the future was cancelled." ilk="function" name="cancelled" signature="cancelled(self)" />
      </scope>
      <variable citdl="Logger" name="LOGGER" />
      <variable citdl="str" name="PENDING" />
      <variable citdl="str" name="RUNNING" />
      <scope classrefs="Error" doc="The operation exceeded the given deadline.&#10;" ilk="class" name="TimeoutError" />
      <scope doc="An iterator over the given futures that yields each as it&#10;completes." ilk="function" name="as_completed" signature="as_completed(fs, timeout=None)" />
      <import module="collections" />
      <import module="logging" />
      <import module="threading" />
      <import module="time" />
      <scope doc="Wait for the futures in the given sequence to complete." ilk="function" name="wait" signature="wait(fs, timeout=None, return_when='ALL_COMPLETED')" />
    </scope>
    <scope doc="Common operations on Posix pathnames.&#10;Instead of importing this module directly, import os and refer to this module as os.path.  The &quot;os.path&quot; name is an alias for this module on Posix systems; on other systems (e.g. Mac, Windows), os.path provides the same operations in a manner specific to that platform, and is an alias to another module (e.g. macpath, ntpath).  Some of this can actually be useful on non-Posix systems too, e.g. for manipulation of the pathname component of URLs." ilk="blob" lang="Python3" name="os.path">
      <variable citdl="list" name="__all__" />
      <scope doc="Return an absolute path." ilk="function" name="abspath" signature="abspath(path)" />
      <variable citdl="NoneType" name="altsep" />
      <scope doc="Returns the final component of a pathname" ilk="function" name="basename" signature="basename(p)" />
      <scope doc="Given a sequence of path names, returns the longest common&#10;sub-path." ilk="function" name="commonpath" signature="commonpath(paths)" />
      <scope doc="Given a list of pathnames, returns the longest common&#10;leading component" ilk="function" name="commonprefix" signature="commonprefix(m)" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <variable citdl="str" name="devnull" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <scope doc="Expand ~ and ~user constructions." ilk="function" name="expanduser" signature="expanduser(path)" />
      <scope doc="Expand shell variables of form $var and ${var}." ilk="function" name="expandvars" signature="expandvars(path)" />
      <variable citdl="str" name="extsep" />
      <import module="genericpath" />
      <scope doc="Return the last access time of a file, reported by&#10;os.stat()." ilk="function" name="getatime" signature="getatime(filename)" />
      <scope doc="Return the metadata change time of a file, reported by&#10;os.stat()." ilk="function" name="getctime" signature="getctime(filename)" />
      <scope doc="Return the last modification time of a file, reported by&#10;os.stat()." ilk="function" name="getmtime" signature="getmtime(filename)" />
      <scope doc="Return the size of a file, reported by os.stat()." ilk="function" name="getsize" signature="getsize(filename)" />
      <scope doc="Test whether a path is absolute" ilk="function" name="isabs" signature="isabs(s)" />
      <scope doc="Return true if the pathname refers to an existing directory." ilk="function" name="isdir" signature="isdir(s)" />
      <scope doc="Test whether a path is a regular file" ilk="function" name="isfile" signature="isfile(path)" />
      <scope doc="Test whether a path is a symbolic link" ilk="function" name="islink" signature="islink(path)" />
      <scope doc="Test whether a path is a mount point" ilk="function" name="ismount" signature="ismount(path)" />
      <scope doc="Join two or more pathname components, inserting '/' as&#10;needed." ilk="function" name="join" signature="join(a, *p)" />
      <scope doc="Test whether a path exists." ilk="function" name="lexists" signature="lexists(path)" />
      <scope doc="Normalize case of pathname." ilk="function" name="normcase" signature="normcase(s)" />
      <scope doc="Normalize path, eliminating double slashes, etc." ilk="function" name="normpath" signature="normpath(path)" />
      <import module="os" />
      <variable citdl="str" name="pardir" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Return the canonical path of the specified filename,&#10;eliminating any symbolic links encountered in the path." ilk="function" name="realpath" signature="realpath(filename)" />
      <scope doc="Return a relative version of a path" ilk="function" name="relpath" signature="relpath(path, start=None)" />
      <scope doc="Test whether two pathnames reference the same actual file" ilk="function" name="samefile" signature="samefile(f1, f2)" />
      <scope doc="Test whether two open file objects reference the same file" ilk="function" name="sameopenfile" signature="sameopenfile(fp1, fp2)" />
      <scope doc="Test whether two stat buffers reference the same file" ilk="function" name="samestat" signature="samestat(s1, s2)" />
      <variable citdl="str" name="sep" />
      <scope doc="Split a pathname." ilk="function" name="split" signature="split(p)" />
      <scope doc="Split a pathname into drive and path." ilk="function" name="splitdrive" signature="splitdrive(p)" />
      <scope doc="Split the extension from a pathname." ilk="function" name="splitext" signature="splitext(p)" />
      <import module="stat" />
      <variable citdl="bool" name="supports_unicode_filenames" />
      <import module="sys" />
    </scope>
    <scope doc="distutils&#10;The main package for the Python Module Distribution Utilities.  Normally used from a setup script as  from distutils.core import setup  setup (...)" ilk="blob" lang="Python3" name="distutils">
      <import module="sys" />
    </scope>
    <scope doc="Token constants (from &quot;token.h&quot;).&#10;" ilk="blob" lang="Python3" name="lib2to3.pgen2.token">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="ASYNC" />
      <variable citdl="int" name="AT" />
      <variable citdl="int" name="ATEQUAL" />
      <variable citdl="int" name="AWAIT" />
      <variable citdl="int" name="BACKQUOTE" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="COMMENT" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="int" name="OP" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="int" name="TILDE" />
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="dict" name="tok_name" />
    </scope>
    <scope doc="Fixer that changes map(F, ...) into list(map(F, ...)) unless there&#10;exists a 'from future_builtins import map' statement in the top-level namespace.  As a special case, map(None, X) is changed into list(X).  (This is necessary because the semantics are changed in this case -- the new map(None, X) is equivalent to [(x,) for x in X].)  We avoid the transformation (except for the special case mentioned above) if the map() call is directly contained in iter(&lt;&gt;), list(&lt;&gt;), tuple(&lt;&gt;), sorted(&lt;&gt;), ...join(&lt;&gt;), or for V in &lt;&gt;:." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_map">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="ConditionalFix" doc="Base class for fixers which not execute if an import is found.&#10;" ilk="class" name="FixMap">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="A list comprehension of the form [xp for fp in it if test]." ilk="function" name="ListComp" signature="ListComp(xp, fp, it, test=None)" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Returns true if node is in an environment where all that is&#10;required of it is being iterable (ie, it doesn't matter if&#10;it returns a list or an iterator)." ilk="function" name="in_special_context" signature="in_special_context(node)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Parse (absolute and relative) URLs.&#10;urlparse module is based upon the following RFC specifications.  RFC 3986 (STD66): &quot;Uniform Resource Identifiers&quot; by T. Berners-Lee, R. Fielding and L.  Masinter, January 2005.  RFC 2732 : &quot;Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter and L.Masinter, December 1999.  RFC 2396:  &quot;Uniform Resource Identifiers (URI)&quot;: Generic Syntax by T. Berners-Lee, R. Fielding, and L. Masinter, August 1998." ilk="blob" lang="Python3" name="urllib.parse">
      <scope classrefs="DefragResult _ResultMixinStr" doc="DefragResult(url, fragment)&#10;" ilk="class" name="DefragResult">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <scope classrefs="DefragResult _ResultMixinBytes" doc="DefragResult(url, fragment)&#10;" ilk="class" name="DefragResultBytes">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <variable citdl="int" name="MAX_CACHE_SIZE" />
      <scope classrefs="ParseResult _NetlocResultMixinStr" doc="ParseResult(scheme, netloc, path, params, query, fragment)&#10;" ilk="class" name="ParseResult">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <scope classrefs="ParseResult _NetlocResultMixinBytes" doc="ParseResult(scheme, netloc, path, params, query, fragment)&#10;" ilk="class" name="ParseResultBytes">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <scope classrefs="defaultdict" doc="A mapping from bytes (in range(0,256)) to strings.&#10;String values are percent-encoded byte values, unless the key &lt; 128, and in the &quot;safe&quot; set (either the specified safe set, or default set)." ilk="class" name="Quoter">
        <scope doc="safe: bytes object." ilk="function" name="__init__" signature="__init__(self, safe)" />
        <scope doc="if self.default_factory is None: raise KeyError((key,))&#10;self[key] = value = self.default_factory() return value" ilk="function" name="__missing__" signature="__missing__(key) # Called by __getitem__ for missing key; pseudo-code:" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_NetlocResultMixinBase _ResultMixinStr" doc="Shared methods for the parsed result objects containing a netloc element&#10;" ilk="class" name="ResultBase" />
      <scope classrefs="SplitResult _NetlocResultMixinStr" doc="SplitResult(scheme, netloc, path, query, fragment)&#10;" ilk="class" name="SplitResult">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <scope classrefs="SplitResult _NetlocResultMixinBytes" doc="SplitResult(scheme, netloc, path, query, fragment)&#10;" ilk="class" name="SplitResultBytes">
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Clear the parse cache and the quoters cache." ilk="function" name="clear_cache" signature="clear_cache()" />
      <import module="collections" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <variable citdl="list" name="non_hierarchical" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qs" signature="parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')" />
      <scope doc="Parse a query given as a string argument." ilk="function" name="parse_qsl" signature="parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')" />
      <scope doc="Each part of a URL, e.g." ilk="function" name="quote" signature="quote('abc def') -&gt; 'abc%20def'" />
      <scope doc="Like quote(), but accepts a bytes object rather than a str,&#10;and does not perform string-to-bytes encoding." ilk="function" name="quote_from_bytes" signature="quote_from_bytes(bs, safe='/')" />
      <scope doc="Like quote(), but also replace ' ' with '+', as required for&#10;quoting HTML form values." ilk="function" name="quote_plus" signature="quote_plus(string, safe='', encoding=None, errors=None)" />
      <import module="re" />
      <variable citdl="str" name="scheme_chars" />
      <scope doc="'/path', ['attr1=value1', 'attr2=value2', ...]." ilk="function" name="splitattr" signature="splitattr('/path;attr1=value1;attr2=value2;...') -&gt;" />
      <scope doc="splithost('//host[:port]/path') --&gt; 'host[:port]', '/path'." ilk="function" name="splithost" signature="splithost('//host[:port]/path') --&gt; 'host[:port]', '/path'." />
      <scope doc="Split host and port, returning numeric port." ilk="function" name="splitnport" signature="splitnport(host, defport=-1)" />
      <scope doc="splitpasswd('user:passwd') -&gt; 'user', 'passwd'." ilk="function" name="splitpasswd" signature="splitpasswd('user:passwd') -&gt; 'user', 'passwd'." />
      <scope doc="splitport('host:port') --&gt; 'host', 'port'." ilk="function" name="splitport" signature="splitport('host:port') --&gt; 'host', 'port'." />
      <scope doc="splitquery('/path?query') --&gt; '/path', 'query'." ilk="function" name="splitquery" signature="splitquery('/path?query') --&gt; '/path', 'query'." />
      <scope doc="splittag('/path#tag') --&gt; '/path', 'tag'." ilk="function" name="splittag" signature="splittag('/path#tag') --&gt; '/path', 'tag'." />
      <scope doc="splittype('type:opaquestring') --&gt; 'type', 'opaquestring'." ilk="function" name="splittype" signature="splittype('type:opaquestring') --&gt; 'type', 'opaquestring'." />
      <scope doc="splituser('user[:passwd]@host[:port]') --&gt; 'user[:passwd]', 'host[:port]'." ilk="function" name="splituser" signature="splituser('user[:passwd]@host[:port]') --&gt; 'user[:passwd]', 'host[:port]'." />
      <scope doc="splitvalue('attr=value') --&gt; 'attr', 'value'." ilk="function" name="splitvalue" signature="splitvalue('attr=value') --&gt; 'attr', 'value'." />
      <import module="sys" />
      <scope doc="to_bytes(u&quot;URL&quot;) --&gt; 'URL'." ilk="function" name="to_bytes" signature="to_bytes(u&quot;URL&quot;) --&gt; 'URL'." />
      <scope doc="Replace %xx escapes by their single-character equivalent." ilk="function" name="unquote" signature="unquote(string, encoding='utf-8', errors='replace')" />
      <scope doc="Like unquote(), but also replace plus signs by spaces, as&#10;required for unquoting HTML form values." ilk="function" name="unquote_plus" signature="unquote_plus(string, encoding='utf-8', errors='replace')" />
      <scope doc="unquote_to_bytes('abc%20def') -&gt; b'abc def'." ilk="function" name="unquote_to_bytes" signature="unquote_to_bytes('abc%20def') -&gt; b'abc def'." />
      <scope doc="unwrap('&lt;URL:type://host/path&gt;') --&gt; 'type://host/path'." ilk="function" name="unwrap" signature="unwrap('&lt;URL:type://host/path&gt;') --&gt; 'type://host/path'." />
      <scope doc="Removes any existing fragment from URL." ilk="function" name="urldefrag" signature="urldefrag(url)" />
      <scope doc="Encode a dict or sequence of two-element tuples into a URL&#10;query string." ilk="function" name="urlencode" signature="urlencode(query, doseq=False, safe='', encoding=None, errors=None, quote_via=&lt;function quote_plus at 0x7f1185c9eae8&gt;)" />
      <scope doc="Join a base URL and a possibly relative URL to form an&#10;absolute interpretation of the latter." ilk="function" name="urljoin" signature="urljoin(base, url, allow_fragments=True)" />
      <scope doc="Parse a URL into 6 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;fragment&gt;&#10;Return a 6-tuple: (scheme, netloc, path, params, query,&#10;fragment)." ilk="function" name="urlparse" signature="urlparse(url, scheme='', allow_fragments=True)" />
      <scope doc="Parse a URL into 5 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a&#10;5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme='', allow_fragments=True)" />
      <scope doc="Put a parsed URL back together again." ilk="function" name="urlunparse" signature="urlunparse(components)" />
      <scope doc="Combine the elements of a tuple as returned by urlsplit()&#10;into a complete URL as a string." ilk="function" name="urlunsplit" signature="urlunsplit(components)" />
      <variable citdl="list" name="uses_fragment" />
      <variable citdl="list" name="uses_netloc" />
      <variable citdl="list" name="uses_params" />
      <variable citdl="list" name="uses_query" />
      <variable citdl="list" name="uses_relative" />
    </scope>
    <scope doc="Built-in functions, exceptions, and other objects.&#10;Noteworthy: None is the `nil' object; Ellipsis represents `...' in slices." ilk="blob" lang="Python3" name="builtins">
      <scope classrefs="Exception" doc="Base class for arithmetic errors.&#10;" ilk="class" name="ArithmeticError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Assertion failed.&#10;" ilk="class" name="AssertionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Attribute not found.&#10;" ilk="class" name="AttributeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="object" doc="Common base class for all exceptions&#10;" ilk="class" name="BaseException">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="set self.__traceback__ to tb and return self." ilk="function" name="with_traceback" signature="Exception.with_traceback(tb) --" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="OSError" doc="I/O operation would block.&#10;" ilk="class" name="BlockingIOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Broken pipe.&#10;" ilk="class" name="BrokenPipeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Buffer error.&#10;" ilk="class" name="BufferError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about bytes and buffer related problems, mostly&#10;related to conversion from str or comparing to str." ilk="class" name="BytesWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Child process error.&#10;" ilk="class" name="ChildProcessError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection aborted.&#10;" ilk="class" name="ConnectionAbortedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Connection error.&#10;" ilk="class" name="ConnectionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection refused.&#10;" ilk="class" name="ConnectionRefusedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ConnectionError" doc="Connection reset.&#10;" ilk="class" name="ConnectionResetError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about deprecated features.&#10;" ilk="class" name="DeprecationWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Read beyond end of file.&#10;" ilk="class" name="EOFError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="ellipsis" name="Ellipsis" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="EnvironmentError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="BaseException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Exception">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="bool" name="False" />
      <scope classrefs="OSError" doc="File already exists.&#10;" ilk="class" name="FileExistsError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="File not found.&#10;" ilk="class" name="FileNotFoundError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Floating point operation failed.&#10;" ilk="class" name="FloatingPointError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about constructs that will change semantically&#10;in the future." ilk="class" name="FutureWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="BaseException" doc="Request that a generator exit.&#10;" ilk="class" name="GeneratorExit">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="IOError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="Exception" doc="Import can't find module, or can't find name in module.&#10;" ilk="class" name="ImportError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about probable mistakes in module imports&#10;" ilk="class" name="ImportWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="SyntaxError" doc="Improper indentation.&#10;" ilk="class" name="IndentationError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="LookupError" doc="Sequence index out of range.&#10;" ilk="class" name="IndexError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Interrupted by signal.&#10;" ilk="class" name="InterruptedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Operation doesn't work on directories.&#10;" ilk="class" name="IsADirectoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="LookupError" doc="Mapping key not found.&#10;" ilk="class" name="KeyError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="BaseException" doc="Program interrupted by user.&#10;" ilk="class" name="KeyboardInterrupt">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for lookup errors.&#10;" ilk="class" name="LookupError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Out of memory.&#10;" ilk="class" name="MemoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Name not found globally.&#10;" ilk="class" name="NameError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="NoneType" name="None" />
      <scope classrefs="OSError" doc="Operation only works on directories.&#10;" ilk="class" name="NotADirectoryError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="NotImplementedType" name="NotImplemented" />
      <scope classrefs="RuntimeError" doc="Method or function hasn't been implemented yet.&#10;" ilk="class" name="NotImplementedError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="OSError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Result too large to be represented.&#10;" ilk="class" name="OverflowError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about features which will be deprecated&#10;in the future." ilk="class" name="PendingDeprecationWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Not enough permissions.&#10;" ilk="class" name="PermissionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Process not found.&#10;" ilk="class" name="ProcessLookupError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="RuntimeError" doc="Recursion limit exceeded.&#10;" ilk="class" name="RecursionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Weak ref proxy used after referent went away.&#10;" ilk="class" name="ReferenceError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about resource usage.&#10;" ilk="class" name="ResourceWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="RuntimeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about dubious runtime behavior.&#10;" ilk="class" name="RuntimeWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Signal the end from iterator.__anext__().&#10;" ilk="class" name="StopAsyncIteration">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Signal the end from iterator.__next__().&#10;" ilk="class" name="StopIteration">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Invalid syntax.&#10;" ilk="class" name="SyntaxError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about dubious syntax.&#10;" ilk="class" name="SyntaxWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Internal error in the Python interpreter.&#10;Please report this to the Python maintainer, along with the traceback, the Python version, and the hardware/OS platform and version." ilk="class" name="SystemError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="BaseException" doc="Request to exit from the interpreter.&#10;" ilk="class" name="SystemExit">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="IndentationError" doc="Improper mixture of spaces and tabs.&#10;" ilk="class" name="TabError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="OSError" doc="Timeout expired.&#10;" ilk="class" name="TimeoutError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <variable citdl="bool" name="True" />
      <scope classrefs="Exception" doc="Inappropriate argument type.&#10;" ilk="class" name="TypeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="NameError" doc="Local name referenced but not bound to a value.&#10;" ilk="class" name="UnboundLocalError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode decoding error.&#10;" ilk="class" name="UnicodeDecodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode encoding error.&#10;" ilk="class" name="UnicodeEncodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="ValueError" doc="Unicode related error.&#10;" ilk="class" name="UnicodeError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="UnicodeError" doc="Unicode translation error.&#10;" ilk="class" name="UnicodeTranslateError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings about Unicode related problems, mostly&#10;related to conversion problems." ilk="class" name="UnicodeWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Warning" doc="Base class for warnings generated by user code.&#10;" ilk="class" name="UserWarning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="ValueError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="Exception" doc="Base class for warning categories.&#10;" ilk="class" name="Warning">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Second argument to a division or modulo operation was zero.&#10;" ilk="class" name="ZeroDivisionError">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="Internal helper function used by the class statement." ilk="function" name="__build_class__" signature="__build_class__(func, name, *bases, metaclass=None, **kwds) -&gt; class" />
      <variable citdl="bool" name="__debug__" />
      <scope doc="Import a module." ilk="function" name="__import__" returns="module" signature="__import__(name, globals=None, locals=None, fromlist=(), level=0) -&gt; module" />
      <scope doc="Return the absolute value of the argument." ilk="function" name="abs" />
      <scope doc="Return True if bool(x) is True for all values x in the&#10;iterable." ilk="function" name="all" />
      <scope doc="Return True if bool(x) is True for any x in the iterable." ilk="function" name="any" />
      <scope doc="Return an ASCII-only representation of an object." ilk="function" name="ascii" />
      <scope doc="Return the binary representation of an integer." ilk="function" name="bin" />
      <scope classrefs="int" doc="bool(x) -&gt; bool&#10;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="bool">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope classrefs="object" doc="bytearray(iterable_of_ints) -&gt; bytearray&#10;bytearray(string, encoding[, errors]) -&gt; bytearray bytearray(bytes_or_buffer) -&gt; mutable copy of bytes_or_buffer bytearray(int) -&gt; bytes array of size given by the parameter initialized with null bytes bytearray() -&gt; empty bytes array  Construct an mutable bytearray object from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - a bytes or a buffer object - any object implementing the buffer API." ilk="class" name="bytearray">
        <scope doc="Remove all items from the bytearray." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return the lowest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end]." ilk="function" name="find" returns="int" signature="B.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="B.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa." ilk="function" name="swapcase" signature="B.swapcase() -&gt; copy of B" />
        <scope doc="Strip trailing bytes contained in the argument." ilk="function" name="rstrip" />
        <scope doc="Partition the bytearray into three parts using the given&#10;separator." ilk="function" name="partition" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;uppercase." ilk="function" name="upper" signature="B.upper() -&gt; copy of B" />
        <scope doc="Decode the bytearray using the codec registered for&#10;encoding." ilk="function" name="decode" />
        <scope doc="Return True if all cased characters in B are lowercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="islower" returns="bool" signature="B.islower() -&gt; bool" />
        <scope doc="Return a list of the sections in the bytearray, using sep as&#10;the delimiter." ilk="function" name="rsplit" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Strip leading and trailing bytes contained in the argument." ilk="function" name="strip" />
        <scope doc="Return a titlecased version of B, i.e." ilk="function" name="title" signature="B.title() -&gt; copy of B" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Append all the items from the iterator or sequence to the&#10;end of the bytearray." ilk="function" name="extend" />
        <scope doc="Reverse the order of the values in B in place." ilk="function" name="reverse" />
        <scope doc="Return a copy of B with only its first character capitalized&#10;(ASCII) and the rest lower-cased." ilk="function" name="capitalize" signature="B.capitalize() -&gt; copy of B" />
        <scope doc="Return True if all characters in B are alphabetic and there&#10;is at least one character in B, False otherwise." ilk="function" name="isalpha" returns="bool" signature="B.isalpha() -&gt; bool" />
        <scope doc="Like B.rfind() but raise ValueError when the subsection is&#10;not found." ilk="function" name="rindex" returns="int" signature="B.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of B where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" signature="B.expandtabs(tabsize=8) -&gt; copy of B" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;subsection sub in bytes B[start:end]." ilk="function" name="count" returns="int" signature="B.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="rpartition" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return a single item from B." ilk="function" name="pop" />
        <scope doc="Append a single item to the end of the bytearray." ilk="function" name="append" />
        <scope doc="Return B centered in a string of length width." ilk="function" name="center" signature="B.center(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Returns the size of the bytearray object in memory, in&#10;bytes." ilk="function" name="__sizeof__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce_ex__" />
        <scope doc="Return a copy with each character mapped by the given&#10;translation table." ilk="function" name="translate" signature="translate(table, [deletechars])" />
        <scope doc="Return True if all characters in B are alphanumeric and&#10;there is at least one character in B, False otherwise." ilk="function" name="isalnum" returns="bool" signature="B.isalnum() -&gt; bool" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;lowercase." ilk="function" name="lower" signature="B.lower() -&gt; copy of B" />
        <scope doc="Return a list of the sections in the bytearray, using sep as&#10;the delimiter." ilk="function" name="split" />
        <scope doc="Strip leading bytes contained in the argument." ilk="function" name="lstrip" />
        <scope doc="Return True if all characters in B are digits and there is&#10;at least one character in B, False otherwise." ilk="function" name="isdigit" returns="bool" signature="B.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in B are uppercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="isupper" returns="bool" signature="B.isupper() -&gt; bool" />
        <scope doc="Like B.find() but raise ValueError when the subsection is&#10;not found." ilk="function" name="index" returns="int" signature="B.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return B right justified in a string of length width." ilk="function" name="rjust" signature="B.rjust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return True if B starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="B.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return a copy with all occurrences of substring old replaced&#10;by new." ilk="function" name="replace" />
        <scope doc="Return B left justified in a string of length width." ilk="function" name="ljust" signature="B.ljust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return the number of bytes actually allocated." ilk="function" name="__alloc__" returns="int" signature="B.__alloc__() -&gt; int" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return True if B is a titlecased string and there is at&#10;least one character in B, i.e." ilk="function" name="istitle" returns="bool" signature="B.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string B with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" signature="B.zfill(width) -&gt; copy of B" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Concatenate any number of bytes/bytearray objects." ilk="function" name="join" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in the bytearray, breaking at&#10;line boundaries." ilk="function" name="splitlines" />
        <scope doc="Return a copy of B." ilk="function" name="copy" />
        <scope doc="Return True if all characters in B are whitespace and there&#10;is at least one character in B, False otherwise." ilk="function" name="isspace" returns="bool" signature="B.isspace() -&gt; bool" />
        <scope doc="Return the highest index in B where subsection sub is found,&#10;such that sub is contained within B[start,end]." ilk="function" name="rfind" returns="int" signature="B.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Create a string of hexadecimal numbers from a bytearray&#10;object." ilk="function" name="hex" returns="str" signature="B.hex() -&gt; string" />
        <scope doc="Remove the first occurrence of a value in the bytearray." ilk="function" name="remove" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Insert a single item into the bytearray before the given&#10;index." ilk="function" name="insert" />
      </scope>
      <scope classrefs="object" doc="bytes(iterable_of_ints) -&gt; bytes&#10;bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes bytes() -&gt; empty bytes object  Construct an immutable array of bytes from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - any object implementing the buffer API. - an integer" ilk="class" name="bytes">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return the lowest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="find" returns="int" signature="B.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="B.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Strip trailing bytes contained in the argument." ilk="function" name="rstrip" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="partition" />
        <scope doc="Return a copy of B with only its first character capitalized&#10;(ASCII) and the rest lower-cased." ilk="function" name="capitalize" signature="B.capitalize() -&gt; copy of B" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;uppercase." ilk="function" name="upper" signature="B.upper() -&gt; copy of B" />
        <scope doc="Decode the bytes using the codec registered for encoding." ilk="function" name="decode" />
        <scope doc="Return True if all cased characters in B are lowercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="islower" returns="bool" signature="B.islower() -&gt; bool" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="rsplit" />
        <scope doc="Strip leading and trailing bytes contained in the argument." ilk="function" name="strip" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return B right justified in a string of length width." ilk="function" name="rjust" signature="B.rjust(width[, fillchar]) -&gt; copy of B" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if all characters in B are alphabetic and there&#10;is at least one character in B, False otherwise." ilk="function" name="isalpha" returns="bool" signature="B.isalpha() -&gt; bool" />
        <scope doc="Like B.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="B.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of B where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" signature="B.expandtabs(tabsize=8) -&gt; copy of B" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string B[start:end]." ilk="function" name="count" returns="int" signature="B.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Partition the bytes into three parts using the given&#10;separator." ilk="function" name="rpartition" />
        <scope doc="Return B left justified in a string of length width." ilk="function" name="ljust" signature="B.ljust(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return B centered in a string of length width." ilk="function" name="center" signature="B.center(width[, fillchar]) -&gt; copy of B" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of B with uppercase ASCII characters converted&#10;to lowercase ASCII and vice versa." ilk="function" name="swapcase" signature="B.swapcase() -&gt; copy of B" />
        <scope doc="Return a titlecased version of B, i.e." ilk="function" name="title" signature="B.title() -&gt; copy of B" />
        <scope doc="Return a copy with each character mapped by the given&#10;translation table." ilk="function" name="translate" signature="translate(table, [deletechars])" />
        <scope doc="Return True if all characters in B are alphanumeric and&#10;there is at least one character in B, False otherwise." ilk="function" name="isalnum" returns="bool" signature="B.isalnum() -&gt; bool" />
        <scope doc="Return a copy of B with all ASCII characters converted to&#10;lowercase." ilk="function" name="lower" signature="B.lower() -&gt; copy of B" />
        <scope doc="Return a list of the sections in the bytes, using sep as the&#10;delimiter." ilk="function" name="split" />
        <scope doc="Strip leading bytes contained in the argument." ilk="function" name="lstrip" />
        <scope doc="Return True if all characters in B are digits and there is&#10;at least one character in B, False otherwise." ilk="function" name="isdigit" returns="bool" signature="B.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in B are uppercase and&#10;there is at least one cased character in B, False otherwise." ilk="function" name="isupper" returns="bool" signature="B.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like B.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="B.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if B starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="B.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return a copy with all occurrences of substring old replaced&#10;by new." ilk="function" name="replace" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if B is a titlecased string and there is at&#10;least one character in B, i.e." ilk="function" name="istitle" returns="bool" signature="B.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string B with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" signature="B.zfill(width) -&gt; copy of B" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Concatenate any number of bytes objects." ilk="function" name="join" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in the bytes, breaking at line&#10;boundaries." ilk="function" name="splitlines" />
        <scope doc="Return True if all characters in B are whitespace and there&#10;is at least one character in B, False otherwise." ilk="function" name="isspace" returns="bool" signature="B.isspace() -&gt; bool" />
        <scope doc="Return the highest index in B where substring sub is found,&#10;such that sub is contained within B[start:end]." ilk="function" name="rfind" returns="int" signature="B.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Create a string of hexadecimal numbers from a bytes object." ilk="function" name="hex" returns="str" signature="B.hex() -&gt; string" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="Return whether the object is callable (i.e., some kind of&#10;function)." ilk="function" name="callable" />
      <scope doc="Return a Unicode string of one character with ordinal i; 0&#10;&lt;= i &lt;= 0x10ffff." ilk="function" name="chr" />
      <scope classrefs="object" doc="classmethod(function) -&gt; method&#10;Convert a function to be a class method.  A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom:  class C: def f(cls, arg1, arg2, ...): ... f = classmethod(f) " ilk="class" name="classmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope doc="Compile source into a code object that can be executed by&#10;exec() or eval()." ilk="function" name="compile" />
      <scope classrefs="object" doc="complex(real[, imag]) -&gt; complex number&#10;Create a complex number from a real part and an optional imaginary part. This is equivalent to (real + imag*1j) where imag defaults to 0." ilk="class" name="complex">
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Convert to a string according to format_spec." ilk="function" name="__format__" returns="str" signature="complex.__format__() -&gt; str" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the complex conjugate of its argument." ilk="function" name="conjugate" returns="complex" signature="complex.conjugate() -&gt; complex" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <variable citdl="_Printer" name="copyright" />
      <variable citdl="_Printer" name="credits" />
      <scope doc="Deletes the named attribute from the given object." ilk="function" name="delattr" />
      <scope classrefs="object" doc="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="dict">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope doc="True if D has a key k, else False." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised" ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="If called without an argument, return the names in the&#10;current scope." ilk="function" name="dir" returns="list" signature="dir([object]) -&gt; list of strings" />
      <scope doc="Return the tuple ((x-x%y)/y, x%y)." ilk="function" name="divmod" />
      <scope classrefs="object" doc="enumerate(iterable[, start]) -&gt; iterator for index, value of iterable&#10;Return an enumerate object.  iterable must be another object that supports iteration.  The enumerate object yields pairs containing a count (from start, which defaults to zero) and a value yielded by the iterable argument. enumerate is useful for obtaining an indexed list: (0, seq[0]), (1, seq[1]), (2, seq[2]), ..." ilk="class" name="enumerate">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Evaluate the given source in the context of globals and&#10;locals." ilk="function" name="eval" />
      <scope doc="Execute the given source in the context of globals and&#10;locals." ilk="function" name="exec" />
      <variable citdl="Quitter" name="exit" />
      <scope classrefs="object" doc="filter(function or None, iterable) --&gt; filter object&#10;Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true." ilk="class" name="filter">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="float(x) -&gt; floating point number&#10;Convert a string or number to a floating point number, if possible." ilk="class" name="float">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Formats the float according to format_spec." ilk="function" name="__format__" returns="str" signature="float.__format__(format_spec) -&gt; string" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return the Integral closest to x between 0 and x." ilk="function" name="__trunc__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return the Integral closest to x, rounding half toward even." ilk="function" name="__round__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return True if the float is an integer." ilk="function" name="is_integer" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a pair of integers, whose ratio is exactly equal to&#10;the original float and with a positive denominator." ilk="function" name="as_integer_ratio" signature="float.as_integer_ratio() -&gt; (int, int)" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return self, the complex conjugate of any float." ilk="function" name="conjugate" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return a hexadecimal representation of a floating-point&#10;number." ilk="function" name="hex" returns="str" signature="float.hex() -&gt; string" />
      </scope>
      <scope doc="Return value.__format__(format_spec)" ilk="function" name="format" />
      <scope classrefs="object" doc="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object  Build an immutable unordered collection of unique elements." ilk="class" name="frozenset">
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope doc="Get a named attribute from an object; getattr(x, 'y') is&#10;equivalent to x.y." ilk="function" name="getattr" signature="getattr(object, name[, default]) -&gt; value" />
      <scope doc="Return the dictionary containing the current scope's global&#10;variables." ilk="function" name="globals" />
      <scope doc="Return whether the object has an attribute with the given&#10;name." ilk="function" name="hasattr" />
      <scope doc="Return the hash value for the given object." ilk="function" name="hash" />
      <variable citdl="_Helper" name="help" />
      <scope doc="Return the hexadecimal representation of an integer." ilk="function" name="hex" />
      <scope doc="Return the identity of an object." ilk="function" name="id" />
      <scope doc="Read a string from standard input." ilk="function" name="input" />
      <scope classrefs="object" doc="int(x=0) -&gt; integer&#10;int(x, base=10) -&gt; integer  Convert a number or string to an integer, or return 0 if no arguments are given.  If x is a number, return x.__int__().  For floating point numbers, this truncates towards zero.  If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in the given base.  The literal can be preceded by '+' or '-' and be surrounded by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36." ilk="class" name="int">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Truncating an Integral returns itself." ilk="function" name="__trunc__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Number of bits necessary to represent self in binary." ilk="function" name="bit_length" returns="int" signature="int.bit_length() -&gt; int" />
        <scope doc="Return an array of bytes representing an integer." ilk="function" name="to_bytes" signature="int.to_bytes(length, byteorder, *, signed=False) -&gt; bytes" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Rounding an Integral returns itself." ilk="function" name="__round__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Returns self, the complex conjugate of any int." ilk="function" name="conjugate" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Returns size in memory, in bytes" ilk="function" name="__sizeof__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Flooring an Integral returns itself." ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="Ceiling of an Integral returns itself." ilk="function" name="__ceil__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <scope doc="Return whether an object is an instance of a class or of a&#10;subclass thereof." ilk="function" name="isinstance" />
      <scope doc="Return whether 'cls' is a derived from another class or is&#10;the same class." ilk="function" name="issubclass" />
      <scope doc="Get an iterator from an object." ilk="function" name="iter" signature="iter(iterable) -&gt; iterator&#10;iter(callable, sentinel) -&gt; iterator" />
      <scope doc="Return the number of items in a container." ilk="function" name="len" />
      <variable citdl="_Printer" name="license" />
      <scope classrefs="object" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="list">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="L.reverse()" />
        <scope doc="L.clear() -&gt; None -- remove all items from L" ilk="function" name="clear" signature="L.clear() -&gt; None -- remove all items from L" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="x.__getitem__(y) &lt;==&gt; x[y]" ilk="function" name="__getitem__" signature="x.__getitem__(y) &lt;==&gt; x[y]" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" ilk="function" name="sort" signature="L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE*" />
        <scope doc="return a reverse iterator over the list" ilk="function" name="__reversed__" signature="L.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="L.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="L.copy() -&gt; list -- a shallow copy of L" ilk="function" name="copy" returns="list" signature="L.copy() -&gt; list -- a shallow copy of L" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" ilk="function" name="extend" signature="L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="L.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="L.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Raises IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="L.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope doc="L.append(object) -&gt; None -- append object to end" ilk="function" name="append" signature="L.append(object) -&gt; None -- append object to end" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="size of L in memory, in bytes" ilk="function" name="__sizeof__" signature="L.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="L.insert(index, object)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="remove" signature="L.remove(value) -&gt; None -- remove first occurrence of value." />
      </scope>
      <scope doc="Return a dictionary containing the current scope's local&#10;variables." ilk="function" name="locals" />
      <scope classrefs="object" doc="map(func, *iterables) --&gt; map object&#10;Make an iterator that computes the function using arguments from each of the iterables.  Stops when the shortest iterable is exhausted." ilk="class" name="map">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="With a single iterable argument, return its biggest item." ilk="function" name="max" signature="max(iterable, *[, default=obj, key=func]) -&gt; value&#10;max(arg1, arg2, *args, *[, key=func]) -&gt; value" />
      <scope classrefs="object" doc="Create a new memoryview object which references the given object.&#10;" ilk="class" name="memoryview">
        <scope ilk="function" name="__exit__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return the data in the buffer as a byte string." ilk="function" name="tobytes" />
        <scope ilk="function" name="__enter__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Cast a memoryview to a new format or shape." ilk="function" name="cast" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Release the underlying buffer exposed by the memoryview&#10;object." ilk="function" name="release" />
        <scope doc="Return the data in the buffer as a list of elements." ilk="function" name="tolist" />
        <scope doc="Return the data in the buffer as a string of hexadecimal&#10;numbers." ilk="function" name="hex" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="With a single iterable argument, return its smallest item." ilk="function" name="min" signature="min(iterable, *[, default=obj, key=func]) -&gt; value&#10;min(arg1, arg2, *args, *[, key=func]) -&gt; value" />
      <scope doc="Return the next item from the iterator." ilk="function" name="next" signature="next(iterator[, default])" />
      <scope doc="The most base type&#10;" ilk="class" name="object">
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
      </scope>
      <scope doc="Return the octal representation of an integer." ilk="function" name="oct" />
      <scope doc="Open file and return a stream. Raise IOError upon failure." ilk="function" name="open" />
      <scope doc="Return the Unicode code point for a one-character string." ilk="function" name="ord" />
      <scope doc="Equivalent to x**y (with two arguments) or x**y % z (with&#10;three arguments)" ilk="function" name="pow" />
      <scope doc="Prints the values to a stream, or to sys.stdout by default." ilk="function" name="print" signature="print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)" />
      <scope classrefs="object" doc="property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute&#10;fget is a function to be used for getting an attribute value, and likewise fset is a function for setting, and fdel a function for del'ing, an attribute.  Typical use is to define a managed attribute x:  class C(object): def getx(self): return self._x def setx(self, value): self._x = value def delx(self): del self._x x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;) " ilk="class" name="property">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Descriptor to change the deleter on a property." ilk="function" name="deleter" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
        <scope doc="Descriptor to change the setter on a property." ilk="function" name="setter" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Descriptor to change the getter on a property." ilk="function" name="getter" />
      </scope>
      <variable citdl="Quitter" name="quit" />
      <scope classrefs="object" doc="range(stop) -&gt; range object&#10;range(start, stop[, step]) -&gt; range object  Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1. start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements. When step is given, it specifies the increment (or decrement)." ilk="class" name="range">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Raise ValueError if the value is not present." ilk="function" name="index" returns="int" signature="rangeobject.index(value, [start, [stop]]) -&gt; integer -- return index of value." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return a reverse iterator." ilk="function" name="__reversed__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="rangeobject.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="rangeobject.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
      </scope>
      <scope doc="Return the canonical string representation of the object." ilk="function" name="repr" />
      <scope classrefs="object" doc="reversed(sequence) -&gt; reverse iterator over values of the sequence&#10;Return a reverse iterator" ilk="class" name="reversed">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Round a number to a given precision in decimal digits&#10;(default 0 digits)." ilk="function" name="round" returns="int" signature="round(number[, ndigits]) -&gt; number" />
      <scope classrefs="object" doc="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" name="set">
        <scope doc="Remove all elements from this set." ilk="function" name="clear" />
        <scope doc="x.__contains__(y) &lt;==&gt; y in x." ilk="function" name="__contains__" signature="x.__contains__(y) &lt;==&gt; y in x." />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Update a set with the symmetric difference of itself and&#10;another." ilk="function" name="symmetric_difference_update" />
        <scope doc="Return the union of sets as a new set." ilk="function" name="union" />
        <scope doc="Remove all elements of another set from this set." ilk="function" name="difference_update" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return the difference of two or more sets as a new set." ilk="function" name="difference" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return the symmetric difference of two sets as a new set." ilk="function" name="symmetric_difference" />
        <scope doc="Remove an element from a set; it must be a member." ilk="function" name="remove" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Report whether this set contains another set." ilk="function" name="issuperset" />
        <scope doc="Update a set with the intersection of itself and another." ilk="function" name="intersection_update" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return the intersection of two sets as a new set." ilk="function" name="intersection" />
        <scope doc="Add an element to a set." ilk="function" name="add" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Update a set with the union of itself and others." ilk="function" name="update" />
        <scope doc="Return a shallow copy of a set." ilk="function" name="copy" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Report whether another set contains this set." ilk="function" name="issubset" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Remove and return an arbitrary set element." ilk="function" name="pop" />
        <scope doc="Remove an element from a set if it is a member." ilk="function" name="discard" />
      </scope>
      <scope doc="Sets the named attribute on the given object to the&#10;specified value." ilk="function" name="setattr" />
      <scope classrefs="object" doc="slice(stop)&#10;slice(start, stop[, step])  Create a slice object.  This is used for extended slicing (e.g. a[0:10:2])." ilk="class" name="slice">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Assuming a sequence of length len, calculate the start and&#10;stop indices, and the stride length of the extended slice&#10;described by S." ilk="function" name="indices" signature="S.indices(len) -&gt; (start, stop, stride)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Return a new list containing all items from the iterable in&#10;ascending order." ilk="function" name="sorted" />
      <scope classrefs="object" doc="staticmethod(function) -&gt; method&#10;Convert a function to be a static method.  A static method does not receive an implicit first argument. To declare a static method, use this idiom:  class C: def f(arg1, arg2, ...): ... f = staticmethod(f)  It can be called either on the class (e.g. C.f()) or on an instance" ilk="class" name="staticmethod">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="object" doc="str(object='') -&gt; str&#10;str(bytes_or_buffer[, encoding[, errors]]) -&gt; str  Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'." ilk="class" name="str">
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return the lowest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="find" returns="int" signature="S.find(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if S ends with the specified suffix, False&#10;otherwise." ilk="function" name="endswith" returns="bool" signature="S.endswith(suffix[, start[, end]]) -&gt; bool" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;mapping." ilk="function" name="format_map" returns="str" signature="S.format_map(mapping) -&gt; str" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return a copy of the string S with trailing whitespace&#10;removed." ilk="function" name="rstrip" returns="str" signature="S.rstrip([chars]) -&gt; str" />
        <scope doc="Search for the separator sep in S, and return the part&#10;before it, the separator itself, and the part after it." ilk="function" name="partition" signature="S.partition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return a capitalized version of S, i.e." ilk="function" name="capitalize" returns="str" signature="S.capitalize() -&gt; str" />
        <scope doc="Return a version of S suitable for caseless comparisons." ilk="function" name="casefold" returns="str" signature="S.casefold() -&gt; str" />
        <scope doc="Return True if there are only numeric characters in S, False&#10;otherwise." ilk="function" name="isnumeric" returns="bool" signature="S.isnumeric() -&gt; bool" />
        <scope doc="Return a copy of S converted to uppercase." ilk="function" name="upper" returns="str" signature="S.upper() -&gt; str" />
        <scope doc="Return S right-justified in a string of length width." ilk="function" name="rjust" returns="str" signature="S.rjust(width[, fillchar]) -&gt; str" />
        <scope doc="Return True if all cased characters in S are lowercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="islower" returns="bool" signature="S.islower() -&gt; bool" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string, starting at the end of the string and working to the&#10;front." ilk="function" name="rsplit" returns="list" signature="S.rsplit(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading and trailing&#10;whitespace removed." ilk="function" name="strip" returns="str" signature="S.strip([chars]) -&gt; str" />
        <scope doc="Return a copy of S with all occurrences of substring old&#10;replaced by new." ilk="function" name="replace" returns="str" signature="S.replace(old, new[, count]) -&gt; str" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return a formatted version of S as described by format_spec." ilk="function" name="__format__" returns="str" signature="S.__format__(format_spec) -&gt; str" />
        <scope doc="Encode S using the codec registered for encoding." ilk="function" name="encode" signature="S.encode(encoding='utf-8', errors='strict') -&gt; bytes" />
        <scope doc="Return True if all characters in S are alphabetic and there&#10;is at least one character in S, False otherwise." ilk="function" name="isalpha" returns="bool" signature="S.isalpha() -&gt; bool" />
        <scope doc="Like S.rfind() but raise ValueError when the substring is&#10;not found." ilk="function" name="rindex" returns="int" signature="S.rindex(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return a copy of S where all tab characters are expanded&#10;using spaces." ilk="function" name="expandtabs" returns="str" signature="S.expandtabs(tabsize=8) -&gt; str" />
        <scope doc="Return the number of non-overlapping occurrences of&#10;substring sub in string S[start:end]." ilk="function" name="count" returns="int" signature="S.count(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if there are only decimal characters in S, False&#10;otherwise." ilk="function" name="isdecimal" returns="bool" signature="S.isdecimal() -&gt; bool" />
        <scope doc="Search for the separator sep in S, starting at the end of S,&#10;and return the part before it, the separator itself, and the&#10;part after it." ilk="function" name="rpartition" signature="S.rpartition(sep) -&gt; (head, sep, tail)" />
        <scope doc="Return S left-justified in a Unicode string of length width." ilk="function" name="ljust" returns="str" signature="S.ljust(width[, fillchar]) -&gt; str" />
        <scope doc="Return S centered in a string of length width." ilk="function" name="center" returns="str" signature="S.center(width[, fillchar]) -&gt; str" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a copy of S with uppercase characters converted to&#10;lowercase and vice versa." ilk="function" name="swapcase" returns="str" signature="S.swapcase() -&gt; str" />
        <scope doc="Return a titlecased version of S, i.e." ilk="function" name="title" returns="str" signature="S.title() -&gt; str" />
        <scope doc="Return a copy of the string S in which each character has&#10;been mapped through the given translation table." ilk="function" name="translate" returns="str" signature="S.translate(table) -&gt; str" />
        <scope doc="Return True if all characters in S are considered printable&#10;in repr() or S is empty, False otherwise." ilk="function" name="isprintable" returns="bool" signature="S.isprintable() -&gt; bool" />
        <scope doc="Return a copy of the string S converted to lowercase." ilk="function" name="lower" returns="str" signature="S.lower() -&gt; str" />
        <scope doc="Return a list of the words in S, using sep as the delimiter&#10;string." ilk="function" name="split" returns="list" signature="S.split(sep=None, maxsplit=-1) -&gt; list of strings" />
        <scope doc="Return a copy of the string S with leading whitespace&#10;removed." ilk="function" name="lstrip" returns="str" signature="S.lstrip([chars]) -&gt; str" />
        <scope doc="S.__sizeof__() -&gt; size of S in memory, in bytes" ilk="function" name="__sizeof__" signature="S.__sizeof__() -&gt; size of S in memory, in bytes" />
        <scope doc="Return True if all characters in S are digits and there is&#10;at least one character in S, False otherwise." ilk="function" name="isdigit" returns="bool" signature="S.isdigit() -&gt; bool" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return True if all cased characters in S are uppercase and&#10;there is at least one cased character in S, False otherwise." ilk="function" name="isupper" returns="bool" signature="S.isupper() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Like S.find() but raise ValueError when the substring is not&#10;found." ilk="function" name="index" returns="int" signature="S.index(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return True if S is a titlecased string and there is at&#10;least one character in S, i.e." ilk="function" name="istitle" returns="bool" signature="S.istitle() -&gt; bool" />
        <scope doc="Pad a numeric string S with zeros on the left, to fill a&#10;field of the specified width." ilk="function" name="zfill" returns="str" signature="S.zfill(width) -&gt; str" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return a formatted version of S, using substitutions from&#10;args and kwargs." ilk="function" name="format" returns="str" signature="S.format(*args, **kwargs) -&gt; str" />
        <scope doc="Return True if S is a valid identifier according to the&#10;language definition." ilk="function" name="isidentifier" returns="bool" signature="S.isidentifier() -&gt; bool" />
        <scope doc="Return a string which is the concatenation of the strings in&#10;the iterable." ilk="function" name="join" returns="str" signature="S.join(iterable) -&gt; str" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return a list of the lines in S, breaking at line&#10;boundaries." ilk="function" name="splitlines" returns="list" signature="S.splitlines([keepends]) -&gt; list of strings" />
        <scope doc="Return True if all characters in S are whitespace and there&#10;is at least one character in S, False otherwise." ilk="function" name="isspace" returns="bool" signature="S.isspace() -&gt; bool" />
        <scope doc="Return True if S starts with the specified prefix, False&#10;otherwise." ilk="function" name="startswith" returns="bool" signature="S.startswith(prefix[, start[, end]]) -&gt; bool" />
        <scope doc="Return the highest index in S where substring sub is found,&#10;such that sub is contained within S[start:end]." ilk="function" name="rfind" returns="int" signature="S.rfind(sub[, start[, end]]) -&gt; int" />
        <scope doc="Return True if all characters in S are alphanumeric and&#10;there is at least one character in S, False otherwise." ilk="function" name="isalnum" returns="bool" signature="S.isalnum() -&gt; bool" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
      </scope>
      <scope doc="Return the sum of a 'start' value (default: 0) plus an&#10;iterable of numbers" ilk="function" name="sum" />
      <scope classrefs="object" doc="super() -&gt; same as super(__class__, &lt;first argument&gt;)&#10;super(type) -&gt; unbound super object super(type, obj) -&gt; bound super object; requires isinstance(obj, type) super(type, type2) -&gt; bound super object; requires issubclass(type2, type) Typical use to call a cooperative superclass method: class C(B): def meth(self, arg): super().meth(arg) This works for class methods too: class C(B): @classmethod" ilk="class" name="super">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="tuple() -&gt; empty tuple&#10;tuple(iterable) -&gt; tuple initialized from iterable's items  If the argument is a tuple, the return value is the same object." ilk="class" name="tuple">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope ilk="function" name="__getnewargs__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="T.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="T.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope classrefs="object" doc="type(object_or_name, bases, dict)&#10;type(object) -&gt; the object's type type(name, bases, dict) -&gt; a new type" ilk="class" name="type">
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="specialized __dir__ implementation for types" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return memory consumption of the type object" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="return a type's method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
      </scope>
      <scope doc="Without arguments, equivalent to locals()." ilk="function" name="vars" returns="dict" signature="vars([object]) -&gt; dictionary" />
      <scope classrefs="object" doc="zip(iter1 [,iter2 [...]]) --&gt; zip object&#10;Return a zip object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the shortest iterable in the argument sequence is exhausted and then it raises StopIteration." ilk="class" name="zip">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Get useful information from live Python objects.&#10;This module encapsulates the interface provided by the internal special attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion. It also provides some help for examining source code and class layout.  Here are some of the useful functions provided by this module:  ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(), isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(), isroutine() - check object types getmembers() - get members of an object that satisfy a given condition" ilk="blob" lang="Python3" name="inspect">
      <scope classrefs="tuple" doc="ArgInfo(args, varargs, keywords, locals)&#10;" ilk="class" name="ArgInfo">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new ArgInfo object replacing specified fields with&#10;new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of ArgInfo(args, varargs, keywords,&#10;locals)" ilk="function" name="__new__" signature="__new__(_cls, args, varargs, keywords, locals)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new ArgInfo object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="tuple" doc="ArgSpec(args, varargs, keywords, defaults)&#10;" ilk="class" name="ArgSpec">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new ArgSpec object replacing specified fields with&#10;new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of ArgSpec(args, varargs, keywords,&#10;defaults)" ilk="function" name="__new__" signature="__new__(_cls, args, varargs, keywords, defaults)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new ArgSpec object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="tuple" doc="Arguments(args, varargs, varkw)&#10;" ilk="class" name="Arguments">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new Arguments object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of Arguments(args, varargs, varkw)" ilk="function" name="__new__" signature="__new__(_cls, args, varargs, varkw)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new Arguments object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="tuple" doc="Attribute(name, kind, defining_class, object)&#10;" ilk="class" name="Attribute">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new Attribute object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of Attribute(name, kind, defining_class,&#10;object)" ilk="function" name="__new__" signature="__new__(_cls, name, kind, defining_class, object)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new Attribute object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="Provide a tokeneater() method to detect the end of a code block.&#10;" ilk="class" name="BlockFinder">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="tokeneater" signature="tokeneater(self, type, token, srowcol, erowcol, line)" />
      </scope>
      <scope classrefs="object" doc="Result of `Signature.bind` call.  Holds the mapping of arguments&#10;to the function's parameters.  Has the following public attributes:  * arguments : OrderedDict An ordered mutable mapping of parameters' names to arguments' values. Does not contain arguments' default values. * signature : Signature The Signature object that created this instance. * args : tuple" ilk="class" name="BoundArguments">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, signature, arguments)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Set default values for missing arguments." ilk="function" name="apply_defaults" signature="apply_defaults(self)" />
      </scope>
      <variable citdl="str" name="CORO_CLOSED" />
      <variable citdl="str" name="CORO_CREATED" />
      <variable citdl="str" name="CORO_RUNNING" />
      <variable citdl="str" name="CORO_SUSPENDED" />
      <variable citdl="int" name="CO_COROUTINE" />
      <variable citdl="int" name="CO_GENERATOR" />
      <variable citdl="int" name="CO_ITERABLE_COROUTINE" />
      <variable citdl="int" name="CO_NESTED" />
      <variable citdl="int" name="CO_NEWLOCALS" />
      <variable citdl="int" name="CO_NOFREE" />
      <variable citdl="int" name="CO_OPTIMIZED" />
      <variable citdl="int" name="CO_VARARGS" />
      <variable citdl="int" name="CO_VARKEYWORDS" />
      <scope classrefs="tuple" doc="ClosureVars(nonlocals, globals, builtins, unbound)&#10;" ilk="class" name="ClosureVars">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new ClosureVars object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of ClosureVars(nonlocals, globals,&#10;builtins, unbound)" ilk="function" name="__new__" signature="__new__(_cls, nonlocals, globals, builtins, unbound)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new ClosureVars object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="EndOfBlock" />
      <scope classrefs="tuple" doc="FrameInfo(frame, filename, lineno, function, code_context, index)&#10;" ilk="class" name="FrameInfo">
        <scope doc="Return a new FrameInfo object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new FrameInfo object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Create new instance of FrameInfo(frame, filename, lineno,&#10;function, code_context, index)" ilk="function" name="__new__" signature="__new__(_cls, frame, filename, lineno, function, code_context, index)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <scope classrefs="tuple" doc="FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)&#10;" ilk="class" name="FullArgSpec">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new FullArgSpec object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new FullArgSpec object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create new instance of FullArgSpec(args, varargs, varkw,&#10;defaults, kwonlyargs, kwonlydefaults, annotations)" ilk="function" name="__new__" signature="__new__(_cls, args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <variable citdl="str" name="GEN_CLOSED" />
      <variable citdl="str" name="GEN_CREATED" />
      <variable citdl="str" name="GEN_RUNNING" />
      <variable citdl="str" name="GEN_SUSPENDED" />
      <scope classrefs="tuple" doc="ModuleInfo(name, suffix, mode, module_type)&#10;" ilk="class" name="ModuleInfo">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new ModuleInfo object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of ModuleInfo(name, suffix, mode,&#10;module_type)" ilk="function" name="__new__" signature="__new__(_cls, name, suffix, mode, module_type)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new ModuleInfo object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="dict" doc="Dictionary that remembers insertion order&#10;" ilk="class" name="OrderedDict">
        <scope doc="od.clear() -&gt; None.  Remove all items from od." ilk="function" name="clear" signature="od.clear() -&gt; None.  Remove all items from od." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="od.__reversed__() &lt;==&gt; reversed(od)" ilk="function" name="__reversed__" signature="od.__reversed__() &lt;==&gt; reversed(od)" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Move an existing element to the end (or beginning if&#10;last==False)." ilk="function" name="move_to_end" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="od.copy() -&gt; a shallow copy of od" ilk="function" name="copy" signature="od.copy() -&gt; a shallow copy of od" />
        <scope doc="Pairs are returned in LIFO order if last is true or FIFO&#10;order if false." ilk="function" name="popitem" signature="od.popitem() -&gt; (k, v), return and remove a (key, value) pair." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="value." ilk="function" name="pop" signature="od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" ilk="function" name="setdefault" signature="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope classrefs="object" doc="Represents a parameter in a function signature.&#10;Has the following public attributes:  * name : str The name of the parameter as a string. * default : object The default value for the parameter if specified.  If the parameter has no default value, this attribute is set to `Parameter.empty`. * annotation The annotation for the parameter if specified.  If the" ilk="class" name="Parameter">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, kind, *, default, annotation)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Creates a customized copy of the Parameter." ilk="function" name="replace" signature="replace(self, *, name=&lt;class 'inspect._void'&gt;, kind=&lt;class 'inspect._void'&gt;, annotation=&lt;class 'inspect._void'&gt;, default=&lt;class 'inspect._void'&gt;)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="A Signature object represents the overall signature of a function.&#10;It stores a Parameter object for each parameter accepted by the function, as well as information specific to the function itself.  A Signature object has the following public attributes and methods:  * parameters : OrderedDict An ordered mapping of parameters' names to the corresponding Parameter objects (keyword-only arguments are in the same order as listed in `code.co_varnames`). * return_annotation : object" ilk="class" name="Signature">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Get a BoundArguments object, that maps the passed `args` and&#10;`kwargs` to the function's signature." ilk="function" name="bind" signature="bind(*args, **kwargs)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Constructs Signature from the given list of Parameter&#10;objects and 'return_annotation'." ilk="function" name="__init__" signature="__init__(self, parameters=None, *, return_annotation, __validate_parameters__=True)" />
        <scope doc="Private method. Don't use directly." ilk="function" name="_bind" signature="_bind(self, args, kwargs, *, partial=False)" />
        <scope doc="Creates a customized copy of the Signature." ilk="function" name="replace" signature="replace(self, *, parameters=&lt;class 'inspect._void'&gt;, return_annotation=&lt;class 'inspect._void'&gt;)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Constructs Signature for the given python function." ilk="function" name="from_function" />
        <scope doc="Constructs Signature for the given builtin function." ilk="function" name="from_builtin" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Constructs Signature for the given callable object." ilk="function" name="from_callable" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Get a BoundArguments object, that partially maps the passed&#10;`args` and `kwargs` to the function's signature." ilk="function" name="bind_partial" signature="bind_partial(*args, **kwargs)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="_hash_basis" signature="_hash_basis(self)" />
      </scope>
      <variable citdl="int" name="TPFLAGS_IS_ABSTRACT" />
      <scope classrefs="tuple" doc="Traceback(filename, lineno, function, code_context, index)&#10;" ilk="class" name="Traceback">
        <scope doc="Return a new Traceback object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new Traceback object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Create new instance of Traceback(filename, lineno, function,&#10;code_context, index)" ilk="function" name="__new__" signature="__new__(_cls, filename, lineno, function, code_context, index)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <import module="ast" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object&#10;Return a callable object that fetches the given attribute(s) from its operand. After f = attrgetter('name'), the call f(r) returns r.name. After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date). After h = attrgetter('name.first', 'name.last'), the call h(r) returns (r.name.first, r.name.last)." ilk="class" name="attrgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <import module="builtins" />
      <scope doc="Return list of attribute-descriptor tuples." ilk="function" name="classify_class_attrs" signature="classify_class_attrs(cls)" />
      <scope doc="Clean up indentation from docstrings." ilk="function" name="cleandoc" signature="cleandoc(doc)" />
      <import module="collections" />
      <scope doc="Return the frame of the caller or None if this is not&#10;possible." ilk="function" name="currentframe" signature="currentframe()" />
      <import module="dis" />
      <import module="enum" />
      <scope doc="Return the entire source file and starting line number for&#10;an object." ilk="function" name="findsource" signature="findsource(object)" />
      <scope ilk="function" name="formatannotation" signature="formatannotation(annotation, base_module=None)" />
      <scope ilk="function" name="formatannotationrelativeto" signature="formatannotationrelativeto(object)" />
      <scope doc="Format an argument spec from the values returned by&#10;getargspec or getfullargspec." ilk="function" name="formatargspec" signature="formatargspec(args, varargs=None, varkw=None, defaults=None, kwonlyargs=(), kwonlydefaults={}, annotations={}, formatarg=&lt;class 'str'&gt;, formatvarargs=&lt;function &lt;lambda&gt; at 0x7f118638bea0&gt;, formatvarkw=&lt;function &lt;lambda&gt; at 0x7f118638bf28&gt;, formatvalue=&lt;function &lt;lambda&gt; at 0x7f1186392048&gt;, formatreturns=&lt;function &lt;lambda&gt; at 0x7f11863920d0&gt;, formatannotation=&lt;function formatannotation at 0x7f118638bd90&gt;)" />
      <scope doc="Format an argument spec from the 4 values returned by&#10;getargvalues." ilk="function" name="formatargvalues" signature="formatargvalues(args, varargs, varkw, locals, formatarg=&lt;class 'str'&gt;, formatvarargs=&lt;function &lt;lambda&gt; at 0x7f11863921e0&gt;, formatvarkw=&lt;function &lt;lambda&gt; at 0x7f1186392268&gt;, formatvalue=&lt;function &lt;lambda&gt; at 0x7f11863922f0&gt;)" />
      <import module="functools" />
      <scope doc="Return an absolute path to the source or compiled file for&#10;an object." ilk="function" name="getabsfile" signature="getabsfile(object, _filename=None)" />
      <scope doc="Get information about the arguments accepted by a code&#10;object." ilk="function" name="getargs" signature="getargs(co)" />
      <scope doc="Get the names and default values of a function's arguments." ilk="function" name="getargspec" signature="getargspec(func)" />
      <scope doc="Get information about arguments passed into a particular&#10;frame." ilk="function" name="getargvalues" signature="getargvalues(frame)" />
      <scope doc="Retrieve attributes without triggering dynamic lookup via&#10;the descriptor protocol,  __getattr__ or __getattribute__." ilk="function" name="getattr_static" signature="getattr_static(obj, attr, default=&lt;object object at 0x7f11880dc0a0&gt;)" />
      <scope doc="Extract the block of code at the top of the given list of&#10;lines." ilk="function" name="getblock" signature="getblock(lines)" />
      <scope doc="Get the mapping of arguments to values." ilk="function" name="getcallargs" signature="getcallargs(*func_and_positional, **named)" />
      <scope doc="Arrange the given list of classes into a hierarchy of nested&#10;lists." ilk="function" name="getclasstree" signature="getclasstree(classes, unique=False)" />
      <scope doc="Get the mapping of free variables to their current values." ilk="function" name="getclosurevars" signature="getclosurevars(func)" />
      <scope doc="Get lines of comments immediately preceding an object's&#10;source code." ilk="function" name="getcomments" signature="getcomments(object)" />
      <scope doc="Get the mapping of coroutine local variables to their&#10;current values." ilk="function" name="getcoroutinelocals" signature="getcoroutinelocals(coroutine)" />
      <scope doc="Get current state of a coroutine object." ilk="function" name="getcoroutinestate" signature="getcoroutinestate(coroutine)" />
      <scope doc="Get the documentation string for an object." ilk="function" name="getdoc" signature="getdoc(object)" />
      <scope doc="Work out which source or compiled file an object was defined&#10;in." ilk="function" name="getfile" signature="getfile(object)" />
      <scope doc="Get information about a frame or traceback object." ilk="function" name="getframeinfo" signature="getframeinfo(frame, context=1)" />
      <scope doc="Get the names and default values of a callable object's&#10;arguments." ilk="function" name="getfullargspec" signature="getfullargspec(func)" />
      <scope doc="Get the mapping of generator local variables to their&#10;current values." ilk="function" name="getgeneratorlocals" signature="getgeneratorlocals(generator)" />
      <scope doc="Get current state of a generator-iterator." ilk="function" name="getgeneratorstate" signature="getgeneratorstate(generator)" />
      <scope doc="Get a list of records for a traceback's frame and all lower&#10;frames." ilk="function" name="getinnerframes" signature="getinnerframes(tb, context=1)" />
      <scope doc="Get the line number from a frame object, allowing for&#10;optimization." ilk="function" name="getlineno" signature="getlineno(frame)" />
      <scope doc="Return all members of an object as (name, value) pairs&#10;sorted by name." ilk="function" name="getmembers" signature="getmembers(object, predicate=None)" />
      <scope doc="Return the module an object was defined in, or None if not&#10;found." ilk="function" name="getmodule" signature="getmodule(object, _filename=None)" />
      <scope doc="Get the module name, suffix, mode, and module type for a&#10;given file." ilk="function" name="getmoduleinfo" signature="getmoduleinfo(path)" />
      <scope doc="Return the module name for a given file, or None." ilk="function" name="getmodulename" signature="getmodulename(path)" />
      <scope doc="Return tuple of base classes (including cls) in method&#10;resolution order." ilk="function" name="getmro" signature="getmro(cls)" />
      <scope doc="Get a list of records for a frame and all higher (calling)&#10;frames." ilk="function" name="getouterframes" signature="getouterframes(frame, context=1)" />
      <scope doc="Return the text of the source code for an object." ilk="function" name="getsource" signature="getsource(object)" />
      <scope doc="Return the filename that can be used to locate an object's&#10;source." ilk="function" name="getsourcefile" signature="getsourcefile(object)" />
      <scope doc="Return a list of source lines and starting line number for&#10;an object." ilk="function" name="getsourcelines" signature="getsourcelines(object)" />
      <import module="importlib" />
      <scope doc="Return the indent size, in spaces, at the start of a line of&#10;text." ilk="function" name="indentsize" signature="indentsize(line)" />
      <scope doc="Return true if the object is an abstract base class (ABC)." ilk="function" name="isabstract" signature="isabstract(object)" />
      <scope doc="Return true is object can be passed to an ``await``&#10;expression." ilk="function" name="isawaitable" signature="isawaitable(object)" />
      <scope doc="Return true if the object is a built-in function or method." ilk="function" name="isbuiltin" signature="isbuiltin(object)" />
      <scope doc="Return true if the object is a class." ilk="function" name="isclass" signature="isclass(object)" />
      <scope doc="Return true if the object is a code object." ilk="function" name="iscode" signature="iscode(object)" />
      <scope doc="Return true if the object is a coroutine." ilk="function" name="iscoroutine" signature="iscoroutine(object)" />
      <scope doc="Return true if the object is a coroutine function." ilk="function" name="iscoroutinefunction" signature="iscoroutinefunction(object)" />
      <scope doc="Return true if the object is a data descriptor." ilk="function" name="isdatadescriptor" signature="isdatadescriptor(object)" />
      <scope doc="Return true if the object is a frame object." ilk="function" name="isframe" signature="isframe(object)" />
      <scope doc="Return true if the object is a user-defined function." ilk="function" name="isfunction" signature="isfunction(object)" />
      <scope doc="Return true if the object is a generator." ilk="function" name="isgenerator" signature="isgenerator(object)" />
      <scope doc="Return true if the object is a user-defined generator&#10;function." ilk="function" name="isgeneratorfunction" signature="isgeneratorfunction(object)" />
      <scope doc="Return true if the object is a getset descriptor." ilk="function" name="isgetsetdescriptor" signature="isgetsetdescriptor(object)" />
      <scope doc="Return true if the object is a member descriptor." ilk="function" name="ismemberdescriptor" signature="ismemberdescriptor(object)" />
      <scope doc="Return true if the object is an instance method." ilk="function" name="ismethod" signature="ismethod(object)" />
      <scope doc="Return true if the object is a method descriptor." ilk="function" name="ismethoddescriptor" signature="ismethoddescriptor(object)" />
      <scope doc="Return true if the object is a module." ilk="function" name="ismodule" signature="ismodule(object)" />
      <scope doc="Return true if the object is any kind of function or method." ilk="function" name="isroutine" signature="isroutine(object)" />
      <scope doc="Return true if the object is a traceback." ilk="function" name="istraceback" signature="istraceback(object)" />
      <import module="itertools" />
      <variable citdl="int" name="k" />
      <import module="linecache" />
      <variable citdl="dict" name="mod_dict" />
      <variable citdl="dict" name="modulesbyfile" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Get a signature object for the passed callable." ilk="function" name="signature" signature="signature(obj, *, follow_wrapped=True)" />
      <scope doc="Return a list of records for the stack above the caller's&#10;frame." ilk="function" name="stack" signature="stack(context=1)" />
      <import module="sys" />
      <import module="token" />
      <import module="tokenize" />
      <scope doc="Return a list of records for the stack below the current&#10;exception." ilk="function" name="trace" signature="trace(context=1)" />
      <import module="types" />
      <scope doc="Get the object wrapped by *func*." ilk="function" name="unwrap" signature="unwrap(func, *, stop=None)" />
      <variable citdl="str" name="v" />
      <scope doc="Recursive helper function for getclasstree()." ilk="function" name="walktree" signature="walktree(classes, children, parent)" />
      <import module="warnings" />
    </scope>
    <scope doc="The asyncio package, tracking PEP 3156.&#10;" ilk="blob" lang="Python3" name="asyncio">
      <variable citdl="str" name="ALL_COMPLETED" />
      <scope classrefs="object" doc="Abstract base class for monitoring child processes.&#10;Objects derived from this class monitor a collection of subprocesses and report their termination or interruption by a signal.  New callbacks are registered with .add_child_handler(). Starting a new process must be done within a 'with' block to allow the watcher to suspend its activity until the new process if fully registered (this is needed to prevent a race condition in some implementations).  Example: with watcher:" ilk="class" name="AbstractChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Attach the watcher to an event loop." ilk="function" name="attach_loop" signature="attach_loop(self, loop)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="object" doc="Abstract event loop.&#10;" ilk="class" name="AbstractEventLoop">
        <scope doc="Return whether the event loop is currently running." ilk="function" name="is_running" signature="is_running(self)" />
        <scope ilk="function" name="call_later" signature="call_later(self, delay, callback, *args)" />
        <scope ilk="function" name="sock_sendall" signature="sock_sendall(self, sock, data)" />
        <scope ilk="function" name="getnameinfo" signature="getnameinfo(self, sockaddr, flags=0)" />
        <scope ilk="function" name="create_task" signature="create_task(self, coro)" />
        <scope ilk="function" name="remove_reader" signature="remove_reader(self, fd)" />
        <scope doc="Run the event loop until stop() is called." ilk="function" name="run_forever" signature="run_forever(self)" />
        <scope doc="Run the event loop until a Future is done." ilk="function" name="run_until_complete" signature="run_until_complete(self, future)" />
        <scope doc="Close the loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="set_default_executor" signature="set_default_executor(self, executor)" />
        <scope ilk="function" name="time" signature="time(self)" />
        <scope ilk="function" name="call_soon" signature="call_soon(self, callback, *args)" />
        <scope ilk="function" name="remove_signal_handler" signature="remove_signal_handler(self, sig)" />
        <scope ilk="function" name="set_task_factory" signature="set_task_factory(self, factory)" />
        <scope ilk="function" name="sock_recv" signature="sock_recv(self, sock, nbytes)" />
        <scope ilk="function" name="sock_accept" signature="sock_accept(self, sock)" />
        <scope ilk="function" name="add_signal_handler" signature="add_signal_handler(self, sig, callback, *args)" />
        <scope ilk="function" name="set_debug" signature="set_debug(self, enabled)" />
        <scope doc="Notification that a TimerHandle has been cancelled." ilk="function" name="_timer_handle_cancelled" signature="_timer_handle_cancelled(self, handle)" />
        <scope ilk="function" name="sock_connect" signature="sock_connect(self, sock, address)" />
        <scope ilk="function" name="default_exception_handler" signature="default_exception_handler(self, context)" />
        <scope ilk="function" name="remove_writer" signature="remove_writer(self, fd)" />
        <scope ilk="function" name="get_task_factory" signature="get_task_factory(self)" />
        <scope ilk="function" name="get_debug" signature="get_debug(self)" />
        <scope ilk="function" name="subprocess_shell" signature="subprocess_shell(self, protocol_factory, cmd, *, stdin=-1, stdout=-1, stderr=-1, **kwargs)" />
        <scope ilk="function" name="getaddrinfo" signature="getaddrinfo(self, host, port, *, family=0, type=0, proto=0, flags=0)" />
        <scope ilk="function" name="call_at" signature="call_at(self, when, callback, *args)" />
        <scope ilk="function" name="add_writer" signature="add_writer(self, fd, callback, *args)" />
        <scope ilk="function" name="call_soon_threadsafe" signature="call_soon_threadsafe(self, callback, *args)" />
        <scope doc="A coroutine which creates a TCP server bound to host and&#10;port." ilk="function" name="create_server" signature="create_server(self, protocol_factory, host=None, port=None, *, family=&lt;AddressFamily.AF_UNSPEC: 0&gt;, flags=1, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None)" />
        <scope doc="Returns True if the event loop was closed." ilk="function" name="is_closed" signature="is_closed(self)" />
        <scope doc="A coroutine which creates a datagram endpoint." ilk="function" name="create_datagram_endpoint" signature="create_datagram_endpoint(self, protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)" />
        <scope doc="Stop the event loop as soon as reasonable." ilk="function" name="stop" signature="stop(self)" />
        <scope ilk="function" name="run_in_executor" signature="run_in_executor(self, executor, func, *args)" />
        <scope ilk="function" name="add_reader" signature="add_reader(self, fd, callback, *args)" />
        <scope ilk="function" name="subprocess_exec" signature="subprocess_exec(self, protocol_factory, *args, stdin=-1, stdout=-1, stderr=-1, **kwargs)" />
        <scope ilk="function" name="create_unix_connection" signature="create_unix_connection(self, protocol_factory, path, *, ssl=None, sock=None, server_hostname=None)" />
        <scope ilk="function" name="call_exception_handler" signature="call_exception_handler(self, context)" />
        <scope ilk="function" name="create_connection" signature="create_connection(self, protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None)" />
        <scope ilk="function" name="set_exception_handler" signature="set_exception_handler(self, handler)" />
        <scope doc="A coroutine which creates a UNIX Domain Socket server." ilk="function" name="create_unix_server" signature="create_unix_server(self, protocol_factory, path, *, sock=None, backlog=100, ssl=None)" />
        <scope doc="Register read pipe in event loop." ilk="function" name="connect_read_pipe" signature="connect_read_pipe(self, protocol_factory, pipe)" />
        <scope doc="Register write pipe in event loop." ilk="function" name="connect_write_pipe" signature="connect_write_pipe(self, protocol_factory, pipe)" />
      </scope>
      <scope classrefs="object" doc="Abstract policy for accessing the event loop.&#10;" ilk="class" name="AbstractEventLoopPolicy">
        <scope doc="Set the watcher for child processes." ilk="function" name="set_child_watcher" signature="set_child_watcher(self, watcher)" />
        <scope doc="Create and return a new event loop object according to this&#10;policy's rules." ilk="function" name="new_event_loop" signature="new_event_loop(self)" />
        <scope doc="Set the event loop for the current context to loop." ilk="function" name="set_event_loop" signature="set_event_loop(self, loop)" />
        <scope doc="Get the event loop for the current context." ilk="function" name="get_event_loop" signature="get_event_loop(self)" />
        <scope doc="Get the watcher for child processes." ilk="function" name="get_child_watcher" signature="get_child_watcher(self)" />
      </scope>
      <scope classrefs="object" doc="Abstract server returned by create_server().&#10;" ilk="class" name="AbstractServer">
        <scope doc="Stop serving. This leaves existing connections open." ilk="function" name="close" signature="close(self)" />
        <scope doc="Coroutine to wait until service is closed." ilk="function" name="wait_closed" signature="wait_closed(self)" />
      </scope>
      <scope classrefs="AbstractEventLoop" doc="Abstract event loop.&#10;" ilk="class" name="BaseEventLoop">
        <scope doc="Returns True if the event loop is running." ilk="function" name="is_running" signature="is_running(self)" />
        <scope doc="Write a byte to self-pipe, to wake up the event loop." ilk="function" name="_write_to_self" signature="_write_to_self(self)" />
        <scope doc="Arrange for a callback to be called at a given time." ilk="function" name="call_later" signature="call_later(self, delay, callback, *args)" />
        <scope ilk="function" name="_create_server_getaddrinfo" signature="_create_server_getaddrinfo(self, host, port, family, flags)" />
        <scope doc="Create a TCP server." ilk="function" name="create_server" signature="create_server(self, protocol_factory, host=None, port=None, *, family=&lt;AddressFamily.AF_UNSPEC: 0&gt;, flags=1, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None)" />
        <scope doc="Create read pipe transport." ilk="function" name="_make_read_pipe_transport" signature="_make_read_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Schedule a coroutine object." ilk="function" name="create_task" signature="create_task(self, coro)" />
        <scope doc="Create SSL transport." ilk="function" name="_make_ssl_transport" signature="_make_ssl_transport(self, rawsock, protocol, sslcontext, waiter=None, *, server_side=False, server_hostname=None, extra=None, server=None)" />
        <scope ilk="function" name="_set_coroutine_wrapper" signature="_set_coroutine_wrapper(self, enabled)" />
        <scope ilk="function" name="_create_connection_transport" signature="_create_connection_transport(self, sock, protocol_factory, ssl, server_hostname)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope doc="Run until stop() is called." ilk="function" name="run_forever" signature="run_forever(self)" />
        <scope doc="Create datagram transport." ilk="function" name="_make_datagram_transport" signature="_make_datagram_transport(self, sock, protocol, address=None, waiter=None, extra=None)" />
        <scope ilk="function" name="_call_soon" signature="_call_soon(self, callback, args)" />
        <scope ilk="function" name="set_default_executor" signature="set_default_executor(self, executor)" />
        <scope doc="Return the time according to the event loop's clock." ilk="function" name="time" signature="time(self)" />
        <scope doc="Arrange for a callback to be called as soon as possible." ilk="function" name="call_soon" signature="call_soon(self, callback, *args)" />
        <scope doc="Add a Handle to _scheduled (TimerHandle) or _ready." ilk="function" name="_add_callback" signature="_add_callback(self, handle)" />
        <scope ilk="function" name="_check_closed" signature="_check_closed(self)" />
        <scope doc="Set a task factory that will be used by loop.create_task()." ilk="function" name="set_task_factory" signature="set_task_factory(self, factory)" />
        <scope doc="Create write pipe transport." ilk="function" name="_make_write_pipe_transport" signature="_make_write_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Call the current event loop's exception handler." ilk="function" name="call_exception_handler" signature="call_exception_handler(self, context)" />
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Check that the current thread is the thread running the&#10;event loop." ilk="function" name="_check_thread" signature="_check_thread(self)" />
        <scope ilk="function" name="set_debug" signature="set_debug(self, enabled)" />
        <scope doc="Notification that a TimerHandle has been cancelled." ilk="function" name="_timer_handle_cancelled" signature="_timer_handle_cancelled(self, handle)" />
        <scope ilk="function" name="_log_subprocess" signature="_log_subprocess(self, msg, stdin, stdout, stderr)" />
        <scope doc="Default exception handler." ilk="function" name="default_exception_handler" signature="default_exception_handler(self, context)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="run_in_executor" signature="run_in_executor(self, executor, func, *args)" />
        <scope doc="Return a task factory, or None if the default one is in use." ilk="function" name="get_task_factory" signature="get_task_factory(self)" />
        <scope ilk="function" name="get_debug" signature="get_debug(self)" />
        <scope ilk="function" name="subprocess_shell" signature="subprocess_shell(self, protocol_factory, cmd, *, stdin=-1, stdout=-1, stderr=-1, universal_newlines=False, shell=True, bufsize=0, **kwargs)" />
        <scope ilk="function" name="_getaddrinfo_debug" signature="_getaddrinfo_debug(self, host, port, family, type, proto, flags)" />
        <scope ilk="function" name="getaddrinfo" signature="getaddrinfo(self, host, port, *, family=0, type=0, proto=0, flags=0)" />
        <scope doc="Like call_later(), but uses an absolute time." ilk="function" name="call_at" signature="call_at(self, when, callback, *args)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Like call_soon(), but thread-safe." ilk="function" name="call_soon_threadsafe" signature="call_soon_threadsafe(self, callback, *args)" />
        <scope doc="Like _add_callback() but called from a signal handler." ilk="function" name="_add_callback_signalsafe" signature="_add_callback_signalsafe(self, handle)" />
        <scope ilk="function" name="getnameinfo" signature="getnameinfo(self, sockaddr, flags=0)" />
        <scope doc="Returns True if the event loop was closed." ilk="function" name="is_closed" signature="is_closed(self)" />
        <scope doc="Run one full iteration of the event loop." ilk="function" name="_run_once" signature="_run_once(self)" />
        <scope doc="Stop running the event loop." ilk="function" name="stop" signature="stop(self)" />
        <scope doc="Create socket transport." ilk="function" name="_make_socket_transport" signature="_make_socket_transport(self, sock, protocol, waiter=None, *, extra=None, server=None)" />
        <scope doc="Create subprocess transport." ilk="function" name="_make_subprocess_transport" signature="_make_subprocess_transport(*args, **kw)" />
        <scope doc="Run until the Future is done." ilk="function" name="run_until_complete" signature="run_until_complete(self, future)" />
        <scope ilk="function" name="subprocess_exec" signature="subprocess_exec(self, protocol_factory, program, *args, stdin=-1, stdout=-1, stderr=-1, universal_newlines=False, shell=False, bufsize=0, **kwargs)" />
        <scope doc="Create datagram connection." ilk="function" name="create_datagram_endpoint" signature="create_datagram_endpoint(self, protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)" />
        <scope doc="Process selector events." ilk="function" name="_process_events" signature="_process_events(self, event_list)" />
        <scope doc="Connect to a TCP server." ilk="function" name="create_connection" signature="create_connection(self, protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None)" />
        <scope doc="Set handler as the new event loop exception handler." ilk="function" name="set_exception_handler" signature="set_exception_handler(self, handler)" />
        <scope doc="Register read pipe in event loop." ilk="function" name="connect_read_pipe" signature="connect_read_pipe(self, protocol_factory, pipe)" />
        <scope doc="Register write pipe in event loop." ilk="function" name="connect_write_pipe" signature="connect_write_pipe(self, protocol_factory, pipe)" />
      </scope>
      <scope classrefs="object" doc="Common base class for protocol interfaces.&#10;Usually user implements protocols that derived from BaseProtocol like Protocol or ProcessProtocol.  The only case when BaseProtocol should be implemented directly is write-only transport like write pipe" ilk="class" name="BaseProtocol">
        <scope doc="Called when the transport's buffer drains below the low-&#10;water mark." ilk="function" name="resume_writing" signature="resume_writing(self)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Called when the transport's buffer goes over the high-water&#10;mark." ilk="function" name="pause_writing" signature="pause_writing(self)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
      </scope>
      <scope classrefs="object" doc="Base class for transports.&#10;" ilk="class" name="BaseTransport">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, extra=None)" />
        <scope doc="Close the transport." ilk="function" name="close" signature="close(self)" />
        <scope doc="Get optional transport information." ilk="function" name="get_extra_info" signature="get_extra_info(self, name, default=None)" />
        <scope doc="Return True if the transport is closing or closed." ilk="function" name="is_closing" signature="is_closing(self)" />
      </scope>
      <scope classrefs="Semaphore" doc="A bounded semaphore implementation.&#10;This raises ValueError in release() if it would increase the value above the initial value." ilk="class" name="BoundedSemaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, loop=None)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
      </scope>
      <scope classrefs="Error" doc="The Future was cancelled.&#10;" ilk="class" name="CancelledError" />
      <scope classrefs="_ContextManagerMixin" doc="Asynchronous equivalent to threading.Condition.&#10;This class implements condition variable objects. A condition variable allows one or more coroutines to wait until they are notified by another coroutine.  A new Lock object is created and used as the underlying lock." ilk="class" name="Condition">
        <scope doc="Wait until a predicate becomes true." ilk="function" name="wait_for" signature="wait_for(self, predicate)" />
        <scope doc="By default, wake up one coroutine waiting on this condition,&#10;if any." ilk="function" name="notify" signature="notify(self, n=1)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lock=None, *, loop=None)" />
        <scope doc="Wait until notified." ilk="function" name="wait" signature="wait(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Wake up all threads waiting on this condition." ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for datagram protocol.&#10;" ilk="class" name="DatagramProtocol">
        <scope doc="Called when a send or receive operation raises an OSError." ilk="function" name="error_received" signature="error_received(self, exc)" />
        <scope doc="Called when some datagram is received." ilk="function" name="datagram_received" signature="datagram_received(self, data, addr)" />
      </scope>
      <scope classrefs="BaseTransport" doc="Interface for datagram (UDP) transports.&#10;" ilk="class" name="DatagramTransport">
        <scope doc="Send data to the transport." ilk="function" name="sendto" signature="sendto(self, data, addr=None)" />
        <scope doc="Close the transport immediately." ilk="function" name="abort" signature="abort(self)" />
      </scope>
      <scope classrefs="BaseDefaultEventLoopPolicy" doc="UNIX event loop policy with a watcher for child processes.&#10;" ilk="class" name="DefaultEventLoopPolicy">
        <scope ilk="function" name="_init_watcher" signature="_init_watcher(self)" />
        <scope doc="Set the watcher for child processes." ilk="function" name="set_child_watcher" signature="set_child_watcher(self, watcher)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Set the event loop." ilk="function" name="set_event_loop" signature="set_event_loop(self, loop)" />
        <scope doc="Get the watcher for child processes." ilk="function" name="get_child_watcher" signature="get_child_watcher(self)" />
      </scope>
      <scope classrefs="object" doc="Asynchronous equivalent to threading.Event.&#10;Class implementing event objects. An event manages a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true. The flag is initially false." ilk="class" name="Event">
        <scope doc="Reset the internal flag to false." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Set the internal flag to true." ilk="function" name="set" signature="set(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Block until the internal flag is true." ilk="function" name="wait" signature="wait(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return True if and only if the internal flag is true." ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <variable citdl="str" name="FIRST_COMPLETED" />
      <variable citdl="str" name="FIRST_EXCEPTION" />
      <scope classrefs="BaseChildWatcher" doc="'Fast' child watcher implementation.&#10;This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.  There is no noticeable overhead when handling a big number of children (O(1) each time a child terminates)." ilk="class" name="FastChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_do_waitpid_all" signature="_do_waitpid_all(self)" />
      </scope>
      <scope classrefs="object" doc="This class is *almost* compatible with concurrent.futures.Future.&#10;Differences:  - result() and exception() do not take a timeout argument and raise an exception when the future isn't done yet.  - Callbacks registered with add_done_callback() are always called via the event loop's call_soon_threadsafe().  - This class is not compatible with the wait() and as_completed() methods in the concurrent.futures package." ilk="class" name="Future">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Return the exception that was set on this future." ilk="function" name="exception" signature="exception(self)" />
        <scope doc="Cancel the future and schedule callbacks." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Remove all instances of a callback from the &quot;call when done&quot;&#10;list." ilk="function" name="remove_done_callback" signature="remove_done_callback(self, fn)" />
        <scope doc="Add a callback to be run when the future becomes done." ilk="function" name="add_done_callback" signature="add_done_callback(self, fn)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize the future." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Return True if the future is done." ilk="function" name="done" signature="done(self)" />
        <scope ilk="function" name="_Future__format_callbacks" signature="_Future__format_callbacks(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return the result this future represents." ilk="function" name="result" signature="result(self)" />
        <scope doc="Internal: Ask the event loop to call all callbacks." ilk="function" name="_schedule_callbacks" signature="_schedule_callbacks(self)" />
        <scope doc="Mark the future done and set an exception." ilk="function" name="set_exception" signature="set_exception(self, exception)" />
        <scope ilk="function" name="__await__" signature="__await__(self)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Mark the future done and set its result." ilk="function" name="set_result" signature="set_result(self, result)" />
        <scope doc="Return True if the future was cancelled." ilk="function" name="cancelled" signature="cancelled(self)" />
      </scope>
      <scope classrefs="object" doc="Object returned by callback registration methods.&#10;" ilk="class" name="Handle">
        <scope ilk="function" name="_run" signature="_run(self)" />
        <scope ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, callback, args, loop)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="EOFError" doc="Incomplete read error. Attributes:&#10;- partial: read bytes string before the end of stream was reached - expected: total number of expected bytes" ilk="class" name="IncompleteReadError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, partial, expected)" />
      </scope>
      <scope classrefs="Error" doc="The operation is not allowed in this state.&#10;" ilk="class" name="InvalidStateError" />
      <scope classrefs="Queue" doc="A subclass of Queue that retrieves most recently added entries first.&#10;" ilk="class" name="LifoQueue">
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
      </scope>
      <scope classrefs="_ContextManagerMixin" doc="Primitive lock objects.&#10;A primitive lock is a synchronization primitive that is not owned by a particular coroutine when locked.  A primitive lock is in one of two states, 'locked' or 'unlocked'.  It is created in the unlocked state.  It has two basic methods, acquire() and release().  When the state is unlocked, acquire() changes the state to locked and returns immediately.  When the state is locked, acquire() blocks until a call to release() in another coroutine changes it to unlocked, then the acquire() call resets it to locked and returns.  The release() method should only" ilk="class" name="Lock">
        <scope doc="Acquire a lock." ilk="function" name="acquire" signature="acquire(self)" />
        <scope doc="Return True if lock is acquired." ilk="function" name="locked" signature="locked(self)" />
        <scope doc="Release a lock." ilk="function" name="release" signature="release(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, loop=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Queue" doc="A subclass of Queue; retrieves entries in priority order (lowest first).&#10;Entries are typically tuples of the form: (priority number, data)." ilk="class" name="PriorityQueue">
        <scope ilk="function" name="_put" signature="_put(self, item, heappush=&lt;built-in function heappush&gt;)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self, heappop=&lt;built-in function heappop&gt;)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for stream protocol.&#10;The user should implement this interface.  They can inherit from this class but don't need to.  The implementations here do nothing (they don't raise exceptions).  When the user wants to requests a transport, they pass a protocol factory to a utility function (e.g., EventLoop.create_connection()).  When the connection is made successfully, connection_made() is called with a suitable transport object.  Then data_received() will be called 0 or more times with data (bytes) received from the" ilk="class" name="Protocol">
        <scope doc="Called when the other end calls write_eof() or equivalent." ilk="function" name="eof_received" signature="eof_received(self)" />
        <scope doc="Called when some data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <scope classrefs="object" doc="A queue, useful for coordinating producer and consumer coroutines.&#10;If maxsize is less than or equal to zero, the queue size is infinite. If it is an integer greater than 0, then &quot;yield from put()&quot; will block when the queue reaches maxsize, until an item is removed by get().  Unlike the standard library Queue, you can reliably know this Queue's size with qsize(), since your single-threaded asyncio application won't be interrupted between calling qsize() and doing an operation on the Queue." ilk="class" name="Queue">
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope ilk="function" name="_wakeup_next" signature="_wakeup_next(self, waiters)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0, *, loop=None)" />
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item)" />
        <scope doc="Remove and return an item from the queue." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Block until all items in the queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Number of items in the queue." ilk="function" name="qsize" signature="qsize(self)" />
        <scope ilk="function" name="_format" signature="_format(self)" />
        <scope doc="Return True if there are maxsize items in the queue." ilk="function" name="full" signature="full(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Exception" doc="Exception raised when Queue.get_nowait() is called on a Queue object&#10;which is empty." ilk="class" name="QueueEmpty" />
      <scope classrefs="Exception" doc="Exception raised when the Queue.put_nowait() method is called on a Queue&#10;object which is full." ilk="class" name="QueueFull" />
      <scope classrefs="BaseTransport" doc="Interface for read-only transports.&#10;" ilk="class" name="ReadTransport">
        <scope doc="Pause the receiving end." ilk="function" name="pause_reading" signature="pause_reading(self)" />
        <scope doc="Resume the receiving end." ilk="function" name="resume_reading" signature="resume_reading(self)" />
      </scope>
      <scope classrefs="BaseChildWatcher" doc="'Safe' child watcher implementation.&#10;This implementation avoids disrupting other code spawning processes by polling explicitly each process in the SIGCHLD handler instead of calling os.waitpid(-1).  This is a safe solution but it has a significant overhead when handling a big number of children (O(n) each time SIGCHLD is raised)" ilk="class" name="SafeChildWatcher">
        <scope doc="Register a new child handler." ilk="function" name="add_child_handler" signature="add_child_handler(self, pid, callback, *args)" />
        <scope doc="Exit the watcher's context" ilk="function" name="__exit__" signature="__exit__(self, a, b, c)" />
        <scope doc="Enter the watcher's context and allow starting new processes" ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Removes the handler for process 'pid'." ilk="function" name="remove_child_handler" signature="remove_child_handler(self, pid)" />
        <scope doc="Close the watcher." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="_do_waitpid" signature="_do_waitpid(self, expected_pid)" />
        <scope ilk="function" name="_do_waitpid_all" signature="_do_waitpid_all(self)" />
      </scope>
      <scope classrefs="BaseSelectorEventLoop" doc="Unix event loop.&#10;Adds signal handling and UNIX Domain Socket support to SelectorEventLoop." ilk="class" name="SelectorEventLoop">
        <scope doc="Create write pipe transport." ilk="function" name="_make_write_pipe_transport" signature="_make_write_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, selector=None)" />
        <scope doc="Create read pipe transport." ilk="function" name="_make_read_pipe_transport" signature="_make_read_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Remove a handler for a signal. UNIX only." ilk="function" name="remove_signal_handler" signature="remove_signal_handler(self, sig)" />
        <scope doc="Internal helper that is the actual signal handler." ilk="function" name="_handle_signal" signature="_handle_signal(self, sig)" />
        <scope ilk="function" name="_child_watcher_callback" signature="_child_watcher_callback(self, pid, returncode, transp)" />
        <scope doc="Internal helper to validate a signal." ilk="function" name="_check_signal" signature="_check_signal(self, sig)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_socketpair" signature="_socketpair(self)" />
        <scope ilk="function" name="create_unix_connection" signature="create_unix_connection(self, protocol_factory, path, *, ssl=None, sock=None, server_hostname=None)" />
        <scope doc="Add a handler for a signal. UNIX only." ilk="function" name="add_signal_handler" signature="add_signal_handler(self, sig, callback, *args)" />
        <scope doc="A coroutine which creates a UNIX Domain Socket server." ilk="function" name="create_unix_server" signature="create_unix_server(*args, **kw)" />
        <scope ilk="function" name="_process_self_data" signature="_process_self_data(self, data)" />
        <scope doc="Create subprocess transport." ilk="function" name="_make_subprocess_transport" signature="_make_subprocess_transport(self, protocol, args, shell, stdin, stdout, stderr, bufsize, extra=None, **kwargs)" />
      </scope>
      <scope classrefs="_ContextManagerMixin" doc="A Semaphore implementation.&#10;A semaphore manages an internal counter which is decremented by each acquire() call and incremented by each release() call. The counter can never go below zero; when acquire() finds that it is zero, it blocks, waiting until some other thread calls release().  Semaphores also support the context management protocol.  The optional argument gives the initial value for the internal counter; it defaults to 1. If the value given is less than 0, ValueError is raised." ilk="class" name="Semaphore">
        <scope doc="Acquire a semaphore." ilk="function" name="acquire" signature="acquire(self)" />
        <scope doc="Returns True if semaphore can not be acquired immediately." ilk="function" name="locked" signature="locked(self)" />
        <scope doc="Release a semaphore, incrementing the internal counter by&#10;one." ilk="function" name="release" signature="release(self)" />
        <scope ilk="function" name="_wake_up_next" signature="_wake_up_next(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, loop=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="StreamReader">
        <scope ilk="function" name="exception" signature="exception(self)" />
        <scope doc="Wait until feed_data() or feed_eof() is called." ilk="function" name="_wait_for_data" signature="_wait_for_data(self, func_name)" />
        <scope ilk="function" name="__aiter__" signature="__aiter__(*args, **kw)" />
        <scope doc="Wakeup read() or readline() function waiting for data or&#10;EOF." ilk="function" name="_wakeup_waiter" signature="_wakeup_waiter(self)" />
        <scope ilk="function" name="_maybe_resume_transport" signature="_maybe_resume_transport(self)" />
        <scope ilk="function" name="readexactly" signature="readexactly(self, n)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="feed_eof" signature="feed_eof(self)" />
        <scope ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, limit=65536, loop=None)" />
        <scope doc="Return True if the buffer is empty and 'feed_eof' was&#10;called." ilk="function" name="at_eof" signature="at_eof(self)" />
        <scope ilk="function" name="set_exception" signature="set_exception(self, exc)" />
        <scope ilk="function" name="read" signature="read(self, n=-1)" />
        <scope ilk="function" name="feed_data" signature="feed_data(self, data)" />
        <scope ilk="function" name="set_transport" signature="set_transport(self, transport)" />
        <scope ilk="function" name="__anext__" signature="__anext__(self)" />
      </scope>
      <scope classrefs="FlowControlMixin Protocol" doc="Helper class to adapt between Protocol and StreamReader.&#10;(This is a helper class instead of making StreamReader itself a Protocol subclass, because the StreamReader has other potential uses, and to prevent the user of the StreamReader to accidentally call inappropriate methods of the protocol.)" ilk="class" name="StreamReaderProtocol">
        <scope doc="Called when the other end calls write_eof() or equivalent." ilk="function" name="eof_received" signature="eof_received(self)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream_reader, client_connected_cb=None, loop=None)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
        <scope doc="Called when some data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <scope classrefs="object" doc="Wraps a Transport.&#10;This exposes write(), writelines(), [can_]write_eof(), get_extra_info() and close().  It adds drain() which returns an optional Future on which you can wait for flow control.  It also adds a transport property which references the Transport directly." ilk="class" name="StreamWriter">
        <scope doc="Flush the write buffer." ilk="function" name="drain" signature="drain(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="write_eof" signature="write_eof(self)" />
        <scope ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, transport, protocol, reader, loop)" />
        <scope ilk="function" name="can_write_eof" signature="can_write_eof(self)" />
        <scope ilk="function" name="writelines" signature="writelines(self, data)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="get_extra_info" signature="get_extra_info(self, name, default=None)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for protocol for subprocess calls.&#10;" ilk="class" name="SubprocessProtocol">
        <scope doc="Called when a file descriptor associated with the child&#10;process is closed." ilk="function" name="pipe_connection_lost" signature="pipe_connection_lost(self, fd, exc)" />
        <scope doc="Called when the subprocess writes data into stdout/stderr&#10;pipe." ilk="function" name="pipe_data_received" signature="pipe_data_received(self, fd, data)" />
        <scope doc="Called when subprocess has exited." ilk="function" name="process_exited" signature="process_exited(self)" />
      </scope>
      <scope classrefs="BaseTransport" doc="Base class for transports.&#10;" ilk="class" name="SubprocessTransport">
        <scope doc="Get transport for pipe with number fd." ilk="function" name="get_pipe_transport" signature="get_pipe_transport(self, fd)" />
        <scope doc="Send signal to subprocess." ilk="function" name="send_signal" signature="send_signal(self, signal)" />
        <scope doc="Get subprocess returncode." ilk="function" name="get_returncode" signature="get_returncode(self)" />
        <scope doc="Get subprocess id." ilk="function" name="get_pid" signature="get_pid(self)" />
        <scope doc="Kill the subprocess." ilk="function" name="kill" signature="kill(self)" />
        <scope doc="Stop the subprocess." ilk="function" name="terminate" signature="terminate(self)" />
      </scope>
      <scope classrefs="Future" doc="A coroutine wrapped in a Future.&#10;" ilk="class" name="Task">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Request that this task cancel itself." ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Return the list of stack frames for this task's coroutine." ilk="function" name="get_stack" signature="get_stack(self, *, limit=None)" />
        <scope doc="Initialize the future." ilk="function" name="__init__" signature="__init__(self, coro, *, loop=None)" />
        <scope ilk="function" name="_wakeup" signature="_wakeup(self, future)" />
        <scope doc="Return the currently running task in an event loop or None." ilk="function" name="current_task" />
        <scope ilk="function" name="_step" signature="_step(self, exc=None)" />
        <scope doc="Print the stack or traceback for this task's coroutine." ilk="function" name="print_stack" signature="print_stack(self, *, limit=None, file=None)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return a set of all tasks for an event loop." ilk="function" name="all_tasks" />
      </scope>
      <scope classrefs="Error" doc="The operation exceeded the given deadline.&#10;" ilk="class" name="TimeoutError" />
      <scope classrefs="Handle" doc="Object returned by timed callback registration methods.&#10;" ilk="class" name="TimerHandle">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" signature="__ne__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, when, callback, args, loop)" />
        <scope ilk="function" name="_repr_info" signature="_repr_info(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
      </scope>
      <scope classrefs="ReadTransport WriteTransport" doc="Interface representing a bidirectional transport.&#10;There may be several implementations, but typically, the user does not implement new transports; rather, the platform provides some useful transports that are implemented using the platform's best practices.  The user never instantiates a transport directly; they call a utility function, passing it a protocol factory and other information necessary to create the transport and protocol.  (E.g. EventLoop.create_connection() or EventLoop.create_server().) " ilk="class" name="Transport" />
      <scope classrefs="BaseTransport" doc="Interface for write-only transports.&#10;" ilk="class" name="WriteTransport">
        <scope doc="Return the current size of the write buffer." ilk="function" name="get_write_buffer_size" signature="get_write_buffer_size(self)" />
        <scope doc="Set the high- and low-water limits for write flow control." ilk="function" name="set_write_buffer_limits" signature="set_write_buffer_limits(self, high=None, low=None)" />
        <scope doc="Close the transport immediately." ilk="function" name="abort" signature="abort(self)" />
        <scope doc="Write some data bytes to the transport." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Return True if this transport supports write_eof(), False if&#10;not." ilk="function" name="can_write_eof" signature="can_write_eof(self)" />
        <scope doc="Write a list (or any iterable) of data bytes to the&#10;transport." ilk="function" name="writelines" signature="writelines(self, list_of_data)" />
        <scope doc="Close the write end after flushing buffered data." ilk="function" name="write_eof" signature="write_eof(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return an iterator whose values are coroutines." ilk="function" name="as_completed" signature="as_completed(fs, *, loop=None, timeout=None)" />
      <scope doc="Wrap a coroutine in a future." ilk="function" name="async" signature="async(coro_or_future, *, loop=None)" />
      <import module="base_events" />
      <import module="base_subprocess" />
      <import module="compat" />
      <import module="constants" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="coroutines" />
      <scope ilk="function" name="create_subprocess_exec" signature="create_subprocess_exec(program, *args, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds)" />
      <scope ilk="function" name="create_subprocess_shell" signature="create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds)" />
      <scope doc="Wrap a coroutine or an awaitable in a future." ilk="function" name="ensure_future" signature="ensure_future(coro_or_future, *, loop=None)" />
      <import module="events" />
      <import module="futures" />
      <scope doc="Return a future aggregating results from the given&#10;coroutines or futures." ilk="function" name="gather" signature="gather(*coros_or_futures, loop=None, return_exceptions=False)" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().get_child_watcher()." ilk="function" name="get_child_watcher" signature="get_child_watcher()" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().get_event_loop()." ilk="function" name="get_event_loop" signature="get_event_loop()" />
      <scope doc="Get the current event loop policy." ilk="function" name="get_event_loop_policy" signature="get_event_loop_policy()" />
      <scope doc="Return True if obj is a coroutine object." ilk="function" name="iscoroutine" signature="iscoroutine(obj)" />
      <scope doc="Return True if func is a decorated coroutine function." ilk="function" name="iscoroutinefunction" signature="iscoroutinefunction(func)" />
      <import module="locks" />
      <import module="log" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().new_event_loop()." ilk="function" name="new_event_loop" signature="new_event_loop()" />
      <scope doc="A wrapper for create_connection() returning a (reader,&#10;writer) pair." ilk="function" name="open_connection" signature="open_connection(host=None, port=None, *, loop=None, limit=65536, **kwds)" />
      <scope doc="Similar to `open_connection` but works with UNIX Domain&#10;Sockets." ilk="function" name="open_unix_connection" signature="open_unix_connection(path=None, *, loop=None, limit=65536, **kwds)" />
      <import module="protocols" />
      <import module="queues" />
      <scope doc="Submit a coroutine object to a given event loop." ilk="function" name="run_coroutine_threadsafe" signature="run_coroutine_threadsafe(coro, loop)" />
      <import module="selector_events" />
      <import module="selectors" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().set_child_watcher(watcher)." ilk="function" name="set_child_watcher" signature="set_child_watcher(watcher)" />
      <scope doc="Equivalent to calling&#10;get_event_loop_policy().set_event_loop(loop)." ilk="function" name="set_event_loop" signature="set_event_loop(loop)" />
      <scope doc="Set the current event loop policy." ilk="function" name="set_event_loop_policy" signature="set_event_loop_policy(policy)" />
      <scope doc="Wait for a future, shielding it from cancellation." ilk="function" name="shield" signature="shield(arg, *, loop=None)" />
      <scope doc="Coroutine that completes after a given time (in seconds)." ilk="function" name="sleep" signature="sleep(delay, result=None, *, loop=None)" />
      <import module="sslproto" />
      <scope doc="Start a socket server, call back for each client connected." ilk="function" name="start_server" signature="start_server(client_connected_cb, host=None, port=None, *, loop=None, limit=65536, **kwds)" />
      <scope doc="Similar to `start_server` but works with UNIX Domain&#10;Sockets." ilk="function" name="start_unix_server" signature="start_unix_server(client_connected_cb, path=None, *, loop=None, limit=65536, **kwds)" />
      <import module="streams" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="tasks" />
      <import module="transports" />
      <import module="unix_events" />
      <scope doc="Wait for the Futures and coroutines given by fs to complete." ilk="function" name="wait" signature="wait(fs, *, loop=None, timeout=None, return_when='ALL_COMPLETED')" />
      <scope doc="Wait for the single Future or coroutine to complete, with&#10;timeout." ilk="function" name="wait_for" signature="wait_for(fut, timeout, *, loop=None)" />
      <scope doc="Wrap concurrent.futures.Future object." ilk="function" name="wrap_future" signature="wrap_future(future, *, loop=None)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="_symtable">
      <variable citdl="int" name="CELL" />
      <variable citdl="int" name="DEF_BOUND" />
      <variable citdl="int" name="DEF_FREE" />
      <variable citdl="int" name="DEF_FREE_CLASS" />
      <variable citdl="int" name="DEF_GLOBAL" />
      <variable citdl="int" name="DEF_IMPORT" />
      <variable citdl="int" name="DEF_LOCAL" />
      <variable citdl="int" name="DEF_PARAM" />
      <variable citdl="int" name="FREE" />
      <variable citdl="int" name="GLOBAL_EXPLICIT" />
      <variable citdl="int" name="GLOBAL_IMPLICIT" />
      <variable citdl="int" name="LOCAL" />
      <variable citdl="int" name="SCOPE_MASK" />
      <variable citdl="int" name="SCOPE_OFF" />
      <variable citdl="int" name="TYPE_CLASS" />
      <variable citdl="int" name="TYPE_FUNCTION" />
      <variable citdl="int" name="TYPE_MODULE" />
      <variable citdl="int" name="USE" />
      <scope doc="Return symbol and scope dictionaries used internally by&#10;compiler." ilk="function" name="symtable" />
    </scope>
    <scope doc="# ElementTree&#10;# $Id: ElementPath.py 3375 2008-02-13 08:05:08Z fredrik $ # # limited xpath support for element trees # # history: # 2003-05-23 fl   created # 2003-05-28 fl   added support for // etc # 2003-08-27 fl   fixed parsing of periods in element names # 2007-09-10 fl   new selection engine # 2007-09-12 fl   fixed parent selector" ilk="blob" lang="Python3" name="xml.etree.ElementPath">
      <scope ilk="function" name="find" signature="find(elem, path, namespaces=None)" />
      <scope ilk="function" name="findall" signature="findall(elem, path, namespaces=None)" />
      <scope ilk="function" name="findtext" signature="findtext(elem, path, default=None, namespaces=None)" />
      <scope ilk="function" name="get_parent_map" signature="get_parent_map(context)" />
      <scope ilk="function" name="iterfind" signature="iterfind(elem, path, namespaces=None)" />
      <variable citdl="dict" name="ops" />
      <scope ilk="function" name="prepare_child" signature="prepare_child(next, token)" />
      <scope ilk="function" name="prepare_descendant" signature="prepare_descendant(next, token)" />
      <scope ilk="function" name="prepare_parent" signature="prepare_parent(next, token)" />
      <scope ilk="function" name="prepare_predicate" signature="prepare_predicate(next, token)" />
      <scope ilk="function" name="prepare_self" signature="prepare_self(next, token)" />
      <scope ilk="function" name="prepare_star" signature="prepare_star(next, token)" />
      <import module="re" />
      <scope ilk="function" name="xpath_tokenizer" signature="xpath_tokenizer(pattern, namespaces=None)" />
      <variable citdl="SRE_Pattern" name="xpath_tokenizer_re" />
    </scope>
    <scope doc="Representing and manipulating email headers via custom objects.&#10;This module provides an implementation of the HeaderRegistry API. The implementation is designed to flexibly follow RFC5322 rules.  Eventually HeaderRegistry will be a public API, but it isn't yet, and will probably change some before that happens." ilk="blob" lang="Python3" name="email.headerregistry">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Address">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create an object represeting a full email address." ilk="function" name="__init__" signature="__init__(self, display_name='', username='', domain='', addr_spec=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="AddressHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope ilk="function" name="value_parser" signature="value_parser(value)" />
        <scope ilk="function" name="parse" />
      </scope>
      <scope classrefs="str" doc="Base class for message headers.&#10;Implements generic behavior and provides tools for subclasses.  A subclass must define a classmethod named 'parse' that takes an unfolded value string and a dictionary as its arguments.  The dictionary will contain one key, 'defects', initialized to an empty list.  After the call the dictionary must contain two additional keys: parse_tree, set to the parse tree obtained from parsing the header, and 'decoded', set to the string value of the idealized representation of the data from the value. (That is, encoded words are decoded, and values that have canonical representations are so represented.)" ilk="class" name="BaseHeader">
        <scope ilk="function" name="init" signature="init(self, name, *, parse_tree, defects)" />
        <scope ilk="function" name="_reconstruct" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, value)" />
        <scope doc="Fold header according to policy." ilk="function" name="fold" signature="fold(self, *, policy)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="ParameterizedMIMEHeader" doc="&#10;" ilk="class" name="ContentDispositionHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope doc="disposition-type *( &quot;;&quot; parameter )" ilk="function" name="value_parser" signature="value_parser(value)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ContentTransferEncodingHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope doc="mechanism" ilk="function" name="value_parser" signature="value_parser(value)" />
        <scope ilk="function" name="parse" />
      </scope>
      <scope classrefs="ParameterizedMIMEHeader" doc="&#10;" ilk="class" name="ContentTypeHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope doc="maintype &quot;/&quot; subtype *( &quot;;&quot; parameter )" ilk="function" name="value_parser" signature="value_parser(value)" />
      </scope>
      <scope classrefs="object" doc="Header whose value consists of a single timestamp.&#10;Provides an additional attribute, datetime, which is either an aware datetime using a timezone, or a naive datetime if the timezone in the input string is -0000.  Also accepts a datetime as input. The 'value' attribute is the normalized form of the timestamp, which means it is the output of format_datetime on the datetime." ilk="class" name="DateHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope doc="unstructured = (*([FWS] vchar) *WSP) / obs-unstruct obs-&#10;unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS) obs-&#10;utext = %d0 / obs-NO-WS-CTL / LF / CR" ilk="function" name="value_parser" signature="value_parser(value)" />
        <scope ilk="function" name="parse" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Group">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create an object representing an address group." ilk="function" name="__init__" signature="__init__(self, display_name=None, addresses=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="A header_factory and header registry.&#10;" ilk="class" name="HeaderRegistry">
        <scope doc="Create a header_factory that works with the Policy API." ilk="function" name="__init__" signature="__init__(self, base_class=&lt;class 'email.headerregistry.BaseHeader'&gt;, default_class=&lt;class 'email.headerregistry.UnstructuredHeader'&gt;, use_default_map=True)" />
        <scope doc="Create a header instance for header 'name' from 'value'." ilk="function" name="__call__" signature="__call__(self, name, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Register cls as the specialized class for handling &quot;name&quot;&#10;headers." ilk="function" name="map_to_type" signature="map_to_type(self, name, cls)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MIMEVersionHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope doc="mime-version = [CFWS] 1*digit [CFWS] &quot;.&quot; [CFWS] 1*digit&#10;[CFWS]" ilk="function" name="value_parser" signature="value_parser(value)" />
        <scope ilk="function" name="parse" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MappingProxyType">
        <scope doc="D.values() -&gt; list of D's values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D's values" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="D.keys() -&gt; list of D's keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D's keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ParameterizedMIMEHeader">
        <scope ilk="function" name="init" signature="init(self, *args, **kw)" />
        <scope ilk="function" name="parse" />
      </scope>
      <scope classrefs="AddressHeader" doc="&#10;" ilk="class" name="SingleAddressHeader" />
      <scope classrefs="AddressHeader" doc="&#10;" ilk="class" name="UniqueAddressHeader" />
      <scope classrefs="DateHeader" doc="Header whose value consists of a single timestamp.&#10;Provides an additional attribute, datetime, which is either an aware datetime using a timezone, or a naive datetime if the timezone in the input string is -0000.  Also accepts a datetime as input. The 'value' attribute is the normalized form of the timestamp, which means it is the output of format_datetime on the datetime." ilk="class" name="UniqueDateHeader" />
      <scope classrefs="SingleAddressHeader" doc="&#10;" ilk="class" name="UniqueSingleAddressHeader" />
      <scope classrefs="UnstructuredHeader" doc="&#10;" ilk="class" name="UniqueUnstructuredHeader" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="UnstructuredHeader">
        <scope doc="unstructured = (*([FWS] vchar) *WSP) / obs-unstruct obs-&#10;unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS) obs-&#10;utext = %d0 / obs-NO-WS-CTL / LF / CR" ilk="function" name="value_parser" signature="value_parser(value)" />
        <scope ilk="function" name="parse" />
      </scope>
      <import module="errors" />
      <import module="parser" />
      <import module="utils" />
    </scope>
    <scope doc="Conversion between binary data and ASCII&#10;" ilk="blob" lang="Python3" name="binascii">
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="Error" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Incomplete" />
      <scope doc="Decode a line of base64 data." ilk="function" name="a2b_base64" />
      <scope doc="Binary data of hexadecimal representation." ilk="function" name="a2b_hex" />
      <scope doc="Decode .hqx coding." ilk="function" name="a2b_hqx" />
      <scope doc="Decode a string of qp-encoded data." ilk="function" name="a2b_qp" />
      <scope doc="Decode a line of uuencoded data." ilk="function" name="a2b_uu" />
      <scope doc="Base64-code line of data." ilk="function" name="b2a_base64" />
      <scope doc="Hexadecimal representation of binary data." ilk="function" name="b2a_hex" />
      <scope doc="Encode .hqx data." ilk="function" name="b2a_hqx" />
      <scope doc="Encode a string using quoted-printable encoding." ilk="function" name="b2a_qp" />
      <scope doc="Uuencode line of data." ilk="function" name="b2a_uu" />
      <scope doc="Compute CRC-32 incrementally." ilk="function" name="crc32" />
      <scope doc="Compute hqx CRC incrementally." ilk="function" name="crc_hqx" />
      <scope doc="Hexadecimal representation of binary data." ilk="function" name="hexlify" />
      <scope doc="Binhex RLE-code binary data." ilk="function" name="rlecode_hqx" />
      <scope doc="Decode hexbin RLE-coded string." ilk="function" name="rledecode_hqx" />
      <scope doc="Binary data of hexadecimal representation." ilk="function" name="unhexlify" />
    </scope>
    <scope doc="Debug module to trace memory blocks allocated by Python.&#10;" ilk="blob" lang="Python3" name="_tracemalloc">
      <scope doc="Clear traces of memory blocks allocated by Python." ilk="function" name="clear_traces" signature="clear_traces()" />
      <scope doc="Get the maximum number of frames stored in the traceback of&#10;a trace." ilk="function" name="get_traceback_limit" returns="int" signature="get_traceback_limit() -&gt; int" />
      <scope doc="Get the current size and peak size of memory blocks traced&#10;by the tracemalloc module as a tuple: (current: int, peak:&#10;int)." ilk="function" name="get_traced_memory" signature="get_traced_memory() -&gt; (int, int)" />
      <scope doc="Get the memory usage in bytes of the tracemalloc module used&#10;internally to trace memory allocations." ilk="function" name="get_tracemalloc_memory" returns="int" signature="get_tracemalloc_memory() -&gt; int" />
      <scope doc="True if the tracemalloc module is tracing Python memory&#10;allocations, False otherwise." ilk="function" name="is_tracing" signature="is_tracing()-&gt;bool" />
      <scope doc="Start tracing Python memory allocations." ilk="function" name="start" signature="start(nframe: int=1)" />
      <scope doc="Stop tracing Python memory allocations and clear traces of&#10;memory blocks allocated by Python." ilk="function" name="stop" signature="stop()" />
    </scope>
    <scope doc="Internal support module for sre&#10;" ilk="blob" lang="Python3" name="sre_constants">
      <variable citdl="_NamedIntConstant" name="ANY" />
      <variable citdl="_NamedIntConstant" name="ANY_ALL" />
      <variable citdl="_NamedIntConstant" name="ASSERT" />
      <variable citdl="_NamedIntConstant" name="ASSERT_NOT" />
      <variable citdl="_NamedIntConstant" name="AT" />
      <variable citdl="list" name="ATCODES" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_STRING" />
      <variable citdl="_NamedIntConstant" name="AT_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_END" />
      <variable citdl="_NamedIntConstant" name="AT_END_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_END_STRING" />
      <variable citdl="dict" name="AT_LOCALE" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_MULTILINE" />
      <variable citdl="_NamedIntConstant" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_UNICODE" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="BIGCHARSET" />
      <variable citdl="_NamedIntConstant" name="BRANCH" />
      <variable citdl="_NamedIntConstant" name="CALL" />
      <variable citdl="_NamedIntConstant" name="CATEGORY" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_WORD" />
      <variable citdl="_NamedIntConstant" name="CHARSET" />
      <variable citdl="list" name="CHCODES" />
      <variable citdl="dict" name="CH_LOCALE" />
      <variable citdl="dict" name="CH_UNICODE" />
      <variable citdl="_NamedIntConstant" name="FAILURE" />
      <variable citdl="_NamedIntConstant" name="GROUPREF" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_EXISTS" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_IGNORE" />
      <variable citdl="_NamedIntConstant" name="IN" />
      <variable citdl="_NamedIntConstant" name="INFO" />
      <variable citdl="_NamedIntConstant" name="IN_IGNORE" />
      <variable citdl="_NamedIntConstant" name="JUMP" />
      <variable citdl="_NamedIntConstant" name="LITERAL" />
      <variable citdl="_NamedIntConstant" name="LITERAL_IGNORE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="_NamedIntConstant" name="MARK" />
      <variable citdl="int" name="MAXGROUPS" />
      <variable citdl="_NamedIntConstant" name="MAXREPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_UNTIL" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT_ONE" />
      <variable citdl="_NamedIntConstant" name="MIN_UNTIL" />
      <variable citdl="_NamedIntConstant" name="NEGATE" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL_IGNORE" />
      <variable citdl="list" name="OPCODES" />
      <variable citdl="dict" name="OP_IGNORE" />
      <variable citdl="_NamedIntConstant" name="RANGE" />
      <variable citdl="_NamedIntConstant" name="RANGE_IGNORE" />
      <variable citdl="_NamedIntConstant" name="REPEAT" />
      <variable citdl="_NamedIntConstant" name="REPEAT_ONE" />
      <variable citdl="int" name="SRE_FLAG_ASCII" />
      <variable citdl="int" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" name="SRE_INFO_CHARSET" />
      <variable citdl="int" name="SRE_INFO_LITERAL" />
      <variable citdl="int" name="SRE_INFO_PREFIX" />
      <variable citdl="_NamedIntConstant" name="SUBPATTERN" />
      <variable citdl="_NamedIntConstant" name="SUCCESS" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, pattern=None, pos=None)" />
      </scope>
    </scope>
    <scope doc="Module difflib -- helpers for computing deltas between objects.&#10;Function get_close_matches(word, possibilities, n=3, cutoff=0.6): Use SequenceMatcher to return list of the best &quot;good enough&quot; matches.  Function context_diff(a, b): For two lists of strings, return a delta in context diff format.  Function ndiff(a, b): Return a delta: the difference between `a` and `b` (lists of strings).  Function restore(delta, which):" ilk="blob" lang="Python3" name="difflib">
      <scope classrefs="object" doc="Differ is a class for comparing sequences of lines of text, and&#10;producing human-readable differences or deltas.  Differ uses SequenceMatcher both to compare sequences of lines, and to compare sequences of characters within similar (near-matching) lines.  Each line of a Differ delta begins with a two-letter code:  '- '    line unique to sequence 1 '+ '    line unique to sequence 2 '  '    line common to both sequences '? '    line not present in either input sequence" ilk="class" name="Differ">
        <scope ilk="function" name="_plain_replace" signature="_plain_replace(self, a, alo, ahi, b, blo, bhi)" />
        <scope doc="Compare two sequences of lines; generate the resulting&#10;delta." ilk="function" name="compare" signature="compare(self, a, b)" />
        <scope doc="Construct a text differencer, with optional filters." ilk="function" name="__init__" signature="__init__(self, linejunk=None, charjunk=None)" />
        <scope doc="Format &quot;?&quot; output and deal with leading tabs." ilk="function" name="_qformat" signature="_qformat(self, aline, bline, atags, btags)" />
        <scope doc="Generate comparison results for a same-tagged range." ilk="function" name="_dump" signature="_dump(self, tag, x, lo, hi)" />
        <scope doc="When replacing one block of lines with another, search the&#10;blocks for *similar* lines; the best-matching pair (if any)&#10;is used as a synch point, and intraline difference marking&#10;is done on the similar pair." ilk="function" name="_fancy_replace" signature="_fancy_replace(self, a, alo, ahi, b, blo, bhi)" />
        <scope ilk="function" name="_fancy_helper" signature="_fancy_helper(self, a, alo, ahi, b, blo, bhi)" />
      </scope>
      <scope classrefs="object" doc="For producing HTML side by side comparison with change highlights.&#10;This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.  The table can be generated in either full or contextual difference mode.  The following methods are provided for HTML generation:  make_table -- generates HTML for a single side by side table make_file -- generates complete HTML file with a single side by side table " ilk="class" name="HtmlDiff">
        <scope doc="Makes list of &quot;next&quot; links" ilk="function" name="_convert_flags" signature="_convert_flags(self, fromlist, tolist, flaglist, context, numlines)" />
        <scope doc="HtmlDiff instance initializer" ilk="function" name="__init__" signature="__init__(self, tabsize=8, wrapcolumn=None, linejunk=None, charjunk=&lt;function IS_CHARACTER_JUNK at 0x7f118021ac80&gt;)" />
        <scope doc="Returns iterator that splits (wraps) mdiff text lines" ilk="function" name="_line_wrapper" signature="_line_wrapper(self, diffs)" />
        <scope doc="Returns HTML markup of &quot;from&quot; / &quot;to&quot; text lines" ilk="function" name="_format_line" signature="_format_line(self, side, flag, linenum, text)" />
        <scope doc="Returns HTML table of side by side comparison with change&#10;highlights" ilk="function" name="make_table" signature="make_table(self, fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5)" />
        <scope doc="Collects mdiff output into separate lists" ilk="function" name="_collect_lines" signature="_collect_lines(self, diffs)" />
        <scope doc="Returns HTML file of side by side comparison with change&#10;highlights" ilk="function" name="make_file" signature="make_file(self, fromlines, tolines, fromdesc='', todesc='', context=False, numlines=5, *, charset='utf-8')" />
        <scope doc="Builds list of text lines by splitting text lines at wrap&#10;point" ilk="function" name="_split_line" signature="_split_line(self, data_list, line_num, text)" />
        <scope doc="Create unique anchor prefixes" ilk="function" name="_make_prefix" signature="_make_prefix(self)" />
        <scope doc="Returns from/to line lists with tabs expanded and newlines&#10;removed." ilk="function" name="_tab_newline_replace" signature="_tab_newline_replace(self, fromlines, tolines)" />
      </scope>
      <scope doc="Return 1 for ignorable character: iff `ch` is a space or&#10;tab." ilk="function" name="IS_CHARACTER_JUNK" signature="IS_CHARACTER_JUNK(ch, ws=' \t')" />
      <scope doc="Return 1 for ignorable line: iff `line` is blank or contains&#10;a single '#'." ilk="function" name="IS_LINE_JUNK" signature="IS_LINE_JUNK(line, pat=&lt;built-in method match of _sre.SRE_Pattern object at 0x7f118226cb70&gt;)" />
      <scope classrefs="tuple" doc="Match(a, b, size)&#10;" ilk="class" name="Match">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new Match object replacing specified fields with&#10;new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of Match(a, b, size)" ilk="function" name="__new__" signature="__new__(_cls, a, b, size)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new Match object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="SequenceMatcher is a flexible class for comparing pairs of sequences of&#10;any type, so long as the sequence elements are hashable.  The basic algorithm predates, and is a little fancier than, an algorithm published in the late 1980's by Ratcliff and Obershelp under the hyperbolic name &quot;gestalt pattern matching&quot;.  The basic idea is to find the longest contiguous matching subsequence that contains no &quot;junk&quot; elements (R-O doesn't address junk).  The same idea is then applied recursively to the pieces of the sequences to the left and to the right of the matching subsequence.  This does not yield minimal edit sequences, but does tend to yield matches that &quot;look right&quot; to people. " ilk="class" name="SequenceMatcher">
        <scope doc="Find longest matching block in a[alo:ahi] and b[blo:bhi]." ilk="function" name="find_longest_match" signature="find_longest_match(self, alo, ahi, blo, bhi)" />
        <scope doc="Set the two sequences to be compared." ilk="function" name="set_seqs" signature="set_seqs(self, a, b)" />
        <scope ilk="function" name="_SequenceMatcher__chain_b" signature="_SequenceMatcher__chain_b(self)" />
        <scope doc="Return list of triples describing matching subsequences." ilk="function" name="get_matching_blocks" signature="get_matching_blocks(self)" />
        <scope doc="Return an upper bound on ratio() relatively quickly." ilk="function" name="quick_ratio" signature="quick_ratio(self)" />
        <scope doc="Set the second sequence to be compared." ilk="function" name="set_seq2" signature="set_seq2(self, b)" />
        <scope doc="Construct a SequenceMatcher." ilk="function" name="__init__" signature="__init__(self, isjunk=None, a='', b='', autojunk=True)" />
        <scope doc="Return a measure of the sequences' similarity (float in&#10;[0,1])." ilk="function" name="ratio" signature="ratio(self)" />
        <scope doc="Return an upper bound on ratio() very quickly." ilk="function" name="real_quick_ratio" signature="real_quick_ratio(self)" />
        <scope doc="Isolate change clusters by eliminating ranges with no&#10;changes." ilk="function" name="get_grouped_opcodes" signature="get_grouped_opcodes(self, n=3)" />
        <scope doc="Set the first sequence to be compared." ilk="function" name="set_seq1" signature="set_seq1(self, a)" />
        <scope doc="Return list of 5-tuples describing how to turn a into b." ilk="function" name="get_opcodes" signature="get_opcodes(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Compare two sequences of lines; generate the delta as a&#10;context diff." ilk="function" name="context_diff" signature="context_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')" />
      <scope doc="Compare `a` and `b`, two sequences of lines represented as&#10;bytes rather than str." ilk="function" name="diff_bytes" signature="diff_bytes(dfunc, a, b, fromfile=b'', tofile=b'', fromfiledate=b'', tofiledate=b'', n=3, lineterm=b'\n')" />
      <scope doc="Use SequenceMatcher to return list of the best &quot;good enough&quot;&#10;matches." ilk="function" name="get_close_matches" signature="get_close_matches(word, possibilities, n=3, cutoff=0.6)" />
      <scope doc="Compare `a` and `b` (lists of strings); return a&#10;`Differ`-style delta." ilk="function" name="ndiff" signature="ndiff(a, b, linejunk=None, charjunk=&lt;function IS_CHARACTER_JUNK at 0x7f118021ac80&gt;)" />
      <scope doc="Generate one of the two sequences that generated a delta." ilk="function" name="restore" signature="restore(delta, which)" />
      <scope doc="Compare two sequences of lines; generate the delta as a&#10;unified diff." ilk="function" name="unified_diff" signature="unified_diff(a, b, fromfile='', tofile='', fromfiledate='', tofiledate='', n=3, lineterm='\n')" />
    </scope>
    <scope doc="Fixer that turns 1L into 1, 0755 into 0o755.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_numliterals">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixNumliterals">
        <scope doc="Returns match for a given parse tree node." ilk="function" name="match" signature="match(self, node)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <import module="fixer_base" />
      <import module="token" />
    </scope>
    <scope doc="Compatibility helpers for the different Python versions.&#10;" ilk="blob" lang="Python3" name="asyncio.compat">
      <variable citdl="bool" name="PY34" />
      <variable citdl="bool" name="PY35" />
      <scope doc="Concatenate a sequence of bytes-like objects." ilk="function" name="flatten_list_bytes" signature="flatten_list_bytes(list_of_data)" />
      <import module="sys" />
    </scope>
    <scope doc="# We use a background thread for sharing fds on Unix, and for sharing sockets on&#10;# Windows. # # A client which wants to pickle a resource registers it with the resource # sharer and gets an identifier in return.  The unpickling process will connect # to the resource sharer, sends the identifier and its pid, and then receives # the resource. #" ilk="blob" lang="Python3" name="multiprocessing.resource_sharer">
      <scope classrefs="object" doc="Wrapper for fd which can be used at any time.&#10;" ilk="class" name="DupFd">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fd)" />
        <scope doc="Get the fd. This should only be called once." ilk="function" name="detach" signature="detach(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="os" />
      <import module="process" />
      <import module="reduction" />
      <import module="signal" />
      <import module="socket" />
      <scope doc="Stop the background thread and clear registered resources." ilk="function" name="stop" />
      <import module="sys" />
      <import module="threading" />
      <import module="util" />
    </scope>
    <scope doc="Event loop using a proactor and related classes.&#10;A proactor is a &quot;notify-on-completion&quot; multiplexer.  Currently a proactor is only implemented on Windows with IOCP." ilk="blob" lang="Python3" name="asyncio.proactor_events">
      <scope classrefs="BaseEventLoop" doc="Abstract event loop.&#10;" ilk="class" name="BaseProactorEventLoop">
        <scope ilk="function" name="_stop_accept_futures" signature="_stop_accept_futures(self)" />
        <scope ilk="function" name="_start_serving" signature="_start_serving(self, protocol_factory, sock, sslcontext=None, server=None)" />
        <scope doc="Create write pipe transport." ilk="function" name="_make_write_pipe_transport" signature="_make_write_pipe_transport(self, sock, protocol, waiter=None, extra=None)" />
        <scope ilk="function" name="sock_connect" signature="sock_connect(self, sock, address)" />
        <scope ilk="function" name="_close_self_pipe" signature="_close_self_pipe(self)" />
        <scope ilk="function" name="sock_sendall" signature="sock_sendall(self, sock, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, proactor)" />
        <scope doc="Create read pipe transport." ilk="function" name="_make_read_pipe_transport" signature="_make_read_pipe_transport(self, sock, protocol, waiter=None, extra=None)" />
        <scope doc="Create SSL transport." ilk="function" name="_make_ssl_transport" signature="_make_ssl_transport(self, rawsock, protocol, sslcontext, waiter=None, *, server_side=False, server_hostname=None, extra=None, server=None)" />
        <scope doc="Write a byte to self-pipe, to wake up the event loop." ilk="function" name="_write_to_self" signature="_write_to_self(self)" />
        <scope ilk="function" name="_stop_serving" signature="_stop_serving(self, sock)" />
        <scope doc="Create socket transport." ilk="function" name="_make_socket_transport" signature="_make_socket_transport(self, sock, protocol, waiter=None, extra=None, server=None)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_socketpair" signature="_socketpair(self)" />
        <scope ilk="function" name="_loop_self_reading" signature="_loop_self_reading(self, f=None)" />
        <scope doc="Process selector events." ilk="function" name="_process_events" signature="_process_events(self, event_list)" />
        <scope ilk="function" name="_make_duplex_pipe_transport" signature="_make_duplex_pipe_transport(self, sock, protocol, waiter=None, extra=None)" />
        <scope ilk="function" name="_make_self_pipe" signature="_make_self_pipe(self)" />
        <scope ilk="function" name="sock_recv" signature="sock_recv(self, sock, n)" />
        <scope ilk="function" name="sock_accept" signature="sock_accept(self, sock)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="base_events" />
      <import module="compat" />
      <import module="constants" />
      <import module="futures" />
      <variable citdl="Logger" name="logger" />
      <import module="socket" />
      <import module="sslproto" />
      <import module="transports" />
      <import module="warnings" />
    </scope>
    <scope doc="The Python Debugger Pdb&#10;=======================  To use the debugger in its simplest form:  &gt;&gt;&gt; import pdb &gt;&gt;&gt; pdb.run('&lt;a statement&gt;')  The debugger's prompt is '(Pdb) '.  This will stop in the first function call in &lt;a statement&gt;. " ilk="blob" lang="Python3" name="pdb">
      <scope classrefs="Bdb Cmd" doc="Generic Python debugger base class.&#10;This class takes care of details of the trace facility; a derived class should implement user interaction. The standard debugger class (pdb.Pdb) is an example." ilk="class" name="Pdb">
        <scope doc="This function is called if an exception occurs, but only if&#10;we are to stop at or just below this level." ilk="function" name="user_exception" signature="user_exception(self, frame, exc_info)" />
        <scope ilk="function" name="lineinfo" signature="lineinfo(self, identifier)" />
        <scope ilk="function" name="complete_commands" signature="complete_commands(self, text, line, begidx, endidx)" />
        <scope doc="exit Quit from the debugger." ilk="function" name="do_exit" signature="q(uit)" />
        <scope doc="Without argument, print the list of available commands." ilk="function" name="do_h" signature="h(elp)" />
        <scope ilk="function" name="complete_debug" signature="complete_debug(self, text, line, begidx, endidx)" />
        <scope doc="# General interaction function" ilk="function" name="_cmdloop" signature="_cmdloop(self)" />
        <scope doc="Print a stack trace, with the most recent frame at the&#10;bottom." ilk="function" name="do_w" signature="w(here)" />
        <scope ilk="function" name="complete_pp" signature="complete_pp(self, text, line, begidx, endidx)" />
        <scope doc="Handles one command line during command list definition." ilk="function" name="handle_command_def" signature="handle_command_def(self, line)" />
        <scope ilk="function" name="complete_clear" signature="complete_clear(self, text, line, begidx, endidx)" />
        <scope doc="List source code for the current file." ilk="function" name="do_l" signature="l(ist) [first [,last] | .]" />
        <scope doc="debug code Enter a recursive debugger that steps through the&#10;code argument (which is an arbitrary expression or statement&#10;to be executed in the current environment)." ilk="function" name="do_debug" signature="do_debug(self, arg)" />
        <scope ilk="function" name="setup" signature="setup(self, f, tb)" />
        <scope doc="Check whether specified line seems to be executable." ilk="function" name="checkline" signature="checkline(self, filename, lineno)" />
        <scope doc="Without argument, continue execution until the line with a&#10;number greater than the current one is reached." ilk="function" name="do_unt" signature="unt(il) [lineno]" />
        <scope doc="undisplay [expression]" ilk="function" name="do_undisplay" signature="do_undisplay(self, arg)" />
        <scope ilk="function" name="forget" signature="forget(self)" />
        <scope doc="retval Print the return value for the last return of a&#10;function." ilk="function" name="do_retval" signature="do_retval(self, arg)" />
        <scope ilk="function" name="complete_disable" signature="complete_disable(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="complete_cl" signature="complete_cl(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Helper function for break/clear parsing -- may be&#10;overridden." ilk="function" name="lookupmodule" signature="lookupmodule(self, filename)" />
        <scope doc="This method is called when there is the remote possibility&#10;that we ever need to stop in this function." ilk="function" name="user_call" signature="user_call(self, frame, argument_list)" />
        <scope doc="Call every command that was set for the current active&#10;breakpoint (if there is one)." ilk="function" name="bp_commands" signature="bp_commands(self, frame)" />
        <scope ilk="function" name="complete_ignore" signature="complete_ignore(self, text, line, begidx, endidx)" />
        <scope doc="Continue execution, only stop when a breakpoint is&#10;encountered." ilk="function" name="do_c" signature="c(ont(inue))" />
        <scope ilk="function" name="_getval" signature="_getval(self, arg)" />
        <scope ilk="function" name="complete_print" signature="complete_print(self, text, line, begidx, endidx)" />
        <scope doc="Move the current frame count (default one) levels up in the&#10;stack trace (to an older frame)." ilk="function" name="do_up" signature="u(p) [count]" />
        <scope ilk="function" name="complete_enable" signature="complete_enable(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="complete_unalias" signature="complete_unalias(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="complete_display" signature="complete_display(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="_select_frame" signature="_select_frame(self, number)" />
        <scope doc="condition bpnumber [condition] Set a new condition for the&#10;breakpoint, an expression which must evaluate to true before&#10;the breakpoint is honored." ilk="function" name="do_condition" signature="do_condition(self, arg)" />
        <scope doc="Without argument, print the list of available commands." ilk="function" name="do_help" signature="h(elp)" />
        <scope doc="Continue execution, only stop when a breakpoint is&#10;encountered." ilk="function" name="do_continue" signature="c(ont(inue))" />
        <scope doc="Without argument, continue execution until the line with a&#10;number greater than the current one is reached." ilk="function" name="do_until" signature="unt(il) [lineno]" />
        <scope doc="Set the next line that will be executed." ilk="function" name="do_jump" signature="j(ump) lineno" />
        <scope doc="Without argument, list all breaks." ilk="function" name="do_break" signature="b(reak) [ ([filename:]lineno | function) [, condition] ]" />
        <scope doc="longlist | ll List the whole source code for the current&#10;function or frame." ilk="function" name="do_longlist" signature="do_longlist(self, arg)" />
        <scope doc="Without argument, list all breaks." ilk="function" name="do_b" signature="b(reak) [ ([filename:]lineno | function) [, condition] ]" />
        <scope ilk="function" name="error" signature="error(self, msg)" />
        <scope doc="run [args...] Restart the debugged python program." ilk="function" name="do_run" signature="do_run(self, arg)" />
        <scope doc="Print the argument list of the current function." ilk="function" name="do_a" signature="a(rgs)" />
        <scope ilk="function" name="complete_undisplay" signature="complete_undisplay(self, text, line, begidx, endidx)" />
        <scope doc="p expression Print the value of the expression." ilk="function" name="do_p" signature="do_p(self, arg)" />
        <scope ilk="function" name="_getval_except" signature="_getval_except(self, arg, frame=None)" />
        <scope doc="With a space separated list of breakpoint numbers, clear&#10;those breakpoints." ilk="function" name="do_cl" signature="cl(ear) filename:lineno&#10;cl(ear) [bpnumber [bpnumber...]]" />
        <scope doc="exit Quit from the debugger." ilk="function" name="do_quit" signature="q(uit)" />
        <scope doc="exit Quit from the debugger." ilk="function" name="do_q" signature="q(uit)" />
        <scope ilk="function" name="complete_whatis" signature="complete_whatis(self, text, line, begidx, endidx)" />
        <scope doc="Continue execution until the current function returns." ilk="function" name="do_r" signature="r(eturn)" />
        <scope ilk="function" name="_complete_bpnumber" signature="_complete_bpnumber(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="_complete_expression" signature="_complete_expression(self, text, line, begidx, endidx)" />
        <scope doc="display [expression]" ilk="function" name="do_display" signature="do_display(self, arg)" />
        <scope doc="# Can be executed earlier than 'setup' if desired" ilk="function" name="execRcLines" signature="execRcLines(self)" />
        <scope ilk="function" name="interaction" signature="interaction(self, frame, traceback)" />
        <scope doc="Continue execution, only stop when a breakpoint is&#10;encountered." ilk="function" name="do_cont" signature="c(ont(inue))" />
        <scope ilk="function" name="print_stack_entry" signature="print_stack_entry(self, frame_lineno, prompt_prefix='\n-&gt; ')" />
        <scope doc="pp expression Pretty-print the value of the expression." ilk="function" name="do_pp" signature="do_pp(self, arg)" />
        <scope doc="Called on an input line when the command prefix is not&#10;recognized." ilk="function" name="default" signature="default(self, line)" />
        <scope doc="Execute the current line, stop at the first possible&#10;occasion (either in a function that is called or in the&#10;current function)." ilk="function" name="do_s" signature="s(tep)" />
        <scope doc="Print the argument list of the current function." ilk="function" name="do_args" signature="a(rgs)" />
        <scope doc="Continue execution until the next line in the current&#10;function is reached or it returns." ilk="function" name="do_n" signature="n(ext)" />
        <scope doc="ignore bpnumber [count] Set the ignore count for the given&#10;breakpoint number." ilk="function" name="do_ignore" signature="do_ignore(self, arg)" />
        <scope doc="With a space separated list of breakpoint numbers, clear&#10;those breakpoints." ilk="function" name="do_clear" signature="cl(ear) filename:lineno&#10;cl(ear) [bpnumber [bpnumber...]]" />
        <scope doc="Custom displayhook for the exec in default(), which prevents&#10;assignment of the _ variable in the builtins." ilk="function" name="displayhook" signature="displayhook(self, obj)" />
        <scope doc="Print a stack trace, with the most recent frame at the&#10;bottom." ilk="function" name="do_where" signature="w(here)" />
        <scope doc="Interpret the argument as though it had been typed in&#10;response to the prompt." ilk="function" name="onecmd" signature="onecmd(self, line)" />
        <scope doc="interact" ilk="function" name="do_interact" signature="do_interact(self, arg)" />
        <scope doc="run [args...] Restart the debugged python program." ilk="function" name="do_restart" signature="do_restart(self, arg)" />
        <scope doc="Move the current frame count (default one) levels up in the&#10;stack trace (to an older frame)." ilk="function" name="do_u" signature="u(p) [count]" />
        <scope ilk="function" name="complete_condition" signature="complete_condition(self, text, line, begidx, endidx)" />
        <scope doc="longlist | ll List the whole source code for the current&#10;function or frame." ilk="function" name="do_ll" signature="do_ll(self, arg)" />
        <scope doc="Hook method executed once when the cmdloop() method is&#10;called." ilk="function" name="preloop" signature="preloop(self)" />
        <scope doc="Continue execution until the current function returns." ilk="function" name="do_return" signature="r(eturn)" />
        <scope ilk="function" name="print_stack_trace" signature="print_stack_trace(self)" />
        <scope doc="Execute the current line, stop at the first possible&#10;occasion (either in a function that is called or in the&#10;current function)." ilk="function" name="do_step" signature="s(tep)" />
        <scope ilk="function" name="complete_b" signature="complete_b(self, text, line, begidx, endidx)" />
        <scope doc="This function is called when a return trap is set here." ilk="function" name="user_return" signature="user_return(self, frame, return_value)" />
        <scope doc="enable bpnumber [bpnumber ...] Enables the breakpoints given&#10;as a space separated list of breakpoint numbers." ilk="function" name="do_enable" signature="do_enable(self, arg)" />
        <scope ilk="function" name="_runscript" signature="_runscript(self, filename)" />
        <scope doc="Print a range of lines." ilk="function" name="_print_lines" signature="_print_lines(self, lines, start, breaks=(), frame=None)" />
        <scope doc="EOF Handles the receipt of EOF as a command." ilk="function" name="do_EOF" signature="do_EOF(self, arg)" />
        <scope doc="alias [name [command [parameter parameter ...] ]] Create an&#10;alias called 'name' that executes 'command'." ilk="function" name="do_alias" signature="do_alias(self, arg)" />
        <scope doc="Set the next line that will be executed." ilk="function" name="do_j" signature="j(ump) lineno" />
        <scope ilk="function" name="complete_p" signature="complete_p(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="sigint_handler" signature="sigint_handler(self, signum, frame)" />
        <scope doc="Continue execution until the next line in the current&#10;function is reached or it returns." ilk="function" name="do_next" signature="n(ext)" />
        <scope ilk="function" name="message" signature="message(self, msg)" />
        <scope doc="Produce a reasonable default." ilk="function" name="defaultFile" signature="defaultFile(self)" />
        <scope doc="Instantiate a line-oriented interpreter framework." ilk="function" name="__init__" signature="__init__(self, completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False)" />
        <scope ilk="function" name="complete_tbreak" signature="complete_tbreak(self, text, line, begidx, endidx)" />
        <scope ilk="function" name="_complete_location" signature="_complete_location(self, text, line, begidx, endidx)" />
        <scope doc="source expression Try to get source code for the given&#10;object and display it." ilk="function" name="do_source" signature="do_source(self, arg)" />
        <scope doc="List source code for the current file." ilk="function" name="do_list" signature="l(ist) [first [,last] | .]" />
        <scope doc="tbreak [ ([filename:]lineno | function) [, condition] ] Same&#10;arguments as break, but sets a temporary breakpoint: it is&#10;automatically deleted when first hit." ilk="function" name="do_tbreak" signature="do_tbreak(self, arg)" />
        <scope doc="unalias name Delete the specified alias." ilk="function" name="do_unalias" signature="do_unalias(self, arg)" />
        <scope doc="whatis arg Print the type of the argument." ilk="function" name="do_whatis" signature="do_whatis(self, arg)" />
        <scope ilk="function" name="complete_break" signature="complete_break(self, text, line, begidx, endidx)" />
        <scope doc="This function is called when we stop or break at this line." ilk="function" name="user_line" signature="user_line(self, frame)" />
        <scope doc="retval Print the return value for the last return of a&#10;function." ilk="function" name="do_rv" signature="do_rv(self, arg)" />
        <scope ilk="function" name="complete_source" signature="complete_source(self, text, line, begidx, endidx)" />
        <scope doc="Handle alias expansion and ';;' separator." ilk="function" name="precmd" signature="precmd(self, line)" />
        <scope doc="(!) statement Execute the (one-line) statement in the&#10;context of the current stack frame." ilk="function" name="help_exec" signature="help_exec(self)" />
        <scope doc="Move the current frame count (default one) levels down in&#10;the stack trace (to a newer frame)." ilk="function" name="do_d" signature="d(own) [count]" />
        <scope doc="disable bpnumber [bpnumber ...] Disables the breakpoints&#10;given as a space separated list of breakpoint numbers." ilk="function" name="do_disable" signature="do_disable(self, arg)" />
        <scope doc="Move the current frame count (default one) levels down in&#10;the stack trace (to a newer frame)." ilk="function" name="do_down" signature="d(own) [count]" />
        <scope doc="Print a stack trace, with the most recent frame at the&#10;bottom." ilk="function" name="do_bt" signature="w(here)" />
        <scope ilk="function" name="help_pdb" signature="help_pdb(self)" />
        <scope doc="commands [bpnumber] (com) ..." ilk="function" name="do_commands" signature="do_commands(self, arg)" />
      </scope>
      <scope classrefs="Exception" doc="Causes a debugger to be restarted for the debugged python program.&#10;" ilk="class" name="Restart" />
      <variable citdl="str" name="TESTCMD" />
      <variable citdl="list" name="__all__" />
      <import module="bdb" />
      <import module="cmd" />
      <import module="code" />
      <import module="dis" />
      <scope ilk="function" name="find_function" signature="find_function(funcname, filename)" />
      <scope ilk="function" name="getsourcelines" signature="getsourcelines(obj)" />
      <import module="glob" />
      <scope doc="# print help" ilk="function" name="help" signature="help()" />
      <import module="inspect" />
      <scope ilk="function" name="lasti2lineno" signature="lasti2lineno(code, lasti)" />
      <variable citdl="str" name="line_prefix" />
      <import module="linecache" />
      <scope ilk="function" name="main" signature="main()" />
      <import module="os" />
      <scope ilk="function" name="pm" signature="pm()" />
      <scope ilk="function" name="post_mortem" signature="post_mortem(t=None)" />
      <import module="pprint" />
      <import module="re" />
      <scope ilk="function" name="run" signature="run(statement, globals=None, locals=None)" />
      <scope ilk="function" name="runcall" signature="runcall(*args, **kwds)" />
      <scope ilk="function" name="runctx" signature="runctx(statement, globals, locals)" />
      <scope ilk="function" name="runeval" signature="runeval(expression, globals=None, locals=None)" />
      <scope ilk="function" name="set_trace" signature="set_trace()" />
      <import module="signal" />
      <import module="sys" />
      <scope ilk="function" name="test" signature="test()" />
      <import module="traceback" />
    </scope>
    <scope doc="Utilities needed to emulate Python's interactive interpreter.&#10;" ilk="blob" lang="Python3" name="code">
      <scope classrefs="object" doc="Instances of this class have __call__ methods identical in&#10;signature to compile_command; the difference is that if the instance compiles program text containing a __future__ statement, the instance 'remembers' and compiles all subsequent program texts with the statement in force." ilk="class" name="CommandCompiler">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Compile a command and determine whether it is incomplete." ilk="function" name="__call__" signature="__call__(self, source, filename='&lt;input&gt;', symbol='single')" />
      </scope>
      <scope classrefs="InteractiveInterpreter" doc="Closely emulate the behavior of the interactive Python interpreter.&#10;This class builds on InteractiveInterpreter and adds prompting using the familiar sys.ps1 and sys.ps2, and input buffering." ilk="class" name="InteractiveConsole">
        <scope doc="Push a line to the interpreter." ilk="function" name="push" signature="push(self, line)" />
        <scope doc="Closely emulate the interactive Python console." ilk="function" name="interact" signature="interact(self, banner=None)" />
        <scope doc="Constructor." ilk="function" name="__init__" signature="__init__(self, locals=None, filename='&lt;console&gt;')" />
        <scope doc="Reset the input buffer." ilk="function" name="resetbuffer" signature="resetbuffer(self)" />
        <scope doc="Write a prompt and read a line." ilk="function" name="raw_input" signature="raw_input(self, prompt='')" />
      </scope>
      <scope classrefs="object" doc="Base class for InteractiveConsole.&#10;This class deals with parsing and interpreter state (the user's namespace); it doesn't deal with input buffering or prompting or input file naming (the filename is always passed in explicitly)." ilk="class" name="InteractiveInterpreter">
        <scope doc="Execute a code object." ilk="function" name="runcode" signature="runcode(self, code)" />
        <scope doc="Write a string." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Compile and run some source in the interpreter." ilk="function" name="runsource" signature="runsource(self, source, filename='&lt;input&gt;', symbol='single')" />
        <scope doc="Constructor." ilk="function" name="__init__" signature="__init__(self, locals=None)" />
        <scope doc="Display the syntax error that just occurred." ilk="function" name="showsyntaxerror" signature="showsyntaxerror(self, filename=None)" />
        <scope doc="Display the exception that just occurred." ilk="function" name="showtraceback" signature="showtraceback(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="argparse" />
      <scope doc="Compile a command and determine whether it is incomplete." ilk="function" name="compile_command" signature="compile_command(source, filename='&lt;input&gt;', symbol='single')" />
      <scope doc="Closely emulate the interactive Python interpreter." ilk="function" name="interact" signature="interact(banner=None, readfunc=None, local=None)" />
      <import module="sys" />
      <import module="traceback" />
    </scope>
    <scope doc="Fixer for reload().&#10;reload(s) -&gt; imp.reload(s)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_reload">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixReload">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Returns an import statement and calls a method of the&#10;module:" ilk="function" name="ImportAndCall" signature="ImportAndCall(node, results, names)" />
      <import module="fixer_base" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Provide access to Python's configuration information.  The specific&#10;configuration variables available depend heavily on the platform and configuration.  The values may be retrieved using get_config_var(name), and the list of variables is available via get_config_vars().keys().  Additional convenience functions are also available.  Written by:   Fred L. Drake, Jr. Email:        &lt;fdrake@acm.org&gt;" ilk="blob" lang="Python3" name="distutils.sysconfig">
      <variable citdl="str" name="BASE_EXEC_PREFIX" />
      <variable citdl="str" name="BASE_PREFIX" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <variable citdl="str" name="EXEC_PREFIX" />
      <variable citdl="str" name="PREFIX" />
      <import module="_imp" />
      <variable citdl="str" name="build_flags" />
      <scope doc="Do any platform-specific customization of a CCompiler&#10;instance." ilk="function" name="customize_compiler" signature="customize_compiler(compiler)" />
      <scope doc="Expand Makefile-style variables -- &quot;${foo}&quot; or &quot;$(foo)&quot; --&#10;in 'string' according to 'vars' (a dictionary mapping&#10;variable names to values)." ilk="function" name="expand_makefile_vars" signature="expand_makefile_vars(s, vars)" />
      <scope doc="Return full pathname of installed pyconfig.h file." ilk="function" name="get_config_h_filename" signature="get_config_h_filename()" />
      <scope doc="Return the value of a single variable using the dictionary&#10;returned by 'get_config_vars()'." ilk="function" name="get_config_var" signature="get_config_var(name)" />
      <scope doc="With no arguments, return a dictionary of all configuration&#10;variables relevant for the current platform." ilk="function" name="get_config_vars" signature="get_config_vars(*args)" />
      <scope doc="Return full pathname of installed Makefile from the Python&#10;build." ilk="function" name="get_makefile_filename" signature="get_makefile_filename()" />
      <scope doc="Return the directory containing installed Python header&#10;files." ilk="function" name="get_python_inc" signature="get_python_inc(plat_specific=0, prefix=None)" />
      <scope doc="Return the directory containing the Python library (standard&#10;or site additions)." ilk="function" name="get_python_lib" signature="get_python_lib(plat_specific=0, standard_lib=0, prefix=None)" />
      <scope doc="Return a string containing the major and minor Python&#10;version, leaving off the patchlevel." ilk="function" name="get_python_version" signature="get_python_version()" />
      <import module="os" />
      <scope doc="Parse a config.h-style file." ilk="function" name="parse_config_h" signature="parse_config_h(fp, g=None)" />
      <scope doc="Parse a Makefile-style file." ilk="function" name="parse_makefile" signature="parse_makefile(fn, g=None)" />
      <variable citdl="str" name="project_base" />
      <variable citdl="bool" name="python_build" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="Support to pretty-print lists, tuples, &amp; dictionaries recursively.&#10;Very simple, but useful, especially in debugging data structures.  Classes -------  PrettyPrinter() Handle pretty-printing operations onto a stream using a configured set of formatting parameters.  Functions" ilk="blob" lang="Python3" name="pprint">
      <scope classrefs="object" doc="&#10;" ilk="class" name="PrettyPrinter">
        <scope ilk="function" name="_pprint_str" signature="_pprint_str(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_format_items" signature="_format_items(self, items, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="isreadable" signature="isreadable(self, object)" />
        <scope ilk="function" name="pformat" signature="pformat(self, object)" />
        <scope ilk="function" name="isrecursive" signature="isrecursive(self, object)" />
        <scope ilk="function" name="_pprint_list" signature="_pprint_list(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_dict" signature="_pprint_dict(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_bytearray" signature="_pprint_bytearray(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_set" signature="_pprint_set(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_repr" signature="_repr(self, object, context, level)" />
        <scope ilk="function" name="_pprint_user_string" signature="_pprint_user_string(self, object, stream, indent, allowance, context, level)" />
        <scope doc="Handle pretty printing operations onto a stream using a set&#10;of configured parameters." ilk="function" name="__init__" signature="__init__(self, indent=1, width=80, depth=None, stream=None, *, compact=False)" />
        <scope ilk="function" name="pprint" signature="pprint(self, object)" />
        <scope doc="Format object for a specific context, returning a string and&#10;flags indicating whether the representation is 'readable'&#10;and whether the object represents a recursive construct." ilk="function" name="format" signature="format(self, object, context, maxlevels, level)" />
        <scope ilk="function" name="_pprint_ordered_dict" signature="_pprint_ordered_dict(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_tuple" signature="_pprint_tuple(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_format" signature="_format(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_counter" signature="_pprint_counter(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_bytes" signature="_pprint_bytes(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_user_list" signature="_pprint_user_list(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_default_dict" signature="_pprint_default_dict(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_mappingproxy" signature="_pprint_mappingproxy(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_user_dict" signature="_pprint_user_dict(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_deque" signature="_pprint_deque(self, object, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_format_dict_items" signature="_format_dict_items(self, items, stream, indent, allowance, context, level)" />
        <scope ilk="function" name="_pprint_chain_map" signature="_pprint_chain_map(self, object, stream, indent, allowance, context, level)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_collections" />
      <import module="_sys" />
      <import module="_types" />
      <scope doc="Determine if saferepr(object) is readable by eval()." ilk="function" name="isreadable" signature="isreadable(object)" />
      <scope doc="Determine if object requires a recursive representation." ilk="function" name="isrecursive" signature="isrecursive(object)" />
      <scope doc="Format a Python object into a pretty-printed representation." ilk="function" name="pformat" signature="pformat(object, indent=1, width=80, depth=None, *, compact=False)" />
      <scope doc="Pretty-print a Python object to a stream [default is&#10;sys.stdout]." ilk="function" name="pprint" signature="pprint(object, stream=None, indent=1, width=80, depth=None, *, compact=False)" />
      <import module="re" />
      <scope doc="Version of repr() which can handle recursive data&#10;structures." ilk="function" name="saferepr" signature="saferepr(object)" />
    </scope>
    <scope doc="Stuff to parse WAVE files.&#10;Usage.  Reading WAVE files: f = wave.open(file, 'r') where file is either the name of a file or an open file pointer. The open file pointer must have methods read(), seek(), and close(). When the setpos() and rewind() methods are not used, the seek() method is not  necessary.  This returns an instance of a class with the following public methods:" ilk="blob" lang="Python3" name="wave">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Chunk">
        <scope doc="Read at most size bytes from the chunk." ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Skip the rest of the chunk." ilk="function" name="skip" signature="skip(self)" />
        <scope ilk="function" name="isatty" signature="isatty(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the name (ID) of the current chunk." ilk="function" name="getname" signature="getname(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope doc="Return the size of the current chunk." ilk="function" name="getsize" signature="getsize(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file, align=True, bigendian=True, inclheader=False)" />
        <scope doc="Seek to specified position into the chunk." ilk="function" name="seek" signature="seek(self, pos, whence=0)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="int" name="WAVE_FORMAT_PCM" />
      <scope classrefs="object" doc="Variables used in this class:&#10;These variables are available to the user though appropriate methods of this class: _file -- the open file with methods read(), close(), and seek() set through the __init__() method _nchannels -- the number of audio channels available through the getnchannels() method _nframes -- the number of audio frames available through the getnframes() method _sampwidth -- the number of bytes per audio sample available through the getsampwidth() method" ilk="class" name="Wave_read">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="setpos" signature="setpos(self, pos)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
        <scope ilk="function" name="getmark" signature="getmark(self, id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="rewind" signature="rewind(self)" />
        <scope ilk="function" name="_read_fmt_chunk" signature="_read_fmt_chunk(self, chunk)" />
        <scope doc="# User visible methods." ilk="function" name="getfp" signature="getfp(self)" />
        <scope ilk="function" name="getmarkers" signature="getmarkers(self)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="readframes" signature="readframes(self, nframes)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
      </scope>
      <scope classrefs="object" doc="Variables used in this class:&#10;These variables are user settable through appropriate methods of this class: _file -- the open file with methods write(), close(), tell(), seek() set through the __init__() method _comptype -- the AIFF-C compression type ('NONE' in AIFF) set through the setcomptype() or setparams() method _compname -- the human-readable AIFF-C compression type set through the setcomptype() or setparams() method _nchannels -- the number of audio channels set through the setnchannels() or setparams() method" ilk="class" name="Wave_write">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="writeframes" signature="writeframes(self, data)" />
        <scope ilk="function" name="_ensure_header_written" signature="_ensure_header_written(self, datasize)" />
        <scope ilk="function" name="setcomptype" signature="setcomptype(self, comptype, compname)" />
        <scope doc="# User visible methods." ilk="function" name="setnchannels" signature="setnchannels(self, nchannels)" />
        <scope ilk="function" name="setsampwidth" signature="setsampwidth(self, sampwidth)" />
        <scope ilk="function" name="getmark" signature="getmark(self, id)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, f)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="getnframes" signature="getnframes(self)" />
        <scope ilk="function" name="setframerate" signature="setframerate(self, framerate)" />
        <scope ilk="function" name="getframerate" signature="getframerate(self)" />
        <scope ilk="function" name="setparams" signature="setparams(self, params)" />
        <scope ilk="function" name="getmarkers" signature="getmarkers(self)" />
        <scope ilk="function" name="initfp" signature="initfp(self, file)" />
        <scope ilk="function" name="setmark" signature="setmark(self, id, pos, name)" />
        <scope ilk="function" name="setnframes" signature="setnframes(self, nframes)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getcomptype" signature="getcomptype(self)" />
        <scope ilk="function" name="getcompname" signature="getcompname(self)" />
        <scope ilk="function" name="_patchheader" signature="_patchheader(self)" />
        <scope ilk="function" name="getsampwidth" signature="getsampwidth(self)" />
        <scope ilk="function" name="tell" signature="tell(self)" />
        <scope ilk="function" name="writeframesraw" signature="writeframesraw(self, data)" />
        <scope ilk="function" name="getparams" signature="getparams(self)" />
        <scope ilk="function" name="getnchannels" signature="getnchannels(self)" />
        <scope ilk="function" name="_write_header" signature="_write_header(self, initlength)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="audioop" />
      <import module="builtins" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope ilk="function" name="open" signature="open(f, mode=None)" />
      <scope ilk="function" name="openfp" signature="openfp(f, mode=None)" />
      <import module="struct" />
      <import module="sys" />
    </scope>
    <scope doc="This module defines an object type which can efficiently represent&#10;an array of basic values: characters, integers, floating point numbers.  Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained." ilk="blob" lang="Python3" name="array">
      <scope classrefs="object" doc="array(typecode [, initializer]) -&gt; array&#10;Return a new array whose items are restricted by typecode, and initialized from the optional initializer value, which must be a list, string or iterable over elements of the appropriate type.  Arrays represent basic values and behave very much like lists, except the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined:  Type code   C Type             Minimum size in bytes" ilk="class" name="ArrayType">
        <scope doc="Return a copy of the array." ilk="function" name="__deepcopy__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Read n objects from the file object f and append them to the&#10;end of the array." ilk="function" name="fromfile" />
        <scope doc="Write all items (as machine values) to the file object f." ilk="function" name="tofile" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Extends this array with data from the unicode string ustr." ilk="function" name="fromunicode" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Append items to the end of the array." ilk="function" name="extend" />
        <scope doc="Convert the array to an array of machine values and return&#10;the bytes representation." ilk="function" name="tobytes" />
        <scope doc="Convert array to an ordinary list with the same items." ilk="function" name="tolist" />
        <scope doc="Return number of occurrences of v in the array." ilk="function" name="count" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Convert the array to an array of machine values and return&#10;the bytes representation." ilk="function" name="tostring" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Size of the array in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce_ex__" />
        <scope doc="Remove the first occurrence of v in the array." ilk="function" name="remove" />
        <scope doc="Reverse the order of the items in the array." ilk="function" name="reverse" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a copy of the array." ilk="function" name="__copy__" />
        <scope doc="Appends items from the string, interpreting it as an array&#10;of machine values, as if it had been read from a file using&#10;the fromfile() method)." ilk="function" name="fromstring" />
        <scope doc="Return index of first occurrence of v in the array." ilk="function" name="index" />
        <scope doc="Extends this array with data from the unicode string ustr." ilk="function" name="tounicode" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Append new value v to the end of the array." ilk="function" name="append" />
        <scope doc="Appends items from the string, interpreting it as an array&#10;of machine values, as if it had been read from a file using&#10;the fromfile() method)." ilk="function" name="frombytes" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Append items to array from list." ilk="function" name="fromlist" />
        <scope doc="Byteswap all items of the array." ilk="function" name="byteswap" />
        <scope doc="Return a tuple (address, length) giving the current memory&#10;address and the length in items of the buffer used to hold&#10;array's contents." ilk="function" name="buffer_info" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return the i-th element and delete it from the array." ilk="function" name="pop" />
        <scope doc="Insert a new item v into the array before position i." ilk="function" name="insert" />
      </scope>
      <scope classrefs="object" doc="array(typecode [, initializer]) -&gt; array&#10;Return a new array whose items are restricted by typecode, and initialized from the optional initializer value, which must be a list, string or iterable over elements of the appropriate type.  Arrays represent basic values and behave very much like lists, except the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined:  Type code   C Type             Minimum size in bytes" ilk="class" name="array">
        <scope doc="Return a copy of the array." ilk="function" name="__deepcopy__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Read n objects from the file object f and append them to the&#10;end of the array." ilk="function" name="fromfile" />
        <scope doc="Write all items (as machine values) to the file object f." ilk="function" name="tofile" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Extends this array with data from the unicode string ustr." ilk="function" name="fromunicode" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Append items to the end of the array." ilk="function" name="extend" />
        <scope doc="Convert the array to an array of machine values and return&#10;the bytes representation." ilk="function" name="tobytes" />
        <scope doc="Convert array to an ordinary list with the same items." ilk="function" name="tolist" />
        <scope doc="Return number of occurrences of v in the array." ilk="function" name="count" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Convert the array to an array of machine values and return&#10;the bytes representation." ilk="function" name="tostring" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Size of the array in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce_ex__" />
        <scope doc="Remove the first occurrence of v in the array." ilk="function" name="remove" />
        <scope doc="Reverse the order of the items in the array." ilk="function" name="reverse" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a copy of the array." ilk="function" name="__copy__" />
        <scope doc="Appends items from the string, interpreting it as an array&#10;of machine values, as if it had been read from a file using&#10;the fromfile() method)." ilk="function" name="fromstring" />
        <scope doc="Return index of first occurrence of v in the array." ilk="function" name="index" />
        <scope doc="Extends this array with data from the unicode string ustr." ilk="function" name="tounicode" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Append new value v to the end of the array." ilk="function" name="append" />
        <scope doc="Appends items from the string, interpreting it as an array&#10;of machine values, as if it had been read from a file using&#10;the fromfile() method)." ilk="function" name="frombytes" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Append items to array from list." ilk="function" name="fromlist" />
        <scope doc="Byteswap all items of the array." ilk="function" name="byteswap" />
        <scope doc="Return a tuple (address, length) giving the current memory&#10;address and the length in items of the buffer used to hold&#10;array's contents." ilk="function" name="buffer_info" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return the i-th element and delete it from the array." ilk="function" name="pop" />
        <scope doc="Insert a new item v into the array before position i." ilk="function" name="insert" />
      </scope>
      <variable citdl="str" name="typecodes" />
    </scope>
    <scope doc="distutils.errors&#10;Provides exceptions used by the Distutils modules.  Note that Distutils modules may raise standard exceptions; in particular, SystemExit is usually raised for errors that are obviously the end-user's fault (eg. bad command-line arguments).  This module is safe to use in &quot;from ... import *&quot; mode; it only exports symbols whose names start with &quot;Distutils&quot; and end with &quot;Error&quot;." ilk="blob" lang="Python3" name="distutils.errors">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-freebsd6.IN">
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IFA6_IS_DEPRECATED" signature="IFA6_IS_DEPRECATED(a)" />
      <scope ilk="function" name="IFA6_IS_INVALID" signature="IFA6_IS_INVALID(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_INTFACELOCAL" signature="IN6_IS_ADDR_MC_INTFACELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <scope ilk="function" name="IN6_IS_SCOPE_LINKLOCAL" signature="IN6_IS_SCOPE_LINKLOCAL(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_MAX" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CARP" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MOBILE" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OLD_DIVERT" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PFSYNC" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SCTP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SKIP" />
      <variable citdl="int" name="IPPROTO_SPACER" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TLSP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_ADDRCTLPOLICY" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_AUTO_LINKLOCAL" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_IFQ" />
      <variable citdl="int" name="IPV6CTL_ISATAPRTR" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MCAST_PMTU" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6CTL_RIP6STATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_STEALTH" />
      <variable citdl="int" name="IPV6CTL_TEMPPLTIME" />
      <variable citdl="int" name="IPV6CTL_TEMPVLTIME" />
      <variable citdl="int" name="IPV6CTL_USETEMPADDR" />
      <variable citdl="int" name="IPV6CTL_USE_DEFAULTZONE" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6CTL_V6ONLY" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_2292DSTOPTS" />
      <variable citdl="int" name="IPV6_2292HOPLIMIT" />
      <variable citdl="int" name="IPV6_2292HOPOPTS" />
      <variable citdl="int" name="IPV6_2292NEXTHOP" />
      <variable citdl="int" name="IPV6_2292PKTINFO" />
      <variable citdl="int" name="IPV6_2292PKTOPTIONS" />
      <variable citdl="int" name="IPV6_2292RTHDR" />
      <variable citdl="int" name="IPV6_ADDR_INT16_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_ULL" />
      <variable citdl="int" name="IPV6_ADDR_INT16_USL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MLL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_MNL" />
      <variable citdl="int" name="IPV6_ADDR_INT32_ONE" />
      <variable citdl="int" name="IPV6_ADDR_INT32_SMP" />
      <variable citdl="int" name="IPV6_ADDR_INT32_TWO" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_GLOBAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_INTFACELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_LINKLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_NODELOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_ORGLOCAL" />
      <variable citdl="int" name="IPV6_ADDR_SCOPE_SITELOCAL" />
      <variable citdl="int" name="IPV6_AUTOFLOWLABEL" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DONTFRAG" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PATHMTU" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_PREFER_TEMPADDR" />
      <variable citdl="int" name="IPV6_REACHCONF" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVHOPLIMIT" />
      <variable citdl="int" name="IPV6_RECVHOPOPTS" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVPATHMTU" />
      <variable citdl="int" name="IPV6_RECVPKTINFO" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RECVRTHDR" />
      <variable citdl="int" name="IPV6_RECVRTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RECVTCLASS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDRDSTOPTS" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_TCLASS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_USE_MIN_MTU" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DONTFRAG" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_TABLE_ADD" />
      <variable citdl="int" name="IP_FW_TABLE_DEL" />
      <variable citdl="int" name="IP_FW_TABLE_FLUSH" />
      <variable citdl="int" name="IP_FW_TABLE_GETSIZE" />
      <variable citdl="int" name="IP_FW_TABLE_LIST" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MINTTL" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_ONESBCAST" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RECVTTL" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_SENDSRCADDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="__CC_SUPPORTS___FUNC__" />
      <variable citdl="int" name="__CC_SUPPORTS___INLINE__" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="in_nullhost" signature="in_nullhost(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
    </scope>
    <scope doc="Redo the builtin repr() (representation) but with limits on most sizes.&#10;" ilk="blob" lang="Python3" name="reprlib">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Repr">
        <scope ilk="function" name="repr_int" signature="repr_int(self, x, level)" />
        <scope ilk="function" name="_repr_iterable" signature="_repr_iterable(self, x, level, left, right, maxiter, trail='')" />
        <scope ilk="function" name="repr_frozenset" signature="repr_frozenset(self, x, level)" />
        <scope ilk="function" name="repr" signature="repr(self, x)" />
        <scope ilk="function" name="repr_dict" signature="repr_dict(self, x, level)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="repr_array" signature="repr_array(self, x, level)" />
        <scope ilk="function" name="repr_str" signature="repr_str(self, x, level)" />
        <scope ilk="function" name="repr_tuple" signature="repr_tuple(self, x, level)" />
        <scope ilk="function" name="repr_instance" signature="repr_instance(self, x, level)" />
        <scope ilk="function" name="repr_list" signature="repr_list(self, x, level)" />
        <scope ilk="function" name="repr_deque" signature="repr_deque(self, x, level)" />
        <scope ilk="function" name="repr_set" signature="repr_set(self, x, level)" />
        <scope ilk="function" name="repr1" signature="repr1(self, x, level)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="Repr" name="aRepr" />
      <import module="builtins" />
      <scope doc="Return a non-zero integer that uniquely identifies the&#10;current thread amongst other threads that exist&#10;simultaneously." ilk="function" name="get_ident" returns="int" signature="get_ident() -&gt; integer" />
      <scope classrefs="object" doc="islice(iterable, stop) --&gt; islice object&#10;islice(iterable, start, stop[, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Decorator to make a repr function return fillvalue for a&#10;recursive call" ilk="function" name="recursive_repr" signature="recursive_repr(fillvalue='...')" />
      <scope ilk="function" name="repr" />
    </scope>
    <scope doc="Registration facilities for DOM. This module should not be used&#10;directly. Instead, the functions getDOMImplementation and registerDOMImplementation should be imported from xml.dom." ilk="blob" lang="Python3" name="xml.dom.domreg">
      <scope doc="Return a suitable DOM implementation." ilk="function" name="getDOMImplementation" signature="getDOMImplementation(name = None, features = ()) -&gt; DOM implementation." />
      <scope doc="Register the factory function with the name." ilk="function" name="registerDOMImplementation" signature="registerDOMImplementation(name, factory)" />
      <variable citdl="dict" name="registered" />
      <variable citdl="dict" name="well_known_implementations" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="collections">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AsyncIterable">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="AsyncIterable" doc="&#10;" ilk="class" name="AsyncIterator">
        <scope ilk="function" name="__aiter__" signature="__aiter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item or raise StopAsyncIteration when&#10;exhausted." ilk="function" name="__anext__" signature="__anext__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Awaitable">
        <scope ilk="function" name="__await__" signature="__await__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Sequence" doc="This unifies bytes and bytearray.&#10;XXX Should add all their methods." ilk="class" name="ByteString" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Callable">
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwds)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MutableMapping" doc="A ChainMap groups multiple dicts (or other mappings) together&#10;to create a single, updateable view.  The underlying mappings are stored in a list.  That list is public and can accessed or updated using the *maps* attribute.  There is no other state.  Lookups search the underlying mappings successively until a key is found. In contrast, writes, updates, and deletions only operate on the first mapping." ilk="class" name="ChainMap">
        <scope doc="Clear maps[0], leaving maps[1:] intact." ilk="function" name="clear" signature="clear(self)" />
        <scope doc="Create a ChainMap with a single dict created from the&#10;iterable." ilk="function" name="fromkeys" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize a ChainMap by setting *maps* to the given&#10;mappings." ilk="function" name="__init__" signature="__init__(self, *maps)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="Remove and return an item pair from maps[0]." ilk="function" name="popitem" signature="popitem(self)" />
        <scope ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="New ChainMap with a new map followed by all previous maps." ilk="function" name="new_child" signature="new_child(self, m=None)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Remove *key* from maps[0] and return its value." ilk="function" name="pop" signature="pop(self, key, *args)" />
        <scope doc="New ChainMap or subclass with a new copy of maps[0] and refs&#10;to maps[1:]" ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__bool__" signature="__bool__(self)" />
        <scope doc="New ChainMap or subclass with a new copy of maps[0] and refs&#10;to maps[1:]" ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope ilk="function" name="__missing__" signature="__missing__(self, key)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Container">
        <scope ilk="function" name="__contains__" signature="__contains__(self, x)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Awaitable" doc="&#10;" ilk="class" name="Coroutine">
        <scope doc="Send a value into the coroutine." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the coroutine." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="dict" doc="Dict subclass for counting hashable items.  Sometimes called a bag&#10;or multiset.  Elements are stored as dictionary keys and their counts are stored as dictionary values.  &gt;&gt;&gt; c = Counter('abcdeabcdabcaba')  # count elements from a string  &gt;&gt;&gt; c.most_common(3)                # three most common elements [('a', 5), ('b', 4), ('c', 3)] &gt;&gt;&gt; sorted(c)                       # list all unique elements ['a', 'b', 'c', 'd', 'e'] &gt;&gt;&gt; ''.join(sorted(c.elements()))   # list elements with repetitions" ilk="class" name="Counter">
        <scope doc="Like dict.update() but subtracts counts instead of replacing&#10;them." ilk="function" name="subtract" signature="subtract(*args, **kwds)" />
        <scope doc="Returns a new dict with keys from iterable and values equal&#10;to value." ilk="function" name="fromkeys" />
        <scope doc="Subtracts from an empty counter." ilk="function" name="__neg__" signature="__neg__(self)" />
        <scope doc="Inplace union is the maximum of value from either counter." ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope doc="Inplace add from another counter, keeping only positive&#10;counts." ilk="function" name="__iadd__" signature="__iadd__(self, other)" />
        <scope doc="Like dict.__delitem__() but does not raise KeyError for&#10;missing values." ilk="function" name="__delitem__" signature="__delitem__(self, elem)" />
        <scope doc="List the n most common elements and their counts from the&#10;most common to the least." ilk="function" name="most_common" signature="most_common(self, n=None)" />
        <scope doc="Create a new, empty Counter object." ilk="function" name="__init__" signature="__init__(*args, **kwds)" />
        <scope doc="Internal method to strip elements with a negative or zero&#10;count" ilk="function" name="_keep_positive" signature="_keep_positive(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Intersection is the minimum of corresponding counts." ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope doc="Subtract count, but keep only results with positive counts." ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Union is the maximum of value in either of the input&#10;counters." ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope doc="Adds an empty counter, effectively stripping negative and&#10;zero counts" ilk="function" name="__pos__" signature="__pos__(self)" />
        <scope doc="Like dict.update() but add counts instead of replacing them." ilk="function" name="update" signature="update(*args, **kwds)" />
        <scope doc="Return a shallow copy." ilk="function" name="copy" signature="copy(self)" />
        <scope doc="Add counts from two counters." ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope doc="Inplace subtract counter, but keep only results with&#10;positive counts." ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope doc="The count of elements not in the Counter is zero." ilk="function" name="__missing__" signature="__missing__(self, key)" />
        <scope doc="Iterator over elements repeating each as many times as its&#10;count." ilk="function" name="elements" signature="elements(self)" />
        <scope doc="Inplace intersection is the minimum of corresponding counts." ilk="function" name="__iand__" signature="__iand__(self, other)" />
      </scope>
      <scope classrefs="Iterator" doc="&#10;" ilk="class" name="Generator">
        <scope doc="Send a value into the generator." ilk="function" name="send" signature="send(self, value)" />
        <scope doc="Raise an exception in the generator." ilk="function" name="throw" signature="throw(self, typ, val=None, tb=None)" />
        <scope doc="Raise GeneratorExit inside generator." ilk="function" name="close" signature="close(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
        <scope doc="Return the next item from the generator." ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Hashable">
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="ItemsView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Iterable">
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Iterable" doc="&#10;" ilk="class" name="Iterator">
        <scope doc="Return the next item from the iterator." ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MappingView Set" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="KeysView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="&#10;" ilk="class" name="Mapping">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
      </scope>
      <scope classrefs="Sized" doc="&#10;" ilk="class" name="MappingView">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, mapping)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="Mapping" doc="&#10;" ilk="class" name="MutableMapping">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
      </scope>
      <scope classrefs="Sequence" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="MutableSequence">
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="S.reverse()" />
        <scope doc="S.clear() -&gt; None -- remove all items from S" ilk="function" name="clear" signature="S.clear() -&gt; None -- remove all items from S" />
        <scope doc="extend sequence by appending elements from the iterable" ilk="function" name="extend" signature="S.extend(iterable)" />
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, values)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, index)" />
        <scope doc="Raise IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="S.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, index, value)" />
        <scope doc="append value to the end of the sequence" ilk="function" name="append" signature="S.append(value)" />
        <scope doc="insert value before index" ilk="function" name="insert" signature="S.insert(index, value)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="S.remove(value)" />
      </scope>
      <scope classrefs="Set" doc="A mutable set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__, __len__, add(), and discard().  To override the comparisons (presumably for speed, as the semantics are fixed), all you have to do is redefine __le__ and then the other operations will automatically follow suit." ilk="class" name="MutableSet">
        <scope doc="This is slow (creates N new iterators!) but effective." ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, it)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, it)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, it)" />
        <scope doc="Return the popped value. Raise KeyError if empty." ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Add an element." ilk="function" name="add" signature="add(self, value)" />
        <scope doc="Remove an element. If not a member, raise a KeyError." ilk="function" name="remove" signature="remove(self, value)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, it)" />
        <scope doc="Remove an element. Do not raise an exception if absent." ilk="function" name="discard" signature="discard(self, value)" />
      </scope>
      <scope classrefs="dict" doc="Dictionary that remembers insertion order&#10;" ilk="class" name="OrderedDict">
        <scope doc="od.clear() -&gt; None.  Remove all items from od." ilk="function" name="clear" signature="od.clear() -&gt; None.  Remove all items from od." />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="od.__reversed__() &lt;==&gt; reversed(od)" ilk="function" name="__reversed__" signature="od.__reversed__() &lt;==&gt; reversed(od)" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Move an existing element to the end (or beginning if&#10;last==False)." ilk="function" name="move_to_end" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="od.copy() -&gt; a shallow copy of od" ilk="function" name="copy" signature="od.copy() -&gt; a shallow copy of od" />
        <scope doc="Pairs are returned in LIFO order if last is true or FIFO&#10;order if false." ilk="function" name="popitem" signature="od.popitem() -&gt; (k, v), return and remove a (key, value) pair." />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="value." ilk="function" name="pop" signature="od.pop(k[,d]) -&gt; v, remove specified key and return the corresponding" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="If E is present and has a .keys() method, then does:  for k&#10;in E: D[k] = E[k] If E is present and lacks a .keys()&#10;method, then does:  for k, v in E: D[k] = v In either case,&#10;this is followed by: for k in F:  D[k] = F[k]" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F." />
        <scope doc="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" ilk="function" name="setdefault" signature="od.setdefault(k[,d]) -&gt; od.get(k,d), also set od[k]=d if k not in od" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
        <scope doc="D.__sizeof__() -&gt; size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__() -&gt; size of D in memory, in bytes" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="Sequence">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__reversed__" signature="__reversed__(self)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="A set is a finite, iterable container.&#10;This class provides concrete generic implementations of all methods except for __contains__, __iter__ and __len__.  To override the comparisons (presumably for speed, as the semantics are fixed), redefine __le__ and __ge__, then the other operations will automatically follow suit." ilk="class" name="Set">
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope doc="Construct an instance of the class from any iterable input." ilk="function" name="_from_iterable" />
        <scope ilk="function" name="__rxor__" signature="__rxor__(self, other)" />
        <scope ilk="function" name="__rand__" signature="__rand__(self, other)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Compute the hash value of a set." ilk="function" name="_hash" signature="_hash(self)" />
        <scope ilk="function" name="__ror__" signature="__ror__(self, other)" />
        <scope doc="Return True if two sets have a null intersection." ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="__rsub__" signature="__rsub__(self, other)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Sized">
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="MutableMapping" doc="&#10;" ilk="class" name="UserDict">
        <scope ilk="function" name="fromkeys" />
        <scope doc="# Modify __contains__ to work correctly when __missing__ is&#10;present" ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(*args, **kwargs)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, item)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <scope classrefs="MutableSequence" doc="A more or less complete user-defined wrapper around list objects.&#10;" ilk="class" name="UserList">
        <scope doc="S.clear() -&gt; None -- remove all items from S" ilk="function" name="clear" signature="S.clear() -&gt; None -- remove all items from S" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, i)" />
        <scope ilk="function" name="__mul__" signature="__mul__(self, n)" />
        <scope ilk="function" name="sort" signature="sort(self, *args, **kwds)" />
        <scope ilk="function" name="_UserList__cast" signature="_UserList__cast(self, other)" />
        <scope doc="extend sequence by appending elements from the iterable" ilk="function" name="extend" signature="S.extend(iterable)" />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="__iadd__" signature="__iadd__(self, other)" />
        <scope ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope doc="append value to the end of the sequence" ilk="function" name="append" signature="S.append(value)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__imul__" signature="__imul__(self, n)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="S.remove(value)" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="S.reverse()" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, i)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="__radd__" signature="__radd__(self, other)" />
        <scope ilk="function" name="__rmul__" signature="__rmul__(self, n)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, initlist=None)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, i, item)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Raise IndexError if list is empty or index is out of range." ilk="function" name="pop" signature="S.pop([index]) -&gt; item -- remove and return item at index (default last)." />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="insert value before index" ilk="function" name="insert" signature="S.insert(index, value)" />
      </scope>
      <scope classrefs="Sequence" doc="All the operations on a read-only sequence.&#10;Concrete subclasses must override __new__ or __init__, __getitem__, and __len__." ilk="class" name="UserString">
        <scope ilk="function" name="__float__" signature="__float__(self)" />
        <scope ilk="function" name="rstrip" signature="rstrip(self, chars=None)" />
        <scope ilk="function" name="find" signature="find(self, sub, start=0, end=9223372036854775807)" />
        <scope ilk="function" name="endswith" signature="endswith(self, suffix, start=0, end=9223372036854775807)" />
        <scope ilk="function" name="title" signature="title(self)" />
        <scope ilk="function" name="__rmod__" signature="__rmod__(self, format)" />
        <scope ilk="function" name="casefold" signature="casefold(self)" />
        <scope ilk="function" name="__mod__" signature="__mod__(self, args)" />
        <scope ilk="function" name="encode" signature="encode(self, encoding=None, errors=None)" />
        <scope ilk="function" name="rindex" signature="rindex(self, sub, start=0, end=9223372036854775807)" />
        <scope ilk="function" name="expandtabs" signature="expandtabs(self, tabsize=8)" />
        <scope ilk="function" name="strip" signature="strip(self, chars=None)" />
        <scope ilk="function" name="isdecimal" signature="isdecimal(self)" />
        <scope ilk="function" name="rpartition" signature="rpartition(self, sep)" />
        <scope ilk="function" name="__add__" signature="__add__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="translate" signature="translate(self, *args)" />
        <scope ilk="function" name="lstrip" signature="lstrip(self, chars=None)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, string)" />
        <scope ilk="function" name="__radd__" signature="__radd__(self, other)" />
        <scope ilk="function" name="isupper" signature="isupper(self)" />
        <scope ilk="function" name="startswith" signature="startswith(self, prefix, start=0, end=9223372036854775807)" />
        <scope ilk="function" name="format_map" signature="format_map(self, mapping)" />
        <scope ilk="function" name="replace" signature="replace(self, old, new, maxsplit=-1)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, string)" />
        <scope ilk="function" name="ljust" signature="ljust(self, width, *args)" />
        <scope ilk="function" name="splitlines" signature="splitlines(self, keepends=False)" />
        <scope ilk="function" name="isalnum" signature="isalnum(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, char)" />
        <scope ilk="function" name="__mul__" signature="__mul__(self, n)" />
        <scope ilk="function" name="partition" signature="partition(self, sep)" />
        <scope doc="# the following methods are defined in alphabetical order:" ilk="function" name="capitalize" signature="capitalize(self)" />
        <scope ilk="function" name="isnumeric" signature="isnumeric(self)" />
        <scope ilk="function" name="__complex__" signature="__complex__(self)" />
        <scope ilk="function" name="rjust" signature="rjust(self, width, *args)" />
        <scope ilk="function" name="islower" signature="islower(self)" />
        <scope ilk="function" name="rsplit" signature="rsplit(self, sep=None, maxsplit=-1)" />
        <scope ilk="function" name="__int__" signature="__int__(self)" />
        <scope ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope ilk="function" name="isalpha" signature="isalpha(self)" />
        <scope ilk="function" name="upper" signature="upper(self)" />
        <scope doc="S.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="S.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope ilk="function" name="center" signature="center(self, width, *args)" />
        <scope ilk="function" name="format" signature="format(self, *args, **kwds)" />
        <scope ilk="function" name="swapcase" signature="swapcase(self)" />
        <scope ilk="function" name="isprintable" signature="isprintable(self)" />
        <scope ilk="function" name="lower" signature="lower(self)" />
        <scope ilk="function" name="split" signature="split(self, sep=None, maxsplit=-1)" />
        <scope ilk="function" name="isdigit" signature="isdigit(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, index)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, string)" />
        <scope ilk="function" name="__rmul__" signature="__rmul__(self, n)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="S.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, seq)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="istitle" signature="istitle(self)" />
        <scope ilk="function" name="zfill" signature="zfill(self, width)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, string)" />
        <scope ilk="function" name="isidentifier" signature="isidentifier(self)" />
        <scope ilk="function" name="join" signature="join(self, seq)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, string)" />
        <scope ilk="function" name="isspace" signature="isspace(self)" />
        <scope ilk="function" name="rfind" signature="rfind(self, sub, start=0, end=9223372036854775807)" />
      </scope>
      <scope classrefs="MappingView" doc="&#10;" ilk="class" name="ValuesView">
        <scope ilk="function" name="__contains__" signature="__contains__(self, value)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_collections_abc" />
      <import module="_heapq" />
      <import module="_sys" />
      <import module="abc" />
      <scope classrefs="dict" doc="defaultdict(default_factory[, ...]) --&gt; dict with default factory&#10;The default factory is called without arguments to produce a new value when a key is not present, in __getitem__ only. A defaultdict compares equal to a dict with the same items. All remaining arguments are treated the same as if they were passed to the dict constructor, including keyword arguments." ilk="class" name="defaultdict">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="__copy__" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="if self.default_factory is None: raise KeyError((key,))&#10;self[key] = value = self.default_factory() return value" ilk="function" name="__missing__" signature="__missing__(key) # Called by __getitem__ for missing key; pseudo-code:" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
    </scope>
    <scope doc="Provide the _gdbm module as a dbm submodule.&#10;" ilk="blob" lang="Python3" name="dbm.gnu">
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="error" />
      <scope doc="Open a dbm database and return a dbm object." ilk="function" name="open" />
      <variable citdl="str" name="open_flags" />
    </scope>
    <scope doc="Pseudo terminal utilities.&#10;" ilk="blob" lang="Python3" name="pty">
      <variable citdl="int" name="CHILD" />
      <variable citdl="int" name="STDERR_FILENO" />
      <variable citdl="int" name="STDIN_FILENO" />
      <variable citdl="int" name="STDOUT_FILENO" />
      <variable citdl="list" name="__all__" />
      <scope doc="Fork and make the child a session leader with a controlling&#10;terminal." ilk="function" name="fork" signature="fork() -&gt; (pid, master_fd)" />
      <scope doc="Open a pty master and return the fd, and the filename of the&#10;slave end." ilk="function" name="master_open" signature="master_open() -&gt; (master_fd, slave_name)" />
      <scope doc="Open a pty master/slave pair, using os.openpty() if&#10;possible." ilk="function" name="openpty" signature="openpty() -&gt; (master_fd, slave_fd)" />
      <import module="os" />
      <scope doc="Wait until one or more file descriptors are ready for some&#10;kind of I/O." ilk="function" name="select" signature="select(rlist, wlist, xlist[, timeout]) -&gt; (rlist, wlist, xlist)" />
      <scope doc="Open the pty slave and acquire the controlling terminal,&#10;returning opened filedescriptor." ilk="function" name="slave_open" signature="slave_open(tty_name) -&gt; slave_fd" />
      <scope doc="Create a spawned process." ilk="function" name="spawn" signature="spawn(argv, master_read=&lt;function _read at 0x7f117ca5a488&gt;, stdin_read=&lt;function _read at 0x7f117ca5a488&gt;)" />
      <import module="tty" />
    </scope>
    <scope doc="Pattern compiler.&#10;The grammer is taken from PatternGrammar.txt.  The compiler compiles a pattern to a pytree.*Pattern instance." ilk="blob" lang="Python3" name="lib2to3.patcomp">
      <scope classrefs="object" doc="&#10;" ilk="class" name="PatternCompiler">
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, grammar_file='/tmp/Python-3.5.1/Lib/lib2to3/PatternGrammar.txt')" />
        <scope ilk="function" name="compile_basic" signature="compile_basic(self, nodes, repeat=None)" />
        <scope doc="Compiles a pattern string to a nested pytree.*Pattern&#10;object." ilk="function" name="compile_pattern" signature="compile_pattern(self, input, debug=False, with_tree=False)" />
        <scope ilk="function" name="get_int" signature="get_int(self, node)" />
        <scope doc="Compiles a node, recursively." ilk="function" name="compile_node" signature="compile_node(self, node)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="PatternSyntaxError" />
      <variable citdl="dict" name="TOKEN_MAP" />
      <scope ilk="function" name="compile_pattern" signature="compile_pattern(pattern)" />
      <import module="driver" />
      <import module="grammar" />
      <import module="io" />
      <import module="literals" />
      <import module="os" />
      <import module="parse" />
      <scope doc="Converts raw node information to a Node or Leaf instance." ilk="function" name="pattern_convert" signature="pattern_convert(grammar, raw_node_info)" />
      <import module="pygram" />
      <import module="pytree" />
      <import module="token" />
      <import module="tokenize" />
      <scope doc="Tokenizes a string suppressing significant whitespace." ilk="function" name="tokenize_wrapper" signature="tokenize_wrapper(input)" />
    </scope>
    <scope doc="Fixer for sys.exc_{type, value, traceback}&#10;sys.exc_type -&gt; sys.exc_info()[0] sys.exc_value -&gt; sys.exc_info()[1] sys.exc_traceback -&gt; sys.exc_info()[2]" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_sys_exc">
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixSysExc">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope ilk="function" name="Number" signature="Number(n, prefix=None)" />
      <scope doc="A numeric or string subscript" ilk="function" name="Subscript" signature="Subscript(index_node)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Additional handlers for the logging package for Python. The core package is&#10;based on PEP 282 and comments thereto in comp.lang.python.  Copyright (C) 2001-2015 Vinay Sajip. All Rights Reserved.  To use, simply 'import logging.handlers' and log away!" ilk="blob" lang="Python3" name="logging.handlers">
      <scope classrefs="FileHandler" doc="Base class for handlers that rotate log files at a certain point.&#10;Not meant to be instantiated directly.  Instead, use RotatingFileHandler or TimedRotatingFileHandler." ilk="class" name="BaseRotatingHandler">
        <scope doc="Use the specified filename for streamed logging" ilk="function" name="__init__" signature="__init__(self, filename, mode, encoding=None, delay=False)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="When rotating, rotate the current log." ilk="function" name="rotate" signature="rotate(self, source, dest)" />
        <scope doc="Modify the filename of a log file when rotating." ilk="function" name="rotation_filename" signature="rotation_filename(self, default_name)" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which buffers logging records in memory. Whenever each&#10;record is added to the buffer, a check is made to see if the buffer should be flushed. If it should, then flush() is expected to do what's needed." ilk="class" name="BufferingHandler">
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Close the handler." ilk="function" name="close" signature="close(self)" />
        <scope doc="Override to implement custom flushing behaviour." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Initialize the handler with the buffer size." ilk="function" name="__init__" signature="__init__(self, capacity)" />
        <scope doc="Should the handler flush its buffer?" ilk="function" name="shouldFlush" signature="shouldFlush(self, record)" />
      </scope>
      <variable citdl="int" name="DEFAULT_HTTP_LOGGING_PORT" />
      <variable citdl="int" name="DEFAULT_SOAP_LOGGING_PORT" />
      <variable citdl="int" name="DEFAULT_TCP_LOGGING_PORT" />
      <variable citdl="int" name="DEFAULT_UDP_LOGGING_PORT" />
      <scope classrefs="SocketHandler" doc="A handler class which writes logging records, in pickle format, to&#10;a datagram socket.  The pickle which is sent is that of the LogRecord's attribute dictionary (__dict__), so that the receiver does not need to have the logging module installed in order to process the logging event.  To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord function." ilk="class" name="DatagramHandler">
        <scope doc="Initializes the handler with a specific host address and&#10;port." ilk="function" name="__init__" signature="__init__(self, host, port)" />
        <scope doc="Send a pickled string to a socket." ilk="function" name="send" signature="send(self, s)" />
        <scope doc="The factory method of SocketHandler is here overridden to&#10;create a UDP socket (SOCK_DGRAM)." ilk="function" name="makeSocket" signature="makeSocket(self)" />
      </scope>
      <scope classrefs="Handler" doc="A class which sends records to a Web server, using either GET or&#10;POST semantics." ilk="class" name="HTTPHandler">
        <scope doc="Initialize the instance with the host, the request URL, and&#10;the method (&quot;GET&quot; or &quot;POST&quot;)" ilk="function" name="__init__" signature="__init__(self, host, url, method='GET', secure=False, credentials=None, context=None)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Default implementation of mapping the log record into a dict&#10;that is sent as the CGI data." ilk="function" name="mapLogRecord" signature="mapLogRecord(self, record)" />
      </scope>
      <scope classrefs="BufferingHandler" doc="A handler class which buffers logging records in memory, periodically&#10;flushing them to a target handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen." ilk="class" name="MemoryHandler">
        <scope doc="Flush, set the target to None and lose the buffer." ilk="function" name="close" signature="close(self)" />
        <scope doc="For a MemoryHandler, flushing means just sending the&#10;buffered records to the target, if there is one." ilk="function" name="flush" signature="flush(self)" />
        <scope doc="Initialize the handler with the buffer size, the level at&#10;which flushing should occur and an optional target." ilk="function" name="__init__" signature="__init__(self, capacity, flushLevel=40, target=None)" />
        <scope doc="Check for buffer full or a record at the flushLevel or&#10;higher." ilk="function" name="shouldFlush" signature="shouldFlush(self, record)" />
        <scope doc="Set the target handler for this handler." ilk="function" name="setTarget" signature="setTarget(self, target)" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends events to the NT Event Log. Adds a&#10;registry entry for the specified application name. If no dllname is provided, win32service.pyd (which contains some basic message placeholders) is used. Note that use of these placeholders will make your event logs big, as the entire message source is held in the log. If you want slimmer logs, you have to pass in the name of your own DLL which contains the message definitions you want to use in the event log." ilk="class" name="NTEventLogHandler">
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Clean up this handler." ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the message ID for the event record." ilk="function" name="getMessageID" signature="getMessageID(self, record)" />
        <scope doc="Initializes the instance - basically setting the formatter&#10;to None and the filter list to empty." ilk="function" name="__init__" signature="__init__(self, appname, dllname=None, logtype='Application')" />
        <scope doc="Return the event type for the record." ilk="function" name="getEventType" signature="getEventType(self, record)" />
        <scope doc="Return the event category for the record." ilk="function" name="getEventCategory" signature="getEventCategory(self, record)" />
      </scope>
      <scope classrefs="Handler" doc="This handler sends events to a queue. Typically, it would be used together&#10;with a multiprocessing Queue to centralise logging to file in one process (in a multi-process application), so as to avoid file write contention between processes.  This code is new in Python 3.2, but this class can be copy pasted into user code for use with earlier Python versions." ilk="class" name="QueueHandler">
        <scope doc="Initialise an instance, using the passed queue." ilk="function" name="__init__" signature="__init__(self, queue)" />
        <scope doc="Prepares a record for queuing." ilk="function" name="prepare" signature="prepare(self, record)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Enqueue a record." ilk="function" name="enqueue" signature="enqueue(self, record)" />
      </scope>
      <scope classrefs="object" doc="This class implements an internal threaded listener which watches for&#10;LogRecords being added to a queue, removes them and passes them to a list of handlers for processing." ilk="class" name="QueueListener">
        <scope doc="Initialise an instance with the specified queue and&#10;handlers." ilk="function" name="__init__" signature="__init__(self, queue, *handlers, respect_handler_level=False)" />
        <scope doc="Handle a record." ilk="function" name="handle" signature="handle(self, record)" />
        <scope doc="Stop the listener." ilk="function" name="stop" signature="stop(self)" />
        <scope doc="Monitor the queue for records, and ask the handler to deal&#10;with them." ilk="function" name="_monitor" signature="_monitor(self)" />
        <scope doc="Prepare a record for handling." ilk="function" name="prepare" signature="prepare(self, record)" />
        <scope doc="Dequeue a record and return it, optionally blocking." ilk="function" name="dequeue" signature="dequeue(self, block)" />
        <scope doc="This is used to enqueue the sentinel record." ilk="function" name="enqueue_sentinel" signature="enqueue_sentinel(self)" />
        <scope doc="Start the listener." ilk="function" name="start" signature="start(self)" />
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a set of files, which switches from one file&#10;to the next when the current file reaches a certain size." ilk="class" name="RotatingFileHandler">
        <scope doc="Open the specified file and use it as the stream for&#10;logging." ilk="function" name="__init__" signature="__init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False)" />
        <scope doc="Determine if rollover should occur." ilk="function" name="shouldRollover" signature="shouldRollover(self, record)" />
        <scope doc="Do a rollover, as described in __init__()." ilk="function" name="doRollover" signature="doRollover(self)" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends an SMTP email for each logging event.&#10;" ilk="class" name="SMTPHandler">
        <scope doc="Initialize the handler." ilk="function" name="__init__" signature="__init__(self, mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=5.0)" />
        <scope doc="Determine the subject for the email." ilk="function" name="getSubject" signature="getSubject(self, record)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
      </scope>
      <variable citdl="int" name="ST_DEV" />
      <variable citdl="int" name="ST_INO" />
      <variable citdl="int" name="ST_MTIME" />
      <variable citdl="int" name="SYSLOG_TCP_PORT" />
      <variable citdl="int" name="SYSLOG_UDP_PORT" />
      <scope classrefs="Handler" doc="A handler class which writes logging records, in pickle format, to&#10;a streaming socket. The socket is kept open across logging calls. If the peer resets it, an attempt is made to reconnect on the next call. The pickle which is sent is that of the LogRecord's attribute dictionary (__dict__), so that the receiver does not need to have the logging module installed in order to process the logging event.  To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord function." ilk="class" name="SocketHandler">
        <scope doc="Send a pickled string to the socket." ilk="function" name="send" signature="send(self, s)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Closes the socket." ilk="function" name="close" signature="close(self)" />
        <scope doc="Try to create a socket, using an exponential backoff with a&#10;max retry time." ilk="function" name="createSocket" signature="createSocket(self)" />
        <scope doc="Initializes the handler with a specific host address and&#10;port." ilk="function" name="__init__" signature="__init__(self, host, port)" />
        <scope doc="Pickles the record in binary format with a length prefix,&#10;and returns it ready for transmission across the socket." ilk="function" name="makePickle" signature="makePickle(self, record)" />
        <scope doc="A factory method which allows subclasses to define the&#10;precise type of socket they want." ilk="function" name="makeSocket" signature="makeSocket(self, timeout=1)" />
        <scope doc="Handle an error during logging." ilk="function" name="handleError" signature="handleError(self, record)" />
      </scope>
      <scope classrefs="Handler" doc="A handler class which sends formatted logging records to a syslog&#10;server. Based on Sam Rushing's syslog module: http://www.nightmare.com/squirl/python-ext/misc/syslog.py Contributed by Nicolas Untz (after which minor refactoring changes have been made)." ilk="class" name="SysLogHandler">
        <scope doc="Encode the facility and priority." ilk="function" name="encodePriority" signature="encodePriority(self, facility, priority)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope doc="Closes the socket." ilk="function" name="close" signature="close(self)" />
        <scope doc="Map a logging level name to a key in the priority_names map." ilk="function" name="mapPriority" signature="mapPriority(self, levelName)" />
        <scope ilk="function" name="_connect_unixsocket" signature="_connect_unixsocket(self, address)" />
        <scope doc="Initialize a handler." ilk="function" name="__init__" signature="__init__(self, address=('localhost', 514), facility=1, socktype=None)" />
      </scope>
      <scope classrefs="BaseRotatingHandler" doc="Handler for logging to a file, rotating the log file at certain timed&#10;intervals.  If backupCount is &gt; 0, when rollover is done, no more than backupCount files are kept - the oldest ones are deleted." ilk="class" name="TimedRotatingFileHandler">
        <scope doc="Determine if rollover should occur." ilk="function" name="shouldRollover" signature="shouldRollover(self, record)" />
        <scope doc="Use the specified filename for streamed logging" ilk="function" name="__init__" signature="__init__(self, filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None)" />
        <scope doc="Work out the rollover time based on the specified time." ilk="function" name="computeRollover" signature="computeRollover(self, currentTime)" />
        <scope doc="Determine the files to delete when rolling over." ilk="function" name="getFilesToDelete" signature="getFilesToDelete(self)" />
        <scope doc="do a rollover; in this case, a date/time stamp is appended&#10;to the filename when the rollover happens." ilk="function" name="doRollover" signature="doRollover(self)" />
      </scope>
      <scope classrefs="FileHandler" doc="A handler for logging to a file, which watches the file&#10;to see if it has changed while in use. This can happen because of usage of programs such as newsyslog and logrotate which perform log file rotation. This handler, intended for use under Unix, watches the file to see if it has changed since the last emit. (A file has changed if its device or inode have changed.) If it has changed, the old file stream is closed, and the file opened to get a new stream.  This handler is not appropriate for use under Windows, because under Windows open files cannot be moved or renamed - logging" ilk="class" name="WatchedFileHandler">
        <scope doc="Open the specified file and use it as the stream for&#10;logging." ilk="function" name="__init__" signature="__init__(self, filename, mode='a', encoding=None, delay=False)" />
        <scope doc="Emit a record." ilk="function" name="emit" signature="emit(self, record)" />
        <scope ilk="function" name="_statstream" signature="_statstream(self)" />
      </scope>
      <import module="logging" />
      <import module="os" />
      <import module="pickle" />
      <import module="queue" />
      <import module="re" />
      <import module="socket" />
      <import module="struct" />
      <import module="threading" />
      <import module="time" />
    </scope>
    <scope doc="plistlib.py -- a tool to generate and parse MacOSX .plist files.&#10;The property list (.plist) file format is a simple XML pickle supporting basic object types, like dictionaries, lists, numbers and strings. Usually the top level object is a dictionary.  To write out a plist file, use the dump(value, file) function. 'value' is the top level object, 'file' is a (writable) file object.  To parse a plist from a file, use the load(file) function, with a (readable) file object as the only argument. It" ilk="blob" lang="Python3" name="plistlib">
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="object" doc="Wrapper for binary data.&#10;This class is deprecated, use a bytes object instead." ilk="class" name="Data">
        <scope ilk="function" name="fromBase64" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="asBase64" signature="asBase64(self, maxlinelength=76)" />
      </scope>
      <scope classrefs="_InternalDict" doc="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="Dict">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, **kwargs)" />
      </scope>
      <variable citdl="PlistFormat" name="FMT_BINARY" />
      <variable citdl="PlistFormat" name="FMT_XML" />
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="InvalidFileException">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, message='Invalid file')" />
      </scope>
      <variable citdl="bytes" name="PLISTHEADER" />
      <scope doc="Return a new XML parser object." ilk="function" name="ParserCreate" />
      <scope classrefs="_InternalDict" doc="This class has been deprecated. Use dump() and load()&#10;functions instead, together with regular dict objects." ilk="class" name="Plist">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, **kwargs)" />
        <scope doc="Deprecated. Use the dump() function instead." ilk="function" name="write" signature="write(self, pathOrFile)" />
        <scope doc="Deprecated. Use the load() function instead." ilk="function" name="fromFile" />
      </scope>
      <scope classrefs="Enum" doc="An enumeration.&#10;" ilk="class" name="PlistFormat" />
      <variable citdl="list" name="__all__" />
      <import module="binascii" />
      <import module="codecs" />
      <import module="contextlib" />
      <import module="datetime" />
      <scope doc="Write 'value' to a .plist file." ilk="function" name="dump" signature="dump(value, fp, *, fmt=&lt;PlistFormat.FMT_XML: 1&gt;, sort_keys=True, skipkeys=False)" />
      <scope doc="Return a bytes object with the contents for a .plist file." ilk="function" name="dumps" signature="dumps(value, *, fmt=&lt;PlistFormat.FMT_XML: 1&gt;, skipkeys=False, sort_keys=True)" />
      <import module="enum" />
      <import module="itertools" />
      <scope doc="Read a .plist file. 'fp' should be (readable) file object." ilk="function" name="load" signature="load(fp, *, fmt=None, use_builtin_types=True, dict_type=&lt;class 'dict'&gt;)" />
      <scope doc="Read a .plist file from a bytes object." ilk="function" name="loads" signature="loads(value, *, fmt=None, use_builtin_types=True, dict_type=&lt;class 'dict'&gt;)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Read a .plist from a path or file." ilk="function" name="readPlist" signature="readPlist(pathOrFile)" />
      <scope doc="Read a plist data from a bytes object." ilk="function" name="readPlistFromBytes" signature="readPlistFromBytes(data)" />
      <import module="struct" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Write 'value' to a .plist file." ilk="function" name="writePlist" signature="writePlist(value, pathOrFile)" />
      <scope doc="Return 'value' as a plist-formatted bytes object." ilk="function" name="writePlistToBytes" signature="writePlistToBytes(value)" />
    </scope>
    <scope doc="# On Unix we run a server process which keeps track of unlinked&#10;# semaphores. The server ignores SIGINT and SIGTERM and reads from a # pipe.  Every other process of the program has a copy of the writable # end of the pipe, so we get EOF when all other processes have exited. # Then the server process unlinks any remaining semaphore names. # # This is important because the system only supports a limited number # of named semaphores, and they will not be automatically removed till # the next reboot.  Without this semaphore tracker process, &quot;killall # python&quot; would probably leave unlinked semaphores. #" ilk="blob" lang="Python3" name="multiprocessing.semaphore_tracker">
      <scope classrefs="object" doc="&#10;" ilk="class" name="SemaphoreTracker">
        <scope doc="Register name of semaphore with semaphore tracker." ilk="function" name="register" signature="register(self, name)" />
        <scope ilk="function" name="_send" signature="_send(self, cmd, name)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Make sure that semaphore tracker process is running." ilk="function" name="ensure_running" signature="ensure_running(self)" />
        <scope doc="Unregister name of semaphore with semaphore tracker." ilk="function" name="unregister" signature="unregister(self, name)" />
        <scope ilk="function" name="getfd" signature="getfd(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_multiprocessing" />
      <scope doc="Make sure that semaphore tracker process is running." ilk="function" name="ensure_running" />
      <scope ilk="function" name="getfd" />
      <scope doc="Run semaphore tracker." ilk="function" name="main" signature="main(fd)" />
      <import module="os" />
      <scope doc="Register name of semaphore with semaphore tracker." ilk="function" name="register" />
      <import module="signal" />
      <import module="spawn" />
      <import module="sys" />
      <import module="threading" />
      <scope doc="Unregister name of semaphore with semaphore tracker." ilk="function" name="unregister" />
      <import module="util" />
      <import module="warnings" />
    </scope>
    <scope doc="Lightweight XML support for Python.&#10;XML is an inherently hierarchical data format, and the most natural way to represent it is with a tree.  This module has two classes for this purpose:  1. ElementTree represents the whole XML document as a tree and  2. Element represents a single node in this tree.  Interactions with the whole document (reading and writing to/from files) are usually done on the ElementTree level.  Interactions with a single XML element and its sub-elements are done on the Element level." ilk="blob" lang="Python3" name="xml.etree.ElementTree">
      <scope doc="Comment element factory." ilk="function" name="Comment" signature="Comment(text=None)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Element">
        <scope ilk="function" name="__deepcopy__" />
        <scope ilk="function" name="clear" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="find" />
        <scope ilk="function" name="findtext" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope ilk="function" name="__copy__" />
        <scope ilk="function" name="iter" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope ilk="function" name="itertext" />
        <scope ilk="function" name="set" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="--" ilk="function" name="getiterator" signature="iter($self, /, tag=None)" />
        <scope ilk="function" name="extend" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope ilk="function" name="get" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope ilk="function" name="keys" />
        <scope ilk="function" name="findall" />
        <scope ilk="function" name="__setstate__" />
        <scope ilk="function" name="makeelement" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope ilk="function" name="getchildren" />
        <scope ilk="function" name="__getstate__" />
        <scope ilk="function" name="append" />
        <scope ilk="function" name="items" />
        <scope ilk="function" name="iterfind" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope ilk="function" name="insert" />
        <scope ilk="function" name="remove" />
      </scope>
      <import module="ElementPath" />
      <scope classrefs="object" doc="An XML element hierarchy.&#10;This class also provides support for serialization to and from standard XML.  *element* is an optional root element node, *file* is an optional file handle or file name of an XML file whose contents will be used to initialize the tree with." ilk="class" name="ElementTree">
        <scope doc="Find first matching element by tag name or path." ilk="function" name="findtext" signature="findtext(self, path, default=None, namespaces=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, element=None, file=None)" />
        <scope doc="Find first matching element by tag name or path." ilk="function" name="find" signature="find(self, path, namespaces=None)" />
        <scope doc="Find all matching subelements by tag name or path." ilk="function" name="findall" signature="findall(self, path, namespaces=None)" />
        <scope doc="Write element tree to a file as XML." ilk="function" name="write" signature="write(self, file_or_filename, encoding=None, xml_declaration=None, default_namespace=None, method=None, *, short_empty_elements=True)" />
        <scope doc="Create and return tree iterator for the root element." ilk="function" name="iter" signature="iter(self, tag=None)" />
        <scope doc="Replace root element of this tree." ilk="function" name="_setroot" signature="_setroot(self, element)" />
        <scope ilk="function" name="write_c14n" signature="write_c14n(self, file)" />
        <scope doc="Return root element of this tree." ilk="function" name="getroot" signature="getroot(self)" />
        <scope doc="Load external XML document into element tree." ilk="function" name="parse" signature="parse(self, source, parser=None)" />
        <scope doc="# compatibility" ilk="function" name="getiterator" signature="getiterator(self, tag=None)" />
        <scope doc="Find all matching subelements by tag name or path." ilk="function" name="iterfind" signature="iterfind(self, path, namespaces=None)" />
      </scope>
      <variable citdl="set" name="HTML_EMPTY" />
      <scope doc="Processing Instruction element factory." ilk="function" name="PI" signature="PI(target, text=None)" />
      <scope classrefs="SyntaxError" doc="Invalid syntax.&#10;" ilk="class" name="ParseError" />
      <scope doc="Processing Instruction element factory." ilk="function" name="ProcessingInstruction" signature="ProcessingInstruction(target, text=None)" />
      <scope classrefs="object" doc="Qualified name wrapper.&#10;This class can be used to wrap a QName attribute value in order to get proper namespace handing on output.  *text_or_uri* is a string containing the QName value either in the form {uri}local, or if the tag argument is given, the URI part of a QName.  *tag* is an optional argument which if given, will make the first argument (text_or_uri) be interpreted as a URI, and this argument (tag) be interpreted as a local name." ilk="class" name="QName">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, text_or_uri, tag=None)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope ilk="function" name="SubElement" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="TreeBuilder">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="close" />
        <scope ilk="function" name="data" />
        <scope ilk="function" name="start" />
        <scope ilk="function" name="end" />
      </scope>
      <variable citdl="str" name="VERSION" />
      <scope doc="Parse XML document from string constant." ilk="function" name="XML" signature="XML(text, parser=None)" />
      <scope doc="Parse XML document from string constant for its IDs." ilk="function" name="XMLID" signature="XMLID(text, parser=None)" />
      <scope classrefs="object" doc="# also see ElementTree and TreeBuilder&#10;" ilk="class" name="XMLParser">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="feed" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope ilk="function" name="_setevents" />
        <scope ilk="function" name="_parse_whole" />
        <scope ilk="function" name="close" />
        <scope ilk="function" name="doctype" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="XMLPullParser">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, events=None, *, _parser=None)" />
        <scope doc="Feed encoded data to parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope ilk="function" name="_close_and_return_root" signature="_close_and_return_root(self)" />
        <scope doc="Finish feeding data to parser." ilk="function" name="close" signature="close(self)" />
        <scope doc="Return an iterator over currently available (event, elem)&#10;pairs." ilk="function" name="read_events" signature="read_events(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="contextlib" />
      <scope doc="Write element tree or element structure to sys.stdout." ilk="function" name="dump" signature="dump(elem)" />
      <scope doc="Parse XML document from string constant." ilk="function" name="fromstring" signature="fromstring(text, parser=None)" />
      <scope doc="Parse XML document from sequence of string fragments." ilk="function" name="fromstringlist" signature="fromstringlist(sequence, parser=None)" />
      <import module="io" />
      <scope doc="Return True if *element* appears to be an Element." ilk="function" name="iselement" signature="iselement(element)" />
      <scope doc="Incrementally parse XML document into ElementTree." ilk="function" name="iterparse" signature="iterparse(source, events=None, parser=None)" />
      <scope doc="Parse XML document into element tree." ilk="function" name="parse" signature="parse(source, parser=None)" />
      <import module="re" />
      <scope doc="Register a namespace prefix." ilk="function" name="register_namespace" signature="register_namespace(prefix, uri)" />
      <import module="sys" />
      <scope doc="Generate string representation of XML element." ilk="function" name="tostring" signature="tostring(element, encoding=None, method=None, *, short_empty_elements=True)" />
      <scope ilk="function" name="tostringlist" signature="tostringlist(element, encoding=None, method=None, *, short_empty_elements=True)" />
      <import module="warnings" />
    </scope>
    <scope doc="distutils.command.build_py&#10;Implements the Distutils 'build_py' command." ilk="blob" lang="Python3" name="distutils.command.build_py">
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" doc="Mixin class for commands that run 2to3.&#10;To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands to override how 2to3 is invoked." ilk="class" name="Mixin2to3">
        <scope ilk="function" name="run_2to3" signature="run_2to3(self, files)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_py">
        <scope doc="Compute the list of all modules that will be built, whether&#10;they are specified one-module-at-a-time ('self.py_modules')&#10;or by whole packages ('self.packages')." ilk="function" name="find_all_modules" signature="find_all_modules(self)" />
        <scope doc="Copy data files into build directory" ilk="function" name="build_package_data" signature="build_package_data(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="build_modules" signature="build_modules(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="find_package_modules" signature="find_package_modules(self, package, package_dir)" />
        <scope ilk="function" name="check_package" signature="check_package(self, package, package_dir)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Return the directory, relative to the top of the source&#10;distribution, where package 'package' should be found (at&#10;least according to the 'package_dir' option, if any)." ilk="function" name="get_package_dir" signature="get_package_dir(self, package)" />
        <scope doc="Finds individually-specified Python modules, ie." ilk="function" name="find_modules" signature="find_modules(self)" />
        <scope ilk="function" name="get_source_files" signature="get_source_files(self)" />
        <scope ilk="function" name="build_module" signature="build_module(self, module, module_file, package)" />
        <scope ilk="function" name="check_module" signature="check_module(self, module, module_file)" />
        <scope ilk="function" name="byte_compile" signature="byte_compile(self, files)" />
        <scope ilk="function" name="get_module_outfile" signature="get_module_outfile(self, build_dir, package, module)" />
        <scope doc="Generate list of '(package,src_dir,build_dir,filenames)'&#10;tuples" ilk="function" name="get_data_files" signature="get_data_files(self)" />
        <scope doc="Return filenames for package's data files in 'src_dir'" ilk="function" name="find_data_files" signature="find_data_files(self, package, src_dir)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self, include_bytecode=1)" />
        <scope ilk="function" name="build_packages" signature="build_packages(self)" />
      </scope>
      <scope classrefs="build_py Mixin2to3" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build_py_2to3">
        <scope ilk="function" name="build_module" signature="build_module(self, module, module_file, package)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
      </scope>
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" name="glob" signature="glob(pathname, *, recursive=False)" />
      <import module="importlib" />
      <import module="log" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="Helper class to quickly write a loop over all standard input files.&#10;Typical use is:  import fileinput for line in fileinput.input(): process(line)  This iterates over the lines of all files listed in sys.argv[1:], defaulting to sys.stdin if the list is empty.  If a filename is '-' it is also replaced by sys.stdin.  To specify an alternative list of filenames, pass it as the argument to input().  A single file name is" ilk="blob" lang="Python3" name="fileinput">
      <variable citdl="int" name="DEFAULT_BUFSIZE" />
      <scope classrefs="object" doc="FileInput([files[, inplace[, backup[, bufsize, [, mode[, openhook]]]]]])&#10;Class FileInput is the implementation of the module; its methods filename(), lineno(), fileline(), isfirstline(), isstdin(), fileno(), nextfile() and close() correspond to the functions of the same name in the module. In addition it has a readline() method which returns the next input line, and a __getitem__() method which implements the sequence behavior. The sequence must be accessed in strictly sequential order; random access and readline() cannot be mixed." ilk="class" name="FileInput">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, i)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)" />
        <scope ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="filelineno" signature="filelineno(self)" />
        <scope ilk="function" name="readline" signature="readline(self)" />
        <scope ilk="function" name="nextfile" signature="nextfile(self)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="isstdin" signature="isstdin(self)" />
        <scope ilk="function" name="lineno" signature="lineno(self)" />
        <scope ilk="function" name="filename" signature="filename(self)" />
        <scope ilk="function" name="isfirstline" signature="isfirstline(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Close the sequence." ilk="function" name="close" signature="close()" />
      <scope doc="Return the line number in the current file." ilk="function" name="filelineno" signature="filelineno()" />
      <scope doc="Return the name of the file currently being read." ilk="function" name="filename" signature="filename()" />
      <scope doc="Return the file number of the current file." ilk="function" name="fileno" signature="fileno()" />
      <scope ilk="function" name="hook_compressed" signature="hook_compressed(filename, mode)" />
      <scope ilk="function" name="hook_encoded" signature="hook_encoded(encoding)" />
      <scope doc="Return an instance of the FileInput class, which can be&#10;iterated." ilk="function" name="input" signature="input(files=None, inplace=False, backup='', bufsize=0, mode='r', openhook=None)" />
      <scope doc="Returns true the line just read is the first line of its&#10;file, otherwise returns false." ilk="function" name="isfirstline" signature="isfirstline()" />
      <scope doc="Returns true if the last line was read from sys.stdin,&#10;otherwise returns false." ilk="function" name="isstdin" signature="isstdin()" />
      <scope doc="Return the cumulative line number of the line that has just&#10;been read." ilk="function" name="lineno" signature="lineno()" />
      <scope doc="Close the current file so that the next iteration will read&#10;the first line from the next file (if any); lines not read&#10;from the file will not count towards the cumulative line&#10;count." ilk="function" name="nextfile" signature="nextfile()" />
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="multiprocessing.forkserver">
      <scope classrefs="object" doc="&#10;" ilk="class" name="ForkServer">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return list of fds inherited from parent process." ilk="function" name="get_inherited_fds" signature="get_inherited_fds(self)" />
        <scope doc="Set list of module names to try to load in forkserver&#10;process." ilk="function" name="set_forkserver_preload" signature="set_forkserver_preload(self, modules_names)" />
        <scope doc="Make sure that a fork server is running." ilk="function" name="ensure_running" signature="ensure_running(self)" />
        <scope doc="Request forkserver to create a child process." ilk="function" name="connect_to_new_process" signature="connect_to_new_process(self, fds)" />
      </scope>
      <variable citdl="int" name="MAXFDS_TO_SEND" />
      <variable citdl="Struct" name="UNSIGNED_STRUCT" />
      <variable citdl="list" name="__all__" />
      <scope doc="Request forkserver to create a child process." ilk="function" name="connect_to_new_process" />
      <import module="connection" />
      <scope doc="Make sure that a fork server is running." ilk="function" name="ensure_running" />
      <import module="errno" />
      <scope doc="Return list of fds inherited from parent process." ilk="function" name="get_inherited_fds" />
      <scope doc="Run forkserver." ilk="function" name="main" signature="main(listener_fd, alive_r, preload, main_path=None, sys_path=None)" />
      <import module="os" />
      <import module="process" />
      <scope ilk="function" name="read_unsigned" signature="read_unsigned(fd)" />
      <import module="reduction" />
      <import module="selectors" />
      <import module="semaphore_tracker" />
      <scope doc="Set list of module names to try to load in forkserver&#10;process." ilk="function" name="set_forkserver_preload" />
      <import module="signal" />
      <import module="socket" />
      <import module="spawn" />
      <import module="struct" />
      <import module="sys" />
      <import module="threading" />
      <import module="util" />
      <scope ilk="function" name="write_unsigned" signature="write_unsigned(fd, n)" />
    </scope>
    <scope doc="# TODO nits:&#10;# Get rid of asserts that are the caller's fault. # Docstrings (e.g. ABCs)." ilk="blob" lang="Python3" name="typing">
      <scope classrefs="Sized Iterable Container" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="AbstractSet" />
      <scope classrefs="Final" doc="Special type indicating an unconstrained type.&#10;- Any object is an instance of Any. - Any class is a subclass of Any. - As a special case, Any and object are subclasses of each other." ilk="class" name="Any" />
      <scope classrefs="TypingMeta" doc="Metaclass for Any.&#10;" ilk="class" name="AnyMeta">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, _root=False)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
      </scope>
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="AnyStr" />
      <scope classrefs="IO" doc="Typed version of the return of open() in binary mode.&#10;" ilk="class" name="BinaryIO">
        <scope ilk="function" name="__enter__" signature="__enter__(self) -&gt; 'BinaryIO'" />
        <scope ilk="function" name="write" returns="int" signature="write(self, s: typing.Union) -&gt; int" />
      </scope>
      <scope classrefs="Sequence" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="ByteString" />
      <scope classrefs="Final" doc="Callable type; Callable[[int], str] is a function of (int) -&gt; str.&#10;The subscription syntax must always be used with exactly two values: the argument list and the return type.  The argument list must be a list of types; the return type must be a single type.  There is no syntax to indicate optional or keyword arguments, such function types are rarely used as callback types." ilk="class" name="Callable" />
      <scope classrefs="TypingMeta" doc="Metaclass for Callable.&#10;" ilk="class" name="CallableMeta">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, parameters)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, _root=False, args=None, result=None)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Override this in subclasses to interpret forward references." ilk="function" name="_eval_type" signature="_eval_type(self, globalns, localns)" />
      </scope>
      <scope classrefs="Generic" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Container" />
      <scope classrefs="dict MutableMapping" doc="dict() -&gt; new empty dictionary&#10;dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)" ilk="class" name="Dict">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="Final">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(self, *args, **kwds)" />
      </scope>
      <scope classrefs="frozenset AbstractSet" doc="frozenset() -&gt; empty frozenset object&#10;frozenset(iterable) -&gt; frozenset object  Build an immutable unordered collection of unique elements." ilk="class" name="FrozenSet">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="Iterator Generic" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Generator">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Generic">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="TypingMeta ABCMeta" doc="Metaclass for generic types.&#10;" ilk="class" name="GenericMeta">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, params)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, parameters=None, origin=None, extra=None)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Hashable">
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="Generic" doc="Generic base class for TextIO and BinaryIO.&#10;This is an abstract, generic version of the return of open().  NOTE: This does not distinguish between the different possible classes (text vs. binary, read vs. write vs. read/write, append-only, unbuffered).  The TextIO and BinaryIO subclasses below capture the distinctions between text vs. binary, which is pervasive in the interface; however we currently do not offer a way to track the other distinctions in the type system." ilk="class" name="IO">
        <scope ilk="function" name="readable" returns="bool" signature="readable(self) -&gt; bool" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback) -&gt; None" />
        <scope ilk="function" name="truncate" returns="int" signature="truncate(self, size: int=None) -&gt; int" />
        <scope ilk="function" name="fileno" returns="int" signature="fileno(self) -&gt; int" />
        <scope ilk="function" name="readlines" signature="readlines(self, hint: int=-1) -&gt; typing.List" />
        <scope ilk="function" name="seek" returns="int" signature="seek(self, offset: int, whence: int=0) -&gt; int" />
        <scope ilk="function" name="readline" signature="readline(self, limit: int=-1) -&gt; typing.AnyStr" />
        <scope ilk="function" name="__enter__" signature="__enter__(self) -&gt; 'IO[AnyStr]'" />
        <scope ilk="function" name="isatty" returns="bool" signature="isatty(self) -&gt; bool" />
        <scope ilk="function" name="close" signature="close(self) -&gt; None" />
        <scope ilk="function" name="writable" returns="bool" signature="writable(self) -&gt; bool" />
        <scope ilk="function" name="flush" signature="flush(self) -&gt; None" />
        <scope ilk="function" name="write" returns="int" signature="write(self, s: typing.AnyStr) -&gt; int" />
        <scope ilk="function" name="read" signature="read(self, n: int=-1) -&gt; typing.AnyStr" />
        <scope ilk="function" name="tell" returns="int" signature="tell(self) -&gt; int" />
        <scope ilk="function" name="writelines" signature="writelines(self, lines: typing.List) -&gt; None" />
        <scope ilk="function" name="seekable" returns="bool" signature="seekable(self) -&gt; bool" />
        <scope ilk="function" name="closed" returns="bool" signature="closed(self) -&gt; bool" />
      </scope>
      <scope classrefs="MappingView Generic" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="ItemsView" />
      <scope classrefs="Generic" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Iterable" />
      <scope classrefs="Iterable" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Iterator" />
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="KT" />
      <scope classrefs="MappingView AbstractSet" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="KeysView" />
      <scope classrefs="list MutableSequence" doc="list() -&gt; new empty list&#10;list(iterable) -&gt; new list initialized from iterable's items" ilk="class" name="List">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="Sized Iterable Container Generic" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Mapping" />
      <scope classrefs="Sized Iterable" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="MappingView" />
      <variable citdl="_TypeAlias" name="Match" />
      <scope classrefs="Mapping" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="MutableMapping" />
      <scope classrefs="Sequence" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="MutableSequence" />
      <scope classrefs="AbstractSet" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="MutableSet" />
      <scope doc="Typed version of namedtuple." ilk="function" name="NamedTuple" signature="NamedTuple(typename, fields)" />
      <scope classrefs="Final" doc="Optional type.&#10;Optional[X] is equivalent to Union[X, type(None)]." ilk="class" name="Optional" />
      <scope classrefs="TypingMeta" doc="Metaclass for Optional.&#10;" ilk="class" name="OptionalMeta">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, _root=False)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, arg)" />
      </scope>
      <variable citdl="_TypeAlias" name="Pattern" />
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="Reversible">
        <scope ilk="function" name="__reversed__" signature="__reversed__(self) -&gt; 'Iterator[T_co]'" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="Sequence" />
      <scope classrefs="set MutableSet" doc="set() -&gt; new empty set object&#10;set(iterable) -&gt; new set object  Build an unordered collection of unique elements." ilk="class" name="Set">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kwds)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Sized">
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsAbs">
        <scope ilk="function" name="__abs__" signature="__abs__(self) -&gt; typing.T_co" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsBytes">
        <scope ilk="function" name="__bytes__" signature="__bytes__(self) -&gt; bytes" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsComplex">
        <scope ilk="function" name="__complex__" returns="complex" signature="__complex__(self) -&gt; complex" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsFloat">
        <scope ilk="function" name="__float__" returns="float" signature="__float__(self) -&gt; float" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsInt">
        <scope ilk="function" name="__int__" returns="int" signature="__int__(self) -&gt; int" />
      </scope>
      <scope classrefs="_Protocol" doc="Internal base class for protocol classes.&#10;This implements a simple-minded structural isinstance check (similar but more general than the one-offs in collections.abc such as Hashable)." ilk="class" name="SupportsRound">
        <scope ilk="function" name="__round__" signature="__round__(self, ndigits: int=0) -&gt; typing.T_co" />
      </scope>
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="T" />
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="T_co" />
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="T_contra" />
      <scope classrefs="IO" doc="Typed version of the return of open() in text mode.&#10;" ilk="class" name="TextIO">
        <scope ilk="function" name="__enter__" signature="__enter__(self) -&gt; 'TextIO'" />
      </scope>
      <scope classrefs="Final" doc="Tuple type; Tuple[X, Y] is the cross-product type of X and Y.&#10;Example: Tuple[T1, T2] is a tuple of two elements corresponding to type variables T1 and T2.  Tuple[int, float, str] is a tuple of an int, a float and a string.  To specify a variable-length tuple of homogeneous type, use Sequence[T]." ilk="class" name="Tuple" />
      <scope classrefs="TypingMeta" doc="Metaclass for Tuple.&#10;" ilk="class" name="TupleMeta">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, parameters)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, parameters=None, use_ellipsis=False, _root=False)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Override this in subclasses to interpret forward references." ilk="function" name="_eval_type" signature="_eval_type(self, globalns, localns)" />
      </scope>
      <scope classrefs="TypingMeta" doc="Type variable.&#10;Usage::  T = TypeVar('T')  # Can be anything A = TypeVar('A', str, bytes)  # Must be str or bytes  Type variables exist primarily for the benefit of static type checkers.  They serve as the parameters for generic types as well as for generic function definitions.  See class Generic for more information on generic types.  Generic functions work as follows: " ilk="class" name="TypeVar">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, *constraints, bound=None, covariant=False, contravariant=False)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
      </scope>
      <scope classrefs="type" doc="Metaclass for every type defined below.&#10;This overrides __new__() to require an extra keyword parameter '_root', which serves as a guard against naive subclassing of the typing classes.  Any legitimate class defined using a metaclass derived from TypingMeta (including internal subclasses created by e.g.  Union[X, Y]) must pass _root=True.  This also defines a dummy constructor (all the work is done in __new__) and a nicer repr()." ilk="class" name="TypingMeta">
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, *, _root=False)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwds)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Override this in subclasses to interpret forward references." ilk="function" name="_eval_type" signature="_eval_type(self, globalns, localns)" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
      </scope>
      <scope classrefs="Final" doc="Union type; Union[X, Y] means either X or Y.&#10;To define a union, use e.g. Union[int, str].  Details:  - The arguments must be types and there must be at least one.  - None as an argument is a special case and is replaced by type(None).  - Unions of unions are flattened, e.g.::  Union[Union[int, str], float] == Union[int, str, float]" ilk="class" name="Union" />
      <scope classrefs="TypingMeta" doc="Metaclass for Union.&#10;" ilk="class" name="UnionMeta">
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope ilk="function" name="_has_type_var" signature="_has_type_var(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, parameters)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, name, bases, namespace, parameters=None, _root=False)" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Override this in subclasses to interpret forward references." ilk="function" name="_eval_type" signature="_eval_type(self, globalns, localns)" />
      </scope>
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="VT" />
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="VT_co" />
      <scope classrefs="Final" doc="Mix-in class to prevent instantiation.&#10;" ilk="class" name="V_co" />
      <scope classrefs="MappingView" doc="Abstract base class for generic types.&#10;A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables. For example, a generic mapping type might be defined as::  class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -&gt; VT: ... # Etc.  This class can then be used as follows::" ilk="class" name="ValuesView" />
      <variable citdl="list" name="__all__" />
      <import module="abc" />
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <scope classrefs="property" doc="A decorator indicating abstract properties.&#10;Requires that the metaclass is ABCMeta or derived from it.  A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract properties are overridden. The abstract properties can be called using any of the normal 'super' call mechanisms.  Usage:  class C(metaclass=ABCMeta): @abstractproperty" ilk="class" name="abstractproperty" />
      <scope doc="Cast a value to a type." ilk="function" name="cast" signature="cast(typ, val)" />
      <import module="collections" />
      <import module="collections_abc" />
      <import module="functools" />
      <scope doc="Return type hints for a function or method object." ilk="function" name="get_type_hints" signature="get_type_hints(obj, globalns=None, localns=None)" />
      <scope classrefs="object" doc="Wrapper namespace for IO generic classes.&#10;" ilk="class" name="io" />
      <scope doc="Decorator to indicate that annotations are not type hints." ilk="function" name="no_type_check" signature="no_type_check(arg)" />
      <scope doc="Decorator to give another decorator the @no_type_check&#10;effect." ilk="function" name="no_type_check_decorator" signature="no_type_check_decorator(decorator)" />
      <scope ilk="function" name="overload" signature="overload(func)" />
      <scope classrefs="object" doc="Wrapper namespace for re type aliases.&#10;" ilk="class" name="re" />
      <import module="stdlib_re" />
      <import module="sys" />
      <import module="types" />
    </scope>
    <scope doc="Class representing audio/* type MIME documents.&#10;" ilk="blob" lang="Python3" name="email.mime.audio">
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="MIMENonMultipart" doc="Class for generating audio/* MIME documents.&#10;" ilk="class" name="MIMEAudio">
        <scope doc="Create an audio/* type MIME document." ilk="function" name="__init__" signature="__init__(self, _audiodata, _subtype=None, _encoder=&lt;function encode_base64 at 0x7f117f759d90&gt;, **_params)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="encoders" />
      <import module="sndhdr" />
    </scope>
    <scope doc="# Module providing the `Process` class which emulates `threading.Thread`&#10;# # multiprocessing/process.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.process">
      <scope classrefs="bytes" doc="bytes(iterable_of_ints) -&gt; bytes&#10;bytes(string, encoding[, errors]) -&gt; bytes bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes bytes() -&gt; empty bytes object  Construct an immutable array of bytes from: - an iterable yielding integers in range(256) - a text string encoded using the specified encoding - any object implementing the buffer API. - an integer" ilk="class" name="AuthenticationString">
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="object" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="BaseProcess">
        <scope doc="Method to be run in sub-process; can be overridden in sub-&#10;class" ilk="function" name="run" signature="run(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)" />
        <scope ilk="function" name="_bootstrap" signature="_bootstrap(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_Popen" signature="_Popen(self)" />
        <scope doc="Terminate process; sends SIGTERM signal or uses&#10;TerminateProcess()" ilk="function" name="terminate" signature="terminate(self)" />
        <scope doc="Wait until child process terminates" ilk="function" name="join" signature="join(self, timeout=None)" />
        <scope doc="Return whether process is alive" ilk="function" name="is_alive" signature="is_alive(self)" />
        <scope doc="Start child process" ilk="function" name="start" signature="start(self)" />
      </scope>
      <variable citdl="str" name="ORIGINAL_DIR" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="WeakSet">
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, item)" />
        <scope ilk="function" name="__ixor__" signature="__ixor__(self, other)" />
        <scope ilk="function" name="__xor__" signature="__xor__(self, other)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="symmetric_difference_update" signature="symmetric_difference_update(self, other)" />
        <scope ilk="function" name="union" signature="union(self, other)" />
        <scope ilk="function" name="difference_update" signature="difference_update(self, other)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope ilk="function" name="__isub__" signature="__isub__(self, other)" />
        <scope ilk="function" name="difference" signature="difference(self, other)" />
        <scope ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope ilk="function" name="__or__" signature="__or__(self, other)" />
        <scope ilk="function" name="symmetric_difference" signature="symmetric_difference(self, other)" />
        <scope ilk="function" name="remove" signature="remove(self, item)" />
        <scope ilk="function" name="__ior__" signature="__ior__(self, other)" />
        <scope ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="issuperset" signature="issuperset(self, other)" />
        <scope ilk="function" name="intersection_update" signature="intersection_update(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope ilk="function" name="intersection" signature="intersection(self, other)" />
        <scope ilk="function" name="add" signature="add(self, item)" />
        <scope ilk="function" name="__and__" signature="__and__(self, other)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
        <scope ilk="function" name="__sub__" signature="__sub__(self, other)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope ilk="function" name="isdisjoint" signature="isdisjoint(self, other)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope ilk="function" name="update" signature="update(self, other)" />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="issubset" signature="issubset(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="__iand__" signature="__iand__(self, other)" />
        <scope ilk="function" name="discard" signature="discard(self, item)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child&#10;processes" ilk="function" name="active_children" signature="active_children()" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <import module="itertools" />
      <variable citdl="str" name="name" />
      <import module="os" />
      <import module="signal" />
      <variable citdl="Signals" name="signum" />
      <import module="sys" />
    </scope>
    <scope doc="Tool for measuring execution time of small code snippets.&#10;This module avoids a number of common traps for measuring execution times.  See also Tim Peters' introduction to the Algorithms chapter in the Python Cookbook, published by O'Reilly.  Library usage: see the Timer class.  Command line usage: python timeit.py [-n N] [-r N] [-s S] [-t] [-c] [-p] [-h] [--] [statement]  Options:" ilk="blob" lang="Python3" name="timeit">
      <scope classrefs="object" doc="Class for timing execution speed of small code snippets.&#10;The constructor takes a statement to be timed, an additional statement used for setup, and a timer function.  Both statements default to 'pass'; the timer function is platform-dependent (see module doc string).  If 'globals' is specified, the code will be executed within that namespace (as opposed to inside timeit's namespace).  To measure the execution time of the first statement, use the timeit() method.  The repeat() method is a convenience to call timeit() multiple times and return a list of results." ilk="class" name="Timer">
        <scope doc="Constructor. See class doc string." ilk="function" name="__init__" signature="__init__(self, stmt='pass', setup='pass', timer=&lt;built-in function perf_counter&gt;, globals=None)" />
        <scope doc="Call timeit() a few times." ilk="function" name="repeat" signature="repeat(self, repeat=3, number=1000000)" />
        <scope doc="Helper to print a traceback from the timed code." ilk="function" name="print_exc" signature="print_exc(self, file=None)" />
        <scope doc="Time 'number' executions of the main statement." ilk="function" name="timeit" signature="timeit(self, number=1000000)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="int" name="default_number" />
      <variable citdl="int" name="default_repeat" />
      <scope doc="Performance counter for benchmarking." ilk="function" name="default_timer" returns="float" signature="perf_counter() -&gt; float" />
      <variable citdl="str" name="dummy_src_name" />
      <import module="gc" />
      <import module="itertools" />
      <scope doc="Main program, used when run as a script." ilk="function" name="main" signature="main(args=None, *, _wrap_timer=None)" />
      <scope doc="Helper to reindent a multi-line statement." ilk="function" name="reindent" signature="reindent(src, indent)" />
      <scope doc="Convenience function to create Timer object and call repeat&#10;method." ilk="function" name="repeat" signature="repeat(stmt='pass', setup='pass', timer=&lt;built-in function perf_counter&gt;, repeat=3, number=1000000, globals=None)" />
      <import module="sys" />
      <variable citdl="str" name="template" />
      <import module="time" />
      <scope doc="Convenience function to create Timer object and call timeit&#10;method." ilk="function" name="timeit" signature="timeit(stmt='pass', setup='pass', timer=&lt;built-in function perf_counter&gt;, number=1000000, globals=None)" />
    </scope>
    <scope doc="Define names for built-in types that aren't directly accessible as a builtin.&#10;" ilk="blob" lang="Python3" name="types">
      <scope classrefs="object" doc="&#10;" ilk="class" name="BuiltinFunctionType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="BuiltinMethodType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,&#10;constants, names, varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])  Create a code object.  Not for the faint of heart." ilk="class" name="CodeType">
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="CoroutineType">
        <scope ilk="function" name="__del__" />
        <scope doc="Return an iterator to be used in await expression." ilk="function" name="__await__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in coroutine," />
        <scope doc="close() -&gt; raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside coroutine." />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into coroutine," />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="Route attribute access on a class to __getattr__.&#10;This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class.  Instance access remains normal, but access to an attribute through a class will be routed to the class's __getattr__ method; this is done by raising AttributeError.  This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example)." ilk="class" name="DynamicClassAttribute">
        <scope ilk="function" name="__delete__" signature="__delete__(self, instance)" />
        <scope ilk="function" name="deleter" signature="deleter(self, fdel)" />
        <scope ilk="function" name="__set__" signature="__set__(self, instance, value)" />
        <scope ilk="function" name="setter" signature="setter(self, fset)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fget=None, fset=None, fdel=None, doc=None)" />
        <scope ilk="function" name="__get__" signature="__get__(self, instance, ownerclass=None)" />
        <scope ilk="function" name="getter" signature="getter(self, fget)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="FrameType">
        <scope doc="clear most references held by the frame" ilk="function" name="clear" signature="F.clear()" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="F.__sizeof__() -&gt; size of F in memory, in bytes" ilk="function" name="__sizeof__" signature="F.__sizeof__() -&gt; size of F in memory, in bytes" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#10;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="FunctionType">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="GeneratorType">
        <scope ilk="function" name="__del__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into generator," />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="close() -&gt; raise GeneratorExit inside generator." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside generator." />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in generator," />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="GetSetDescriptorType">
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#10;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="LambdaType">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MappingProxyType">
        <scope doc="D.values() -&gt; list of D's values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D's values" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="D.keys() -&gt; list of D's keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D's keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MemberDescriptorType">
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="method(function, instance)&#10;Create a bound instance method object." ilk="class" name="MethodType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#10;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="specialized dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="object" doc="A simple attribute-based namespace.&#10;SimpleNamespace(**kwargs)" ilk="class" name="SimpleNamespace">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="TracebackType">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_collections_abc" />
      <import module="_functools" />
      <scope doc="Convert regular generator function to a coroutine." ilk="function" name="coroutine" signature="coroutine(func)" />
      <scope doc="Create a class object dynamically using the appropriate&#10;metaclass." ilk="function" name="new_class" signature="new_class(name, bases=(), kwds=None, exec_body=None)" />
      <scope doc="Call the __prepare__ method of the appropriate metaclass." ilk="function" name="prepare_class" signature="prepare_class(name, bases=(), kwds=None)" />
    </scope>
    <scope doc="Fixer for execfile.&#10;This converts usages of the execfile function into calls to the built-in exec() function." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_execfile">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, '('), rparen=Leaf(8, ')'))" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope doc="A comma leaf" ilk="function" name="Comma" signature="Comma()" />
      <scope doc="A period (.) leaf" ilk="function" name="Dot" signature="Dot()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixExecfile">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope ilk="function" name="LParen" signature="LParen()" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope classrefs="Base" doc="Concrete implementation for interior nodes.&#10;" ilk="class" name="Node">
        <scope doc="Return a post-order iterator for the tree." ilk="function" name="post_order" signature="post_order(self)" />
        <scope doc="Equivalent to 'node.children[i] = child'." ilk="function" name="set_child" signature="set_child(self, i, child)" />
        <scope doc="The whitespace and comments preceding this node in the&#10;input." ilk="function" name="_prefix_getter" signature="_prefix_getter(self)" />
        <scope doc="Compare two nodes for equality." ilk="function" name="_eq" signature="_eq(self, other)" />
        <scope doc="Equivalent to 'node.children.insert(i, child)'." ilk="function" name="insert_child" signature="insert_child(self, i, child)" />
        <scope doc="Initializer." ilk="function" name="__init__" signature="__init__(self, type, children, context=None, prefix=None, fixers_applied=None)" />
        <scope ilk="function" name="_prefix_setter" signature="_prefix_setter(self, prefix)" />
        <scope doc="Return a pre-order iterator for the tree." ilk="function" name="pre_order" signature="pre_order(self)" />
        <scope doc="Return a canonical string representation." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a cloned (deep) copy of self." ilk="function" name="clone" signature="clone(self)" />
        <scope doc="Equivalent to 'node.children.append(child)'." ilk="function" name="append_child" signature="append_child(self, child)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return a pretty string representation." ilk="function" name="__unicode__" signature="__unicode__(self)" />
      </scope>
      <scope ilk="function" name="RParen" signature="RParen()" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Class representing text/* type MIME documents.&#10;" ilk="blob" lang="Python3" name="email.mime.text">
      <scope classrefs="object" doc="Map character sets to their email properties.&#10;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" name="Charset">
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode_lines" signature="header_encode_lines(self, string, maxlengths)" />
        <scope doc="Return the output character set." ilk="function" name="get_output_charset" signature="get_output_charset(self)" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" name="get_body_encoding" signature="get_body_encoding(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self, header_bytes)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input_charset='us-ascii')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" name="body_encode" signature="body_encode(self, string)" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode" signature="header_encode(self, string)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <scope classrefs="MIMENonMultipart" doc="Class for generating text/* type MIME documents.&#10;" ilk="class" name="MIMEText">
        <scope doc="Create a text/* type MIME document." ilk="function" name="__init__" signature="__init__(self, _text, _subtype='plain', _charset=None)" />
      </scope>
      <variable citdl="list" name="__all__" />
    </scope>
    <scope doc="Fixer for 'raise E, V, T'&#10;raise         -&gt; raise raise E       -&gt; raise E raise E, V    -&gt; raise E(V) raise E, V, T -&gt; raise E(V).with_traceback(T) raise E, None, T -&gt; raise E.with_traceback(T)  raise (((E, E'), E''), E'''), V -&gt; raise E(V) raise &quot;foo&quot;, V, T               -&gt; warns about string exceptions  " ilk="blob" lang="Python3" name="lib2to3.fixes.fix_raise">
      <scope doc="A parenthesised argument list, used by Call()" ilk="function" name="ArgList" signature="ArgList(args, lparen=Leaf(7, '('), rparen=Leaf(8, ')'))" />
      <scope doc="A node tuple for obj.attr" ilk="function" name="Attr" signature="Attr(obj, attr)" />
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixRaise">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope doc="Does the node represent a tuple literal?" ilk="function" name="is_tuple" signature="is_tuple(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
    <scope doc="Interface to the compiler's internal symbol tables&#10;" ilk="blob" lang="Python3" name="symtable">
      <variable citdl="int" name="CELL" />
      <scope classrefs="SymbolTable" doc="&#10;" ilk="class" name="Class">
        <scope ilk="function" name="get_methods" signature="get_methods(self)" />
      </scope>
      <variable citdl="int" name="DEF_BOUND" />
      <variable citdl="int" name="DEF_GLOBAL" />
      <variable citdl="int" name="DEF_IMPORT" />
      <variable citdl="int" name="DEF_LOCAL" />
      <variable citdl="int" name="DEF_PARAM" />
      <variable citdl="int" name="FREE" />
      <scope classrefs="SymbolTable" doc="&#10;" ilk="class" name="Function">
        <scope ilk="function" name="_Function__idents_matching" signature="_Function__idents_matching(self, test_func)" />
        <scope ilk="function" name="get_locals" signature="get_locals(self)" />
        <scope ilk="function" name="get_globals" signature="get_globals(self)" />
        <scope ilk="function" name="get_parameters" signature="get_parameters(self)" />
        <scope ilk="function" name="get_frees" signature="get_frees(self)" />
      </scope>
      <variable citdl="int" name="GLOBAL_EXPLICIT" />
      <variable citdl="int" name="GLOBAL_IMPLICIT" />
      <variable citdl="int" name="LOCAL" />
      <variable citdl="int" name="SCOPE_MASK" />
      <variable citdl="int" name="SCOPE_OFF" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Symbol">
        <scope ilk="function" name="is_parameter" signature="is_parameter(self)" />
        <scope ilk="function" name="is_referenced" signature="is_referenced(self)" />
        <scope ilk="function" name="is_free" signature="is_free(self)" />
        <scope ilk="function" name="get_name" signature="get_name(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, flags, namespaces=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return a list of namespaces bound to this name" ilk="function" name="get_namespaces" signature="get_namespaces(self)" />
        <scope ilk="function" name="is_global" signature="is_global(self)" />
        <scope doc="Returns the single namespace bound to this name." ilk="function" name="get_namespace" signature="get_namespace(self)" />
        <scope doc="Returns true if name binding introduces new namespace." ilk="function" name="is_namespace" signature="is_namespace(self)" />
        <scope ilk="function" name="is_local" signature="is_local(self)" />
        <scope ilk="function" name="is_imported" signature="is_imported(self)" />
        <scope ilk="function" name="is_assigned" signature="is_assigned(self)" />
        <scope ilk="function" name="is_declared_global" signature="is_declared_global(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="SymbolTable">
        <scope ilk="function" name="_SymbolTable__check_children" signature="_SymbolTable__check_children(self, name)" />
        <scope ilk="function" name="get_type" signature="get_type(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, raw_table, filename)" />
        <scope ilk="function" name="get_id" signature="get_id(self)" />
        <scope ilk="function" name="get_lineno" signature="get_lineno(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="get_name" signature="get_name(self)" />
        <scope ilk="function" name="is_optimized" signature="is_optimized(self)" />
        <scope ilk="function" name="get_children" signature="get_children(self)" />
        <scope ilk="function" name="lookup" signature="lookup(self, name)" />
        <scope ilk="function" name="has_children" signature="has_children(self)" />
        <scope doc="Return true if the scope uses exec. Deprecated method." ilk="function" name="has_exec" signature="has_exec(self)" />
        <scope ilk="function" name="get_identifiers" signature="get_identifiers(self)" />
        <scope ilk="function" name="get_symbols" signature="get_symbols(self)" />
        <scope ilk="function" name="is_nested" signature="is_nested(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="SymbolTableFactory">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, table, filename)" />
        <scope ilk="function" name="new" signature="new(self, table, filename)" />
      </scope>
      <variable citdl="int" name="USE" />
      <variable citdl="list" name="__all__" />
      <import module="_symtable" />
      <scope ilk="function" name="symtable" signature="symtable(code, filename, compile_type)" />
      <import module="weakref" />
    </scope>
    <scope doc="distutils.command.sdist&#10;Implements the Distutils 'sdist' command (create a source distribution)." ilk="blob" lang="Python3" name="distutils.command.sdist">
      <scope classrefs="object" doc="&#10;" ilk="class" name="BuiltinFunctionType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="BuiltinMethodType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="Exception" doc="Some compile/link operation failed.&#10;" ilk="class" name="CCompilerError" />
      <scope classrefs="object" doc="code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,&#10;constants, names, varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])  Create a code object.  Not for the faint of heart." ilk="class" name="CodeType">
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="CoroutineType">
        <scope ilk="function" name="__del__" />
        <scope doc="Return an iterator to be used in await expression." ilk="function" name="__await__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in coroutine," />
        <scope doc="close() -&gt; raise GeneratorExit inside coroutine." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside coroutine." />
        <scope doc="return next iterated value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into coroutine," />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="DistutilsError" doc="Raised by fancy_getopt in response to getopt.error -- ie. an&#10;error in the command line usage." ilk="class" name="DistutilsArgError" />
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="Some command class (or possibly distribution class, if anyone&#10;feels a need to subclass Distribution) is found not to be holding up its end of the bargain, ie. implementing some part of the &quot;command &quot;interface." ilk="class" name="DistutilsClassError" />
      <scope classrefs="Exception" doc="The root of all Distutils evil.&#10;" ilk="class" name="DistutilsError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope classrefs="DistutilsError" doc="The option table provided to 'fancy_getopt()' is bogus.&#10;" ilk="class" name="DistutilsGetoptError" />
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Unable to load an expected module, or to find an expected class&#10;within some module (in particular, command modules and classes)." ilk="class" name="DistutilsModuleError" />
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="DistutilsError" doc="For errors that can be definitely blamed on the setup script,&#10;such as invalid keyword arguments to 'setup()'." ilk="class" name="DistutilsSetupError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="Route attribute access on a class to __getattr__.&#10;This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class.  Instance access remains normal, but access to an attribute through a class will be routed to the class's __getattr__ method; this is done by raising AttributeError.  This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example)." ilk="class" name="DynamicClassAttribute">
        <scope ilk="function" name="__delete__" signature="__delete__(self, instance)" />
        <scope ilk="function" name="deleter" signature="deleter(self, fdel)" />
        <scope ilk="function" name="__set__" signature="__set__(self, instance, value)" />
        <scope ilk="function" name="setter" signature="setter(self, fset)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fget=None, fset=None, fdel=None, doc=None)" />
        <scope ilk="function" name="__get__" signature="__get__(self, instance, ownerclass=None)" />
        <scope ilk="function" name="getter" signature="getter(self, fget)" />
      </scope>
      <scope classrefs="object" doc="A list of files built by on exploring the filesystem and filtered by&#10;applying various patterns to what we find there.  Instance attributes: dir directory from which files will be taken -- only used if 'allfiles' not supplied to constructor files list of filenames currently being built/filtered/manipulated allfiles complete list of files under consideration (ie. without any" ilk="class" name="FileList">
        <scope ilk="function" name="extend" signature="extend(self, items)" />
        <scope doc="Remove strings (presumably filenames) from 'files' that&#10;match 'pattern'." ilk="function" name="exclude_pattern" signature="exclude_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)" />
        <scope ilk="function" name="remove_duplicates" signature="remove_duplicates(self)" />
        <scope ilk="function" name="findall" signature="findall(self, dir='.')" />
        <scope ilk="function" name="_parse_template_line" signature="_parse_template_line(self, line)" />
        <scope ilk="function" name="process_template_line" signature="process_template_line(self, line)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, warn=None, debug_print=None)" />
        <scope doc="Select strings (presumably filenames) from 'self.files' that&#10;match 'pattern', a Unix-style wildcard (glob) pattern." ilk="function" name="include_pattern" signature="include_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope ilk="function" name="sort" signature="sort(self)" />
        <scope ilk="function" name="append" signature="append(self, item)" />
        <scope ilk="function" name="set_allfiles" signature="set_allfiles(self, allfiles)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="FrameType">
        <scope doc="clear most references held by the frame" ilk="function" name="clear" signature="F.clear()" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="F.__sizeof__() -&gt; size of F in memory, in bytes" ilk="function" name="__sizeof__" signature="F.__sizeof__() -&gt; size of F in memory, in bytes" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#10;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="FunctionType">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="GeneratorType">
        <scope ilk="function" name="__del__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="send" signature="send(arg) -&gt; send 'arg' into generator," />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="close() -&gt; raise GeneratorExit inside generator." ilk="function" name="close" signature="close() -&gt; raise GeneratorExit inside generator." />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="return next yielded value or raise StopIteration." ilk="function" name="throw" signature="throw(typ[,val[,tb]]) -&gt; raise exception in generator," />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="GetSetDescriptorType">
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
      </scope>
      <scope classrefs="object" doc="function(code, globals[, name[, argdefs[, closure]]])&#10;Create a function object from a code object and a dictionary. The optional name string overrides the name from the code object. The optional argdefs tuple specifies the default argument values. The optional closure tuple supplies the bindings for free variables." ilk="class" name="LambdaType">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="MappingProxyType">
        <scope doc="D.values() -&gt; list of D's values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D's values" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="D.keys() -&gt; list of D's keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D's keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MemberDescriptorType">
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Delete an attribute of instance." ilk="function" name="__delete__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Set an attribute of instance to value." ilk="function" name="__set__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="method(function, instance)&#10;Create a bound instance method object." ilk="class" name="MethodType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return an attribute of instance, which is of type owner." ilk="function" name="__get__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="module(name[, doc])&#10;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="specialized dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to preprocess one or more C/C++ files.&#10;" ilk="class" name="PreprocessError" />
      <scope classrefs="object" doc="A simple attribute-based namespace.&#10;SimpleNamespace(**kwargs)" ilk="class" name="SimpleNamespace">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="Provides a file-like object that takes care of all the things you&#10;commonly want to do when processing a text file that has some line-by-line syntax: strip comments (as long as &quot;#&quot; is your comment character), skip blank lines, join adjacent lines by escaping the newline (ie. backslash at end of line), strip leading and/or trailing whitespace.  All of these are optional and independently controllable.  Provides a 'warn()' method so you can generate warning messages that report physical line number, even if the logical line in question spans multiple physical lines.  Also provides 'unreadline()' for" ilk="class" name="TextFile">
        <scope doc="Read and return a single logical line from the current file&#10;(or from an internal buffer if lines have previously been&#10;&quot;unread&quot; with 'unreadline()')." ilk="function" name="readline" signature="readline(self)" />
        <scope doc="Read and return the list of all logical lines remaining in&#10;the current file." ilk="function" name="readlines" signature="readlines(self)" />
        <scope doc="Open a new file named 'filename'." ilk="function" name="open" signature="open(self, filename)" />
        <scope doc="line in the current file." ilk="function" name="warn" signature="Print (to stderr) a warning message tied to the current logical" />
        <scope ilk="function" name="gen_error" signature="gen_error(self, msg, line=None)" />
        <scope doc="Close the current file and forget everything we know about&#10;it (filename, current line number)." ilk="function" name="close" signature="close(self)" />
        <scope doc="Construct a new TextFile object." ilk="function" name="__init__" signature="__init__(self, filename=None, file=None, **options)" />
        <scope doc="Push 'line' (a string) onto an internal buffer that will be&#10;checked by future 'readline()' calls." ilk="function" name="unreadline" signature="unreadline(self, line)" />
        <scope ilk="function" name="error" signature="error(self, msg, line=None)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="TracebackType">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
      </scope>
      <scope classrefs="CCompilerError" doc="Attempt to process an unknown file type.&#10;" ilk="class" name="UnknownFileError" />
      <import module="archive_util" />
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Convert regular generator function to a coroutine." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="dep_util" />
      <import module="dir_util" />
      <import module="file_util" />
      <scope doc="Return a list of paths matching a pathname pattern." ilk="function" name="glob" signature="glob(pathname, *, recursive=False)" />
      <import module="log" />
      <scope doc="Create a class object dynamically using the appropriate&#10;metaclass." ilk="function" name="new_class" signature="new_class(name, bases=(), kwds=None, exec_body=None)" />
      <import module="os" />
      <scope doc="Call the __prepare__ method of the appropriate metaclass." ilk="function" name="prepare_class" signature="prepare_class(name, bases=(), kwds=None)" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="sdist">
        <scope doc="Read the manifest file (named by 'self.manifest') and use it&#10;to fill in 'self.filelist', the list of files to include in&#10;the source distribution." ilk="function" name="read_manifest" signature="read_manifest(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope doc="Deprecated API." ilk="function" name="check_metadata" signature="check_metadata(self)" />
        <scope ilk="function" name="_manifest_is_not_generated" signature="_manifest_is_not_generated(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Prune off branches that might slip into the file list as&#10;created by 'read_template()', but really don't belong there:&#10;* the build tree (typically &quot;build&quot;) * the release tree&#10;itself (only an issue if we ran &quot;sdist&quot;" ilk="function" name="prune_file_list" signature="prune_file_list(self)" />
        <scope doc="Add all the default files to self.filelist: - README or&#10;README.txt - setup.py - test/test*.py" ilk="function" name="add_defaults" signature="add_defaults(self)" />
        <scope doc="Create the source distribution(s)." ilk="function" name="make_distribution" signature="make_distribution(self)" />
        <scope doc="Callable used for the check sub-command." ilk="function" name="checking_metadata" signature="checking_metadata(self)" />
        <scope doc="Figure out the list of files to include in the source&#10;distribution, and put it in 'self.filelist'." ilk="function" name="get_file_list" signature="get_file_list(self)" />
        <scope doc="Create the directory tree that will become the source&#10;distribution archive." ilk="function" name="make_release_tree" signature="make_release_tree(self, base_dir, files)" />
        <scope doc="Read and parse manifest template file named by&#10;self.template." ilk="function" name="read_template" signature="read_template(self)" />
        <scope doc="Write the file list in 'self.filelist' (presumably as filled&#10;in by 'add_defaults()' and 'read_template()') to the&#10;manifest file named by 'self.manifest'." ilk="function" name="write_manifest" signature="write_manifest(self)" />
        <scope doc="Return the list of archive files created when the command&#10;was run, or None if the command hasn't run yet." ilk="function" name="get_archive_files" signature="get_archive_files(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
      </scope>
      <scope doc="Print all possible values for the 'formats' option (used by&#10;the &quot;--help-formats&quot; command-line option)." ilk="function" name="show_formats" signature="show_formats()" />
      <import module="string" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
    </scope>
    <scope doc="Selectors module.&#10;This module allows high-level and efficient I/O multiplexing, built upon the `select` module primitives." ilk="blob" lang="Python3" name="selectors">
      <scope classrefs="type" doc="Metaclass for defining Abstract Base Classes (ABCs).&#10;Use this metaclass to create an ABC.  An ABC can be subclassed directly, and then acts as a mix-in class.  You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super())." ilk="class" name="ABCMeta">
        <scope doc="Register a virtual subclass of an ABC." ilk="function" name="register" signature="register(cls, subclass)" />
        <scope doc="Override for issubclass(subclass, cls)." ilk="function" name="__subclasscheck__" signature="__subclasscheck__(cls, subclass)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(mcls, name, bases, namespace)" />
        <scope doc="Debug helper to print the ABC registry." ilk="function" name="_dump_registry" signature="_dump_registry(cls, file=None)" />
        <scope doc="Override for isinstance(instance, cls)." ilk="function" name="__instancecheck__" signature="__instancecheck__(cls, instance)" />
      </scope>
      <scope classrefs="object" doc="Selector abstract base class.&#10;A selector supports registering file objects to be monitored for specific I/O events.  A file object is a file descriptor or any object with a `fileno()` method. An arbitrary object can be attached to the file object, which can be used for example to store context information, a callback, etc.  A selector can use various implementations (select(), poll(), epoll()...) depending on the platform. The default `Selector` class uses the most efficient implementation on the current platform." ilk="class" name="BaseSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return a mapping of file objects to selector keys." ilk="function" name="get_map" signature="get_map(self)" />
        <scope doc="Close the selector." ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the key associated to a registered file object." ilk="function" name="get_key" signature="get_key(self, fileobj)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout=None)" />
        <scope doc="Change a registered file object monitored events or attached&#10;data." ilk="function" name="modify" signature="modify(self, fileobj, events, data=None)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <scope classrefs="_BaseSelectorImpl" doc="Epoll-based selector.&#10;" ilk="class" name="DefaultSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope doc="Close the selector." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout=None)" />
        <scope ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <variable citdl="int" name="EVENT_READ" />
      <variable citdl="int" name="EVENT_WRITE" />
      <scope classrefs="_BaseSelectorImpl" doc="Epoll-based selector.&#10;" ilk="class" name="EpollSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope doc="Close the selector." ilk="function" name="close" signature="close(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout=None)" />
        <scope ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <scope classrefs="Sized Iterable Container" doc="&#10;" ilk="class" name="Mapping">
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
      </scope>
      <scope classrefs="_BaseSelectorImpl" doc="Poll-based selector.&#10;" ilk="class" name="PollSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout=None)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <scope classrefs="_BaseSelectorImpl" doc="Select-based selector.&#10;" ilk="class" name="SelectSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout=None)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <scope classrefs="tuple" doc="SelectorKey(fileobj, fd, events, data)&#10;" ilk="class" name="SelectorKey">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new SelectorKey object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create new instance of SelectorKey(fileobj, fd, events,&#10;data)" ilk="function" name="__new__" signature="__new__(_cls, fileobj, fd, events, data)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new SelectorKey object from a sequence or iterable" ilk="function" name="_make" />
      </scope>
      <scope doc="A decorator indicating abstract methods." ilk="function" name="abstractmethod" signature="abstractmethod(funcobj)" />
      <import module="math" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="select" />
      <import module="sys" />
    </scope>
    <scope doc="ast&#10;~~~  The `ast` module helps Python applications to process trees of the Python abstract syntax grammar.  The abstract syntax itself might change with each Python release; this module helps to find out programmatically what the current grammar looks like and allows modifications of it.  An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as a flag to the `compile()` builtin function or by using the `parse()` function from this module.  The result will be a tree of objects whose" ilk="blob" lang="Python3" name="ast">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AST">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Add" />
      <scope classrefs="boolop" doc="&#10;" ilk="class" name="And" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Assert" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Assign" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncFor" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncFunctionDef" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncWith" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Attribute" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AugAssign" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="AugLoad" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="AugStore" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Await" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="BinOp" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitAnd" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitOr" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitXor" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="BoolOp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Break" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Bytes" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Call" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="ClassDef" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Compare" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Continue" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Del" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Delete" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Dict" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="DictComp" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Div" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Ellipsis" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Eq" />
      <scope classrefs="excepthandler" doc="&#10;" ilk="class" name="ExceptHandler" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Expr" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Expression" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="ExtSlice" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="FloorDiv" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="For" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="FunctionDef" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="GeneratorExp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Global" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Gt" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="GtE" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="If" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="IfExp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Import" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="ImportFrom" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="In" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="Index" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Interactive" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="Invert" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Is" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="IsNot" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="LShift" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Lambda" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="List" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="ListComp" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Load" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Lt" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="LtE" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="MatMult" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Mod" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Module" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Mult" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Name" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="NameConstant" />
      <scope classrefs="NodeVisitor" doc="A :class:`NodeVisitor` subclass that walks the abstract syntax tree and&#10;allows modification of nodes.  The `NodeTransformer` will walk the AST and use the return value of the visitor methods to replace or remove the old node.  If the return value of the visitor method is ``None``, the node will be removed from its location, otherwise it is replaced with the return value.  The return value may be the original node in which case no replacement takes place.  Here is an example transformer that rewrites all occurrences of name lookups (``foo``) to ``data['foo']``::" ilk="class" name="NodeTransformer">
        <scope doc="Called if no explicit visitor function exists for a node." ilk="function" name="generic_visit" signature="generic_visit(self, node)" />
      </scope>
      <scope classrefs="object" doc="A node visitor base class that walks the abstract syntax tree and calls a&#10;visitor function for every node found.  This function may return a value which is forwarded by the `visit` method.  This class is meant to be subclassed, with the subclass adding visitor methods.  Per default the visitor functions for the nodes are ``'visit_'`` + class name of the node.  So a `TryFinally` node visit function would be `visit_TryFinally`.  This behavior can be changed by overriding the `visit` method.  If no visitor function exists for a node" ilk="class" name="NodeVisitor">
        <scope doc="Called if no explicit visitor function exists for a node." ilk="function" name="generic_visit" signature="generic_visit(self, node)" />
        <scope doc="Visit a node." ilk="function" name="visit" signature="visit(self, node)" />
      </scope>
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Nonlocal" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="Not" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="NotEq" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="NotIn" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Num" />
      <scope classrefs="boolop" doc="&#10;" ilk="class" name="Or" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Param" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Pass" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Pow" />
      <variable citdl="int" name="PyCF_ONLY_AST" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="RShift" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Raise" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Return" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Set" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="SetComp" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="Slice" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Starred" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Store" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Str" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Sub" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Subscript" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Suite" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Try" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Tuple" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="UAdd" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="USub" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="UnaryOp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="While" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="With" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Yield" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="YieldFrom" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="alias" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="arg" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="arguments" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="boolop" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="cmpop" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="comprehension" />
      <scope doc="Copy source location (`lineno` and `col_offset` attributes)&#10;from *old_node* to *new_node* if possible, and return&#10;*new_node*." ilk="function" name="copy_location" signature="copy_location(new_node, old_node)" />
      <scope doc="Return a formatted dump of the tree in *node*." ilk="function" name="dump" signature="dump(node, annotate_fields=True, include_attributes=False)" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="excepthandler" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="expr" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="expr_context" />
      <scope doc="When you compile a node tree with compile(), the compiler&#10;expects lineno and col_offset attributes for every node that&#10;supports them." ilk="function" name="fix_missing_locations" signature="fix_missing_locations(node)" />
      <scope doc="Return the docstring for the given node or None if no&#10;docstring can be found." ilk="function" name="get_docstring" signature="get_docstring(node, clean=True)" />
      <scope doc="Increment the line number of each node in the tree starting&#10;at *node* by *n*." ilk="function" name="increment_lineno" signature="increment_lineno(node, n=1)" />
      <scope doc="Yield all direct child nodes of *node*, that is, all fields&#10;that are nodes and all items of fields that are lists of&#10;nodes." ilk="function" name="iter_child_nodes" signature="iter_child_nodes(node)" />
      <scope doc="Yield a tuple of ``(fieldname, value)`` for each field in&#10;``node._fields`` that is present on *node*." ilk="function" name="iter_fields" signature="iter_fields(node)" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="keyword" />
      <scope doc="Safely evaluate an expression node or a string containing a&#10;Python expression." ilk="function" name="literal_eval" signature="literal_eval(node_or_string)" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="mod" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="operator" />
      <scope doc="Parse the source into an AST node." ilk="function" name="parse" signature="parse(source, filename='&lt;unknown&gt;', mode='exec')" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="slice" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="stmt" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="unaryop" />
      <scope doc="Recursively yield all descendant nodes in the tree starting&#10;at *node* (including *node* itself), in no specified order." ilk="function" name="walk" signature="walk(node)" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="withitem" />
    </scope>
    <scope doc="Core implementation of path-based import.&#10;This module is NOT meant to be directly imported! It has been designed such that it can be bootstrapped into Python as the implementation of import. As such it requires the injection of specific modules and attributes in order to work. One should use importlib as the public-facing version of this module." ilk="blob" lang="Python3" name="importlib._bootstrap_external">
      <variable citdl="list" name="BYTECODE_SUFFIXES" />
      <variable citdl="list" name="DEBUG_BYTECODE_SUFFIXES" />
      <variable citdl="list" name="EXTENSION_SUFFIXES" />
      <scope classrefs="FileLoader _LoaderBasics" doc="Loader for extension modules.&#10;The constructor is designed to work with FileFinder." ilk="class" name="ExtensionFileLoader">
        <scope doc="Return True if the extension module is a package." ilk="function" name="is_package" signature="is_package(self, fullname)" />
        <scope doc="Return the path to the source file as found by the finder." ilk="function" name="get_filename" signature="get_filename(self, name=None, *args, **kwargs)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Initialize an extension module" ilk="function" name="exec_module" signature="exec_module(self, module)" />
        <scope doc="Cache the module name and the path to the file found by the&#10;finder." ilk="function" name="__init__" signature="__init__(self, name, path)" />
        <scope doc="Return None as extension modules have no source code." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope doc="Create an unitialized extension module" ilk="function" name="create_module" signature="create_module(self, spec)" />
        <scope doc="Return None as an extension module cannot create a code&#10;object." ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="File-based finder.&#10;Interactions with the file system are cached for performance, being refreshed when the directory the finder is handling has been modified." ilk="class" name="FileFinder">
        <scope doc="Initialize with the path to search on and a variable number&#10;of 2-tuples containing the loader and the file suffixes the&#10;loader recognizes." ilk="function" name="__init__" signature="__init__(self, path, *loader_details)" />
        <scope doc="Fill the cache of potential modules and packages for this&#10;directory." ilk="function" name="_fill_cache" signature="_fill_cache(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_spec" signature="find_spec(self, fullname, target=None)" />
        <scope doc="Invalidate the directory mtime." ilk="function" name="invalidate_caches" signature="invalidate_caches(self)" />
        <scope doc="A class method which returns a closure to use on&#10;sys.path_hook which will return an instance using the&#10;specified loaders and the path called on the closure." ilk="function" name="path_hook" />
        <scope ilk="function" name="_get_spec" signature="_get_spec(self, loader_class, fullname, path, smsl, target)" />
        <scope doc="Try to find a loader for the specified module by delegating&#10;to self.find_loader()." ilk="function" name="find_module" signature="find_module(self, fullname)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_loader" signature="find_loader(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Base file loader class which implements the loader protocol methods that&#10;require file system usage." ilk="class" name="FileLoader">
        <scope doc="Return the data from path as raw bytes." ilk="function" name="get_data" signature="get_data(self, path)" />
        <scope doc="Return the path to the source file as found by the finder." ilk="function" name="get_filename" signature="get_filename(self, name=None, *args, **kwargs)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Cache the module name and the path to the file found by the&#10;finder." ilk="function" name="__init__" signature="__init__(self, fullname, path)" />
        <scope doc="Load a module from a file." ilk="function" name="load_module" signature="load_module(self, name=None, *args, **kwargs)" />
      </scope>
      <variable citdl="bytes" name="MAGIC_NUMBER" />
      <variable citdl="list" name="OPTIMIZED_BYTECODE_SUFFIXES" />
      <scope classrefs="object" doc="Meta path finder for sys.path and package __path__ attributes.&#10;" ilk="class" name="PathFinder">
        <scope ilk="function" name="_legacy_get_spec" />
        <scope doc="Get the finder for the path entry from&#10;sys.path_importer_cache." ilk="function" name="_path_importer_cache" />
        <scope doc="Call the invalidate_caches() method on all path entry&#10;finders stored in sys.path_importer_caches (where&#10;implemented)." ilk="function" name="invalidate_caches" />
        <scope doc="Find the loader or namespace_path for this module/package&#10;name." ilk="function" name="_get_spec" />
        <scope doc="find the module on sys.path or 'path' based on&#10;sys.path_hooks and sys.path_importer_cache." ilk="function" name="find_module" />
        <scope doc="find the module on sys.path or 'path' based on&#10;sys.path_hooks and sys.path_importer_cache." ilk="function" name="find_spec" />
        <scope doc="Search sequence of hooks for a finder for 'path'." ilk="function" name="_path_hooks" />
      </scope>
      <variable citdl="list" name="SOURCE_SUFFIXES" />
      <scope classrefs="FileLoader SourceLoader" doc="Concrete implementation of SourceLoader using the file system.&#10;" ilk="class" name="SourceFileLoader">
        <scope doc="Optional method which writes data (bytes) to a file path (a&#10;str)." ilk="function" name="_cache_bytecode" signature="_cache_bytecode(self, source_path, bytecode_path, data)" />
        <scope doc="Write bytes data to a file." ilk="function" name="set_data" signature="set_data(self, path, data, *, _mode=438)" />
        <scope doc="Return the metadata for the path." ilk="function" name="path_stats" signature="path_stats(self, path)" />
      </scope>
      <scope classrefs="_LoaderBasics" doc="Base class of common code needed by both SourceLoader and&#10;SourcelessFileLoader." ilk="class" name="SourceLoader">
        <scope doc="Return the code object compiled from source." ilk="function" name="source_to_code" signature="source_to_code(self, data, path, *, _optimize=-1)" />
        <scope doc="Optional method which writes data (bytes) to a file path (a&#10;str)." ilk="function" name="set_data" signature="set_data(self, path, data)" />
        <scope doc="Optional method returning a metadata dict for the specified&#10;path to by the path (str)." ilk="function" name="path_stats" signature="path_stats(self, path)" />
        <scope doc="Optional method that returns the modification time (an int)&#10;for the specified path, where path is a str." ilk="function" name="path_mtime" signature="path_mtime(self, path)" />
        <scope doc="Optional method which writes data (bytes) to a file path (a&#10;str)." ilk="function" name="_cache_bytecode" signature="_cache_bytecode(self, source_path, cache_path, data)" />
        <scope doc="Concrete implementation of InspectLoader.get_source." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope doc="Concrete implementation of InspectLoader.get_code." ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="FileLoader _LoaderBasics" doc="Loader which handles sourceless file imports.&#10;" ilk="class" name="SourcelessFileLoader">
        <scope doc="Return None as there is no source code." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Meta path finder for modules declared in the Windows registry.&#10;" ilk="class" name="WindowsRegistryFinder">
        <scope ilk="function" name="_open_registry" />
        <scope ilk="function" name="_search_registry" />
        <scope doc="Find module named in the registry." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
      </scope>
      <import module="_bootstrap" />
      <import module="_imp" />
      <import module="_io" />
      <import module="_os" />
      <import module="_thread" />
      <import module="_warnings" />
      <import module="_weakref" />
      <import module="builtins" />
      <scope doc="Given the path to a .py file, return the path to its .pyc&#10;file." ilk="function" name="cache_from_source" signature="cache_from_source(path, debug_override=None, *, optimization=None)" />
      <scope doc="Decode bytes representing source code and return the string." ilk="function" name="decode_source" signature="decode_source(source_bytes)" />
      <import module="marshal" />
      <variable citdl="str" name="path_sep" />
      <variable citdl="str" name="path_separators" />
      <scope doc="Given the path to a .pyc." ilk="function" name="source_from_cache" signature="source_from_cache(path)" />
      <scope doc="Return a module spec based on a file location." ilk="function" name="spec_from_file_location" signature="spec_from_file_location(name, location=None, *, loader=None, submodule_search_locations=&lt;object object at 0x7f11880dc040&gt;)" />
      <import module="sys" />
    </scope>
    <scope doc="Fix bound method attributes (method.im_? -&gt; method.__?__).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_methodattrs">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixMethodattrs">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <variable citdl="dict" name="MAP" />
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Test result object&#10;" ilk="blob" lang="Python3" name="unittest.result">
      <variable citdl="str" name="STDERR_LINE" />
      <variable citdl="str" name="STDOUT_LINE" />
      <scope classrefs="object" doc="Holder for test result information.&#10;Test results are automatically managed by the TestCase and TestSuite classes, and do not need to be explicitly manipulated by writers of tests.  Each instance holds the total number of tests run, and collections of failures and errors that occurred among those test runs. The collections contain tuples of (testcase, exceptioninfo), where exceptioninfo is the formatted traceback of the error that occurred." ilk="class" name="TestResult">
        <scope doc="Called once before any tests are executed." ilk="function" name="startTestRun" signature="startTestRun(self)" />
        <scope ilk="function" name="_setupStdout" signature="_setupStdout(self)" />
        <scope ilk="function" name="_restoreStdout" signature="_restoreStdout(self)" />
        <scope doc="Called by TestRunner after test run" ilk="function" name="printErrors" signature="printErrors(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, stream=None, descriptions=None, verbosity=None)" />
        <scope doc="Called once after all tests are executed." ilk="function" name="stopTestRun" signature="stopTestRun(self)" />
        <scope doc="Called when a test has completed successfully" ilk="function" name="addSuccess" signature="addSuccess(self, test)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addFailure" signature="addFailure(self, *args, **kw)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_is_relevant_tb_level" signature="_is_relevant_tb_level(self, tb)" />
        <scope doc="Called when an error has occurred." ilk="function" name="addError" signature="addError(self, *args, **kw)" />
        <scope doc="Called when a test was expected to fail, but succeed." ilk="function" name="addUnexpectedSuccess" signature="addUnexpectedSuccess(self, *args, **kw)" />
        <scope doc="Indicates that the tests should be aborted." ilk="function" name="stop" signature="stop(self)" />
        <scope doc="Tells whether or not this result was a success." ilk="function" name="wasSuccessful" signature="wasSuccessful(self)" />
        <scope doc="Called when an expected failure/error occured." ilk="function" name="addExpectedFailure" signature="addExpectedFailure(self, test, err)" />
        <scope doc="Converts a sys.exc_info()-style tuple of values into a&#10;string." ilk="function" name="_exc_info_to_string" signature="_exc_info_to_string(self, err, test)" />
        <scope ilk="function" name="_count_relevant_tb_levels" signature="_count_relevant_tb_levels(self, tb)" />
        <scope doc="Called when a test is skipped." ilk="function" name="addSkip" signature="addSkip(self, test, reason)" />
        <scope doc="Called when the given test has been run" ilk="function" name="stopTest" signature="stopTest(self, test)" />
        <scope doc="Called when the given test is about to be run" ilk="function" name="startTest" signature="startTest(self, test)" />
        <scope doc="Called at the end of a subtest." ilk="function" name="addSubTest" signature="addSubTest(self, test, subtest, err)" />
      </scope>
      <scope ilk="function" name="failfast" signature="failfast(method)" />
      <import module="io" />
      <import module="sys" />
      <import module="traceback" />
      <import module="util" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="http">
      <scope classrefs="IntEnum" doc="HTTP status codes and reason phrases&#10;Status codes from the following RFCs are all observed:  * RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616 * RFC 6585: Additional HTTP Status Codes * RFC 3229: Delta encoding in HTTP * RFC 4918: HTTP Extensions for WebDAV, obsoletes 2518 * RFC 5842: Binding Extensions to WebDAV * RFC 7238: Permanent Redirect * RFC 2295: Transparent Content Negotiation in HTTP * RFC 2774: An HTTP Extension Framework" ilk="class" name="HTTPStatus" />
      <scope classrefs="int Enum" doc="Enum where members are also (and must be) ints&#10;" ilk="class" name="IntEnum" />
      <variable citdl="list" name="__all__" />
      <import module="client" />
      <import module="server" />
    </scope>
    <scope doc="Tokenization help for Python programs.&#10;generate_tokens(readline) is a generator that breaks a stream of text into Python tokens.  It accepts a readline-like method which is called repeatedly to get the next line of input (or &quot;&quot; for EOF).  It generates 5-tuples with these members:  the token type (see token.py) the token (a string) the starting (row, column) indices of the token (a 2-tuple of ints) the ending (row, column) indices of the token (a 2-tuple of ints) the original line (string)" ilk="blob" lang="Python3" name="lib2to3.pgen2.tokenize">
      <variable citdl="int" name="AMPER" />
      <variable citdl="int" name="AMPEREQUAL" />
      <variable citdl="int" name="ASYNC" />
      <variable citdl="int" name="AT" />
      <variable citdl="int" name="ATEQUAL" />
      <variable citdl="int" name="AWAIT" />
      <variable citdl="int" name="BACKQUOTE" />
      <variable citdl="bytes" name="BOM_UTF8" />
      <variable citdl="str" name="Binnumber" />
      <variable citdl="str" name="Bracket" />
      <variable citdl="int" name="CIRCUMFLEX" />
      <variable citdl="int" name="CIRCUMFLEXEQUAL" />
      <variable citdl="int" name="COLON" />
      <variable citdl="int" name="COMMA" />
      <variable citdl="int" name="COMMENT" />
      <variable citdl="str" name="Comment" />
      <variable citdl="str" name="ContStr" />
      <variable citdl="int" name="DEDENT" />
      <variable citdl="int" name="DOT" />
      <variable citdl="int" name="DOUBLESLASH" />
      <variable citdl="int" name="DOUBLESLASHEQUAL" />
      <variable citdl="int" name="DOUBLESTAR" />
      <variable citdl="int" name="DOUBLESTAREQUAL" />
      <variable citdl="str" name="Decnumber" />
      <variable citdl="str" name="Double" />
      <variable citdl="str" name="Double3" />
      <variable citdl="int" name="ENDMARKER" />
      <variable citdl="int" name="EQEQUAL" />
      <variable citdl="int" name="EQUAL" />
      <variable citdl="int" name="ERRORTOKEN" />
      <variable citdl="str" name="Expfloat" />
      <variable citdl="str" name="Exponent" />
      <variable citdl="str" name="Floatnumber" />
      <variable citdl="str" name="Funny" />
      <variable citdl="int" name="GREATER" />
      <variable citdl="int" name="GREATEREQUAL" />
      <variable citdl="str" name="Hexnumber" />
      <variable citdl="int" name="INDENT" />
      <scope ilk="function" name="ISEOF" signature="ISEOF(x)" />
      <scope ilk="function" name="ISNONTERMINAL" signature="ISNONTERMINAL(x)" />
      <scope ilk="function" name="ISTERMINAL" signature="ISTERMINAL(x)" />
      <variable citdl="str" name="Ignore" />
      <variable citdl="str" name="Imagnumber" />
      <variable citdl="str" name="Intnumber" />
      <variable citdl="int" name="LBRACE" />
      <variable citdl="int" name="LEFTSHIFT" />
      <variable citdl="int" name="LEFTSHIFTEQUAL" />
      <variable citdl="int" name="LESS" />
      <variable citdl="int" name="LESSEQUAL" />
      <variable citdl="int" name="LPAR" />
      <variable citdl="int" name="LSQB" />
      <variable citdl="int" name="MINEQUAL" />
      <variable citdl="int" name="MINUS" />
      <variable citdl="int" name="NAME" />
      <variable citdl="int" name="NEWLINE" />
      <variable citdl="int" name="NL" />
      <variable citdl="int" name="NOTEQUAL" />
      <variable citdl="int" name="NT_OFFSET" />
      <variable citdl="int" name="NUMBER" />
      <variable citdl="int" name="N_TOKENS" />
      <variable citdl="str" name="Name" />
      <variable citdl="str" name="Number" />
      <variable citdl="int" name="OP" />
      <variable citdl="str" name="Octnumber" />
      <variable citdl="str" name="Operator" />
      <variable citdl="int" name="PERCENT" />
      <variable citdl="int" name="PERCENTEQUAL" />
      <variable citdl="int" name="PLUS" />
      <variable citdl="int" name="PLUSEQUAL" />
      <variable citdl="str" name="PlainToken" />
      <variable citdl="str" name="Pointfloat" />
      <variable citdl="str" name="PseudoExtras" />
      <variable citdl="str" name="PseudoToken" />
      <variable citdl="int" name="RARROW" />
      <variable citdl="int" name="RBRACE" />
      <variable citdl="int" name="RIGHTSHIFT" />
      <variable citdl="int" name="RIGHTSHIFTEQUAL" />
      <variable citdl="int" name="RPAR" />
      <variable citdl="int" name="RSQB" />
      <variable citdl="int" name="SEMI" />
      <variable citdl="int" name="SLASH" />
      <variable citdl="int" name="SLASHEQUAL" />
      <variable citdl="int" name="STAR" />
      <variable citdl="int" name="STAREQUAL" />
      <variable citdl="int" name="STRING" />
      <variable citdl="str" name="Single" />
      <variable citdl="str" name="Single3" />
      <variable citdl="str" name="Special" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="StopTokenizing" />
      <variable citdl="str" name="String" />
      <variable citdl="int" name="TILDE" />
      <variable citdl="str" name="Token" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="TokenError" />
      <variable citdl="str" name="Triple" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Untokenizer">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="compat" signature="compat(self, token, iterable)" />
        <scope ilk="function" name="untokenize" signature="untokenize(self, iterable)" />
        <scope ilk="function" name="add_whitespace" signature="add_whitespace(self, start)" />
      </scope>
      <variable citdl="int" name="VBAR" />
      <variable citdl="int" name="VBAREQUAL" />
      <variable citdl="str" name="Whitespace" />
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="any" signature="any(*choices)" />
      <variable citdl="SRE_Pattern" name="blank_re" />
      <variable citdl="SRE_Pattern" name="cookie_re" />
      <scope doc="The detect_encoding() function is used to detect the&#10;encoding that should be used to decode a Python source file." ilk="function" name="detect_encoding" signature="detect_encoding(readline)" />
      <variable citdl="SRE_Pattern" name="double3prog" />
      <variable citdl="dict" name="endprogs" />
      <scope doc="The generate_tokens() generator requires one argument,&#10;readline, which must be a callable object which provides the&#10;same interface as the readline() method of built-in file&#10;objects." ilk="function" name="generate_tokens" signature="generate_tokens(readline)" />
      <scope ilk="function" name="group" signature="group(*choices)" />
      <scope doc="Looks up a codec tuple in the Python codec registry and&#10;returns a CodecInfo object." ilk="function" name="lookup" />
      <scope ilk="function" name="maybe" signature="maybe(*choices)" />
      <scope ilk="function" name="printtoken" signature="printtoken(type, token, xxx_todo_changeme, xxx_todo_changeme1, line)" />
      <variable citdl="SRE_Pattern" name="pseudoprog" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="single3prog" />
      <variable citdl="dict" name="single_quoted" />
      <import module="string" />
      <variable citdl="str" name="t" />
      <variable citdl="int" name="tabsize" />
      <variable citdl="dict" name="tok_name" />
      <scope doc="The tokenize() function accepts two parameters: one&#10;representing the input stream, and one providing an output&#10;mechanism for tokenize()." ilk="function" name="tokenize" signature="tokenize(readline, tokeneater=&lt;function printtoken at 0x7f117e2e19d8&gt;)" />
      <scope doc="# backwards compatible interface" ilk="function" name="tokenize_loop" signature="tokenize_loop(readline, tokeneater)" />
      <variable citdl="SRE_Pattern" name="tokenprog" />
      <variable citdl="dict" name="triple_quoted" />
      <scope doc="Transform tokens back into Python source code." ilk="function" name="untokenize" signature="untokenize(iterable)" />
    </scope>
    <scope doc="Interface to the Expat non-validating XML parser.&#10;" ilk="blob" lang="Python3" name="xml.parsers.expat">
      <variable citdl="str" name="EXPAT_VERSION" />
      <scope doc="Returns string error for given number." ilk="function" name="ErrorString" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ExpatError" />
      <scope doc="Return a new XML parser object." ilk="function" name="ParserCreate" />
      <scope classrefs="object" doc="XML parser&#10;" ilk="class" name="XMLParserType">
        <scope doc="Parse XML data from file-like object." ilk="function" name="ParseFile" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return the untranslated text of the input that caused the&#10;current event." ilk="function" name="GetInputContext" />
        <scope doc="Allows the application to provide an artificial external&#10;subset if one is not specified as part of the document&#10;instance." ilk="function" name="UseForeignDTD" />
        <scope doc="Parse XML data." ilk="function" name="Parse" />
        <scope doc="Return base URL string for the parser." ilk="function" name="GetBase" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Set the base URL for the parser." ilk="function" name="SetBase" />
        <scope doc="Create a parser for parsing an external entity based on the&#10;information passed to the ExternalEntityRefHandler." ilk="function" name="ExternalEntityParserCreate" />
        <scope doc="Controls parsing of parameter entities (including the&#10;external DTD subset)." ilk="function" name="SetParamEntityParsing" />
      </scope>
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_ALWAYS" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_NEVER" />
      <variable citdl="int" name="XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <import module="errors" />
      <variable citdl="PyCapsule" name="expat_CAPI" />
      <variable citdl="list" name="features" />
      <import module="model" />
      <variable citdl="str" name="native_encoding" />
      <import module="sys" />
      <variable citdl="tuple" name="version_info" />
    </scope>
    <scope doc="Class representing application/* type MIME documents.&#10;" ilk="blob" lang="Python3" name="email.mime.application">
      <scope classrefs="MIMENonMultipart" doc="Class for generating application/* MIME documents.&#10;" ilk="class" name="MIMEApplication">
        <scope doc="Create an application/* type MIME document." ilk="function" name="__init__" signature="__init__(self, _data, _subtype='octet-stream', _encoder=&lt;function encode_base64 at 0x7f117f759d90&gt;, **_params)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="encoders" />
    </scope>
    <scope doc="FeedParser - An email feed parser.&#10;The feed parser implements an interface for incrementally parsing an email message, line by line.  This has advantages for certain applications, such as those reading email messages off a socket.  FeedParser.feed() is the primary interface for pushing new data into the parser.  It returns when there's nothing more it can do with the available data.  When you have no more data to push into the parser, call .close(). This completes the parsing and returns the root message object.  The other advantage of this parser is that it will never raise a parsing" ilk="blob" lang="Python3" name="email.feedparser">
      <scope classrefs="object" doc="A file-ish object that can have new data loaded into it.&#10;You can also push and pop line-matching predicates onto a stack.  When the current predicate matches the current line, a false EOF response (i.e. empty string) is returned instead.  This lets the parser adhere to a simple abstraction -- it parses until EOF closes the current message." ilk="class" name="BufferedSubFile">
        <scope ilk="function" name="readline" signature="readline(self)" />
        <scope ilk="function" name="push_eof_matcher" signature="push_eof_matcher(self, pred)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="pushlines" signature="pushlines(self, lines)" />
        <scope ilk="function" name="pop_eof_matcher" signature="pop_eof_matcher(self)" />
        <scope ilk="function" name="unreadline" signature="unreadline(self, line)" />
        <scope doc="Push some new data into this object." ilk="function" name="push" signature="push(self, data)" />
      </scope>
      <scope classrefs="FeedParser" doc="Like FeedParser, but feed accepts bytes.&#10;" ilk="class" name="BytesFeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
      </scope>
      <variable citdl="str" name="EMPTYSTRING" />
      <scope classrefs="object" doc="A feed-style parser of email.&#10;" ilk="class" name="FeedParser">
        <scope doc="Push more data into the parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope doc="# Non-public interface for supporting Parser's headersonly&#10;flag" ilk="function" name="_set_headersonly" signature="_set_headersonly(self)" />
        <scope doc="Parse all remaining data and return the root message object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_call_parse" signature="_call_parse(self)" />
        <scope ilk="function" name="_parse_headers" signature="_parse_headers(self, lines)" />
        <scope ilk="function" name="_parsegen" signature="_parsegen(self)" />
        <scope doc="_factory is called with no arguments to create a new message&#10;obj" ilk="function" name="__init__" signature="__init__(self, _factory=None, *, policy=Compat32())" />
        <scope ilk="function" name="_pop_message" signature="_pop_message(self)" />
        <scope ilk="function" name="_new_message" signature="_new_message(self)" />
      </scope>
      <variable citdl="str" name="NL" />
      <variable citdl="SRE_Pattern" name="NLCRE" />
      <variable citdl="SRE_Pattern" name="NLCRE_bol" />
      <variable citdl="SRE_Pattern" name="NLCRE_crack" />
      <variable citdl="SRE_Pattern" name="NLCRE_eol" />
      <variable citdl="object" name="NeedMoreData" />
      <variable citdl="list" name="__all__" />
      <variable citdl="Compat32" name="compat32" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <import module="errors" />
      <variable citdl="SRE_Pattern" name="headerRE" />
      <import module="message" />
      <import module="re" />
    </scope>
    <scope doc="Fixer for import statements.&#10;If spam is being imported from the local directory, this import: from spam import eggs Becomes: from .spam import eggs  And this import: import spam Becomes: from . import spam" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_import">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixImport">
        <scope ilk="function" name="probably_a_local_import" signature="probably_a_local_import(self, imp_name)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, name)" />
      </scope>
      <scope doc="Return an import statement in the form: from package import&#10;name_leafs" ilk="function" name="FromImport" signature="FromImport(package_name, name_leafs)" />
      <scope doc="Returns the directory component of a pathname" ilk="function" name="dirname" signature="dirname(p)" />
      <scope doc="Test whether a path exists." ilk="function" name="exists" signature="exists(path)" />
      <import module="fixer_base" />
      <scope doc="Join two or more pathname components, inserting '/' as&#10;needed." ilk="function" name="join" signature="join(a, *p)" />
      <variable citdl="str" name="sep" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <scope doc="Walks over all the names imported in a dotted_as_names node." ilk="function" name="traverse_imports" signature="traverse_imports(names)" />
    </scope>
    <scope doc="Miscellaneous WSGI-related Utilities&#10;" ilk="blob" lang="Python3" name="wsgiref.util">
      <scope classrefs="object" doc="Wrapper to convert file-like objects to iterables&#10;" ilk="class" name="FileWrapper">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filelike, blksize=8192)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="__next__" signature="__next__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Return the application's base URI (no PATH_INFO or&#10;QUERY_STRING)" ilk="function" name="application_uri" signature="application_uri(environ)" />
      <scope doc="Return a guess for whether 'wsgi.url_scheme' should be&#10;'http' or 'https'" ilk="function" name="guess_scheme" signature="guess_scheme(environ)" />
      <scope doc="Return true if 'header_name' is an HTTP/1.1 &quot;Hop-by-Hop&quot;&#10;header" ilk="function" name="is_hop_by_hop" signature="is_hop_by_hop(header_name)" />
      <import module="posixpath" />
      <scope doc="Return the full request URI, optionally including the query&#10;string" ilk="function" name="request_uri" signature="request_uri(environ, include_query=True)" />
      <scope doc="Update 'environ' with trivial defaults for testing purposes" ilk="function" name="setup_testing_defaults" signature="setup_testing_defaults(environ)" />
      <scope doc="Shift a name from PATH_INFO to SCRIPT_NAME, returning it" ilk="function" name="shift_path_info" signature="shift_path_info(environ)" />
    </scope>
    <scope doc="SMTP/ESMTP client class.&#10;This should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP Authentication) and RFC 2487 (Secure SMTP over TLS).  Notes:  Please remember, when doing ESMTP, that the names of the SMTP service extensions are NOT the same thing as the option keywords for the RCPT and MAIL commands!  Example:" ilk="blob" lang="Python3" name="smtplib">
      <variable citdl="str" name="CRLF" />
      <scope classrefs="SMTP" doc="LMTP - Local Mail Transfer Protocol&#10;The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client. It's common to use Unix sockets for LMTP, so our connect() method must support that as well as a regular host:port server.  local_hostname and source_address have the same meaning as they do in the SMTP class.  To specify a Unix socket, you must use an absolute path as the host, starting with a '/'.  Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don't support or require any authentication, but your mileage might vary." ilk="class" name="LMTP">
        <scope doc="Initialize a new instance." ilk="function" name="__init__" signature="__init__(self, host='', port=2003, local_hostname=None, source_address=None)" />
        <scope doc="Connect to the LMTP daemon, on either a Unix or a TCP&#10;socket." ilk="function" name="connect" signature="connect(self, host='localhost', port=0, source_address=None)" />
      </scope>
      <variable citdl="int" name="LMTP_PORT" />
      <variable citdl="SRE_Pattern" name="OLDSTYLE_AUTH" />
      <scope classrefs="object" doc="This class manages a connection to an SMTP or ESMTP server.&#10;SMTP Objects: SMTP objects have the following attributes: helo_resp This is the message given by the server in response to the most recent HELO command.  ehlo_resp This is the message given by the server in response to the most recent EHLO command. This is usually multiline. " ilk="class" name="SMTP">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="Authentication command - requires response processing." ilk="function" name="auth" signature="auth(self, mechanism, authobject, *, initial_response_ok=True)" />
        <scope doc="This command performs an entire mail transaction." ilk="function" name="sendmail" signature="sendmail(self, from_addr, to_addrs, msg, mail_options=[], rcpt_options=[])" />
        <scope doc="SMTP 'helo' command." ilk="function" name="helo" signature="helo(self, name='')" />
        <scope doc="Send a command to the server." ilk="function" name="putcmd" signature="putcmd(self, cmd, args='')" />
        <scope doc="SMTP 'noop' command -- doesn't do anything :&gt;" ilk="function" name="noop" signature="noop(self)" />
        <scope doc="SMTP 'ehlo' command." ilk="function" name="ehlo" signature="ehlo(self, name='')" />
        <scope doc="SMTP 'expn' command -- expands a mailing list." ilk="function" name="expn" signature="expn(self, address)" />
        <scope doc="SMTP 'DATA' command -- sends message data to server." ilk="function" name="data" signature="data(self, msg)" />
        <scope doc="Authobject to use with LOGIN authentication." ilk="function" name="auth_login" signature="auth_login(self, challenge=None)" />
        <scope doc="Send `s' to the server." ilk="function" name="send" signature="send(self, s)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Close the connection to the SMTP server." ilk="function" name="close" signature="close(self)" />
        <scope doc="Connect to a host on a given port." ilk="function" name="connect" signature="connect(self, host='localhost', port=0, source_address=None)" />
        <scope ilk="function" name="_print_debug" signature="_print_debug(self, *args)" />
        <scope doc="Authobject to use with CRAM-MD5 authentication." ilk="function" name="auth_cram_md5" signature="auth_cram_md5(self, challenge=None)" />
        <scope doc="SMTP 'verify' command -- checks for address validity." ilk="function" name="verify" signature="verify(self, address)" />
        <scope doc="SMTP 'rcpt' command -- indicates 1 recipient for this mail." ilk="function" name="rcpt" signature="rcpt(self, recip, options=[])" />
        <scope doc="Log in on an SMTP server that requires authentication." ilk="function" name="login" signature="login(self, user, password, *, initial_response_ok=True)" />
        <scope doc="Puts the connection to the SMTP server into TLS mode." ilk="function" name="starttls" signature="starttls(self, keyfile=None, certfile=None, context=None)" />
        <scope doc="Authobject to use with PLAIN authentication." ilk="function" name="auth_plain" signature="auth_plain(self, challenge=None)" />
        <scope doc="Terminate the SMTP session." ilk="function" name="quit" signature="quit(self)" />
        <scope doc="Initialize a new instance." ilk="function" name="__init__" signature="__init__(self, host='', port=0, local_hostname=None, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
        <scope doc="Get a reply from the server." ilk="function" name="getreply" signature="getreply(self)" />
        <scope doc="Does the server support a given SMTP service extension?" ilk="function" name="has_extn" signature="has_extn(self, opt)" />
        <scope doc="SMTP 'mail' command -- begins mail xfer session." ilk="function" name="mail" signature="mail(self, sender, options=[])" />
        <scope doc="Send a command, and return its response code." ilk="function" name="docmd" signature="docmd(self, cmd, args='')" />
        <scope doc="SMTP 'help' command." ilk="function" name="help" signature="help(self, args='')" />
        <scope ilk="function" name="_get_socket" signature="_get_socket(self, host, port, timeout)" />
        <scope doc="Internal 'rset' command which ignores any&#10;SMTPServerDisconnected error." ilk="function" name="_rset" signature="_rset(self)" />
        <scope doc="SMTP 'verify' command -- checks for address validity." ilk="function" name="vrfy" signature="vrfy(self, address)" />
        <scope doc="Call self.ehlo() and/or self.helo() if needed." ilk="function" name="ehlo_or_helo_if_needed" signature="ehlo_or_helo_if_needed(self)" />
        <scope doc="Converts message to a bytestring and passes it to sendmail." ilk="function" name="send_message" signature="send_message(self, msg, from_addr=None, to_addrs=None, mail_options=[], rcpt_options={})" />
        <scope doc="SMTP 'rset' command -- resets session." ilk="function" name="rset" signature="rset(self)" />
        <scope doc="Set the debug output level." ilk="function" name="set_debuglevel" signature="set_debuglevel(self, debuglevel)" />
      </scope>
      <scope classrefs="SMTPResponseException" doc="Authentication error.&#10;Most probably the server didn't accept the username/password combination provided." ilk="class" name="SMTPAuthenticationError" />
      <scope classrefs="SMTPResponseException" doc="Error during connection establishment.&#10;" ilk="class" name="SMTPConnectError" />
      <scope classrefs="SMTPResponseException" doc="The SMTP server didn't accept the data.&#10;" ilk="class" name="SMTPDataError" />
      <scope classrefs="OSError" doc="Base class for all exceptions raised by this module.&#10;" ilk="class" name="SMTPException" />
      <scope classrefs="SMTPResponseException" doc="The server refused our HELO reply.&#10;" ilk="class" name="SMTPHeloError" />
      <scope classrefs="SMTPException" doc="The command or option is not supported by the SMTP server.&#10;This exception is raised when an attempt is made to run a command or a command with an option which is not supported by the server." ilk="class" name="SMTPNotSupportedError" />
      <scope classrefs="SMTPException" doc="All recipient addresses refused.&#10;The errors for each recipient are accessible through the attribute 'recipients', which is a dictionary of exactly the same sort as SMTP.sendmail() returns." ilk="class" name="SMTPRecipientsRefused">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, recipients)" />
      </scope>
      <scope classrefs="SMTPException" doc="Base class for all exceptions that include an SMTP error code.&#10;These exceptions are generated in some instances when the SMTP server returns an error code.  The error code is stored in the `smtp_code' attribute of the error, and the `smtp_error' attribute is set to the error message." ilk="class" name="SMTPResponseException">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, code, msg)" />
      </scope>
      <scope classrefs="SMTPResponseException" doc="Sender address refused.&#10;In addition to the attributes set by on all SMTPResponseException exceptions, this sets `sender' to the string that the SMTP refused." ilk="class" name="SMTPSenderRefused">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, code, msg, sender)" />
      </scope>
      <scope classrefs="SMTPException" doc="Not connected to any SMTP server.&#10;This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server." ilk="class" name="SMTPServerDisconnected" />
      <variable citdl="int" name="SMTP_PORT" />
      <scope classrefs="SMTP" doc="This is a subclass derived from SMTP that connects over an SSL&#10;encrypted socket (to use this class you need a socket module that was compiled with SSL support). If host is not specified, '' (the local host) is used. If port is omitted, the standard SMTP-over-SSL port (465) is used.  local_hostname and source_address have the same meaning as they do in the SMTP class.  keyfile and certfile are also optional - they can contain a PEM formatted private key and certificate chain file for the SSL connection. context also optional, can contain a SSLContext, and is an alternative to keyfile and certfile; If it is specified both keyfile and certfile must be None." ilk="class" name="SMTP_SSL">
        <scope doc="Initialize a new instance." ilk="function" name="__init__" signature="__init__(self, host='', port=0, local_hostname=None, keyfile=None, certfile=None, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None, context=None)" />
        <scope ilk="function" name="_get_socket" signature="_get_socket(self, host, port, timeout)" />
      </scope>
      <variable citdl="int" name="SMTP_SSL_PORT" />
      <variable citdl="list" name="__all__" />
      <variable citdl="bytes" name="bCRLF" />
      <import module="base64" />
      <import module="copy" />
      <import module="datetime" />
      <import module="email" />
      <scope doc="Encode a string with base64." ilk="function" name="encode_base64" signature="encode_base64(s, maxlinelen=76, eol='\n')" />
      <import module="hmac" />
      <import module="io" />
      <scope doc="Quote a subset of the email addresses defined by RFC 821." ilk="function" name="quoteaddr" signature="quoteaddr(addrstring)" />
      <scope doc="Quote data for email." ilk="function" name="quotedata" signature="quotedata(data)" />
      <import module="re" />
      <import module="socket" />
      <import module="ssl" />
      <import module="sys" />
    </scope>
    <scope doc="distutils.command.install_lib&#10;Implements the Distutils 'install_lib' command (install all Python modules)." ilk="blob" lang="Python3" name="distutils.command.install_lib">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <variable citdl="str" name="PYTHON_SOURCE_EXTENSION" />
      <import module="importlib" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="install_lib">
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="byte_compile" signature="byte_compile(self, files)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope ilk="function" name="_bytecode_filenames" signature="_bytecode_filenames(self, py_filenames)" />
        <scope ilk="function" name="build" signature="build(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Get the list of files that are input to this command, ie." ilk="function" name="get_inputs" signature="get_inputs(self)" />
        <scope ilk="function" name="install" signature="install(self)" />
        <scope doc="Return the list of files that would be installed if this&#10;command were actually run." ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope ilk="function" name="_mutate_outputs" signature="_mutate_outputs(self, has_any, build_cmd, cmd_option, output_dir)" />
      </scope>
      <import module="os" />
      <import module="sys" />
    </scope>
    <scope doc="Utilities shared by tests.&#10;" ilk="blob" lang="Python3" name="asyncio.test_utils">
      <scope classrefs="TCPServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="HTTPServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
      </scope>
      <scope ilk="function" name="MockCallback" signature="MockCallback(**kwargs)" />
      <scope classrefs="str" doc="A regex based str with a fuzzy __eq__.&#10;Use this helper with 'mock.assert_called_with', or anywhere where a regex comparison between strings is needed.  For instance: mock_call.assert_called_with(MockPattern('spam.*ham'))" ilk="class" name="MockPattern">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
      </scope>
      <scope classrefs="SSLWSGIServerMixin SilentWSGIServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="SSLWSGIServer" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="SSLWSGIServerMixin">
        <scope ilk="function" name="finish_request" signature="finish_request(self, request, client_address)" />
      </scope>
      <scope classrefs="UnixWSGIServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="SilentUnixWSGIServer">
        <scope doc="Handle an error gracefully. May be overridden." ilk="function" name="handle_error" signature="handle_error(self, request, client_address)" />
      </scope>
      <scope classrefs="WSGIRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="SilentWSGIRequestHandler">
        <scope doc="Log an arbitrary message." ilk="function" name="log_message" signature="log_message(self, format, *args)" />
        <scope ilk="function" name="get_stderr" signature="get_stderr(self)" />
      </scope>
      <scope classrefs="WSGIServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="SilentWSGIServer">
        <scope doc="Handle an error gracefully. May be overridden." ilk="function" name="handle_error" signature="handle_error(self, request, client_address)" />
        <scope doc="Get the request and client address from the socket." ilk="function" name="get_request" signature="get_request(self)" />
      </scope>
      <scope classrefs="TestCase" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="TestCase">
        <scope ilk="function" name="new_test_loop" signature="new_test_loop(self, gen=None)" />
        <scope ilk="function" name="set_event_loop" signature="set_event_loop(self, loop, *, cleanup=True)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
      </scope>
      <scope classrefs="BaseEventLoop" doc="Loop for unittests.&#10;It manages self time directly. If something scheduled to be executed later then on next loop iteration after all ready handlers done generator passed to __init__ is calling.  Generator should be like this:  def gen(): ... when = yield ..." ilk="class" name="TestLoop">
        <scope ilk="function" name="assert_reader" signature="assert_reader(self, fd, callback, *args)" />
        <scope ilk="function" name="reset_counters" signature="reset_counters(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, gen=None)" />
        <scope ilk="function" name="remove_writer" signature="remove_writer(self, fd)" />
        <scope doc="Write a byte to self-pipe, to wake up the event loop." ilk="function" name="_write_to_self" signature="_write_to_self(self)" />
        <scope ilk="function" name="add_writer" signature="add_writer(self, fd, callback, *args)" />
        <scope doc="Like call_later(), but uses an absolute time." ilk="function" name="call_at" signature="call_at(self, when, callback, *args)" />
        <scope ilk="function" name="remove_reader" signature="remove_reader(self, fd)" />
        <scope doc="Run one full iteration of the event loop." ilk="function" name="_run_once" signature="_run_once(self)" />
        <scope ilk="function" name="add_reader" signature="add_reader(self, fd, callback, *args)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope doc="Return the time according to the event loop's clock." ilk="function" name="time" signature="time(self)" />
        <scope doc="Process selector events." ilk="function" name="_process_events" signature="_process_events(self, event_list)" />
        <scope ilk="function" name="assert_writer" signature="assert_writer(self, fd, callback, *args)" />
        <scope doc="Move test time forward." ilk="function" name="advance_time" signature="advance_time(self, advance)" />
      </scope>
      <scope classrefs="BaseSelector" doc="Selector abstract base class.&#10;A selector supports registering file objects to be monitored for specific I/O events.  A file object is a file descriptor or any object with a `fileno()` method. An arbitrary object can be attached to the file object, which can be used for example to store context information, a callback, etc.  A selector can use various implementations (select(), poll(), epoll()...) depending on the platform. The default `Selector` class uses the most efficient implementation on the current platform." ilk="class" name="TestSelector">
        <scope doc="Register a file object." ilk="function" name="register" signature="register(self, fileobj, events, data=None)" />
        <scope doc="Return a mapping of file objects to selector keys." ilk="function" name="get_map" signature="get_map(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Perform the actual selection, until some monitored file&#10;objects are ready or a timeout expires." ilk="function" name="select" signature="select(self, timeout)" />
        <scope doc="Unregister a file object." ilk="function" name="unregister" signature="unregister(self, fileobj)" />
      </scope>
      <scope classrefs="UnixStreamServer HTTPServer" doc="Base class for various socket-based server classes.&#10;Defaults to synchronous IP stream (i.e., TCP).  Methods for the caller:  - __init__(server_address, RequestHandlerClass, bind_and_activate=True) - serve_forever(poll_interval=0.5) - shutdown() - handle_request()  # if you don't use serve_forever() - fileno() -&gt; int   # for selector " ilk="class" name="UnixHTTPServer">
        <scope doc="Called by constructor to bind the socket." ilk="function" name="server_bind" signature="server_bind(self)" />
      </scope>
      <scope classrefs="SSLWSGIServerMixin SilentUnixWSGIServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="UnixSSLWSGIServer" />
      <scope classrefs="UnixHTTPServer WSGIServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="UnixWSGIServer">
        <scope doc="Called by constructor to bind the socket." ilk="function" name="server_bind" signature="server_bind(self)" />
        <scope doc="Get the request and client address from the socket." ilk="function" name="get_request" signature="get_request(self)" />
      </scope>
      <scope classrefs="BaseHTTPRequestHandler" doc="HTTP request handler base class.&#10;The following explanation of HTTP serves to guide you through the code as well as to expose any misunderstandings I may have about HTTP (so you don't need to read the code to figure out I'm wrong :-).  HTTP (HyperText Transfer Protocol) is an extensible protocol on top of a reliable stream transport (e.g. TCP/IP).  The protocol recognizes three parts to a request:  1. One line identifying the request type and path" ilk="class" name="WSGIRequestHandler">
        <scope ilk="function" name="get_stderr" signature="get_stderr(self)" />
        <scope ilk="function" name="get_environ" signature="get_environ(self)" />
        <scope doc="Handle a single HTTP request" ilk="function" name="handle" signature="handle(self)" />
      </scope>
      <scope classrefs="HTTPServer" doc="BaseHTTPServer that implements the Python WSGI protocol&#10;" ilk="class" name="WSGIServer">
        <scope doc="Override server_bind to store the server name." ilk="function" name="server_bind" signature="server_bind(self)" />
        <scope ilk="function" name="set_app" signature="set_app(self, application)" />
        <scope ilk="function" name="setup_environ" signature="setup_environ(self)" />
        <scope ilk="function" name="get_app" signature="get_app(self)" />
      </scope>
      <import module="base_events" />
      <import module="collections" />
      <import module="compat" />
      <import module="contextlib" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <scope doc="Context manager to disable asyncio logger." ilk="function" name="disable_logger" signature="disable_logger(*args, **kwds)" />
      <scope ilk="function" name="dummy_ssl_context" signature="dummy_ssl_context()" />
      <import module="events" />
      <scope ilk="function" name="force_legacy_ssl_support" signature="force_legacy_ssl_support()" />
      <import module="futures" />
      <scope ilk="function" name="gen_unix_socket_path" signature="gen_unix_socket_path()" />
      <scope ilk="function" name="get_function_source" signature="get_function_source(func)" />
      <import module="io" />
      <variable citdl="Logger" name="logger" />
      <import module="logging" />
      <scope ilk="function" name="make_test_protocol" signature="make_test_protocol(base)" />
      <import module="mock" />
      <scope doc="Create a mock of a non-blocking socket." ilk="function" name="mock_nonblocking_socket" signature="mock_nonblocking_socket()" />
      <import module="os" />
      <import module="re" />
      <scope ilk="function" name="run_briefly" signature="run_briefly(loop)" />
      <scope doc="Legacy API to run once through the event loop." ilk="function" name="run_once" signature="run_once(loop)" />
      <scope ilk="function" name="run_test_server" signature="run_test_server(*args, **kwds)" />
      <scope ilk="function" name="run_test_unix_server" signature="run_test_unix_server(*args, **kwds)" />
      <scope ilk="function" name="run_until" signature="run_until(loop, pred, timeout=30)" />
      <import module="selectors" />
      <import module="socket" />
      <scope doc="Create a pair of socket objects from the sockets returned by&#10;the platform socketpair() function." ilk="function" name="socketpair" signature="socketpair([family[, type[, proto]]]) -&gt; (socket object, socket object)" />
      <import module="socketserver" />
      <import module="ssl" />
      <import module="sys" />
      <import module="tasks" />
      <import module="tempfile" />
      <import module="threading" />
      <import module="time" />
      <import module="unittest" />
      <scope ilk="function" name="unix_socket_path" signature="unix_socket_path(*args, **kwds)" />
    </scope>
    <scope doc="A generic class to build line-oriented command interpreters.&#10;Interpreters constructed with this class obey the following conventions:  1. End of file on input is processed as the command 'EOF'. 2. A command is parsed out of each line by collecting the prefix composed of characters in the identchars member. 3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method is passed a single argument consisting of the remainder of the line. 4. Typing an empty line repeats the last command.  (Actually, it calls the method `emptyline', which may be overridden in a subclass.) 5. There is a predefined `help' method.  Given an argument `topic', it" ilk="blob" lang="Python3" name="cmd">
      <scope classrefs="object" doc="A simple framework for writing line-oriented command interpreters.&#10;These are often useful for test harnesses, administrative tools, and prototypes that will later be wrapped in a more sophisticated interface.  A Cmd instance or subclass instance is a line-oriented interpreter framework.  There is no good reason to instantiate Cmd itself; rather, it's useful as a superclass of an interpreter class you define yourself in order to inherit Cmd's methods and encapsulate action methods." ilk="class" name="Cmd">
        <scope ilk="function" name="print_topics" signature="print_topics(self, header, cmds, cmdlen, maxcol)" />
        <scope doc="Called on an input line when the command prefix is not&#10;recognized." ilk="function" name="default" signature="default(self, line)" />
        <scope ilk="function" name="complete_help" signature="complete_help(self, *args)" />
        <scope doc="Interpret the argument as though it had been typed in&#10;response to the prompt." ilk="function" name="onecmd" signature="onecmd(self, line)" />
        <scope doc="Parse the line into a command name and a string containing&#10;the arguments." ilk="function" name="parseline" signature="parseline(self, line)" />
        <scope doc="Hook method executed once when the cmdloop() method is&#10;called." ilk="function" name="preloop" signature="preloop(self)" />
        <scope doc="Called when an empty line is entered in response to the&#10;prompt." ilk="function" name="emptyline" signature="emptyline(self)" />
        <scope doc="Hook method executed just after a command dispatch is&#10;finished." ilk="function" name="postcmd" signature="postcmd(self, stop, line)" />
        <scope doc="Display a list of strings as a compact set of columns." ilk="function" name="columnize" signature="columnize(self, list, displaywidth=80)" />
        <scope doc="List available commands with &quot;help&quot; or detailed help with&#10;&quot;help cmd&quot;." ilk="function" name="do_help" signature="do_help(self, arg)" />
        <scope doc="Method called to complete an input line when no command-&#10;specific complete_*() method is available." ilk="function" name="completedefault" signature="completedefault(self, *ignored)" />
        <scope doc="Hook method executed once when the cmdloop() method is about&#10;to return." ilk="function" name="postloop" signature="postloop(self)" />
        <scope doc="Instantiate a line-oriented interpreter framework." ilk="function" name="__init__" signature="__init__(self, completekey='tab', stdin=None, stdout=None)" />
        <scope doc="Hook method executed just before the command line is&#10;interpreted, but after the input prompt is generated and&#10;issued." ilk="function" name="precmd" signature="precmd(self, line)" />
        <scope doc="Repeatedly issue a prompt, accept input, parse an initial&#10;prefix off the received input, and dispatch to action&#10;methods, passing them the remainder of the line as argument." ilk="function" name="cmdloop" signature="cmdloop(self, intro=None)" />
        <scope ilk="function" name="get_names" signature="get_names(self)" />
        <scope ilk="function" name="completenames" signature="completenames(self, text, *ignored)" />
        <scope doc="Return the next possible completion for 'text'." ilk="function" name="complete" signature="complete(self, text, state)" />
      </scope>
      <variable citdl="str" name="IDENTCHARS" />
      <variable citdl="str" name="PROMPT" />
      <variable citdl="list" name="__all__" />
      <import module="string" />
      <import module="sys" />
    </scope>
    <scope doc="_warnings provides basic warning filtering support.&#10;It is a helper module to speed up interpreter start-up." ilk="blob" lang="Python3" name="_warnings">
      <variable citdl="list" name="filters" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <scope doc="Low-level inferface to warnings functionality." ilk="function" name="warn_explicit" />
    </scope>
    <scope doc="An XML-RPC client interface for Python.&#10;The marshalling and response parser code can also be used to implement XML-RPC servers.  Exported exceptions:  Error          Base class for client errors ProtocolError  Indicates an HTTP protocol error ResponseError  Indicates a broken response package Fault          Indicates an XML-RPC fault package " ilk="blob" lang="Python3" name="xmlrpc.client">
      <variable citdl="int" name="APPLICATION_ERROR" />
      <scope classrefs="object" doc="Wrapper for binary data.&#10;" ilk="class" name="Binary">
        <scope ilk="function" name="encode" signature="encode(self, out)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="decode" signature="decode(self, data)" />
      </scope>
      <scope classrefs="int" doc="bool(x) -&gt; bool&#10;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="Boolean">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="object" doc="DateTime wrapper for an ISO 8601 string or time tuple or&#10;localtime integer value to generate 'dateTime.iso8601' XML-RPC value." ilk="class" name="DateTime">
        <scope ilk="function" name="timetuple" signature="timetuple(self)" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" signature="__gt__(self, other)" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" signature="__ge__(self, other)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope ilk="function" name="encode" signature="encode(self, out)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=0)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" signature="__le__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="decode" signature="decode(self, data)" />
        <scope ilk="function" name="make_comparable" signature="make_comparable(self, other)" />
      </scope>
      <scope classrefs="Exception" doc="Base class for client errors.&#10;" ilk="class" name="Error">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ExpatParser">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, target)" />
        <scope ilk="function" name="feed" signature="feed(self, data)" />
        <scope ilk="function" name="close" signature="close(self)" />
      </scope>
      <variable citdl="NoneType" name="FastMarshaller" />
      <variable citdl="NoneType" name="FastParser" />
      <variable citdl="NoneType" name="FastUnmarshaller" />
      <scope classrefs="Error" doc="Indicates an XML-RPC fault package.&#10;" ilk="class" name="Fault">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, faultCode, faultString, **extra)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="GzipFile" doc="a file-like object to decode a response encoded with the gzip&#10;method, as described in RFC 1952." ilk="class" name="GzipDecodedResponse">
        <scope doc="Constructor for the GzipFile class." ilk="function" name="__init__" signature="__init__(self, response)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
      </scope>
      <variable citdl="int" name="INTERNAL_ERROR" />
      <variable citdl="int" name="INVALID_ENCODING_CHAR" />
      <variable citdl="int" name="INVALID_METHOD_PARAMS" />
      <variable citdl="int" name="INVALID_XMLRPC" />
      <variable citdl="int" name="MAXINT" />
      <variable citdl="int" name="METHOD_NOT_FOUND" />
      <variable citdl="int" name="MININT" />
      <scope classrefs="object" doc="Generate an XML-RPC params chunk from a Python data structure.&#10;Create a Marshaller instance for each set of parameters, and use the &quot;dumps&quot; method to convert your data (represented as a tuple) to an XML-RPC params chunk.  To write a fault response, pass a Fault instance instead.  You may prefer to use the &quot;dumps&quot; module function for this purpose." ilk="class" name="Marshaller">
        <scope ilk="function" name="dumps" signature="dumps(self, values)" />
        <scope ilk="function" name="dump_double" signature="dump_double(self, value, write)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, encoding=None, allow_none=False)" />
        <scope ilk="function" name="dump_nil" signature="dump_nil(self, value, write)" />
        <scope ilk="function" name="dump_bytes" signature="dump_bytes(self, value, write)" />
        <scope ilk="function" name="dump_instance" signature="dump_instance(self, value, write)" />
        <scope ilk="function" name="dump_int" signature="dump_int(self, value, write)" />
        <scope ilk="function" name="dump_long" signature="dump_long(self, value, write)" />
        <scope ilk="function" name="dump_array" signature="dump_array(self, value, write)" />
        <scope ilk="function" name="_Marshaller__dump" signature="_Marshaller__dump(self, value, write)" />
        <scope ilk="function" name="dump_bool" signature="dump_bool(self, value, write)" />
        <scope ilk="function" name="dump_struct" signature="dump_struct(self, value, write, escape=&lt;function escape at 0x7f117b7b01e0&gt;)" />
        <scope ilk="function" name="dump_unicode" signature="dump_unicode(self, value, write, escape=&lt;function escape at 0x7f117b7b01e0&gt;)" />
        <scope ilk="function" name="dump_datetime" signature="dump_datetime(self, value, write)" />
      </scope>
      <scope classrefs="object" doc="server -&gt; an object used to boxcar method calls&#10;server should be a ServerProxy object.  Methods can be added to the MultiCall using normal method call syntax e.g.:  multicall = MultiCall(server_proxy) multicall.add(2,3) multicall.get_address(&quot;Guido&quot;)  To execute the multicall, call the MultiCall object e.g.:" ilk="class" name="MultiCall">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, server)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="Iterates over the results of a multicall. Exceptions are&#10;raised in response to xmlrpc faults." ilk="class" name="MultiCallIterator">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, results)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, i)" />
      </scope>
      <variable citdl="int" name="NOT_WELLFORMED_ERROR" />
      <variable citdl="int" name="PARSE_ERROR" />
      <scope classrefs="Error" doc="Indicates an HTTP protocol error.&#10;" ilk="class" name="ProtocolError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, errcode, errmsg, headers)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Error" doc="Indicates a broken response package.&#10;" ilk="class" name="ResponseError" />
      <variable citdl="int" name="SERVER_ERROR" />
      <variable citdl="int" name="SYSTEM_ERROR" />
      <scope classrefs="Transport" doc="Handles an HTTPS transaction to an XML-RPC server.&#10;" ilk="class" name="SafeTransport">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, use_datetime=False, use_builtin_types=False, *, context=None)" />
        <scope ilk="function" name="make_connection" signature="make_connection(self, host)" />
      </scope>
      <scope classrefs="object" doc="uri [,options] -&gt; a logical connection to an XML-RPC server&#10;uri is the connection point on the server, given as scheme://host/target.  The standard implementation always supports the &quot;http&quot; scheme.  If SSL socket support is available (Python 2.0), it also supports &quot;https&quot;.  If the target part and the slash preceding it are both omitted, &quot;/RPC2&quot; is assumed. " ilk="class" name="Server">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="_ServerProxy__request" signature="_ServerProxy__request(self, methodname, params)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="A workaround to get special attributes on the ServerProxy&#10;without interfering with the magic __getattr__" ilk="function" name="__call__" signature="__call__(self, attr)" />
        <scope ilk="function" name="_ServerProxy__close" signature="_ServerProxy__close(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="uri [,options] -&gt; a logical connection to an XML-RPC server&#10;uri is the connection point on the server, given as scheme://host/target.  The standard implementation always supports the &quot;http&quot; scheme.  If SSL socket support is available (Python 2.0), it also supports &quot;https&quot;.  If the target part and the slash preceding it are both omitted, &quot;/RPC2&quot; is assumed. " ilk="class" name="ServerProxy">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="_ServerProxy__request" signature="_ServerProxy__request(self, methodname, params)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="A workaround to get special attributes on the ServerProxy&#10;without interfering with the magic __getattr__" ilk="function" name="__call__" signature="__call__(self, attr)" />
        <scope ilk="function" name="_ServerProxy__close" signature="_ServerProxy__close(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="TRANSPORT_ERROR" />
      <scope classrefs="object" doc="Handles an HTTP transaction to an XML-RPC server.&#10;" ilk="class" name="Transport">
        <scope ilk="function" name="make_connection" signature="make_connection(self, host)" />
        <scope ilk="function" name="parse_response" signature="parse_response(self, response)" />
        <scope ilk="function" name="send_headers" signature="send_headers(self, connection, headers)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, use_datetime=False, use_builtin_types=False)" />
        <scope ilk="function" name="send_request" signature="send_request(self, host, handler, request_body, debug)" />
        <scope doc="## # Clear any cached connection object." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="getparser" signature="getparser(self)" />
        <scope ilk="function" name="single_request" signature="single_request(self, host, handler, request_body, verbose=False)" />
        <scope ilk="function" name="request" signature="request(self, host, handler, request_body, verbose=False)" />
        <scope ilk="function" name="get_host_info" signature="get_host_info(self, host)" />
        <scope ilk="function" name="send_content" signature="send_content(self, connection, request_body)" />
      </scope>
      <variable citdl="int" name="UNSUPPORTED_ENCODING" />
      <scope classrefs="object" doc="Unmarshal an XML-RPC response, based on incoming XML event&#10;messages (start, data, end).  Call close() to get the resulting data structure.  Note that this reader is fairly tolerant, and gladly accepts bogus XML-RPC data without complaining (but not bogus XML)." ilk="class" name="Unmarshaller">
        <scope ilk="function" name="end_base64" signature="end_base64(self, data)" />
        <scope ilk="function" name="end_methodName" signature="end_methodName(self, data)" />
        <scope ilk="function" name="end_nil" signature="end_nil(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, use_datetime=False, use_builtin_types=False)" />
        <scope ilk="function" name="end_double" signature="end_double(self, data)" />
        <scope ilk="function" name="data" signature="data(self, text)" />
        <scope ilk="function" name="end_string" signature="end_string(self, data)" />
        <scope ilk="function" name="end" signature="end(self, tag)" />
        <scope ilk="function" name="end_struct" signature="end_struct(self, data)" />
        <scope ilk="function" name="getmethodname" signature="getmethodname(self)" />
        <scope ilk="function" name="xml" signature="xml(self, encoding, standalone)" />
        <scope ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="end_dateTime" signature="end_dateTime(self, data)" />
        <scope ilk="function" name="end_value" signature="end_value(self, data)" />
        <scope ilk="function" name="end_fault" signature="end_fault(self, data)" />
        <scope ilk="function" name="end_params" signature="end_params(self, data)" />
        <scope ilk="function" name="end_dispatch" signature="end_dispatch(self, tag, data)" />
        <scope ilk="function" name="end_boolean" signature="end_boolean(self, data)" />
        <scope ilk="function" name="end_array" signature="end_array(self, data)" />
        <scope ilk="function" name="start" signature="start(self, tag, attrs)" />
        <scope ilk="function" name="end_int" signature="end_int(self, data)" />
      </scope>
      <variable citdl="tuple" name="WRAPPERS" />
      <import module="base64" />
      <scope classrefs="int" doc="bool(x) -&gt; bool&#10;Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed." ilk="class" name="boolean">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
      </scope>
      <scope classrefs="date" doc="datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])&#10;The year, month and day arguments are required. tzinfo may be None, or an instance of a tzinfo subclass. The remaining arguments may be ints." ilk="class" name="datetime">
        <scope doc="Return ctime() style string." ilk="function" name="ctime" />
        <scope doc="Return time object with same time but with tzinfo=None." ilk="function" name="time" />
        <scope doc="Return UTC time tuple, compatible with time.localtime()." ilk="function" name="utctimetuple" />
        <scope doc="tz -&gt; convert to local time in new timezone tz" ilk="function" name="astimezone" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return POSIX timestamp as float." ilk="function" name="timestamp" />
        <scope doc="Return self.tzinfo.utcoffset(self)." ilk="function" name="utcoffset" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return self.tzinfo.dst(self)." ilk="function" name="dst" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return time tuple, compatible with time.localtime()." ilk="function" name="timetuple" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self.tzinfo.tzname(self)." ilk="function" name="tzname" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="Return date object with same year, month and day." ilk="function" name="date" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return datetime with new specified fields." ilk="function" name="replace" />
        <scope doc="__reduce__() -&gt; (cls, state)" ilk="function" name="__reduce__" signature="__reduce__() -&gt; (cls, state)" />
        <scope doc="Return time object with same time and tzinfo." ilk="function" name="timetz" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="[sep] -&gt; string in ISO 8601 format, YYYY-MM-&#10;DDTHH:MM:SS[.mmmmmm][+HH:MM]." ilk="function" name="isoformat" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
      </scope>
      <scope doc="data [,options] -&gt; marshalled data" ilk="function" name="dumps" signature="dumps(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)" />
      <import module="errno" />
      <scope ilk="function" name="escape" signature="escape(s)" />
      <import module="expat" />
      <scope doc="Create an instance of the fastest available parser, and&#10;attach it to an unmarshalling object." ilk="function" name="getparser" signature="getparser() -&gt; parser, unmarshaller" />
      <import module="gzip" />
      <scope doc="gzip encoded data -&gt; unencoded data" ilk="function" name="gzip_decode" signature="gzip_decode(data, max_decode=20971520)" />
      <scope doc="data -&gt; gzip encoded data" ilk="function" name="gzip_encode" signature="gzip_encode(data)" />
      <import module="http" />
      <scope doc="data -&gt; unmarshalled data, method name" ilk="function" name="loads" signature="loads(data, use_datetime=False, use_builtin_types=False)" />
      <import module="sys" />
      <import module="time" />
      <import module="urllib" />
    </scope>
    <scope doc="C decimal arithmetic module&#10;" ilk="blob" lang="Python3" name="decimal">
      <variable citdl="Context" name="BasicContext" />
      <scope classrefs="DecimalException" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Clamped" />
      <scope classrefs="object" doc="The context affects almost all operations and controls rounding,&#10;Over/Underflow, raising of exceptions and much more.  A new context can be constructed as follows:  &gt;&gt;&gt; c = Context(prec=28, Emin=-425000000, Emax=425000000, ...             rounding=ROUND_HALF_EVEN, capitals=1, clamp=1, ...             traps=[InvalidOperation, DivisionByZero, Overflow], ...             flags=[]) &gt;&gt;&gt;" ilk="class" name="Context">
        <scope doc="Create a new Decimal instance from num, using self as the&#10;context." ilk="function" name="create_decimal" />
        <scope doc="Minus corresponds to the unary prefix minus operator in&#10;Python, but applies the context to the result." ilk="function" name="minus" />
        <scope doc="Return the natural (base e) logarithm of x." ilk="function" name="ln" />
        <scope doc="Return True if x is a qNaN or sNaN, False otherwise." ilk="function" name="is_nan" />
        <scope doc="Digit-wise and of x and y." ilk="function" name="logical_and" />
        <scope doc="Compare the values numerically and return the minimum." ilk="function" name="min" />
        <scope doc="Return True if x is a signaling NaN, False otherwise." ilk="function" name="is_snan" />
        <scope doc="Return True if x is canonical, False otherwise." ilk="function" name="is_canonical" />
        <scope doc="Return x - y * n, where n is the integer nearest the exact&#10;value of x / y (if the result is 0 then its sign will be the&#10;sign of x)." ilk="function" name="remainder_near" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Square root of a non-negative number to context precision." ilk="function" name="sqrt" />
        <scope doc="Reduce x to its simplest form. Alias for reduce(x)." ilk="function" name="normalize" />
        <scope doc="Convert a number to a string using scientific notation." ilk="function" name="to_sci_string" />
        <scope doc="Compare the values numerically with their sign ignored." ilk="function" name="max_mag" />
        <scope doc="Create a new Decimal instance from float f." ilk="function" name="create_decimal_from_float" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return a new instance of x." ilk="function" name="canonical" />
        <scope doc="Return a value equal to Emax - prec + 1." ilk="function" name="Etop" />
        <scope doc="Compare the values numerically with their sign ignored." ilk="function" name="min_mag" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return a value equal to x (rounded), having the exponent of&#10;y." ilk="function" name="quantize" />
        <scope doc="Round to an integer." ilk="function" name="to_integral_value" />
        <scope doc="Identical to to_integral_value(x)." ilk="function" name="to_integral" />
        <scope doc="Return the smallest representable number larger than x." ilk="function" name="next_plus" />
        <scope doc="Digit-wise xor of x and y." ilk="function" name="logical_xor" />
        <scope doc="Return the sum of x and y." ilk="function" name="add" />
        <scope doc="Return a value equal to Emin - prec + 1, which is the&#10;minimum exponent value for subnormal results." ilk="function" name="Etiny" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Convert a number to a string, using engineering notation." ilk="function" name="to_eng_string" />
        <scope doc="Return the first operand after adding the second value to&#10;its exp." ilk="function" name="scaleb" />
        <scope doc="Return True if x is subnormal, False otherwise." ilk="function" name="is_subnormal" />
        <scope doc="Return True if x is a quiet NaN, False otherwise." ilk="function" name="is_qnan" />
        <scope doc="Return True if x is a zero, False otherwise." ilk="function" name="is_zero" />
        <scope doc="Return True if x is negative, False otherwise." ilk="function" name="is_signed" />
        <scope doc="Return a copy of Decimal x." ilk="function" name="copy_decimal" />
        <scope doc="Set all traps to False." ilk="function" name="clear_traps" />
        <scope doc="Return the number closest to x, in the direction towards y." ilk="function" name="next_toward" />
        <scope doc="Reset all flags to False." ilk="function" name="clear_flags" />
        <scope doc="Return an indication of the class of x." ilk="function" name="number_class" />
        <scope doc="Return a copy of x with the sign set to 0." ilk="function" name="copy_abs" />
        <scope doc="Compare the values numerically and return the maximum." ilk="function" name="max" />
        <scope doc="Return the remainder from integer division." ilk="function" name="remainder" />
        <scope doc="Return x multiplied by y, plus z." ilk="function" name="fma" />
        <scope doc="Compare x and y using their abstract representation,&#10;ignoring sign." ilk="function" name="compare_total_mag" />
        <scope doc="Return the largest representable number smaller than x." ilk="function" name="next_minus" />
        <scope doc="Plus corresponds to the unary prefix plus operator in&#10;Python, but applies the context to the result." ilk="function" name="plus" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Round to an integer." ilk="function" name="to_integral_exact" />
        <scope doc="Compare x and y numerically." ilk="function" name="compare" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Copy the sign from y to x." ilk="function" name="copy_sign" />
        <scope doc="Return quotient and remainder of the division x / y." ilk="function" name="divmod" />
        <scope doc="Digit-wise or of x and y." ilk="function" name="logical_or" />
        <scope doc="Return the base 10 logarithm of x." ilk="function" name="log10" />
        <scope doc="Return the difference between x and y." ilk="function" name="subtract" />
        <scope doc="Return e ** x." ilk="function" name="exp" />
        <scope ilk="function" name="_apply" />
        <scope doc="Compare x and y using their abstract representation." ilk="function" name="compare_total" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope ilk="function" name="__copy__" />
        <scope doc="Return True if x is a normal number, False otherwise." ilk="function" name="is_normal" />
        <scope doc="Return True if x is finite, False otherwise." ilk="function" name="is_finite" />
        <scope doc="Return True if the two operands have the same exponent." ilk="function" name="same_quantum" />
        <scope doc="Return x divided by y." ilk="function" name="divide" />
        <scope doc="Compute a**b. If 'a' is negative, then 'b' must be integral." ilk="function" name="power" />
        <scope doc="Compare x and y numerically. All NaNs signal." ilk="function" name="compare_signal" />
        <scope doc="Return the product of x and y." ilk="function" name="multiply" />
        <scope doc="Return x divided by y, truncated to an integer." ilk="function" name="divide_int" />
        <scope doc="Return a copy of x, shifted by y places." ilk="function" name="shift" />
        <scope doc="Return a copy of x with the sign inverted." ilk="function" name="copy_negate" />
        <scope doc="Return 10." ilk="function" name="radix" />
        <scope doc="Return True if x is infinite, False otherwise." ilk="function" name="is_infinite" />
        <scope doc="Return a duplicate of the context with all flags cleared." ilk="function" name="copy" />
        <scope doc="Invert all digits of x." ilk="function" name="logical_invert" />
        <scope doc="Return the exponent of the magnitude of the operand's MSD." ilk="function" name="logb" />
        <scope doc="Return a copy of x, rotated by y places." ilk="function" name="rotate" />
      </scope>
      <scope classrefs="InvalidOperation" doc="Base class for arithmetic errors.&#10;" ilk="class" name="ConversionSyntax" />
      <scope classrefs="object" doc="Construct a new Decimal object. 'value' can be an integer, string, tuple,&#10;or another Decimal object. If no value is given, return Decimal('0'). The context does not affect the conversion and is only passed to determine if the InvalidOperation trap is active." ilk="class" name="Decimal">
        <scope ilk="function" name="__trunc__" />
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return True if the argument is a finite number, and False if&#10;the argument is infinite or a NaN." ilk="function" name="is_finite" />
        <scope doc="Return True if the argument is a (quiet or signaling) NaN&#10;and False otherwise." ilk="function" name="is_nan" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return the digit-wise 'and' of the two (logical) operands." ilk="function" name="logical_and" />
        <scope doc="Minimum of self and other." ilk="function" name="min" />
        <scope doc="Return True if the argument is a signaling NaN and False&#10;otherwise." ilk="function" name="is_snan" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return True if the argument is canonical and False&#10;otherwise." ilk="function" name="is_canonical" />
        <scope ilk="function" name="__round__" />
        <scope doc="Return the remainder from dividing self by other." ilk="function" name="remainder_near" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Normalize the number by stripping the rightmost trailing&#10;zeros and converting any result equal to Decimal('0') to&#10;Decimal('0e0')." ilk="function" name="normalize" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Similar to the max() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="max_mag" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="Round to the nearest integer without signaling Inexact or&#10;Rounded." ilk="function" name="to_integral_value" />
        <scope doc="Return the smallest number representable in the given&#10;context (or in the current default context if no context is&#10;given) that is larger than the given operand." ilk="function" name="next_plus" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return the canonical encoding of the argument." ilk="function" name="canonical" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Similar to the min() method, but the comparison is done&#10;using the absolute values of the operands." ilk="function" name="min_mag" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope ilk="function" name="__copy__" />
        <scope doc="Identical to the to_integral_value() method." ilk="function" name="to_integral" />
        <scope doc="Convert to an engineering-type string." ilk="function" name="to_eng_string" />
        <scope doc="Return the digit-wise 'exclusive or' of the two (logical)&#10;operands." ilk="function" name="logical_xor" />
        <scope ilk="function" name="__floor__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return the square root of the argument to full precision." ilk="function" name="sqrt" />
        <scope doc="Return the first operand with the exponent adjusted the&#10;second." ilk="function" name="scaleb" />
        <scope doc="Return True if the argument is subnormal, and False&#10;otherwise." ilk="function" name="is_subnormal" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Return True if the argument is a quiet NaN, and False&#10;otherwise." ilk="function" name="is_qnan" />
        <scope doc="Return True if the argument is a (positive or negative) zero&#10;and False otherwise." ilk="function" name="is_zero" />
        <scope doc="Return True if the argument has a negative sign and False&#10;otherwise." ilk="function" name="is_signed" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return a tuple representation of the number." ilk="function" name="as_tuple" />
        <scope ilk="function" name="__deepcopy__" />
        <scope doc="If the two operands are unequal, return the number closest&#10;to the first operand in the direction of the second operand." ilk="function" name="next_toward" />
        <scope doc="default object formatter" ilk="function" name="__format__" />
        <scope doc="Return a string describing the class of the operand." ilk="function" name="number_class" />
        <scope doc="Return the absolute value of the argument." ilk="function" name="copy_abs" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Maximum of self and other." ilk="function" name="max" />
        <scope doc="Fused multiply-add." ilk="function" name="fma" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their value as in compare_total(), but ignoring&#10;the sign of each operand." ilk="function" name="compare_total_mag" />
        <scope doc="Return the largest number representable in the given context&#10;(or in the current default context if no context is given)&#10;that is smaller than the given operand." ilk="function" name="next_minus" />
        <scope ilk="function" name="__complex__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Compare self to other." ilk="function" name="compare" />
        <scope doc="Return self." ilk="function" name="conjugate" />
        <scope doc="Return a copy of the first operand with the sign set to be&#10;the same as the sign of the second operand." ilk="function" name="copy_sign" />
        <scope doc="Return a value equal to the first operand after rounding and&#10;having the exponent of the second operand." ilk="function" name="quantize" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return the digit-wise 'or' of the two (logical) operands." ilk="function" name="logical_or" />
        <scope doc="Return the base ten logarithm of the operand." ilk="function" name="log10" />
        <scope doc="Return the value of the (natural) exponential function e**x&#10;at the given number." ilk="function" name="exp" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return the adjusted exponent of the number." ilk="function" name="adjusted" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Compare two operands using their abstract representation&#10;rather than their numerical value." ilk="function" name="compare_total" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return True if the argument is either positive or negative&#10;infinity and False otherwise." ilk="function" name="is_infinite" />
        <scope doc="Return True if the argument is a normal finite non-zero&#10;number with an adjusted exponent greater than or equal to&#10;Emin." ilk="function" name="is_normal" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return the natural (base e) logarithm of the operand." ilk="function" name="ln" />
        <scope doc="Test whether self and other have the same exponent or&#10;whether both are NaN." ilk="function" name="same_quantum" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Identical to compare, except that all NaNs signal." ilk="function" name="compare_signal" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return the result of shifting the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="shift" />
        <scope doc="Return the negation of the argument." ilk="function" name="copy_negate" />
        <scope doc="Return Decimal(10), the radix (base) in which the Decimal&#10;class does all its arithmetic." ilk="function" name="radix" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Round to the nearest integer, signaling Inexact or Rounded&#10;as appropriate if rounding occurs." ilk="function" name="to_integral_exact" />
        <scope doc="Return the digit-wise inversion of the (logical) operand." ilk="function" name="logical_invert" />
        <scope doc="For a non-zero number, return the adjusted exponent of the&#10;operand as a Decimal instance." ilk="function" name="logb" />
        <scope doc="Return the result of rotating the digits of the first&#10;operand by an amount specified by the second operand." ilk="function" name="rotate" />
        <scope ilk="function" name="__ceil__" />
      </scope>
      <scope classrefs="ArithmeticError" doc="Base class for arithmetic errors.&#10;" ilk="class" name="DecimalException" />
      <scope classrefs="tuple" doc="DecimalTuple(sign, digits, exponent)&#10;" ilk="class" name="DecimalTuple">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new DecimalTuple object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Create new instance of DecimalTuple(sign, digits, exponent)" ilk="function" name="__new__" signature="__new__(_cls, sign, digits, exponent)" />
        <scope doc="Make a new DecimalTuple object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="Context" name="DefaultContext" />
      <scope classrefs="DecimalException ZeroDivisionError" doc="Second argument to a division or modulo operation was zero.&#10;" ilk="class" name="DivisionByZero" />
      <scope classrefs="InvalidOperation" doc="Base class for arithmetic errors.&#10;" ilk="class" name="DivisionImpossible" />
      <scope classrefs="InvalidOperation ZeroDivisionError" doc="Second argument to a division or modulo operation was zero.&#10;" ilk="class" name="DivisionUndefined" />
      <variable citdl="Context" name="ExtendedContext" />
      <scope classrefs="DecimalException TypeError" doc="Base class for arithmetic errors.&#10;" ilk="class" name="FloatOperation" />
      <variable citdl="bool" name="HAVE_THREADS" />
      <scope classrefs="DecimalException" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Inexact" />
      <scope classrefs="InvalidOperation" doc="Base class for arithmetic errors.&#10;" ilk="class" name="InvalidContext" />
      <scope classrefs="DecimalException" doc="Base class for arithmetic errors.&#10;" ilk="class" name="InvalidOperation" />
      <variable citdl="int" name="MAX_EMAX" />
      <variable citdl="int" name="MAX_PREC" />
      <variable citdl="int" name="MIN_EMIN" />
      <variable citdl="int" name="MIN_ETINY" />
      <scope classrefs="Inexact Rounded" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Overflow" />
      <variable citdl="str" name="ROUND_05UP" />
      <variable citdl="str" name="ROUND_CEILING" />
      <variable citdl="str" name="ROUND_DOWN" />
      <variable citdl="str" name="ROUND_FLOOR" />
      <variable citdl="str" name="ROUND_HALF_DOWN" />
      <variable citdl="str" name="ROUND_HALF_EVEN" />
      <variable citdl="str" name="ROUND_HALF_UP" />
      <variable citdl="str" name="ROUND_UP" />
      <scope classrefs="DecimalException" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Rounded" />
      <scope classrefs="DecimalException" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Subnormal" />
      <scope classrefs="Inexact Rounded Subnormal" doc="Base class for arithmetic errors.&#10;" ilk="class" name="Underflow" />
      <variable citdl="str" name="__libmpdec_version__" />
      <scope doc="Get the current default context." ilk="function" name="getcontext" />
      <scope doc="Return a context manager that will set the default context&#10;to a copy of ctx on entry to the with-statement and restore&#10;the previous default context when exiting the with-&#10;statement." ilk="function" name="localcontext" />
      <scope doc="Set a new default context." ilk="function" name="setcontext" />
    </scope>
    <scope doc="This module defines the data structures used to represent a grammar.&#10;These are a bit arcane because they are derived from the data structures used by Python's 'pgen' parser generator.  There's also a table here mapping operators to their names in the token module; the Python tokenize module reports all operators as the fallback token code OP, but the parser needs the actual token code." ilk="blob" lang="Python3" name="lib2to3.pgen2.grammar">
      <scope classrefs="object" doc="Pgen parsing tables conversion class.&#10;Once initialized, this class supplies the grammar tables for the parsing engine implemented by parse.py.  The parsing engine accesses the instance variables directly.  The class here does not provide initialization of the tables; several subclasses exist to do this (see the conv and pgen modules).  The load() method reads the tables from a pickle file, which is much faster than the other ways offered by subclasses.  The pickle file is written by calling dump() (after loading the grammar tables using a subclass).  The report() method prints a readable" ilk="class" name="Grammar">
        <scope doc="Dump the grammar tables to standard output, for debugging." ilk="function" name="report" signature="report(self)" />
        <scope doc="Load the grammar tables from a pickle file." ilk="function" name="load" signature="load(self, filename)" />
        <scope doc="Copy the grammar." ilk="function" name="copy" signature="copy(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Dump the grammar tables to a pickle file." ilk="function" name="dump" signature="dump(self, filename)" />
      </scope>
      <variable citdl="str" name="line" />
      <variable citdl="str" name="name" />
      <variable citdl="str" name="op" />
      <variable citdl="dict" name="opmap" />
      <variable citdl="str" name="opmap_raw" />
      <import module="pickle" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="Implements ProcessPoolExecutor.&#10;The follow diagram and text describe the data-flow through the system:  |======================= In-process =====================|== Out-of-process ==|  +----------+     +----------+       +--------+     +-----------+    +---------+ |          |  =&gt; | Work Ids |    =&gt; |        |  =&gt; | Call Q    | =&gt; |         | |          |     +----------+       |        |     +-----------+    |         | |          |     | ...      |       |        |     | ...       |    |         | |          |     | 6        |       |        |     | 5, call() |    |         | |          |     | 7        |       |        |     | ...       |    |         |" ilk="blob" lang="Python3" name="concurrent.futures.process">
      <scope classrefs="RuntimeError" doc="Raised when a process in a ProcessPoolExecutor terminated abruptly&#10;while a future was in the running state." ilk="class" name="BrokenProcessPool" />
      <variable citdl="int" name="EXTRA_QUEUED_CALLS" />
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait().&#10;" ilk="class" name="Full" />
      <scope classrefs="Executor" doc="This is an abstract base class for concrete asynchronous executors.&#10;" ilk="class" name="ProcessPoolExecutor">
        <scope doc="Clean-up the resources associated with the Executor." ilk="function" name="shutdown" signature="shutdown(self, wait=True)" />
        <scope ilk="function" name="_adjust_process_count" signature="_adjust_process_count(self)" />
        <scope doc="Returns an iterator equivalent to map(fn, iter)." ilk="function" name="map" signature="map(self, fn, *iterables, timeout=None, chunksize=1)" />
        <scope doc="Initializes a new ProcessPoolExecutor instance." ilk="function" name="__init__" signature="__init__(self, max_workers=None)" />
        <scope doc="Submits a callable to be executed with the given arguments." ilk="function" name="submit" signature="submit(self, fn, *args, **kwargs)" />
        <scope ilk="function" name="_start_queue_management_thread" signature="_start_queue_management_thread(self)" />
      </scope>
      <scope doc="Returns a queue object" ilk="function" name="SimpleQueue" />
      <import module="_base" />
      <import module="atexit" />
      <import module="itertools" />
      <import module="multiprocessing" />
      <import module="os" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <import module="queue" />
      <import module="threading" />
      <import module="traceback" />
      <scope doc="Wait till an object in object_list is ready/readable." ilk="function" name="wait" signature="wait(object_list, timeout=None)" />
      <import module="weakref" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="pydoc_data" />
    <scope doc="&#10;" ilk="blob" lang="Python3" name="_ast">
      <scope classrefs="object" doc="&#10;" ilk="class" name="AST">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Add" />
      <scope classrefs="boolop" doc="&#10;" ilk="class" name="And" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Assert" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Assign" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncFor" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncFunctionDef" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AsyncWith" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Attribute" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="AugAssign" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="AugLoad" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="AugStore" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Await" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="BinOp" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitAnd" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitOr" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="BitXor" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="BoolOp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Break" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Bytes" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Call" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="ClassDef" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Compare" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Continue" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Del" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Delete" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Dict" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="DictComp" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Div" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Ellipsis" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Eq" />
      <scope classrefs="excepthandler" doc="&#10;" ilk="class" name="ExceptHandler" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Expr" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Expression" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="ExtSlice" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="FloorDiv" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="For" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="FunctionDef" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="GeneratorExp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Global" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Gt" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="GtE" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="If" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="IfExp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Import" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="ImportFrom" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="In" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="Index" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Interactive" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="Invert" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Is" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="IsNot" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="LShift" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Lambda" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="List" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="ListComp" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Load" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="Lt" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="LtE" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="MatMult" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Mod" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Module" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Mult" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Name" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="NameConstant" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Nonlocal" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="Not" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="NotEq" />
      <scope classrefs="cmpop" doc="&#10;" ilk="class" name="NotIn" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Num" />
      <scope classrefs="boolop" doc="&#10;" ilk="class" name="Or" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Param" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Pass" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Pow" />
      <variable citdl="int" name="PyCF_ONLY_AST" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="RShift" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Raise" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Return" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Set" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="SetComp" />
      <scope classrefs="slice" doc="&#10;" ilk="class" name="Slice" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Starred" />
      <scope classrefs="expr_context" doc="&#10;" ilk="class" name="Store" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Str" />
      <scope classrefs="operator" doc="&#10;" ilk="class" name="Sub" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Subscript" />
      <scope classrefs="mod" doc="&#10;" ilk="class" name="Suite" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="Try" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Tuple" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="UAdd" />
      <scope classrefs="unaryop" doc="&#10;" ilk="class" name="USub" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="UnaryOp" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="While" />
      <scope classrefs="stmt" doc="&#10;" ilk="class" name="With" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="Yield" />
      <scope classrefs="expr" doc="&#10;" ilk="class" name="YieldFrom" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="alias" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="arg" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="arguments" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="boolop" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="cmpop" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="comprehension" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="excepthandler" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="expr" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="expr_context" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="keyword" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="mod" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="operator" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="slice" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="stmt" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="unaryop" />
      <scope classrefs="AST" doc="&#10;" ilk="class" name="withitem" />
    </scope>
    <scope doc="Fixer for intern().&#10;intern(s) -&gt; sys.intern(s)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_intern">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixIntern">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Returns an import statement and calls a method of the&#10;module:" ilk="function" name="ImportAndCall" signature="ImportAndCall(node, results, names)" />
      <import module="fixer_base" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Weak-reference support module.&#10;" ilk="blob" lang="Python3" name="_weakref">
      <scope classrefs="object" doc="&#10;" ilk="class" name="CallableProxyType">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return self//=value." ilk="function" name="__ifloordiv__" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Return self**=value." ilk="function" name="__ipow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope doc="Return self*=value." ilk="function" name="__imul__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return self&gt;&gt;=value." ilk="function" name="__irshift__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&lt;&lt;=value." ilk="function" name="__ilshift__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self%=value." ilk="function" name="__imod__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self/=value." ilk="function" name="__itruediv__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ProxyType">
        <scope doc="float(self)" ilk="function" name="__float__" signature="float(self)" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Return self//=value." ilk="function" name="__ifloordiv__" />
        <scope doc="Return self|=value." ilk="function" name="__ior__" />
        <scope doc="Return self^=value." ilk="function" name="__ixor__" />
        <scope doc="Return self^value." ilk="function" name="__xor__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return self*value." ilk="function" name="__mul__" />
        <scope doc="Return value/self." ilk="function" name="__rtruediv__" />
        <scope doc="Return value&lt;&lt;self." ilk="function" name="__rlshift__" />
        <scope doc="Return self**=value." ilk="function" name="__ipow__" />
        <scope doc="-self" ilk="function" name="__neg__" />
        <scope doc="Return value//self." ilk="function" name="__rfloordiv__" />
        <scope ilk="function" name="__bytes__" />
        <scope doc="Return self*=value." ilk="function" name="__imul__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="+self" ilk="function" name="__pos__" />
        <scope doc="Return self&gt;&gt;=value." ilk="function" name="__irshift__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return self%value." ilk="function" name="__mod__" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return pow(self, value, mod)." ilk="function" name="__pow__" />
        <scope doc="Return self/value." ilk="function" name="__truediv__" />
        <scope doc="Return self-=value." ilk="function" name="__isub__" />
        <scope doc="Return value&gt;&gt;self." ilk="function" name="__rrshift__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Return divmod(self, value)." ilk="function" name="__divmod__" />
        <scope doc="abs(self)" ilk="function" name="__abs__" signature="abs(self)" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return self|value." ilk="function" name="__or__" />
        <scope doc="Return value*self." ilk="function" name="__rmul__" />
        <scope doc="Return value|self." ilk="function" name="__ror__" />
        <scope doc="Return pow(value, self, mod)." ilk="function" name="__rpow__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Return self converted to an integer, if self is suitable for&#10;use as an index into a list." ilk="function" name="__index__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return value+self." ilk="function" name="__radd__" />
        <scope doc="~self" ilk="function" name="__invert__" />
        <scope doc="Return self&lt;&lt;value." ilk="function" name="__lshift__" />
        <scope doc="Return self//value." ilk="function" name="__floordiv__" />
        <scope doc="Return value%self." ilk="function" name="__rmod__" />
        <scope doc="Return value&amp;self." ilk="function" name="__rand__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self&amp;value." ilk="function" name="__and__" />
        <scope doc="Return self-value." ilk="function" name="__sub__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return self&lt;&lt;=value." ilk="function" name="__ilshift__" />
        <scope doc="Return divmod(value, self)." ilk="function" name="__rdivmod__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Return self%=value." ilk="function" name="__imod__" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="int(self)" ilk="function" name="__int__" signature="int(self)" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return value^self." ilk="function" name="__rxor__" />
        <scope doc="Return self&gt;&gt;value." ilk="function" name="__rshift__" />
        <scope doc="Return value-self." ilk="function" name="__rsub__" />
        <scope doc="Return self+=value." ilk="function" name="__iadd__" />
        <scope doc="Return self/=value." ilk="function" name="__itruediv__" />
        <scope doc="Return self&amp;=value." ilk="function" name="__iand__" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ReferenceType">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope doc="Return the number of weak references to 'object'." ilk="function" name="getweakrefcount" />
      <scope doc="return a list of all weak reference objects" ilk="function" name="getweakrefs" signature="getweakrefs(object)" />
      <scope doc="create a proxy object that weakly" ilk="function" name="proxy" signature="proxy(object[, callback])" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="ref">
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
    </scope>
    <scope doc="Word completion for GNU readline.&#10;The completer completes keywords, built-ins and globals in a selectable namespace (which defaults to __main__); when completing NAME.NAME..., it evaluates (!) the expression up to the last dot and completes its attributes.  It's very cool to do &quot;import sys&quot; type &quot;sys.&quot;, hit the completion key (twice), and see the list of names defined by the sys module!  Tip: to use the tab key as the completion key, call  readline.parse_and_bind(&quot;tab: complete&quot;)" ilk="blob" lang="Python3" name="rlcompleter">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Completer">
        <scope doc="Create a new completer for the command line." ilk="function" name="__init__" signature="__init__(self, namespace=None)" />
        <scope ilk="function" name="_callable_postfix" signature="_callable_postfix(self, val, word)" />
        <scope doc="Compute matches when text is a simple name." ilk="function" name="global_matches" signature="global_matches(self, text)" />
        <scope doc="Return the next possible completion for 'text'." ilk="function" name="complete" signature="complete(self, text, state)" />
        <scope doc="Compute matches when text contains a dot." ilk="function" name="attr_matches" signature="attr_matches(self, text)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="__main__" />
      <import module="atexit" />
      <import module="builtins" />
      <scope ilk="function" name="get_class_members" signature="get_class_members(klass)" />
      <import module="readline" />
    </scope>
    <scope doc="# mock.py&#10;# Test tools for mocking and patching. # Maintained by Michael Foord # Backport for other versions of Python available from # http://pypi.python.org/pypi/mock" ilk="blob" lang="Python3" name="unittest.mock">
      <variable citdl="_ANY" name="ANY" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Base">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kwargs)" />
      </scope>
      <variable citdl="tuple" name="BaseExceptions" />
      <scope classrefs="Base" doc="&#10;" ilk="class" name="CallableMixin">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, spec=None, side_effect=None, return_value=sentinel.DEFAULT, wraps=None, name=None, spec_set=None, parent=None, _spec_state=None, _new_name='', _new_parent=None, **kwargs)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(_mock_self, *args, **kwargs)" />
        <scope ilk="function" name="_mock_call" signature="_mock_call(_mock_self, *args, **kwargs)" />
        <scope ilk="function" name="_mock_check_sig" signature="_mock_check_sig(self, *args, **kwargs)" />
      </scope>
      <variable citdl="_SentinelObject" name="DEFAULT" />
      <variable citdl="tuple" name="DescriptorTypes" />
      <variable citdl="bool" name="FILTER_DIR" />
      <variable citdl="tuple" name="FunctionTypes" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="MagicMixin">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *args, **kw)" />
        <scope ilk="function" name="_mock_set_magics" signature="_mock_set_magics(self)" />
      </scope>
      <scope classrefs="MagicMixin Mock" doc="MagicMock is a subclass of Mock with default implementations&#10;of most of the magic methods. You can use MagicMock without having to configure the magic methods yourself.  If you use the `spec` or `spec_set` arguments then *only* magic methods that exist in the spec will be created.  Attributes and the return value of a `MagicMock` will also be `MagicMocks`." ilk="class" name="MagicMock">
        <scope doc="Add a spec to a mock." ilk="function" name="mock_add_spec" signature="mock_add_spec(self, spec, spec_set=False)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MagicProxy">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, parent)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwargs)" />
        <scope ilk="function" name="create_mock" signature="create_mock(self)" />
        <scope ilk="function" name="__get__" signature="__get__(self, obj, _type=None)" />
      </scope>
      <variable citdl="tuple" name="MethodWrapperTypes" />
      <scope classrefs="CallableMixin NonCallableMock" doc="Create a new `Mock` object. `Mock` takes several optional arguments&#10;that specify the behaviour of the Mock object:  * `spec`: This can be either a list of strings or an existing object (a class or instance) that acts as the specification for the mock object. If you pass in an object then a list of strings is formed by calling dir on the object (excluding unsupported magic attributes and methods). Accessing any attribute not in this list will raise an `AttributeError`.  If `spec` is an object (rather than a list of strings) then `mock.__class__` returns the class of the spec object. This allows mocks" ilk="class" name="Mock" />
      <scope classrefs="object" doc="module(name[, doc])&#10;Create a module object. The name must be a string; the optional doc argument can have any type." ilk="class" name="ModuleType">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="specialized dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope classrefs="MagicMixin NonCallableMock" doc="A version of `MagicMock` that isn't callable.&#10;" ilk="class" name="NonCallableMagicMock">
        <scope doc="Add a spec to a mock." ilk="function" name="mock_add_spec" signature="mock_add_spec(self, spec, spec_set=False)" />
      </scope>
      <scope classrefs="Base" doc="A non-callable version of `Mock`&#10;" ilk="class" name="NonCallableMock">
        <scope ilk="function" name="_mock_add_spec" signature="_mock_add_spec(self, spec, spec_set, _spec_as_instance=False, _eat_self=False)" />
        <scope doc="Given a call (or simply a (args, kwargs) tuple), return a&#10;comparison key suitable for matching with other calls." ilk="function" name="_call_matcher" signature="_call_matcher(self, _call)" />
        <scope doc="assert the mock has been called with the specified calls." ilk="function" name="assert_has_calls" signature="assert_has_calls(self, calls, any_order=False)" />
        <scope doc="assert the mock has been called with the specified&#10;arguments." ilk="function" name="assert_any_call" signature="assert_any_call(self, *args, **kwargs)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Filter the output of `dir(mock)` to only useful members." ilk="function" name="__dir__" signature="__dir__(self)" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" signature="__setattr__(self, name, value)" />
        <scope ilk="function" name="_NonCallableMock__set_side_effect" signature="_NonCallableMock__set_side_effect(self, value)" />
        <scope doc="Restore the mock object to its initial state." ilk="function" name="reset_mock" signature="reset_mock(self, visited=None)" />
        <scope ilk="function" name="_format_mock_failure_message" signature="_format_mock_failure_message(self, args, kwargs)" />
        <scope doc="assert that the mock was called with the specified&#10;arguments." ilk="function" name="assert_called_with" signature="assert_called_with(_mock_self, *args, **kwargs)" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" signature="__delattr__(self, name)" />
        <scope doc="Set attributes on the mock through keyword arguments." ilk="function" name="configure_mock" signature="configure_mock(self, **kwargs)" />
        <scope doc="Attach a mock as an attribute of this one, replacing its&#10;name and parent." ilk="function" name="attach_mock" signature="attach_mock(self, mock, attribute)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, spec=None, wraps=None, name=None, spec_set=None, parent=None, _spec_state=None, _new_name='', _new_parent=None, _spec_as_instance=False, _eat_self=None, unsafe=False, **kwargs)" />
        <scope doc="assert that the mock was never called." ilk="function" name="assert_not_called" signature="assert_not_called(_mock_self)" />
        <scope ilk="function" name="_NonCallableMock__get_side_effect" signature="_NonCallableMock__get_side_effect(self)" />
        <scope doc="Add a spec to a mock." ilk="function" name="mock_add_spec" signature="mock_add_spec(self, spec, spec_set=False)" />
        <scope doc="assert that the mock was called exactly once and with the&#10;specified arguments." ilk="function" name="assert_called_once_with" signature="assert_called_once_with(_mock_self, *args, **kwargs)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
        <scope doc="Create the child mocks for attributes and return value." ilk="function" name="_get_child_mock" signature="_get_child_mock(self, **kw)" />
        <scope ilk="function" name="_NonCallableMock__get_return_value" signature="_NonCallableMock__get_return_value(self)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, *args, **kw)" />
        <scope ilk="function" name="_NonCallableMock__set_return_value" signature="_NonCallableMock__set_return_value(self, value)" />
        <scope ilk="function" name="_format_mock_call_signature" signature="_format_mock_call_signature(self, args, kwargs)" />
      </scope>
      <scope classrefs="Mock" doc="A mock intended to be used as a property, or other descriptor, on a class.&#10;`PropertyMock` provides `__get__` and `__set__` methods so you can specify a return value when it is fetched.  Fetching a `PropertyMock` instance from an object calls the mock, with no args. Setting it calls the mock with the value being set." ilk="class" name="PropertyMock">
        <scope doc="Create the child mocks for attributes and return value." ilk="function" name="_get_child_mock" signature="_get_child_mock(self, **kwargs)" />
        <scope ilk="function" name="__set__" signature="__set__(self, obj, val)" />
        <scope ilk="function" name="__get__" signature="__get__(self, obj, obj_type)" />
      </scope>
      <variable citdl="tuple" name="__all__" />
      <import module="builtins" />
      <variable citdl="_Call" name="call" />
      <scope classrefs="tuple" doc="A tuple for holding the results of a call to a mock, either in the form&#10;`(args, kwargs)` or `(name, args, kwargs)`.  If args or kwargs are empty then a call tuple will compare equal to a tuple without those values. This makes comparisons less verbose::  _Call(('name', (), {})) == ('name',) _Call(('name', (1,), {})) == ('name', (1,)) _Call(((), {'a': 'b'})) == ({'a': 'b'},)  The `_Call` object provides a useful shortcut for comparing with call::" ilk="class" name="_Call">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=(), name=None, parent=None, two=False, from_kall=True)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, *args, **kwargs)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, value=(), name=None, parent=None, two=False, from_kall=True)" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="T.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="T.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="T.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="For a call object that represents multiple calls,&#10;`call_list` returns a list of all the intermediate calls as&#10;well as the final call." ilk="function" name="call_list" signature="call_list(self)" />
      </scope>
      <scope doc="Create a mock object using another object as a spec." ilk="function" name="create_autospec" signature="create_autospec(spec, spec_set=False, instance=False, _parent=None, _name=None, **kwargs)" />
      <variable citdl="NoneType" name="file_spec" />
      <variable citdl="str" name="inplace" />
      <import module="inspect" />
      <variable citdl="str" name="magic_methods" />
      <scope doc="A helper function to create a mock to replace the use of&#10;`open`." ilk="function" name="mock_open" signature="mock_open(mock=None, read_data='')" />
      <variable citdl="str" name="numerics" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="`patch` acts as a function decorator, class decorator or a&#10;context manager." ilk="function" name="patch" signature="patch(target, new=sentinel.DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)" />
      <import module="pprint" />
      <variable citdl="str" name="right" />
      <variable citdl="_Sentinel" name="sentinel" />
      <scope classrefs="object" doc="Access attributes to return a named object, usable as a sentinel.&#10;" ilk="class" name="_Sentinel">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, name)" />
      </scope>
      <import module="sys" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="Base64 content transfer encoding per RFCs 2045-2047.&#10;This module handles the content transfer encoding method defined in RFC 2045 to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit characters encoding known as Base64.  It is used in the MIME standards for email to attach images, audio, and text using some 8-bit character sets to messages.  This module provides an interface to encode and decode both headers and bodies with Base64 encoding. " ilk="blob" lang="Python3" name="email.base64mime">
      <variable citdl="str" name="CRLF" />
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="int" name="MISC_LEN" />
      <variable citdl="str" name="NL" />
      <variable citdl="list" name="__all__" />
      <scope doc="Decode a line of base64 data." ilk="function" name="a2b_base64" />
      <scope doc="Base64-code line of data." ilk="function" name="b2a_base64" />
      <scope doc="Encode a byte string using Base64." ilk="function" name="b64encode" signature="b64encode(s, altchars=None)" />
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" name="body_decode" signature="body_decode(string)" />
      <scope doc="Encode a string with base64." ilk="function" name="body_encode" signature="body_encode(s, maxlinelen=76, eol='\n')" />
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" name="decode" signature="decode(string)" />
      <scope doc="Decode a raw base64 string, returning a bytes object." ilk="function" name="decodestring" signature="decodestring(string)" />
      <scope doc="Encode a single header line with Base64 encoding in a given&#10;charset." ilk="function" name="header_encode" signature="header_encode(header_bytes, charset='iso-8859-1')" />
      <scope doc="Return the length of s when it is encoded with base64." ilk="function" name="header_length" signature="header_length(bytearray)" />
    </scope>
    <scope doc="# Module providing various facilities to other parts of the package&#10;# # multiprocessing/util.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.util">
      <variable citdl="int" name="DEBUG" />
      <variable citdl="str" name="DEFAULT_LOGGING_FORMAT" />
      <scope classrefs="object" doc="Class which supports object finalization using weakrefs&#10;" ilk="class" name="Finalize">
        <scope doc="Run the callback unless it has already been called or&#10;cancelled" ilk="function" name="__call__" signature="__call__(self, wr=None, _finalizer_registry={}, sub_debug=&lt;function sub_debug at 0x7f11820f4488&gt;, getpid=&lt;built-in function getpid&gt;)" />
        <scope doc="Cancel finalization of the object" ilk="function" name="cancel" signature="cancel(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, obj, callback, args=(), kwargs=None, exitpriority=None)" />
        <scope doc="Return whether this finalizer is still waiting to invoke&#10;callback" ilk="function" name="still_active" signature="still_active(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="_local" doc="Thread-local data&#10;" ilk="class" name="ForkAwareLocal">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" signature="__reduce__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="ForkAwareThreadLock">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="_reset" signature="_reset(self)" />
      </scope>
      <variable citdl="int" name="INFO" />
      <variable citdl="str" name="LOGGER_NAME" />
      <variable citdl="int" name="MAXFD" />
      <variable citdl="int" name="NOTSET" />
      <variable citdl="int" name="SUBDEBUG" />
      <variable citdl="int" name="SUBWARNING" />
      <variable citdl="list" name="__all__" />
      <import module="atexit" />
      <scope ilk="function" name="close_all_fds_except" signature="close_all_fds_except(fds)" />
      <scope ilk="function" name="debug" signature="debug(msg, *args)" />
      <scope doc="Returns logger used by multiprocessing" ilk="function" name="get_logger" signature="get_logger()" />
      <scope ilk="function" name="get_temp_dir" signature="get_temp_dir()" />
      <scope ilk="function" name="info" signature="info(msg, *args)" />
      <scope doc="Returns true if the process is shutting down" ilk="function" name="is_exiting" signature="is_exiting()" />
      <import module="itertools" />
      <scope doc="Turn on logging and add a handler which prints to stderr" ilk="function" name="log_to_stderr" signature="log_to_stderr(level=None)" />
      <import module="os" />
      <import module="process" />
      <scope ilk="function" name="register_after_fork" signature="register_after_fork(obj, func)" />
      <scope ilk="function" name="spawnv_passfds" signature="spawnv_passfds(path, args, passfds)" />
      <scope ilk="function" name="sub_debug" signature="sub_debug(msg, *args)" />
      <scope ilk="function" name="sub_warning" signature="sub_warning(msg, *args)" />
      <import module="threading" />
      <import module="weakref" />
    </scope>
    <scope doc="HTTP cookie handling for web clients.&#10;This module has (now fairly distant) origins in Gisle Aas' Perl module HTTP::Cookies, from the libwww-perl library.  Docstrings, comments and debug strings in this code refer to the attributes of the HTTP cookie system as cookie-attributes, to distinguish them clearly from Python attributes.  Class diagram (note that BSDDBCookieJar and the MSIE* classes are not distributed with the Python standard library, but are available from http://wwwsearch.sf.net/):" ilk="blob" lang="Python3" name="http.cookiejar">
      <scope classrefs="object" doc="# Used as second parameter to dict.get() method, to distinguish absent&#10;# dict key from one with a None value." ilk="class" name="Absent" />
      <scope classrefs="object" doc="HTTP Cookie.&#10;This class represents both Netscape and RFC 2965 cookies.  This is deliberately a very simple class.  It just holds attributes.  It's possible to construct Cookie instances that don't comply with the cookie standards.  CookieJar.make_cookies is the factory function for Cookie objects -- it deals with cookie parsing, supplying defaults, and normalising to the representation used in this class.  CookiePolicy is responsible for checking them to see whether they should be accepted from and returned to the server. " ilk="class" name="Cookie">
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, version, name, value, port, port_specified, domain, domain_specified, domain_initial_dot, path, path_specified, secure, expires, discard, comment, comment_url, rest, rfc2109=False)" />
        <scope ilk="function" name="is_expired" signature="is_expired(self, now=None)" />
        <scope ilk="function" name="set_nonstandard_attr" signature="set_nonstandard_attr(self, name, value)" />
        <scope ilk="function" name="get_nonstandard_attr" signature="get_nonstandard_attr(self, name, default=None)" />
        <scope ilk="function" name="has_nonstandard_attr" signature="has_nonstandard_attr(self, name)" />
      </scope>
      <scope classrefs="object" doc="Collection of HTTP cookies.&#10;You may not need to know about this class: try urllib.request.build_opener(HTTPCookieProcessor).open(url)." ilk="class" name="CookieJar">
        <scope doc="Return list of tuples containing normalised cookie&#10;information." ilk="function" name="_normalized_cookie_tuples" signature="_normalized_cookie_tuples(self, attrs_set)" />
        <scope doc="Add correct Cookie: header to request&#10;(urllib.request.Request object)." ilk="function" name="add_cookie_header" signature="add_cookie_header(self, request)" />
        <scope doc="Return a list of cookies to be returned to server." ilk="function" name="_cookies_for_request" signature="_cookies_for_request(self, request)" />
        <scope doc="Clear some cookies." ilk="function" name="clear" signature="clear(self, domain=None, path=None, name=None)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, policy=None)" />
        <scope doc="Return a list of cookie-attributes to be returned to server." ilk="function" name="_cookie_attrs" signature="_cookie_attrs(self, cookies)" />
        <scope ilk="function" name="set_policy" signature="set_policy(self, policy)" />
        <scope ilk="function" name="_process_rfc2109_cookies" signature="_process_rfc2109_cookies(self, cookies)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_cookies_from_attrs_set" signature="_cookies_from_attrs_set(self, attrs_set, request)" />
        <scope doc="Set a cookie if policy says it's OK to do so." ilk="function" name="set_cookie_if_ok" signature="set_cookie_if_ok(self, cookie, request)" />
        <scope doc="Return sequence of Cookie objects extracted from response&#10;object." ilk="function" name="make_cookies" signature="make_cookies(self, response, request)" />
        <scope ilk="function" name="_cookies_for_domain" signature="_cookies_for_domain(self, domain, request)" />
        <scope ilk="function" name="_cookie_from_cookie_tuple" signature="_cookie_from_cookie_tuple(self, tup, request)" />
        <scope doc="Discard all session cookies." ilk="function" name="clear_session_cookies" signature="clear_session_cookies(self)" />
        <scope doc="Set a cookie, without checking whether or not it should be&#10;set." ilk="function" name="set_cookie" signature="set_cookie(self, cookie)" />
        <scope doc="Discard all expired cookies." ilk="function" name="clear_expired_cookies" signature="clear_expired_cookies(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return number of contained cookies." ilk="function" name="__len__" signature="__len__(self)" />
        <scope doc="Extract cookies from response, where allowable given the&#10;request." ilk="function" name="extract_cookies" signature="extract_cookies(self, response, request)" />
      </scope>
      <scope classrefs="object" doc="Defines which cookies get accepted from and returned to server.&#10;May also modify cookies, though this is probably a bad idea.  The subclass DefaultCookiePolicy defines the standard rules for Netscape and RFC 2965 cookies -- override that if you want a customised policy." ilk="class" name="CookiePolicy">
        <scope doc="Return true if (and only if) cookie should be returned to&#10;server." ilk="function" name="return_ok" signature="return_ok(self, cookie, request)" />
        <scope doc="Return true if (and only if) cookie should be accepted from&#10;server." ilk="function" name="set_ok" signature="set_ok(self, cookie, request)" />
        <scope doc="Return false if cookies should not be returned, given cookie&#10;domain." ilk="function" name="domain_return_ok" signature="domain_return_ok(self, domain, request)" />
        <scope doc="Return false if cookies should not be returned, given cookie&#10;path." ilk="function" name="path_return_ok" signature="path_return_ok(self, path, request)" />
      </scope>
      <variable citdl="list" name="DAYS" />
      <variable citdl="str" name="DEFAULT_HTTP_PORT" />
      <scope classrefs="CookiePolicy" doc="Implements the standard rules for accepting and returning cookies.&#10;" ilk="class" name="DefaultCookiePolicy">
        <scope doc="Return the sequence of blocked domains (as a tuple)." ilk="function" name="blocked_domains" signature="blocked_domains(self)" />
        <scope ilk="function" name="set_ok_path" signature="set_ok_path(self, cookie, request)" />
        <scope ilk="function" name="is_not_allowed" signature="is_not_allowed(self, domain)" />
        <scope ilk="function" name="set_ok_name" signature="set_ok_name(self, cookie, request)" />
        <scope doc="If you override .set_ok(), be sure to call this method." ilk="function" name="set_ok" signature="set_ok(self, cookie, request)" />
        <scope ilk="function" name="set_ok_domain" signature="set_ok_domain(self, cookie, request)" />
        <scope ilk="function" name="is_blocked" signature="is_blocked(self, domain)" />
        <scope doc="Return false if cookies should not be returned, given cookie&#10;path." ilk="function" name="path_return_ok" signature="path_return_ok(self, path, request)" />
        <scope doc="Constructor arguments should be passed as keyword arguments&#10;only." ilk="function" name="__init__" signature="__init__(self, blocked_domains=None, allowed_domains=None, netscape=True, rfc2965=False, rfc2109_as_netscape=None, hide_cookie2=False, strict_domain=False, strict_rfc2965_unverifiable=True, strict_ns_unverifiable=False, strict_ns_domain=0, strict_ns_set_initial_dollar=False, strict_ns_set_path=False)" />
        <scope doc="Return false if cookies should not be returned, given cookie&#10;domain." ilk="function" name="domain_return_ok" signature="domain_return_ok(self, domain, request)" />
        <scope doc="Set the sequence of allowed domains, or None." ilk="function" name="set_allowed_domains" signature="set_allowed_domains(self, allowed_domains)" />
        <scope doc="Set the sequence of blocked domains." ilk="function" name="set_blocked_domains" signature="set_blocked_domains(self, blocked_domains)" />
        <scope ilk="function" name="return_ok_port" signature="return_ok_port(self, cookie, request)" />
        <scope ilk="function" name="return_ok_verifiability" signature="return_ok_verifiability(self, cookie, request)" />
        <scope ilk="function" name="return_ok_secure" signature="return_ok_secure(self, cookie, request)" />
        <scope ilk="function" name="return_ok_version" signature="return_ok_version(self, cookie, request)" />
        <scope ilk="function" name="set_ok_port" signature="set_ok_port(self, cookie, request)" />
        <scope ilk="function" name="set_ok_verifiability" signature="set_ok_verifiability(self, cookie, request)" />
        <scope doc="Return None, or the sequence of allowed domains (as a&#10;tuple)." ilk="function" name="allowed_domains" signature="allowed_domains(self)" />
        <scope doc="If you override .return_ok(), be sure to call this method." ilk="function" name="return_ok" signature="return_ok(self, cookie, request)" />
        <scope ilk="function" name="return_ok_expires" signature="return_ok_expires(self, cookie, request)" />
        <scope ilk="function" name="return_ok_domain" signature="return_ok_domain(self, cookie, request)" />
        <scope ilk="function" name="set_ok_version" signature="set_ok_version(self, cookie, request)" />
      </scope>
      <variable citdl="int" name="EPOCH_YEAR" />
      <variable citdl="SRE_Pattern" name="ESCAPED_CHAR_RE" />
      <scope classrefs="CookieJar" doc="CookieJar that can be loaded from and saved to a file.&#10;" ilk="class" name="FileCookieJar">
        <scope doc="Cookies are NOT loaded from the named file until either the&#10;.load() or .revert() method is called." ilk="function" name="__init__" signature="__init__(self, filename=None, delayload=False, policy=None)" />
        <scope doc="Save cookies to a file." ilk="function" name="save" signature="save(self, filename=None, ignore_discard=False, ignore_expires=False)" />
        <scope doc="Clear all cookies and reload cookies from a saved file." ilk="function" name="revert" signature="revert(self, filename=None, ignore_discard=False, ignore_expires=False)" />
        <scope doc="Load cookies from a file." ilk="function" name="load" signature="load(self, filename=None, ignore_discard=False, ignore_expires=False)" />
      </scope>
      <variable citdl="SRE_Pattern" name="HEADER_ESCAPE_RE" />
      <variable citdl="SRE_Pattern" name="HEADER_JOIN_ESCAPE_RE" />
      <variable citdl="SRE_Pattern" name="HEADER_QUOTED_VALUE_RE" />
      <variable citdl="SRE_Pattern" name="HEADER_TOKEN_RE" />
      <variable citdl="SRE_Pattern" name="HEADER_VALUE_RE" />
      <variable citdl="str" name="HTTP_PATH_SAFE" />
      <variable citdl="SRE_Pattern" name="IPV4_RE" />
      <variable citdl="SRE_Pattern" name="ISO_DATE_RE" />
      <variable citdl="SRE_Pattern" name="LOOSE_HTTP_DATE_RE" />
      <scope classrefs="FileCookieJar" doc="The LWPCookieJar saves a sequence of &quot;Set-Cookie3&quot; lines.&#10;&quot;Set-Cookie3&quot; is the format used by the libwww-perl libary, not known to be compatible with any browser, but which is easy to read and doesn't lose information about RFC 2965 cookies.  Additional methods  as_lwp_str(ignore_discard=True, ignore_expired=True)" ilk="class" name="LWPCookieJar">
        <scope doc="Save cookies to a file." ilk="function" name="save" signature="save(self, filename=None, ignore_discard=False, ignore_expires=False)" />
        <scope doc="Return cookies as a string of &quot;\n&quot;-separated &quot;Set-Cookie3&quot;&#10;headers." ilk="function" name="as_lwp_str" signature="as_lwp_str(self, ignore_discard=True, ignore_expires=True)" />
        <scope ilk="function" name="_really_load" signature="_really_load(self, f, filename, ignore_discard, ignore_expires)" />
      </scope>
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="LoadError" />
      <variable citdl="str" name="MISSING_FILENAME_TEXT" />
      <variable citdl="list" name="MONTHS" />
      <variable citdl="list" name="MONTHS_LOWER" />
      <scope classrefs="FileCookieJar" doc="WARNING: you may want to backup your browser's cookies file if you use&#10;this class to save cookies.  I *think* it works, but there have been bugs in the past!  This class differs from CookieJar only in the format it uses to save and load cookies to and from a file.  This class uses the Mozilla/Netscape `cookies.txt' format.  lynx uses this file format, too.  Don't expect cookies saved while the browser is running to be noticed by the browser (in fact, Mozilla on unix will overwrite your saved cookies if you change them on disk while it's running; on Windows, you probably can't" ilk="class" name="MozillaCookieJar">
        <scope doc="Save cookies to a file." ilk="function" name="save" signature="save(self, filename=None, ignore_discard=False, ignore_expires=False)" />
        <scope ilk="function" name="_really_load" signature="_really_load(self, f, filename, ignore_discard, ignore_expires)" />
      </scope>
      <variable citdl="SRE_Pattern" name="STRICT_DATE_RE" />
      <variable citdl="SRE_Pattern" name="TIMEZONE_RE" />
      <variable citdl="dict" name="UTC_ZONES" />
      <variable citdl="SRE_Pattern" name="WEEKDAY_RE" />
      <variable citdl="list" name="__all__" />
      <import module="_threading" />
      <import module="copy" />
      <variable citdl="SRE_Pattern" name="cut_port_re" />
      <import module="datetime" />
      <variable citdl="bool" name="debug" />
      <scope doc="Iterates over nested mapping, depth-first, in sorted order&#10;by key." ilk="function" name="deepvalues" signature="deepvalues(mapping)" />
      <scope doc="Return True if domain A domain-matches domain B, according&#10;to RFC 2965." ilk="function" name="domain_match" signature="domain_match(A, B)" />
      <scope doc="Return a tuple (request-host, effective request-host name)." ilk="function" name="eff_request_host" signature="eff_request_host(request)" />
      <scope doc="Escape any invalid characters in HTTP URL, and uppercase all&#10;escapes." ilk="function" name="escape_path" signature="escape_path(path)" />
      <import module="http" />
      <scope doc="Returns time in seconds since epoch of time represented by a&#10;string." ilk="function" name="http2time" signature="http2time(text)" />
      <scope doc="Return True if text is a host domain name." ilk="function" name="is_HDN" signature="is_HDN(text)" />
      <scope doc="RFC 2965, section 3.3.6:" ilk="function" name="is_third_party" signature="is_third_party(request)" />
      <scope doc="As for http2time, but parses the ISO 8601 formats:" ilk="function" name="iso2time" signature="iso2time(text)" />
      <scope doc="Do the inverse (almost) of the conversion done by&#10;split_header_words." ilk="function" name="join_header_words" signature="join_header_words(lists)" />
      <scope doc="Return True if text is a sort-of-like a host domain name." ilk="function" name="liberal_is_HDN" signature="liberal_is_HDN(text)" />
      <variable citdl="NoneType" name="logger" />
      <scope doc="Return string representation of Cookie in the LWP cookie&#10;file format." ilk="function" name="lwp_cookie_str" signature="lwp_cookie_str(cookie)" />
      <variable citdl="str" name="month" />
      <scope ilk="function" name="offset_from_tz_string" signature="offset_from_tz_string(tz)" />
      <scope doc="Ad-hoc parser for Netscape protocol cookie-attributes." ilk="function" name="parse_ns_headers" signature="parse_ns_headers(ns_headers)" />
      <import module="re" />
      <scope doc="Return reach of host h, as defined by RFC 2965, section 1." ilk="function" name="reach" signature="reach(h)" />
      <scope doc="Return request-host, as defined by RFC 2965." ilk="function" name="request_host" signature="request_host(request)" />
      <scope doc="Path component of request-URI, as defined by RFC 2965." ilk="function" name="request_path" signature="request_path(request)" />
      <scope ilk="function" name="request_port" signature="request_port(request)" />
      <scope doc="Parse header values into a list of lists containing&#10;key,value pairs." ilk="function" name="split_header_words" signature="split_header_words(header_values)" />
      <scope ilk="function" name="strip_quotes" signature="strip_quotes(text)" />
      <import module="time" />
      <scope doc="Return a string representing time in seconds since epoch, t." ilk="function" name="time2isoz" signature="time2isoz(t=None)" />
      <scope doc="Return a string representing time in seconds since epoch, t." ilk="function" name="time2netscape" signature="time2netscape(t=None)" />
      <scope doc="Unrelated but handy function to calculate Unix timestamp&#10;from GMT." ilk="function" name="timegm" signature="timegm(tuple)" />
      <scope doc="Return unmatched part of re.Match object." ilk="function" name="unmatched" signature="unmatched(match)" />
      <scope ilk="function" name="uppercase_escaped_char" signature="uppercase_escaped_char(match)" />
      <import module="urllib" />
      <scope doc="For blocking/accepting domains." ilk="function" name="user_domain_match" signature="user_domain_match(A, B)" />
      <scope ilk="function" name="vals_sorted_by_key" signature="vals_sorted_by_key(adict)" />
    </scope>
    <scope doc="A command-line program that runs a set of tests; this is primarily&#10;for making test modules conveniently executable." ilk="blob" lang="Python3" name="unittest.main">
      <scope classrefs="object" doc="type(object_or_name, bases, dict)&#10;type(object) -&gt; the object's type type(name, bases, dict) -&gt; a new type" ilk="class" name="__class__">
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="__subclasses__() -&gt; list of immediate subclasses" ilk="function" name="__subclasses__" returns="list" signature="__subclasses__() -&gt; list of immediate subclasses" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="check if a class is a subclass" ilk="function" name="__subclasscheck__" returns="bool" signature="__subclasscheck__() -&gt; bool" />
        <scope doc="specialized __dir__ implementation for types" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="check if an object is an instance" ilk="function" name="__instancecheck__" returns="bool" signature="__instancecheck__() -&gt; bool" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="return memory consumption of the type object" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="return a type's method resolution order" ilk="function" name="mro" returns="list" signature="mro() -&gt; list" />
      </scope>
      <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
      <variable citdl="mappingproxy" name="__dict__" />
      <scope doc="default dir() implementation" ilk="function" name="__dir__" returns="list" signature="__dir__() -&gt; list" />
      <scope doc="Return self==value." ilk="function" name="__eq__" />
      <scope doc="default object formatter" ilk="function" name="__format__" />
      <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
      <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
      <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
      <scope doc="Return hash(self)." ilk="function" name="__hash__" />
      <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, module='__main__', defaultTest=None, argv=None, testRunner=None, testLoader=&lt;unittest.loader.TestLoader object at 0x7f117fe3aa58&gt;, exit=True, verbosity=1, failfast=None, catchbreak=None, buffer=None, warnings=None, *, tb_locals=False)" />
      <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
      <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
      <scope doc="Return self!=value." ilk="function" name="__ne__" />
      <scope doc="Create and return a new object." ilk="function" name="__new__" />
      <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      <scope doc="helper for pickle" ilk="function" name="__reduce_ex__" />
      <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
      <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
      <scope doc="Return str(self)." ilk="function" name="__str__" />
      <scope doc="Abstract classes can override this to customize&#10;issubclass()." ilk="function" name="__subclasshook__" />
      <variable citdl="getset_descriptor" name="__weakref__" />
      <variable citdl="NoneType" name="buffer" />
      <variable citdl="NoneType" name="catchbreak" />
      <scope ilk="function" name="createTests" signature="createTests(self)" />
      <variable citdl="NoneType" name="failfast" />
      <variable citdl="NoneType" name="module" />
      <scope ilk="function" name="parseArgs" signature="parseArgs(self, argv)" />
      <variable citdl="NoneType" name="progName" />
      <scope ilk="function" name="runTests" signature="runTests(self)" />
      <scope ilk="function" name="usageExit" signature="usageExit(self, msg=None)" />
      <variable citdl="int" name="verbosity" />
      <variable citdl="NoneType" name="warnings" />
    </scope>
    <scope doc="Exception classes raised by urllib.&#10;The base exception class is URLError, which inherits from OSError.  It doesn't define any behavior of its own, but is the base class for all exceptions defined in this package.  HTTPError is an exception class that is also a valid HTTP response instance.  It behaves this way because HTTP protocol errors are valid responses, with a status code, headers, and a body.  In some contexts, an application may want to handle an exception like a regular response." ilk="blob" lang="Python3" name="urllib.error">
      <scope classrefs="URLError" doc="Exception raised when downloaded size does not match content-length.&#10;" ilk="class" name="ContentTooShortError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, message, content)" />
      </scope>
      <scope classrefs="URLError addinfourl" doc="Raised when HTTP error occurs, but also acts like non-error return&#10;" ilk="class" name="HTTPError">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="_HTTPError__super_init" signature="_HTTPError__super_init(self, fp, headers, url, code=None)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, url, code, msg, hdrs, fp)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="URLError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, reason, filename=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="urllib" />
    </scope>
    <scope doc="Remove __future__ imports&#10;from __future__ import foo is replaced with an empty line." ilk="blob" lang="Python3" name="lib2to3.fixes.fix_future">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixFuture">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
    </scope>
    <scope doc="Module doctest -- a framework for running examples in docstrings.&#10;In simplest use, end each module M to be tested with:  def _test(): import doctest doctest.testmod()  if __name__ == &quot;__main__&quot;: _test()  Then running the module as a script will cause the examples in the" ilk="blob" lang="Python3" name="doctest">
      <variable citdl="str" name="BLANKLINE_MARKER" />
      <variable citdl="int" name="COMPARISON_FLAGS" />
      <variable citdl="int" name="DONT_ACCEPT_BLANKLINE" />
      <variable citdl="int" name="DONT_ACCEPT_TRUE_FOR_1" />
      <scope classrefs="DocTestRunner" doc="Run doc tests but raise an exception as soon as there is a failure.&#10;If an unexpected exception occurs, an UnexpectedException is raised. It contains the test, the example, and the original exception:  &gt;&gt;&gt; runner = DebugRunner(verbose=False) &gt;&gt;&gt; test = DocTestParser().get_doctest('&gt;&gt;&gt; raise KeyError\n42', ...                                    {}, 'foo', 'foo.py', 0) &gt;&gt;&gt; try: ...     runner.run(test) ... except UnexpectedException as f: ...     failure = f" ilk="class" name="DebugRunner">
        <scope doc="Report that the given example failed." ilk="function" name="report_failure" signature="report_failure(self, out, test, example, got)" />
        <scope doc="Report that the given example raised an unexpected&#10;exception." ilk="function" name="report_unexpected_exception" signature="report_unexpected_exception(self, out, test, example, exc_info)" />
        <scope doc="Run the examples in `test`, and display the results using&#10;the writer function `out`." ilk="function" name="run" signature="run(self, test, compileflags=None, out=None, clear_globs=True)" />
      </scope>
      <scope classrefs="DocTestCase" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="DocFileCase">
        <scope ilk="function" name="format_failure" signature="format_failure(self, err)" />
        <scope ilk="function" name="id" signature="id(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope doc="A unittest suite for one or more doctest files." ilk="function" name="DocFileSuite" signature="DocFileSuite(*paths, **kw)" />
      <scope ilk="function" name="DocFileTest" signature="DocFileTest(path, module_relative=True, package=None, globs=None, parser=&lt;doctest.DocTestParser object at 0x7f117f122b70&gt;, encoding=None, **options)" />
      <scope classrefs="object" doc="A collection of doctest examples that should be run in a single&#10;namespace.  Each `DocTest` defines the following attributes:  - examples: the list of examples.  - globs: The namespace (aka globals) that the examples should be run in.  - name: A name identifying the DocTest (typically, the name of the object whose docstring this DocTest was extracted from). " ilk="class" name="DocTest">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" signature="__lt__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Create a new DocTest containing the given examples." ilk="function" name="__init__" signature="__init__(self, examples, globs, name, filename, lineno, docstring)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="TestCase" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="DocTestCase">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope ilk="function" name="runTest" signature="runTest(self)" />
        <scope doc="Hook method for deconstructing the test fixture after&#10;testing it." ilk="function" name="tearDown" signature="tearDown(self)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, test, optionflags=0, setUp=None, tearDown=None, checker=None)" />
        <scope ilk="function" name="format_failure" signature="format_failure(self, err)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Run the test case without results and without catching&#10;exceptions" ilk="function" name="debug" signature="debug(self)" />
        <scope ilk="function" name="id" signature="id(self)" />
      </scope>
      <scope classrefs="Exception" doc="A DocTest example has failed in debugging mode.&#10;The exception instance has variables:  - test: the DocTest object being run  - example: the Example object that failed  - got: the actual output" ilk="class" name="DocTestFailure">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, test, example, got)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="object" doc="A class used to extract the DocTests that are relevant to a given&#10;object, from its docstring and the docstrings of its contained objects.  Doctests can currently be extracted from the following object types: modules, functions, classes, methods, staticmethods, classmethods, and properties." ilk="class" name="DocTestFinder">
        <scope doc="Return a line number of the given object's docstring." ilk="function" name="_find_lineno" signature="_find_lineno(self, obj, source_lines)" />
        <scope doc="Return a list of the DocTests that are defined by the given&#10;object's docstring, or by any of its contained objects'&#10;docstrings." ilk="function" name="find" signature="find(self, obj, name=None, module=None, globs=None, extraglobs=None)" />
        <scope doc="Return a DocTest for the given object, if it defines a&#10;docstring; otherwise, return None." ilk="function" name="_get_test" signature="_get_test(self, obj, name, module, globs, source_lines)" />
        <scope doc="Create a new doctest finder." ilk="function" name="__init__" signature="__init__(self, verbose=False, parser=&lt;doctest.DocTestParser object at 0x7f117f856c50&gt;, recurse=True, exclude_empty=True)" />
        <scope doc="Find tests for the given object and any contained objects,&#10;and add them to `tests`." ilk="function" name="_find" signature="_find(self, tests, obj, name, module, source_lines, globs, seen)" />
        <scope doc="Return true if the given object is defined in the given&#10;module." ilk="function" name="_from_module" signature="_from_module(self, module, object)" />
      </scope>
      <scope classrefs="object" doc="A class used to parse strings containing doctest examples.&#10;" ilk="class" name="DocTestParser">
        <scope doc="Check that every line in the given list starts with the&#10;given prefix; if any line does not, then raise a ValueError." ilk="function" name="_check_prefix" signature="_check_prefix(self, lines, prefix, name, lineno)" />
        <scope doc="Return the minimum indentation of any non-blank line in `s`" ilk="function" name="_min_indent" signature="_min_indent(self, s)" />
        <scope doc="Extract all doctest examples from the given string, and&#10;return them as a list of `Example` objects." ilk="function" name="get_examples" signature="get_examples(self, string, name='&lt;string&gt;')" />
        <scope doc="Divide the given string into examples and intervening text,&#10;and return them as a list of alternating Examples and&#10;strings." ilk="function" name="parse" signature="parse(self, string, name='&lt;string&gt;')" />
        <scope doc="Given a regular expression match from `_EXAMPLE_RE` (`m`),&#10;return a pair `(source, want)`, where `source` is the&#10;matched example's source code (with prompts and indentation&#10;stripped); and `want` is the example's expected output (with&#10;indentation" ilk="function" name="_parse_example" signature="_parse_example(self, m, name, lineno)" />
        <scope doc="Return a dictionary containing option overrides extracted&#10;from option directives in the given source string." ilk="function" name="_find_options" signature="_find_options(self, source, name, lineno)" />
        <scope doc="Given the lines of a source string (including prompts and&#10;leading indentation), check to make sure that every prompt&#10;is followed by a space character." ilk="function" name="_check_prompt_blank" signature="_check_prompt_blank(self, lines, indent, name, lineno)" />
        <scope doc="Extract all doctest examples from the given string, and&#10;collect them into a `DocTest` object." ilk="function" name="get_doctest" signature="get_doctest(self, string, globs, name, filename, lineno)" />
      </scope>
      <scope classrefs="object" doc="A class used to run DocTest test cases, and accumulate statistics.&#10;The `run` method is used to process a single DocTest case.  It returns a tuple `(f, t)`, where `t` is the number of test cases tried, and `f` is the number of test cases that failed.  &gt;&gt;&gt; tests = DocTestFinder().find(_TestClass) &gt;&gt;&gt; runner = DocTestRunner(verbose=False) &gt;&gt;&gt; tests.sort(key = lambda test: test.name) &gt;&gt;&gt; for test in tests: ...     print(test.name, '-&gt;', runner.run(test)) _TestClass -&gt; TestResults(failed=0, attempted=2)" ilk="class" name="DocTestRunner">
        <scope doc="Report that the given example failed." ilk="function" name="report_failure" signature="report_failure(self, out, test, example, got)" />
        <scope doc="Report that the given example raised an unexpected&#10;exception." ilk="function" name="report_unexpected_exception" signature="report_unexpected_exception(self, out, test, example, exc_info)" />
        <scope doc="Report that the test runner is about to process the given&#10;example." ilk="function" name="report_start" signature="report_start(self, out, test, example)" />
        <scope doc="Run the examples in `test`, and display the results using&#10;the writer function `out`." ilk="function" name="run" signature="run(self, test, compileflags=None, out=None, clear_globs=True)" />
        <scope doc="Create a new test runner." ilk="function" name="__init__" signature="__init__(self, checker=None, verbose=None, optionflags=0)" />
        <scope ilk="function" name="_DocTestRunner__patched_linecache_getlines" signature="_DocTestRunner__patched_linecache_getlines(self, filename, module_globals=None)" />
        <scope doc="Run the examples in `test`." ilk="function" name="_DocTestRunner__run" signature="_DocTestRunner__run(self, test, compileflags, out)" />
        <scope doc="Record the fact that the given DocTest (`test`) generated&#10;`f` failures out of `t` tried examples." ilk="function" name="_DocTestRunner__record_outcome" signature="_DocTestRunner__record_outcome(self, test, f, t)" />
        <scope ilk="function" name="_failure_header" signature="_failure_header(self, test, example)" />
        <scope doc="#///////////////////////////////////////////////////////////&#10;////// # Backward compatibility cruft to maintain&#10;doctest.master." ilk="function" name="merge" signature="merge(self, other)" />
        <scope doc="Print a summary of all the test cases that have been run by&#10;this DocTestRunner, and return a tuple `(f, t)`, where `f`&#10;is the total number of failed examples, and `t` is the total&#10;number of tried examples." ilk="function" name="summarize" signature="summarize(self, verbose=None)" />
        <scope doc="Report that the given example ran successfully." ilk="function" name="report_success" signature="report_success(self, out, test, example, got)" />
      </scope>
      <scope doc="Convert doctest tests for a module to a unittest test suite." ilk="function" name="DocTestSuite" signature="DocTestSuite(module=None, globs=None, extraglobs=None, test_finder=None, **options)" />
      <variable citdl="int" name="ELLIPSIS" />
      <variable citdl="str" name="ELLIPSIS_MARKER" />
      <scope classrefs="object" doc="A single doctest example, consisting of source code and expected&#10;output.  `Example` defines the following attributes:  - source: A single Python statement, always ending with a newline. The constructor adds a newline if needed.  - want: The expected output from running the source code (either from stdout, or a traceback in case of exception).  `want` ends with a newline unless it's empty, in which case it's an empty string.  The constructor adds a newline if needed. " ilk="class" name="Example">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, source, want, exc_msg=None, lineno=0, indent=0, options=None)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return hash(self)." ilk="function" name="__hash__" signature="__hash__(self)" />
      </scope>
      <variable citdl="int" name="FAIL_FAST" />
      <variable citdl="int" name="IGNORE_EXCEPTION_DETAIL" />
      <variable citdl="int" name="NORMALIZE_WHITESPACE" />
      <variable citdl="dict" name="OPTIONFLAGS_BY_NAME" />
      <scope classrefs="object" doc="A class used to check the whether the actual output from a doctest&#10;example matches the expected output.  `OutputChecker` defines two methods: `check_output`, which compares a given pair of outputs, and returns true if they match; and `output_difference`, which returns a string describing the differences between two outputs." ilk="class" name="OutputChecker">
        <scope doc="Return True iff the actual output from an example (`got`)&#10;matches the expected output (`want`)." ilk="function" name="check_output" signature="check_output(self, want, got, optionflags)" />
        <scope doc="# Should we do a fancy diff?" ilk="function" name="_do_a_fancy_diff" signature="_do_a_fancy_diff(self, want, got, optionflags)" />
        <scope doc="Return a string describing the differences between the&#10;expected output for a given example (`example`) and the&#10;actual output (`got`)." ilk="function" name="output_difference" signature="output_difference(self, example, got, optionflags)" />
        <scope doc="Convert string to hex-escaped ASCII string." ilk="function" name="_toAscii" signature="_toAscii(self, s)" />
      </scope>
      <variable citdl="int" name="REPORTING_FLAGS" />
      <variable citdl="int" name="REPORT_CDIFF" />
      <variable citdl="int" name="REPORT_NDIFF" />
      <variable citdl="int" name="REPORT_ONLY_FIRST_FAILURE" />
      <variable citdl="int" name="REPORT_UDIFF" />
      <variable citdl="int" name="SKIP" />
      <scope classrefs="DocTestCase" doc="A class whose instances are single test cases.&#10;By default, the test code itself should be placed in a method named 'runTest'.  If the fixture may be used for many test cases, create as many test methods as are needed. When instantiating such a TestCase subclass, specify in the constructor arguments the name of the test method that the instance is to execute.  Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be" ilk="class" name="SkipDocTestCase">
        <scope doc="Create an instance of the class that will use the named test&#10;method when executed." ilk="function" name="__init__" signature="__init__(self, module)" />
        <scope ilk="function" name="test_skip" signature="test_skip(self)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Hook method for setting up the test fixture before&#10;exercising it." ilk="function" name="setUp" signature="setUp(self)" />
        <scope doc="Returns a one-line description of the test, or None if no&#10;description has been provided." ilk="function" name="shortDescription" signature="shortDescription(self)" />
      </scope>
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <scope classrefs="tuple" doc="TestResults(failed, attempted)&#10;" ilk="class" name="TestResults">
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Return a new TestResults object replacing specified fields&#10;with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Create new instance of TestResults(failed, attempted)" ilk="function" name="__new__" signature="__new__(_cls, failed, attempted)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
        <scope doc="Make a new TestResults object from a sequence or iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="Exception" doc="A DocTest example has encountered an unexpected exception&#10;The exception instance has variables:  - test: the DocTest object being run  - example: the Example object that failed  - exc_info: the exception info" ilk="class" name="UnexpectedException">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, test, example, exc_info)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="__docformat__" />
      <import module="__future__" />
      <variable citdl="dict" name="__test__" />
      <import module="argparse" />
      <scope doc="Debug a single doctest docstring." ilk="function" name="debug" signature="debug(module, name, pm=False)" />
      <scope doc="Debug a test script. `src` is the script, as a string." ilk="function" name="debug_script" signature="debug_script(src, pm=False, globs=None)" />
      <scope doc="Debug a single doctest docstring, in argument `src`'" ilk="function" name="debug_src" signature="debug_src(src, pm=False, globs=None)" />
      <import module="difflib" />
      <import module="inspect" />
      <import module="linecache" />
      <variable citdl="DocTestRunner" name="master" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="os" />
      <import module="pdb" />
      <import module="re" />
      <scope ilk="function" name="register_optionflag" signature="register_optionflag(name)" />
      <scope doc="Test examples in the given object's docstring (`f`), using&#10;`globs` as globals." ilk="function" name="run_docstring_examples" signature="run_docstring_examples(f, globs, verbose=False, name='NoName', compileflags=None, optionflags=0)" />
      <scope doc="Extract script from text with examples." ilk="function" name="script_from_examples" signature="script_from_examples(s)" />
      <scope doc="Sets the unittest option flags." ilk="function" name="set_unittest_reportflags" signature="set_unittest_reportflags(flags)" />
      <import module="sys" />
      <scope doc="Test examples in the given file. Return (#failures, #tests)." ilk="function" name="testfile" signature="testfile(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=&lt;doctest.DocTestParser object at 0x7f117f122940&gt;, encoding=None)" />
      <scope doc="m=None, name=None, globs=None, verbose=None, report=True,&#10;optionflags=0, extraglobs=None, raise_on_error=False,&#10;exclude_empty=False" ilk="function" name="testmod" signature="testmod(m=None, name=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, exclude_empty=False)" />
      <scope doc="Extract the test sources from a doctest docstring as a&#10;script." ilk="function" name="testsource" signature="testsource(module, name)" />
      <import module="traceback" />
      <import module="unittest" />
    </scope>
    <scope doc="Fixer for __nonzero__ -&gt; __bool__ methods.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_nonzero">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixNonzero">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
    </scope>
    <scope doc="Core XML support for Python.&#10;This package contains four sub-packages:  dom -- The W3C Document Object Model.  This supports DOM Level 1 + Namespaces.  parsers -- Python wrappers for XML parsers (currently only supports Expat).  sax -- The Simple API for XML, developed by XML-Dev, led by David Megginson and ported to Python by Lars Marius Garshol.  This supports the SAX 2 API." ilk="blob" lang="Python3" name="xml">
      <variable citdl="list" name="__all__" />
      <import module="etree" />
      <import module="parsers" />
    </scope>
    <scope doc="Fixer for StandardError -&gt; Exception.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_standarderror">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixStandarderror">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Drop-in replacement for the thread module.&#10;Meant to be used as a brain-dead substitute so that threaded code does not need to be rewritten for when the thread module is not present.  Suggested usage is::  try: import _thread except ImportError: import _dummy_thread as _thread" ilk="blob" lang="Python3" name="_dummy_thread">
      <scope classrefs="object" doc="Class implementing dummy implementation of _thread.LockType.&#10;Compatibility is maintained by maintaining self.locked_status which is a boolean that stores the state of the lock.  Pickling of the lock, though, should not be done since if the _thread module is then used with an unpickled ``lock()`` from here problems could occur from this class not having atomic methods." ilk="class" name="LockType">
        <scope ilk="function" name="__exit__" signature="__exit__(self, typ, val, tb)" />
        <scope doc="Dummy implementation of acquire()." ilk="function" name="acquire" signature="acquire(self, waitflag=None, timeout=-1)" />
        <scope doc="Dummy implementation of acquire()." ilk="function" name="__enter__" signature="__enter__(self, waitflag=None, timeout=-1)" />
        <scope ilk="function" name="locked" signature="locked(self)" />
        <scope doc="Release the dummy lock." ilk="function" name="release" signature="release(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="TIMEOUT_MAX" />
      <variable citdl="list" name="__all__" />
      <scope doc="Dummy implementation of _thread.allocate_lock()." ilk="function" name="allocate_lock" signature="allocate_lock()" />
      <scope classrefs="Exception" doc="Unspecified run-time error.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope doc="Dummy implementation of _thread.exit()." ilk="function" name="exit" signature="exit()" />
      <scope doc="Dummy implementation of _thread.get_ident()." ilk="function" name="get_ident" signature="get_ident()" />
      <scope doc="Set _interrupt flag to True to have start_new_thread raise&#10;KeyboardInterrupt upon exiting." ilk="function" name="interrupt_main" signature="interrupt_main()" />
      <scope doc="Dummy implementation of _thread.stack_size()." ilk="function" name="stack_size" signature="stack_size(size=None)" />
      <scope doc="Dummy implementation of _thread.start_new_thread()." ilk="function" name="start_new_thread" signature="start_new_thread(function, args, kwargs={})" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="asyncio.base_subprocess">
      <scope classrefs="SubprocessTransport" doc="Base class for transports.&#10;" ilk="class" name="BaseSubprocessTransport">
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Send signal to subprocess." ilk="function" name="send_signal" signature="send_signal(self, signal)" />
        <scope doc="Wait until the process exit and return the process return&#10;code." ilk="function" name="_wait" signature="_wait(self)" />
        <scope ilk="function" name="_check_proc" signature="_check_proc(self)" />
        <scope ilk="function" name="_connect_pipes" signature="_connect_pipes(self, waiter)" />
        <scope doc="Get subprocess id." ilk="function" name="get_pid" signature="get_pid(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_pipe_data_received" signature="_pipe_data_received(self, fd, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, loop, protocol, args, shell, stdin, stdout, stderr, bufsize, waiter=None, extra=None, **kwargs)" />
        <scope doc="Get transport for pipe with number fd." ilk="function" name="get_pipe_transport" signature="get_pipe_transport(self, fd)" />
        <scope ilk="function" name="_process_exited" signature="_process_exited(self, returncode)" />
        <scope doc="Stop the subprocess." ilk="function" name="terminate" signature="terminate(self)" />
        <scope ilk="function" name="_pipe_connection_lost" signature="_pipe_connection_lost(self, fd, exc)" />
        <scope doc="Close the transport." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_call_connection_lost" signature="_call_connection_lost(self, exc)" />
        <scope doc="Return True if the transport is closing or closed." ilk="function" name="is_closing" signature="is_closing(self)" />
        <scope ilk="function" name="_start" signature="_start(self, args, shell, stdin, stdout, stderr, bufsize, **kwargs)" />
        <scope doc="Get subprocess returncode." ilk="function" name="get_returncode" signature="get_returncode(self)" />
        <scope ilk="function" name="_call" signature="_call(self, cb, *data)" />
        <scope ilk="function" name="_try_finish" signature="_try_finish(self)" />
        <scope doc="Kill the subprocess." ilk="function" name="kill" signature="kill(self)" />
      </scope>
      <scope classrefs="WriteSubprocessPipeProto Protocol" doc="Interface for stream protocol.&#10;The user should implement this interface.  They can inherit from this class but don't need to.  The implementations here do nothing (they don't raise exceptions).  When the user wants to requests a transport, they pass a protocol factory to a utility function (e.g., EventLoop.create_connection()).  When the connection is made successfully, connection_made() is called with a suitable transport object.  Then data_received() will be called 0 or more times with data (bytes) received from the" ilk="class" name="ReadSubprocessPipeProto">
        <scope doc="Called when some data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Common base class for protocol interfaces.&#10;Usually user implements protocols that derived from BaseProtocol like Protocol or ProcessProtocol.  The only case when BaseProtocol should be implemented directly is write-only transport like write pipe" ilk="class" name="WriteSubprocessPipeProto">
        <scope doc="Called when the transport's buffer drains below the low-&#10;water mark." ilk="function" name="resume_writing" signature="resume_writing(self)" />
        <scope doc="Called when the transport's buffer goes over the high-water&#10;mark." ilk="function" name="pause_writing" signature="pause_writing(self)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, proc, fd)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <import module="collections" />
      <import module="compat" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="futures" />
      <variable citdl="Logger" name="logger" />
      <import module="protocols" />
      <import module="subprocess" />
      <import module="transports" />
      <import module="warnings" />
    </scope>
    <scope doc="Recognize image file formats based on their first few bytes.&#10;" ilk="blob" lang="Python3" name="imghdr">
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="test" signature="test()" />
      <scope ilk="function" name="test_bmp" signature="test_bmp(h, f)" />
      <scope ilk="function" name="test_exr" signature="test_exr(h, f)" />
      <scope doc="GIF ('87 and '89 variants)" ilk="function" name="test_gif" signature="GIF ('87 and '89 variants)" />
      <scope doc="JPEG data in JFIF or Exif format" ilk="function" name="test_jpeg" signature="test_jpeg(h, f)" />
      <scope doc="PBM (portable bitmap)" ilk="function" name="test_pbm" signature="PBM (portable bitmap)" />
      <scope doc="PGM (portable graymap)" ilk="function" name="test_pgm" signature="PGM (portable graymap)" />
      <scope ilk="function" name="test_png" signature="test_png(h, f)" />
      <scope doc="PPM (portable pixmap)" ilk="function" name="test_ppm" signature="PPM (portable pixmap)" />
      <scope doc="Sun raster file" ilk="function" name="test_rast" signature="test_rast(h, f)" />
      <scope doc="SGI image library" ilk="function" name="test_rgb" signature="test_rgb(h, f)" />
      <scope doc="TIFF (can be in Motorola or Intel byte order)" ilk="function" name="test_tiff" signature="TIFF (can be in Motorola or Intel byte order)" />
      <scope ilk="function" name="test_webp" signature="test_webp(h, f)" />
      <scope doc="X bitmap (X10 or X11)" ilk="function" name="test_xbm" signature="test_xbm(h, f)" />
      <scope ilk="function" name="testall" signature="testall(list, recursive, toplevel)" />
      <variable citdl="list" name="tests" />
      <scope ilk="function" name="what" signature="what(file, h=None)" />
    </scope>
    <scope doc="This module provides access to the Unicode Character Database which&#10;defines character properties for all Unicode characters. The data in this database is based on the UnicodeData.txt file version 8.0.0 which is publically available from ftp://ftp.unicode.org/.  The module uses the same names and symbols as defined by the UnicodeData File Format 8.0.0." ilk="blob" lang="Python3" name="unicodedata">
      <scope classrefs="object" doc="&#10;" ilk="class" name="UCD">
        <scope doc="Returns the name assigned to the character chr as a string." ilk="function" name="name" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Returns the general category assigned to the character chr&#10;as string." ilk="function" name="category" />
        <scope doc="Returns the mirrored property assigned to the character chr&#10;as integer." ilk="function" name="mirrored" />
        <scope doc="Converts a Unicode character into its equivalent digit&#10;value." ilk="function" name="digit" />
        <scope doc="Look up character by name." ilk="function" name="lookup" />
        <scope doc="Returns the character decomposition mapping assigned to the&#10;character chr as string." ilk="function" name="decomposition" />
        <scope doc="Returns the east asian width assigned to the character chr&#10;as string." ilk="function" name="east_asian_width" />
        <scope doc="Return the normal form 'form' for the Unicode string unistr." ilk="function" name="normalize" />
        <scope doc="Returns the canonical combining class assigned to the&#10;character chr as integer." ilk="function" name="combining" />
        <scope doc="Returns the bidirectional class assigned to the character&#10;chr as string." ilk="function" name="bidirectional" />
        <scope doc="Converts a Unicode character into its equivalent numeric&#10;value." ilk="function" name="numeric" />
        <scope doc="Converts a Unicode character into its equivalent decimal&#10;value." ilk="function" name="decimal" />
      </scope>
      <scope doc="Returns the bidirectional class assigned to the character&#10;chr as string." ilk="function" name="bidirectional" />
      <scope doc="Returns the general category assigned to the character chr&#10;as string." ilk="function" name="category" />
      <scope doc="Returns the canonical combining class assigned to the&#10;character chr as integer." ilk="function" name="combining" />
      <scope doc="Converts a Unicode character into its equivalent decimal&#10;value." ilk="function" name="decimal" />
      <scope doc="Returns the character decomposition mapping assigned to the&#10;character chr as string." ilk="function" name="decomposition" />
      <scope doc="Converts a Unicode character into its equivalent digit&#10;value." ilk="function" name="digit" />
      <scope doc="Returns the east asian width assigned to the character chr&#10;as string." ilk="function" name="east_asian_width" />
      <scope doc="Look up character by name." ilk="function" name="lookup" />
      <scope doc="Returns the mirrored property assigned to the character chr&#10;as integer." ilk="function" name="mirrored" />
      <scope doc="Returns the name assigned to the character chr as a string." ilk="function" name="name" />
      <scope doc="Return the normal form 'form' for the Unicode string unistr." ilk="function" name="normalize" />
      <scope doc="Converts a Unicode character into its equivalent numeric&#10;value." ilk="function" name="numeric" />
      <variable citdl="UCD" name="ucd_3_2_0" />
      <variable citdl="PyCapsule" name="ucnhash_CAPI" />
      <variable citdl="str" name="unidata_version" />
    </scope>
    <scope doc="Quoted-printable content transfer encoding per RFCs 2045-2047.&#10;This module handles the content transfer encoding method defined in RFC 2045 to encode US ASCII-like 8-bit data called `quoted-printable'.  It is used to safely encode text that is in a character set similar to the 7-bit US ASCII character set, but that includes some 8-bit characters that are normally not allowed in email bodies or headers.  Quoted-printable is very space-inefficient for encoding binary files; use the email.base64mime module for that instead.  This module provides an interface to encode and decode both headers and bodies" ilk="blob" lang="Python3" name="email.quoprimime">
      <variable citdl="str" name="CRLF" />
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="str" name="NL" />
      <variable citdl="list" name="__all__" />
      <variable citdl="str" name="ascii_letters" />
      <scope doc="Return True if the octet should be escaped with body quopri." ilk="function" name="body_check" signature="body_check(octet)" />
      <scope doc="Decode a quoted-printable string." ilk="function" name="body_decode" signature="body_decode(encoded, eol='\n')" />
      <scope doc="Encode with quoted-printable, wrapping at maxlinelen&#10;characters." ilk="function" name="body_encode" signature="body_encode(body, maxlinelen=76, eol='\n')" />
      <scope doc="Return a body quoted-printable encoding length." ilk="function" name="body_length" signature="body_length(bytearray)" />
      <variable citdl="int" name="c" />
      <scope doc="Decode a quoted-printable string." ilk="function" name="decode" signature="decode(encoded, eol='\n')" />
      <scope doc="Decode a quoted-printable string." ilk="function" name="decodestring" signature="decodestring(encoded, eol='\n')" />
      <variable citdl="str" name="digits" />
      <scope doc="Return True if the octet should be escaped with header&#10;quopri." ilk="function" name="header_check" signature="header_check(octet)" />
      <scope doc="Decode a string encoded with RFC 2045 MIME header `Q'&#10;encoding." ilk="function" name="header_decode" signature="header_decode(s)" />
      <scope doc="Encode a single header line with quoted-printable (like)&#10;encoding." ilk="function" name="header_encode" signature="header_encode(header_bytes, charset='iso-8859-1')" />
      <scope doc="Return a header quoted-printable encoding length." ilk="function" name="header_length" signature="header_length(bytearray)" />
      <variable citdl="str" name="hexdigits" />
      <scope ilk="function" name="quote" signature="quote(c)" />
      <import module="re" />
      <scope doc="Turn a string in the form =AB to the ASCII character with&#10;value 0xab" ilk="function" name="unquote" signature="unquote(s)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="asyncio.sslproto">
      <scope classrefs="Protocol" doc="SSL protocol.&#10;Implementation of SSL on top of a socket using incoming and outgoing buffers which are ssl.MemoryBIO objects." ilk="class" name="SSLProtocol">
        <scope doc="Called when the other end of the low-level stream is half-&#10;closed." ilk="function" name="eof_received" signature="eof_received(self)" />
        <scope doc="Called when the low-level transport's buffer goes over the&#10;high-water mark." ilk="function" name="pause_writing" signature="pause_writing(self)" />
        <scope ilk="function" name="_start_shutdown" signature="_start_shutdown(self)" />
        <scope ilk="function" name="_write_appdata" signature="_write_appdata(self, data)" />
        <scope ilk="function" name="_wakeup_waiter" signature="_wakeup_waiter(self, exc=None)" />
        <scope ilk="function" name="_process_write_backlog" signature="_process_write_backlog(self)" />
        <scope ilk="function" name="_on_handshake_complete" signature="_on_handshake_complete(self, handshake_exc)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, loop, app_protocol, sslcontext, waiter, server_side=False, server_hostname=None)" />
        <scope doc="Called when the low-level connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope ilk="function" name="_start_handshake" signature="_start_handshake(self)" />
        <scope ilk="function" name="_abort" signature="_abort(self)" />
        <scope ilk="function" name="_get_extra_info" signature="_get_extra_info(self, name, default=None)" />
        <scope doc="Called when the low-level transport's buffer drains below&#10;the low-water mark." ilk="function" name="resume_writing" signature="resume_writing(self)" />
        <scope ilk="function" name="_finalize" signature="_finalize(self)" />
        <scope doc="Called when the low-level connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
        <scope ilk="function" name="_fatal_error" signature="_fatal_error(self, exc, message='Fatal error on transport')" />
        <scope doc="Called when some SSL data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <import module="collections" />
      <import module="compat" />
      <variable citdl="Logger" name="logger" />
      <import module="protocols" />
      <import module="ssl" />
      <import module="transports" />
      <import module="warnings" />
    </scope>
    <scope doc="curses.panel&#10;Module for using panels with curses." ilk="blob" lang="Python3" name="curses.panel">
      <scope ilk="function" name="bottom_panel" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <scope ilk="function" name="new_panel" />
      <scope ilk="function" name="top_panel" />
      <scope ilk="function" name="update_panels" />
      <variable citdl="str" name="version" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-aix4.IN">
      <scope ilk="function" name="BAT_ESEG" signature="BAT_ESEG(dbatu)" />
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BT_128K" />
      <variable citdl="int" name="BT_128M" />
      <variable citdl="int" name="BT_16M" />
      <variable citdl="int" name="BT_1M" />
      <variable citdl="int" name="BT_256K" />
      <variable citdl="int" name="BT_256M" />
      <variable citdl="int" name="BT_2M" />
      <variable citdl="int" name="BT_32M" />
      <variable citdl="int" name="BT_4M" />
      <variable citdl="int" name="BT_512K" />
      <variable citdl="int" name="BT_64M" />
      <variable citdl="int" name="BT_8M" />
      <variable citdl="int" name="BT_NOACCESS" />
      <variable citdl="int" name="BT_RDONLY" />
      <variable citdl="int" name="BT_VP" />
      <variable citdl="int" name="BT_VS" />
      <variable citdl="int" name="BT_WRITE" />
      <scope ilk="function" name="BUID_7F_SRVAL" signature="BUID_7F_SRVAL(raddr)" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="CR_EQ" />
      <variable citdl="int" name="CR_FEX" />
      <variable citdl="int" name="CR_FX" />
      <variable citdl="int" name="CR_GT" />
      <variable citdl="int" name="CR_LT" />
      <variable citdl="int" name="CR_OX" />
      <variable citdl="int" name="CR_SO" />
      <variable citdl="int" name="CR_VX" />
      <variable citdl="int" name="DEFAULT_GPR" />
      <variable citdl="int" name="DEFAULT_MSR" />
      <variable citdl="int" name="DEFAULT_USER_MSR" />
      <variable citdl="int" name="DSISR_DABR" />
      <variable citdl="int" name="DSISR_DRST" />
      <variable citdl="int" name="DSISR_EAR" />
      <variable citdl="int" name="DSISR_FPIO" />
      <variable citdl="int" name="DSISR_IO" />
      <variable citdl="int" name="DSISR_LOCK" />
      <variable citdl="int" name="DSISR_LOOP" />
      <variable citdl="int" name="DSISR_PFT" />
      <variable citdl="int" name="DSISR_PROT" />
      <variable citdl="int" name="DSISR_SEGB" />
      <variable citdl="int" name="DSISR_ST" />
      <variable citdl="int" name="INADDR_ALLHOSTS_GROUP" />
      <variable citdl="int" name="INADDR_ANY" />
      <variable citdl="int" name="INADDR_BROADCAST" />
      <variable citdl="int" name="INADDR_LOOPBACK" />
      <variable citdl="int" name="INADDR_MAX_LOCAL_GROUP" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INADDR_UNSPEC_GROUP" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_TIMESERVER" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_BIP" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_LOCAL" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="MAX_BAT_SIZE" />
      <variable citdl="int" name="MIN_BAT_SIZE" />
      <variable citdl="int" name="MSR_AL" />
      <variable citdl="int" name="MSR_BE" />
      <variable citdl="int" name="MSR_DR" />
      <variable citdl="int" name="MSR_EE" />
      <variable citdl="int" name="MSR_FE" />
      <variable citdl="int" name="MSR_FE0" />
      <variable citdl="int" name="MSR_FE1" />
      <variable citdl="int" name="MSR_FP" />
      <variable citdl="int" name="MSR_IE" />
      <variable citdl="int" name="MSR_IP" />
      <variable citdl="int" name="MSR_IR" />
      <variable citdl="int" name="MSR_ME" />
      <variable citdl="int" name="MSR_PM" />
      <variable citdl="int" name="MSR_PR" />
      <variable citdl="int" name="MSR_SE" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="SRR_IS_GUARD" />
      <variable citdl="int" name="SRR_IS_IIO" />
      <variable citdl="int" name="SRR_IS_ISPEC" />
      <variable citdl="int" name="SRR_IS_LOOP" />
      <variable citdl="int" name="SRR_IS_PFT" />
      <variable citdl="int" name="SRR_IS_PROT" />
      <variable citdl="int" name="SRR_PR_FPEN" />
      <variable citdl="int" name="SRR_PR_IMPRE" />
      <variable citdl="int" name="SRR_PR_INVAL" />
      <variable citdl="int" name="SRR_PR_PRIV" />
      <variable citdl="int" name="SRR_PR_TRAP" />
      <variable citdl="int" name="XER_CA" />
      <scope ilk="function" name="XER_COMP_BYTE" signature="XER_COMP_BYTE(xer)" />
      <scope ilk="function" name="XER_LENGTH" signature="XER_LENGTH(xer)" />
      <variable citdl="int" name="XER_OV" />
      <variable citdl="int" name="XER_SO" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="multiprocessing.popen_spawn_posix">
      <scope classrefs="Popen" doc="&#10;" ilk="class" name="Popen">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, process_obj)" />
        <scope ilk="function" name="_launch" signature="_launch(self, process_obj)" />
        <scope ilk="function" name="duplicate_for_child" signature="duplicate_for_child(self, fd)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="context" />
      <import module="io" />
      <import module="os" />
      <import module="popen_fork" />
      <import module="reduction" />
      <import module="spawn" />
      <import module="util" />
    </scope>
    <scope doc="distutils.msvccompiler&#10;Contains MSVCCompiler, an implementation of the abstract CCompiler class for the Microsoft Visual Studio." ilk="blob" lang="Python3" name="distutils.msvccompiler">
      <scope classrefs="object" doc="Abstract base class to define the interface that must be implemented&#10;by real compiler classes.  Also has some utility methods used by several compiler classes.  The basic idea behind a compiler abstraction class is that each instance can be used for all the compile/link steps in building a single project.  Thus, attributes common to all of those compile and link steps -- include directories, macros to define, libraries to link against, etc. -- are attributes of the compiler instance.  To allow for variability in how individual files are treated, most of those attributes may be varied on a per-compilation or per-link basis." ilk="class" name="CCompiler">
        <scope doc="Add 'libname' to the list of libraries that will be included&#10;in all links driven by this compiler object." ilk="function" name="add_library" signature="add_library(self, libname)" />
        <scope doc="Define the executables (and options for them) that will be&#10;run to perform the various stages of compilation." ilk="function" name="set_executables" signature="set_executables(self, **kwargs)" />
        <scope doc="Add 'object' to the list of object files (or analogues, such&#10;as explicitly named library files or the output of &quot;resource&#10;compilers&quot;) to be included in every link driven by this&#10;compiler object." ilk="function" name="add_link_object" signature="add_link_object(self, object)" />
        <scope doc="Detect the language of a given file, or list of files." ilk="function" name="detect_language" signature="detect_language(self, sources)" />
        <scope ilk="function" name="shared_object_filename" signature="shared_object_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for libraries specified to 'add_library()' and&#10;'set_libraries()'." ilk="function" name="add_library_dir" signature="add_library_dir(self, dir)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope ilk="function" name="link_shared_lib" signature="link_shared_lib(self, objects, output_libname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope ilk="function" name="move_file" signature="move_file(self, src, dst)" />
        <scope doc="Return true if we need to relink the files listed in&#10;'objects' to recreate 'output_file'." ilk="function" name="_need_link" signature="_need_link(self, objects, output_file)" />
        <scope ilk="function" name="_find_macro" signature="_find_macro(self, name)" />
        <scope doc="Set the list of directories that will be searched to 'dirs'&#10;(a list of strings)." ilk="function" name="set_include_dirs" signature="set_include_dirs(self, dirs)" />
        <scope doc="Typecheck and fix up some arguments supplied to various&#10;methods." ilk="function" name="_fix_object_args" signature="_fix_object_args(self, objects, output_dir)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
        <scope ilk="function" name="_get_cc_args" signature="_get_cc_args(self, pp_opts, debug, before)" />
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope ilk="function" name="set_executable" signature="set_executable(self, key, value)" />
        <scope doc="Typecheck and fix-up some of the arguments to the&#10;'compile()' method, and return fixed-up values." ilk="function" name="_fix_compile_args" signature="_fix_compile_args(self, output_dir, macros, include_dirs)" />
        <scope ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope ilk="function" name="executable_filename" signature="executable_filename(self, basename, strip_dir=0, output_dir='')" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Set the list of libraries to be included in all links driven&#10;by this compiler object to 'libnames' (a list of strings)." ilk="function" name="set_libraries" signature="set_libraries(self, libnames)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Set the list of library search directories to 'dirs' (a list&#10;of strings)." ilk="function" name="set_library_dirs" signature="set_library_dirs(self, dirs)" />
        <scope doc="Undefine a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="undefine_macro" signature="undefine_macro(self, name)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for shared libraries at runtime." ilk="function" name="add_runtime_library_dir" signature="add_runtime_library_dir(self, dir)" />
        <scope doc="Preprocess a single C/C++ source file, named in 'source'." ilk="function" name="preprocess" signature="preprocess(self, source, output_file=None, macros=None, include_dirs=None, extra_preargs=None, extra_postargs=None)" />
        <scope ilk="function" name="library_filename" signature="library_filename(self, libname, lib_type='static', strip_dir=0, output_dir='')" />
        <scope ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Typecheck and fix up some of the arguments supplied to the&#10;'link_*' methods." ilk="function" name="_fix_lib_args" signature="_fix_lib_args(self, libraries, library_dirs, runtime_library_dirs)" />
        <scope doc="Set the list of object files (or analogues) to be included&#10;in every link to 'objects'." ilk="function" name="set_link_objects" signature="set_link_objects(self, objects)" />
        <scope doc="Return a boolean indicating whether funcname is supported on&#10;the current platform." ilk="function" name="has_function" signature="has_function(self, funcname, includes=None, include_dirs=None, libraries=None, library_dirs=None)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope doc="Compile 'src' to product 'obj'." ilk="function" name="_compile" signature="_compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)" />
        <scope doc="Set the list of directories to search for shared libraries&#10;at runtime to 'dirs' (a list of strings)." ilk="function" name="set_runtime_library_dirs" signature="set_runtime_library_dirs(self, dirs)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Process arguments and decide which source files to compile." ilk="function" name="_setup_compile" signature="_setup_compile(self, outdir, macros, incdirs, sources, depends, extra)" />
        <scope ilk="function" name="spawn" signature="spawn(self, cmd)" />
        <scope ilk="function" name="link_executable" signature="link_executable(self, objects, output_progname, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, target_lang=None)" />
        <scope doc="Decide which souce files must be recompiled." ilk="function" name="_prep_compile" signature="_prep_compile(self, sources, output_dir, depends=None)" />
        <scope ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="link_shared_object" signature="link_shared_object(self, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Define a preprocessor macro for all compilations driven by&#10;this compiler object." ilk="function" name="define_macro" signature="define_macro(self, name, value=None)" />
        <scope doc="Ensures that every element of 'definitions' is a valid macro&#10;definition, ie." ilk="function" name="_check_macro_definitions" signature="_check_macro_definitions(self, definitions)" />
        <scope doc="Add 'dir' to the list of directories that will be searched&#10;for header files." ilk="function" name="add_include_dir" signature="add_include_dir(self, dir)" />
      </scope>
      <scope classrefs="CCompilerError" doc="Failure to compile one or more C/C++ source files.&#10;" ilk="class" name="CompileError" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="CCompilerError" doc="Failure to create a static library from one or more C/C++ object&#10;files." ilk="class" name="LibError" />
      <scope classrefs="CCompilerError" doc="Failure to link one or more C/C++ object files into an executable&#10;or shared library file." ilk="class" name="LinkError" />
      <scope classrefs="CCompiler" doc="Concrete class that implements an interface to Microsoft Visual C++,&#10;as defined by the CCompiler abstract class." ilk="class" name="MSVCCompiler">
        <scope doc="Get a list of devstudio directories (include, lib or path)." ilk="function" name="get_msvc_paths" signature="get_msvc_paths(self, path, platform='x86')" />
        <scope doc="Search the specified list of directories for a static or&#10;shared library file 'lib' and return the full path to that&#10;file." ilk="function" name="find_library_file" signature="find_library_file(self, dirs, lib, debug=0)" />
        <scope doc="Compile one or more source files." ilk="function" name="compile" signature="compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)" />
        <scope ilk="function" name="object_filenames" signature="object_filenames(self, source_filenames, strip_dir=0, output_dir='')" />
        <scope ilk="function" name="initialize" signature="initialize(self)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for runtime libraries." ilk="function" name="runtime_library_dir_option" signature="runtime_library_dir_option(self, dir)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, verbose=0, dry_run=0, force=0)" />
        <scope doc="Return the compiler option to add 'dir' to the list of&#10;directories searched for libraries." ilk="function" name="library_dir_option" signature="library_dir_option(self, dir)" />
        <scope doc="Link a bunch of stuff together to create an executable or&#10;shared library file." ilk="function" name="link" signature="link(self, target_desc, objects, output_filename, output_dir=None, libraries=None, library_dirs=None, runtime_library_dirs=None, export_symbols=None, debug=0, extra_preargs=None, extra_postargs=None, build_temp=None, target_lang=None)" />
        <scope doc="Set environment variable 'name' to an MSVC path type value." ilk="function" name="set_path_env_var" signature="set_path_env_var(self, name)" />
        <scope doc="Link a bunch of stuff together to create a static library&#10;file." ilk="function" name="create_static_lib" signature="create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)" />
        <scope doc="Return path to an MSVC executable program." ilk="function" name="find_exe" signature="find_exe(self, exe)" />
        <scope doc="Return the compiler option to add 'lib' to the list of&#10;libraries linked into the shared library or executable." ilk="function" name="library_option" signature="library_option(self, lib)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="MacroExpander">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, version)" />
        <scope ilk="function" name="set_macro" signature="set_macro(self, macro, path, key)" />
        <scope ilk="function" name="sub" signature="sub(self, s)" />
        <scope ilk="function" name="load_macros" signature="load_macros(self, version)" />
      </scope>
      <scope ilk="function" name="convert_mbcs" signature="convert_mbcs(s)" />
      <scope doc="Generate linker options for searching library directories&#10;and linking with specific libraries." ilk="function" name="gen_lib_options" signature="gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)" />
      <scope doc="Generate C pre-processor options (-D, -U, -I) as used by at&#10;least two types of compilers: the typical Unix compiler and&#10;Visual C++." ilk="function" name="gen_preprocess_options" signature="gen_preprocess_options(macros, include_dirs)" />
      <scope doc="Return the processor architecture." ilk="function" name="get_build_architecture" signature="get_build_architecture()" />
      <scope doc="Return the version of MSVC that was used to build Python." ilk="function" name="get_build_version" signature="get_build_version()" />
      <import module="log" />
      <scope doc="Return a list of normalized paths with duplicates removed." ilk="function" name="normalize_and_reduce_paths" signature="normalize_and_reduce_paths(paths)" />
      <import module="os" />
      <scope doc="Return list of registry keys." ilk="function" name="read_keys" signature="read_keys(base, key)" />
      <scope doc="Return dict of registry keys and values." ilk="function" name="read_values" signature="read_values(base, key)" />
      <import module="sys" />
    </scope>
    <scope doc="A multi-producer, multi-consumer queue.&#10;" ilk="blob" lang="Python3" name="queue">
      <scope classrefs="Exception" doc="Exception raised by Queue.get(block=0)/get_nowait().&#10;" ilk="class" name="Empty" />
      <scope classrefs="Exception" doc="Exception raised by Queue.put(block=0)/put_nowait().&#10;" ilk="class" name="Full" />
      <scope classrefs="Queue" doc="Variant of Queue that retrieves most recently added entries first.&#10;" ilk="class" name="LifoQueue">
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
      </scope>
      <scope classrefs="Queue" doc="Variant of Queue that retrieves open entries in priority order (lowest first).&#10;Entries are typically tuples of the form:  (priority number, data)." ilk="class" name="PriorityQueue">
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope ilk="function" name="_put" signature="_put(self, item)" />
        <scope ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope ilk="function" name="_get" signature="_get(self)" />
      </scope>
      <scope classrefs="object" doc="Create a queue object with a given maximum size.&#10;If maxsize is &lt;= 0, the queue size is infinite." ilk="class" name="Queue">
        <scope doc="Remove and return an item from the queue." ilk="function" name="get" signature="get(self, block=True, timeout=None)" />
        <scope doc="# Initialize the queue representation" ilk="function" name="_init" signature="_init(self, maxsize)" />
        <scope doc="Put an item into the queue without blocking." ilk="function" name="put_nowait" signature="put_nowait(self, item)" />
        <scope doc="# Get an item from the queue" ilk="function" name="_get" signature="_get(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, maxsize=0)" />
        <scope ilk="function" name="_qsize" signature="_qsize(self)" />
        <scope doc="Put an item into the queue." ilk="function" name="put" signature="put(self, item, block=True, timeout=None)" />
        <scope doc="Remove and return an item from the queue without blocking." ilk="function" name="get_nowait" signature="get_nowait(self)" />
        <scope doc="Return True if the queue is empty, False otherwise (not&#10;reliable!)." ilk="function" name="empty" signature="empty(self)" />
        <scope doc="Indicate that a formerly enqueued task is complete." ilk="function" name="task_done" signature="task_done(self)" />
        <scope doc="# Put a new item in the queue" ilk="function" name="_put" signature="_put(self, item)" />
        <scope doc="Blocks until all items in the Queue have been gotten and&#10;processed." ilk="function" name="join" signature="join(self)" />
        <scope doc="Return the approximate size of the queue (not reliable!)." ilk="function" name="qsize" signature="qsize(self)" />
        <scope doc="Return True if the queue is full, False otherwise (not&#10;reliable!)." ilk="function" name="full" signature="full(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <scope doc="Pop the smallest item off the heap, maintaining the heap&#10;invariant." ilk="function" name="heappop" />
      <scope doc="heappush(heap, item) -&gt; None. Push item onto heap, maintaining the heap invariant." ilk="function" name="heappush" signature="heappush(heap, item) -&gt; None. Push item onto heap, maintaining the heap invariant." />
      <import module="threading" />
      <scope doc="Monotonic clock, cannot go backward." ilk="function" name="time" returns="float" signature="monotonic() -&gt; float" />
    </scope>
    <scope doc="Internal support module for sre&#10;" ilk="blob" lang="Python3" name="sre_compile">
      <variable citdl="_NamedIntConstant" name="ANY" />
      <variable citdl="_NamedIntConstant" name="ANY_ALL" />
      <variable citdl="_NamedIntConstant" name="ASSERT" />
      <variable citdl="_NamedIntConstant" name="ASSERT_NOT" />
      <variable citdl="_NamedIntConstant" name="AT" />
      <variable citdl="list" name="ATCODES" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_BEGINNING_STRING" />
      <variable citdl="_NamedIntConstant" name="AT_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_END" />
      <variable citdl="_NamedIntConstant" name="AT_END_LINE" />
      <variable citdl="_NamedIntConstant" name="AT_END_STRING" />
      <variable citdl="dict" name="AT_LOCALE" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_LOC_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_MULTILINE" />
      <variable citdl="_NamedIntConstant" name="AT_NON_BOUNDARY" />
      <variable citdl="dict" name="AT_UNICODE" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="AT_UNI_NON_BOUNDARY" />
      <variable citdl="_NamedIntConstant" name="BIGCHARSET" />
      <variable citdl="_NamedIntConstant" name="BRANCH" />
      <variable citdl="_NamedIntConstant" name="CALL" />
      <variable citdl="_NamedIntConstant" name="CATEGORY" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_LOC_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_DIGIT" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_LINEBREAK" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_NOT_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_SPACE" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_UNI_WORD" />
      <variable citdl="_NamedIntConstant" name="CATEGORY_WORD" />
      <variable citdl="_NamedIntConstant" name="CHARSET" />
      <variable citdl="list" name="CHCODES" />
      <variable citdl="dict" name="CH_LOCALE" />
      <variable citdl="dict" name="CH_UNICODE" />
      <variable citdl="_NamedIntConstant" name="FAILURE" />
      <variable citdl="_NamedIntConstant" name="GROUPREF" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_EXISTS" />
      <variable citdl="_NamedIntConstant" name="GROUPREF_IGNORE" />
      <variable citdl="_NamedIntConstant" name="IN" />
      <variable citdl="_NamedIntConstant" name="INFO" />
      <variable citdl="_NamedIntConstant" name="IN_IGNORE" />
      <variable citdl="_NamedIntConstant" name="JUMP" />
      <variable citdl="_NamedIntConstant" name="LITERAL" />
      <variable citdl="_NamedIntConstant" name="LITERAL_IGNORE" />
      <variable citdl="int" name="MAGIC" />
      <variable citdl="_NamedIntConstant" name="MARK" />
      <variable citdl="int" name="MAXCODE" />
      <variable citdl="int" name="MAXGROUPS" />
      <variable citdl="_NamedIntConstant" name="MAXREPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MAX_UNTIL" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT" />
      <variable citdl="_NamedIntConstant" name="MIN_REPEAT_ONE" />
      <variable citdl="_NamedIntConstant" name="MIN_UNTIL" />
      <variable citdl="_NamedIntConstant" name="NEGATE" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL" />
      <variable citdl="_NamedIntConstant" name="NOT_LITERAL_IGNORE" />
      <variable citdl="list" name="OPCODES" />
      <variable citdl="dict" name="OP_IGNORE" />
      <variable citdl="_NamedIntConstant" name="RANGE" />
      <variable citdl="_NamedIntConstant" name="RANGE_IGNORE" />
      <variable citdl="_NamedIntConstant" name="REPEAT" />
      <variable citdl="_NamedIntConstant" name="REPEAT_ONE" />
      <variable citdl="int" name="SRE_FLAG_ASCII" />
      <variable citdl="int" name="SRE_FLAG_DEBUG" />
      <variable citdl="int" name="SRE_FLAG_DOTALL" />
      <variable citdl="int" name="SRE_FLAG_IGNORECASE" />
      <variable citdl="int" name="SRE_FLAG_LOCALE" />
      <variable citdl="int" name="SRE_FLAG_MULTILINE" />
      <variable citdl="int" name="SRE_FLAG_TEMPLATE" />
      <variable citdl="int" name="SRE_FLAG_UNICODE" />
      <variable citdl="int" name="SRE_FLAG_VERBOSE" />
      <variable citdl="int" name="SRE_INFO_CHARSET" />
      <variable citdl="int" name="SRE_INFO_LITERAL" />
      <variable citdl="int" name="SRE_INFO_PREFIX" />
      <variable citdl="_NamedIntConstant" name="SUBPATTERN" />
      <variable citdl="_NamedIntConstant" name="SUCCESS" />
      <import module="_sre" />
      <scope ilk="function" name="compile" signature="compile(p, flags=0)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, pattern=None, pos=None)" />
      </scope>
      <scope ilk="function" name="isstring" signature="isstring(obj)" />
      <import module="sre_parse" />
    </scope>
    <scope doc="Generic output formatting.&#10;Formatter objects transform an abstract flow of formatting events into specific output events on writer objects. Formatters manage several stack structures to allow various properties of a writer object to be changed and restored; writers need not be able to handle relative changes nor any sort of ``change back'' operation. Specific writer properties which may be controlled via formatter objects are horizontal alignment, font, and left margin indentations. A mechanism is provided which supports providing arbitrary, non-exclusive style settings to a writer as well. Additional interfaces facilitate formatting events which are not reversible, such as paragraph separation." ilk="blob" lang="Python3" name="formatter">
      <variable citdl="NoneType" name="AS_IS" />
      <scope classrefs="object" doc="The standard formatter.&#10;This implementation has demonstrated wide applicability to many writers, and may be used directly in most circumstances.  It has been used to implement a full-featured World Wide Web browser." ilk="class" name="AbstractFormatter">
        <scope ilk="function" name="add_hor_rule" signature="add_hor_rule(self, *args, **kw)" />
        <scope ilk="function" name="flush_softspace" signature="flush_softspace(self)" />
        <scope ilk="function" name="push_alignment" signature="push_alignment(self, align)" />
        <scope ilk="function" name="end_paragraph" signature="end_paragraph(self, blankline)" />
        <scope ilk="function" name="pop_margin" signature="pop_margin(self)" />
        <scope ilk="function" name="format_counter" signature="format_counter(self, format, counter)" />
        <scope ilk="function" name="add_label_data" signature="add_label_data(self, format, counter, blankline=None)" />
        <scope ilk="function" name="push_margin" signature="push_margin(self, margin)" />
        <scope ilk="function" name="add_line_break" signature="add_line_break(self)" />
        <scope ilk="function" name="push_font" signature="push_font(self, font)" />
        <scope ilk="function" name="pop_alignment" signature="pop_alignment(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, writer)" />
        <scope ilk="function" name="set_spacing" signature="set_spacing(self, spacing)" />
        <scope ilk="function" name="format_letter" signature="format_letter(self, case, counter)" />
        <scope ilk="function" name="add_literal_data" signature="add_literal_data(self, data)" />
        <scope ilk="function" name="pop_style" signature="pop_style(self, n=1)" />
        <scope ilk="function" name="add_flowing_data" signature="add_flowing_data(self, data)" />
        <scope ilk="function" name="push_style" signature="push_style(self, *styles)" />
        <scope ilk="function" name="assert_line_data" signature="assert_line_data(self, flag=1)" />
        <scope ilk="function" name="format_roman" signature="format_roman(self, case, counter)" />
        <scope ilk="function" name="pop_font" signature="pop_font(self)" />
      </scope>
      <scope classrefs="NullWriter" doc="A writer which can be used in debugging formatters, but not much else.&#10;Each method simply announces itself by printing its name and arguments on standard output." ilk="class" name="AbstractWriter">
        <scope ilk="function" name="send_literal_data" signature="send_literal_data(self, data)" />
        <scope ilk="function" name="send_paragraph" signature="send_paragraph(self, blankline)" />
        <scope ilk="function" name="new_styles" signature="new_styles(self, styles)" />
        <scope ilk="function" name="send_hor_rule" signature="send_hor_rule(self, *args, **kw)" />
        <scope ilk="function" name="new_margin" signature="new_margin(self, margin, level)" />
        <scope ilk="function" name="new_font" signature="new_font(self, font)" />
        <scope ilk="function" name="new_alignment" signature="new_alignment(self, align)" />
        <scope ilk="function" name="send_line_break" signature="send_line_break(self)" />
        <scope ilk="function" name="new_spacing" signature="new_spacing(self, spacing)" />
        <scope ilk="function" name="send_label_data" signature="send_label_data(self, data)" />
        <scope ilk="function" name="send_flowing_data" signature="send_flowing_data(self, data)" />
      </scope>
      <scope classrefs="NullWriter" doc="Simple writer class which writes output on the file object passed in&#10;as the file parameter or, if file is omitted, on standard output.  The output is simply word-wrapped to the number of columns specified by the maxcol parameter.  This class is suitable for reflowing a sequence of paragraphs." ilk="class" name="DumbWriter">
        <scope ilk="function" name="send_literal_data" signature="send_literal_data(self, data)" />
        <scope ilk="function" name="send_paragraph" signature="send_paragraph(self, blankline)" />
        <scope ilk="function" name="send_hor_rule" signature="send_hor_rule(self, *args, **kw)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="send_flowing_data" signature="send_flowing_data(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file=None, maxcol=72)" />
        <scope ilk="function" name="send_line_break" signature="send_line_break(self)" />
      </scope>
      <scope classrefs="object" doc="A formatter which does nothing.&#10;If the writer parameter is omitted, a NullWriter instance is created. No methods of the writer are called by NullFormatter instances.  Implementations should inherit from this class if implementing a writer interface but don't need to inherit any implementation." ilk="class" name="NullFormatter">
        <scope ilk="function" name="add_hor_rule" signature="add_hor_rule(self, *args, **kw)" />
        <scope ilk="function" name="flush_softspace" signature="flush_softspace(self)" />
        <scope ilk="function" name="push_alignment" signature="push_alignment(self, align)" />
        <scope ilk="function" name="end_paragraph" signature="end_paragraph(self, blankline)" />
        <scope ilk="function" name="pop_margin" signature="pop_margin(self)" />
        <scope ilk="function" name="push_style" signature="push_style(self, *styles)" />
        <scope ilk="function" name="pop_style" signature="pop_style(self, n=1)" />
        <scope ilk="function" name="add_label_data" signature="add_label_data(self, format, counter, blankline=None)" />
        <scope ilk="function" name="set_spacing" signature="set_spacing(self, spacing)" />
        <scope ilk="function" name="add_line_break" signature="add_line_break(self)" />
        <scope ilk="function" name="push_font" signature="push_font(self, x)" />
        <scope ilk="function" name="pop_alignment" signature="pop_alignment(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, writer=None)" />
        <scope ilk="function" name="add_literal_data" signature="add_literal_data(self, data)" />
        <scope ilk="function" name="push_margin" signature="push_margin(self, margin)" />
        <scope ilk="function" name="add_flowing_data" signature="add_flowing_data(self, data)" />
        <scope ilk="function" name="pop_font" signature="pop_font(self)" />
        <scope ilk="function" name="assert_line_data" signature="assert_line_data(self, flag=1)" />
      </scope>
      <scope classrefs="object" doc="Minimal writer interface to use in testing &amp; inheritance.&#10;A writer which only provides the interface definition; no actions are taken on any methods.  This should be the base class for all writers which do not need to inherit any implementation methods." ilk="class" name="NullWriter">
        <scope ilk="function" name="send_literal_data" signature="send_literal_data(self, data)" />
        <scope ilk="function" name="new_styles" signature="new_styles(self, styles)" />
        <scope ilk="function" name="send_hor_rule" signature="send_hor_rule(self, *args, **kw)" />
        <scope ilk="function" name="new_font" signature="new_font(self, font)" />
        <scope ilk="function" name="send_flowing_data" signature="send_flowing_data(self, data)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="new_spacing" signature="new_spacing(self, spacing)" />
        <scope ilk="function" name="send_label_data" signature="send_label_data(self, data)" />
        <scope ilk="function" name="send_paragraph" signature="send_paragraph(self, blankline)" />
        <scope ilk="function" name="new_margin" signature="new_margin(self, margin, level)" />
        <scope ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="new_alignment" signature="new_alignment(self, align)" />
        <scope ilk="function" name="send_line_break" signature="send_line_break(self)" />
      </scope>
      <import module="sys" />
      <scope ilk="function" name="test" signature="test(file=None)" />
      <import module="warnings" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/sys/types.h&#10;" ilk="blob" lang="Python3" name="plat-sunos5.TYPES">
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="CLK_TCK" />
      <variable citdl="int" name="CLOCKS_PER_SEC" />
      <variable citdl="int" name="CLOCK_HIGHRES" />
      <variable citdl="int" name="CLOCK_MAX" />
      <variable citdl="int" name="CLOCK_PROCESS_CPUTIME_ID" />
      <variable citdl="int" name="CLOCK_PROF" />
      <variable citdl="int" name="CLOCK_REALTIME" />
      <variable citdl="int" name="CLOCK_THREAD_CPUTIME_ID" />
      <variable citdl="int" name="CLOCK_VIRTUAL" />
      <variable citdl="int" name="CLONE_FILES" />
      <variable citdl="int" name="CLONE_FS" />
      <variable citdl="int" name="CLONE_PID" />
      <variable citdl="int" name="CLONE_PTRACE" />
      <variable citdl="int" name="CLONE_SIGHAND" />
      <variable citdl="int" name="CLONE_VFORK" />
      <variable citdl="int" name="CLONE_VM" />
      <variable citdl="int" name="CSIGNAL" />
      <variable citdl="int" name="DST_AUST" />
      <variable citdl="int" name="DST_AUSTALT" />
      <variable citdl="int" name="DST_CAN" />
      <variable citdl="int" name="DST_EET" />
      <variable citdl="int" name="DST_GB" />
      <variable citdl="int" name="DST_MET" />
      <variable citdl="int" name="DST_NONE" />
      <variable citdl="int" name="DST_RUM" />
      <variable citdl="int" name="DST_TUR" />
      <variable citdl="int" name="DST_USA" />
      <variable citdl="int" name="DST_WET" />
      <variable citdl="int" name="FD_SETSIZE" />
      <scope ilk="function" name="FD_ZERO" signature="FD_ZERO(p)" />
      <scope ilk="function" name="INT16_C" signature="INT16_C(c)" />
      <variable citdl="int" name="INT16_MAX" />
      <variable citdl="int" name="INT16_MIN" />
      <scope ilk="function" name="INT32_C" signature="INT32_C(c)" />
      <variable citdl="int" name="INT32_MAX" />
      <variable citdl="int" name="INT32_MIN" />
      <scope ilk="function" name="INT64_C" signature="INT64_C(c)" />
      <scope doc="# Included from sys/int_const.h" ilk="function" name="INT8_C" signature="INT8_C(c)" />
      <variable citdl="int" name="INT8_MAX" />
      <variable citdl="int" name="INT8_MIN" />
      <scope ilk="function" name="INTMAX_C" signature="INTMAX_C(c)" />
      <variable citdl="int" name="INTMAX_MAX" />
      <variable citdl="int" name="INTMAX_MIN" />
      <variable citdl="int" name="INT_LEAST16_MAX" />
      <variable citdl="int" name="INT_LEAST16_MIN" />
      <variable citdl="int" name="INT_LEAST32_MAX" />
      <variable citdl="int" name="INT_LEAST32_MIN" />
      <variable citdl="int" name="INT_LEAST8_MAX" />
      <variable citdl="int" name="INT_LEAST8_MIN" />
      <variable citdl="int" name="INT_MAX" />
      <variable citdl="int" name="INT_MIN" />
      <scope ilk="function" name="ITIMERSPEC_OVERFLOW" signature="ITIMERSPEC_OVERFLOW(it)" />
      <scope ilk="function" name="ITIMERVAL_OVERFLOW" signature="ITIMERVAL_OVERFLOW(itv)" />
      <variable citdl="int" name="ITIMER_PROF" />
      <variable citdl="int" name="ITIMER_REAL" />
      <variable citdl="int" name="ITIMER_REALPROF" />
      <variable citdl="int" name="ITIMER_VIRTUAL" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="LONG_MAX" />
      <variable citdl="int" name="LONG_MIN" />
      <variable citdl="int" name="MICROSEC" />
      <variable citdl="int" name="MILLISEC" />
      <scope ilk="function" name="MSEC_TO_TICK" signature="MSEC_TO_TICK(msec)" />
      <scope ilk="function" name="MSEC_TO_TICK_ROUNDUP" signature="MSEC_TO_TICK_ROUNDUP(msec)" />
      <scope ilk="function" name="MUTEX_HELD" signature="MUTEX_HELD(x)" />
      <variable citdl="int" name="NANOSEC" />
      <variable citdl="int" name="NBBY" />
      <scope ilk="function" name="NSEC_TO_TICK" signature="NSEC_TO_TICK(nsec)" />
      <scope ilk="function" name="NSEC_TO_TICK_ROUNDUP" signature="NSEC_TO_TICK_ROUNDUP(nsec)" />
      <variable citdl="int" name="NULL" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="str" name="PRIX16" />
      <variable citdl="str" name="PRIX32" />
      <variable citdl="str" name="PRIX64" />
      <variable citdl="str" name="PRIX8" />
      <variable citdl="str" name="PRIXLEAST16" />
      <variable citdl="str" name="PRIXLEAST32" />
      <variable citdl="str" name="PRIXLEAST64" />
      <variable citdl="str" name="PRIXLEAST8" />
      <variable citdl="str" name="PRId16" />
      <variable citdl="str" name="PRId32" />
      <variable citdl="str" name="PRId64" />
      <variable citdl="str" name="PRId8" />
      <variable citdl="str" name="PRIdLEAST16" />
      <variable citdl="str" name="PRIdLEAST32" />
      <variable citdl="str" name="PRIdLEAST64" />
      <variable citdl="str" name="PRIdLEAST8" />
      <variable citdl="str" name="PRIdMAX" />
      <variable citdl="str" name="PRIi16" />
      <variable citdl="str" name="PRIi32" />
      <variable citdl="str" name="PRIi64" />
      <variable citdl="str" name="PRIi8" />
      <variable citdl="str" name="PRIiLEAST16" />
      <variable citdl="str" name="PRIiLEAST32" />
      <variable citdl="str" name="PRIiLEAST64" />
      <variable citdl="str" name="PRIiLEAST8" />
      <variable citdl="str" name="PRIo16" />
      <variable citdl="str" name="PRIo32" />
      <variable citdl="str" name="PRIo64" />
      <variable citdl="str" name="PRIo8" />
      <variable citdl="str" name="PRIoLEAST16" />
      <variable citdl="str" name="PRIoLEAST32" />
      <variable citdl="str" name="PRIoLEAST64" />
      <variable citdl="str" name="PRIoLEAST8" />
      <variable citdl="str" name="PRIoMAX" />
      <variable citdl="str" name="PRIu16" />
      <variable citdl="str" name="PRIu32" />
      <variable citdl="str" name="PRIu64" />
      <variable citdl="str" name="PRIu8" />
      <variable citdl="str" name="PRIuLEAST16" />
      <variable citdl="str" name="PRIuLEAST32" />
      <variable citdl="str" name="PRIuLEAST64" />
      <variable citdl="str" name="PRIuLEAST8" />
      <variable citdl="str" name="PRIuMAX" />
      <variable citdl="str" name="PRIx16" />
      <variable citdl="str" name="PRIx32" />
      <variable citdl="str" name="PRIx64" />
      <variable citdl="str" name="PRIx8" />
      <variable citdl="str" name="PRIxLEAST16" />
      <variable citdl="str" name="PRIxLEAST32" />
      <variable citdl="str" name="PRIxLEAST64" />
      <variable citdl="str" name="PRIxLEAST8" />
      <variable citdl="str" name="PRIxMAX" />
      <variable citdl="int" name="P_MYID" />
      <variable citdl="int" name="SCHED_FIFO" />
      <variable citdl="int" name="SCHED_OTHER" />
      <variable citdl="int" name="SCHED_RR" />
      <variable citdl="str" name="SCNd16" />
      <variable citdl="str" name="SCNd32" />
      <variable citdl="str" name="SCNd64" />
      <variable citdl="str" name="SCNdMAX" />
      <variable citdl="str" name="SCNi16" />
      <variable citdl="str" name="SCNi32" />
      <variable citdl="str" name="SCNi64" />
      <variable citdl="str" name="SCNiMAX" />
      <variable citdl="str" name="SCNo16" />
      <variable citdl="str" name="SCNo32" />
      <variable citdl="str" name="SCNo64" />
      <variable citdl="str" name="SCNoMAX" />
      <variable citdl="str" name="SCNu16" />
      <variable citdl="str" name="SCNu32" />
      <variable citdl="str" name="SCNu64" />
      <variable citdl="str" name="SCNx16" />
      <variable citdl="str" name="SCNx32" />
      <variable citdl="str" name="SCNx64" />
      <variable citdl="str" name="SCNxMAX" />
      <variable citdl="int" name="SEC" />
      <scope ilk="function" name="SEC_TO_TICK" signature="SEC_TO_TICK(sec)" />
      <variable citdl="int" name="SHRT_MAX" />
      <variable citdl="int" name="SHRT_MIN" />
      <scope ilk="function" name="TICK_TO_MSEC" signature="TICK_TO_MSEC(tick)" />
      <scope ilk="function" name="TICK_TO_NSEC" signature="TICK_TO_NSEC(tick)" />
      <scope ilk="function" name="TICK_TO_SEC" signature="TICK_TO_SEC(tick)" />
      <scope ilk="function" name="TICK_TO_USEC" signature="TICK_TO_USEC(tick)" />
      <variable citdl="int" name="TIME32_MAX" />
      <variable citdl="int" name="TIME32_MIN" />
      <variable citdl="int" name="TIMER_ABSTIME" />
      <variable citdl="int" name="TIMER_RELTIME" />
      <scope doc="# Included from sys/time_impl.h" ilk="function" name="TIMESPEC_OVERFLOW" signature="TIMESPEC_OVERFLOW(ts)" />
      <scope ilk="function" name="TIMESTRUC_TO_TICK" signature="TIMESTRUC_TO_TICK(tsp)" />
      <scope ilk="function" name="TIMEVAL_OVERFLOW" signature="TIMEVAL_OVERFLOW(tv)" />
      <scope ilk="function" name="TIMEVAL_TO_TICK" signature="TIMEVAL_TO_TICK(tvp)" />
      <scope ilk="function" name="UINT16_C" signature="UINT16_C(c)" />
      <scope ilk="function" name="UINT32_C" signature="UINT32_C(c)" />
      <scope ilk="function" name="UINT64_C" signature="UINT64_C(c)" />
      <scope ilk="function" name="UINT8_C" signature="UINT8_C(c)" />
      <scope ilk="function" name="UINTMAX_C" signature="UINTMAX_C(c)" />
      <scope ilk="function" name="USEC_TO_TICK" signature="USEC_TO_TICK(usec)" />
      <scope ilk="function" name="USEC_TO_TICK_ROUNDUP" signature="USEC_TO_TICK_ROUNDUP(usec)" />
      <variable citdl="int" name="USHRT_MAX" />
      <scope ilk="function" name="major" signature="major(dev)" />
      <scope ilk="function" name="minor" signature="minor(dev)" />
    </scope>
    <scope doc="This module provides mechanisms to use signal handlers in Python.&#10;Functions:  alarm() -- cause SIGALRM after a specified time [Unix only] setitimer() -- cause a signal (described below) after a specified float time and the timer may restart then [Unix only] getitimer() -- get current value of timer [Unix only] signal() -- set the action for a given signal getsignal() -- get the signal action for a given signal pause() -- wait until a signal arrives [Unix only] default_int_handler() -- default SIGINT handler" ilk="blob" lang="Python3" name="_signal">
      <variable citdl="int" name="ITIMER_PROF" />
      <variable citdl="int" name="ITIMER_REAL" />
      <variable citdl="int" name="ITIMER_VIRTUAL" />
      <scope classrefs="OSError" doc="Base class for I/O related errors.&#10;" ilk="class" name="ItimerError" />
      <variable citdl="int" name="NSIG" />
      <variable citdl="int" name="SIGABRT" />
      <variable citdl="int" name="SIGALRM" />
      <variable citdl="int" name="SIGBUS" />
      <variable citdl="int" name="SIGCHLD" />
      <variable citdl="int" name="SIGCLD" />
      <variable citdl="int" name="SIGCONT" />
      <variable citdl="int" name="SIGFPE" />
      <variable citdl="int" name="SIGHUP" />
      <variable citdl="int" name="SIGILL" />
      <variable citdl="int" name="SIGINT" />
      <variable citdl="int" name="SIGIO" />
      <variable citdl="int" name="SIGIOT" />
      <variable citdl="int" name="SIGKILL" />
      <variable citdl="int" name="SIGPIPE" />
      <variable citdl="int" name="SIGPOLL" />
      <variable citdl="int" name="SIGPROF" />
      <variable citdl="int" name="SIGPWR" />
      <variable citdl="int" name="SIGQUIT" />
      <variable citdl="int" name="SIGRTMAX" />
      <variable citdl="int" name="SIGRTMIN" />
      <variable citdl="int" name="SIGSEGV" />
      <variable citdl="int" name="SIGSTOP" />
      <variable citdl="int" name="SIGSYS" />
      <variable citdl="int" name="SIGTERM" />
      <variable citdl="int" name="SIGTRAP" />
      <variable citdl="int" name="SIGTSTP" />
      <variable citdl="int" name="SIGTTIN" />
      <variable citdl="int" name="SIGTTOU" />
      <variable citdl="int" name="SIGURG" />
      <variable citdl="int" name="SIGUSR1" />
      <variable citdl="int" name="SIGUSR2" />
      <variable citdl="int" name="SIGVTALRM" />
      <variable citdl="int" name="SIGWINCH" />
      <variable citdl="int" name="SIGXCPU" />
      <variable citdl="int" name="SIGXFSZ" />
      <variable citdl="int" name="SIG_BLOCK" />
      <variable citdl="int" name="SIG_DFL" />
      <variable citdl="int" name="SIG_IGN" />
      <variable citdl="int" name="SIG_SETMASK" />
      <variable citdl="int" name="SIG_UNBLOCK" />
      <scope doc="Arrange for SIGALRM to arrive after the given number of&#10;seconds." ilk="function" name="alarm" />
      <scope doc="The default handler for SIGINT installed by Python." ilk="function" name="default_int_handler" signature="default_int_handler(...)" />
      <scope doc="Returns current value of given itimer." ilk="function" name="getitimer" />
      <scope doc="Return the current action for the given signal." ilk="function" name="getsignal" />
      <scope doc="Wait until a signal arrives." ilk="function" name="pause" />
      <scope doc="Send a signal to a thread." ilk="function" name="pthread_kill" />
      <scope doc="Fetch and/or change the signal mask of the calling thread." ilk="function" name="pthread_sigmask" />
      <scope doc="Sets the fd to be written to (with the signal number) when a&#10;signal comes in." ilk="function" name="set_wakeup_fd" signature="set_wakeup_fd(fd) -&gt; fd" />
      <scope doc="Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL or&#10;ITIMER_PROF)." ilk="function" name="setitimer" />
      <scope doc="Change system call restart behaviour." ilk="function" name="siginterrupt" />
      <scope doc="Set the action for the given signal." ilk="function" name="signal" />
      <scope doc="Examine pending signals." ilk="function" name="sigpending" />
      <scope doc="Like sigwaitinfo(), but with a timeout." ilk="function" name="sigtimedwait" />
      <scope doc="Wait for a signal." ilk="function" name="sigwait" />
      <scope doc="Wait synchronously until one of the signals in *sigset* is&#10;delivered." ilk="function" name="sigwaitinfo" />
      <scope classrefs="tuple" doc="struct_siginfo: Result from sigwaitinfo or sigtimedwait.&#10;This object may be accessed either as a tuple of (si_signo, si_code, si_errno, si_pid, si_uid, si_status, si_band), or via the attributes si_signo, si_code, and so on." ilk="class" name="struct_siginfo">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="Fixer that changes xrange(...) into range(...).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_xrange">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixXrange">
        <scope ilk="function" name="transform_range" signature="transform_range(self, node, results)" />
        <scope ilk="function" name="in_special_context" signature="in_special_context(self, node)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="start_tree" signature="start_tree(self, tree, filename)" />
        <scope ilk="function" name="transform_xrange" signature="transform_xrange(self, node, results)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope doc="Some fixers need to maintain tree-wide state." ilk="function" name="finish_tree" signature="finish_tree(self, tree, filename)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <variable citdl="set" name="consuming_calls" />
      <import module="fixer_base" />
      <import module="patcomp" />
    </scope>
    <scope doc="Calendar printing functions&#10;Note when comparing these calendars to the ones printed by cal(1): By default, these calendars have Monday as the first day of the week, and Sunday as the last (the European convention). Use setfirstweekday() to set the first day of the week (0=Monday, 6=Sunday)." ilk="blob" lang="Python3" name="calendar">
      <scope classrefs="object" doc="Base calendar class. This class doesn't do any formatting. It simply&#10;provides data to subclasses." ilk="class" name="Calendar">
        <scope doc="Return the data for the specified year ready for formatting&#10;(similar to yeardatescalendar())." ilk="function" name="yeardays2calendar" signature="yeardays2calendar(self, year, width=3)" />
        <scope doc="Like itermonthdates(), but will yield day numbers." ilk="function" name="itermonthdays" signature="itermonthdays(self, year, month)" />
        <scope doc="Return the data for the specified year ready for formatting&#10;(similar to yeardatescalendar())." ilk="function" name="yeardayscalendar" signature="yeardayscalendar(self, year, width=3)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, firstweekday=0)" />
        <scope doc="Return a matrix representing a month's calendar." ilk="function" name="monthdays2calendar" signature="monthdays2calendar(self, year, month)" />
        <scope doc="Like itermonthdates(), but will yield (day number, weekday&#10;number) tuples." ilk="function" name="itermonthdays2" signature="itermonthdays2(self, year, month)" />
        <scope ilk="function" name="setfirstweekday" signature="setfirstweekday(self, firstweekday)" />
        <scope doc="Return the data for the specified year ready for formatting." ilk="function" name="yeardatescalendar" signature="yeardatescalendar(self, year, width=3)" />
        <scope doc="Return an iterator for one week of weekday numbers starting&#10;with the configured first one." ilk="function" name="iterweekdays" signature="iterweekdays(self)" />
        <scope doc="Return a matrix representing a month's calendar." ilk="function" name="monthdayscalendar" signature="monthdayscalendar(self, year, month)" />
        <scope doc="Return an iterator for one month." ilk="function" name="itermonthdates" signature="itermonthdates(self, year, month)" />
        <scope doc="Return a matrix (list of lists) representing a month's&#10;calendar." ilk="function" name="monthdatescalendar" signature="monthdatescalendar(self, year, month)" />
        <scope ilk="function" name="getfirstweekday" signature="getfirstweekday(self)" />
      </scope>
      <variable citdl="int" name="EPOCH" />
      <variable citdl="int" name="FRIDAY" />
      <variable citdl="int" name="February" />
      <scope classrefs="Calendar" doc="This calendar returns complete HTML pages.&#10;" ilk="class" name="HTMLCalendar">
        <scope doc="Return a day as a table cell." ilk="function" name="formatday" signature="formatday(self, day, weekday)" />
        <scope doc="Return a header for a week as a table row." ilk="function" name="formatweekheader" signature="formatweekheader(self)" />
        <scope doc="Return a weekday name as a table header." ilk="function" name="formatweekday" signature="formatweekday(self, day)" />
        <scope doc="Return a complete week as a table row." ilk="function" name="formatweek" signature="formatweek(self, theweek)" />
        <scope doc="Return a month name as a table row." ilk="function" name="formatmonthname" signature="formatmonthname(self, theyear, themonth, withyear=True)" />
        <scope doc="Return a formatted year as a table of tables." ilk="function" name="formatyear" signature="formatyear(self, theyear, width=3)" />
        <scope doc="Return a formatted year as a complete HTML page." ilk="function" name="formatyearpage" signature="formatyearpage(self, theyear, width=3, css='calendar.css', encoding=None)" />
        <scope doc="Return a formatted month as a table." ilk="function" name="formatmonth" signature="formatmonth(self, theyear, themonth, withyear=True)" />
      </scope>
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="IllegalMonthError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, month)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="IllegalWeekdayError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, weekday)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="int" name="January" />
      <scope classrefs="HTMLCalendar" doc="This class can be passed a locale name in the constructor and will return&#10;month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode." ilk="class" name="LocaleHTMLCalendar">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, firstweekday=0, locale=None)" />
        <scope doc="Return a weekday name as a table header." ilk="function" name="formatweekday" signature="formatweekday(self, day)" />
        <scope doc="Return a month name as a table row." ilk="function" name="formatmonthname" signature="formatmonthname(self, theyear, themonth, withyear=True)" />
      </scope>
      <scope classrefs="TextCalendar" doc="This class can be passed a locale name in the constructor and will return&#10;month and weekday names in the specified locale. If this locale includes an encoding all strings containing month and weekday names will be returned as unicode." ilk="class" name="LocaleTextCalendar">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, firstweekday=0, locale=None)" />
        <scope doc="Returns a formatted week day name." ilk="function" name="formatweekday" signature="formatweekday(self, day, width)" />
        <scope doc="Return a formatted month name." ilk="function" name="formatmonthname" signature="formatmonthname(self, theyear, themonth, width, withyear=True)" />
      </scope>
      <variable citdl="int" name="MONDAY" />
      <variable citdl="int" name="SATURDAY" />
      <variable citdl="int" name="SUNDAY" />
      <variable citdl="int" name="THURSDAY" />
      <variable citdl="int" name="TUESDAY" />
      <scope classrefs="Calendar" doc="Subclass of Calendar that outputs a calendar as a simple plain text&#10;similar to the UNIX program cal." ilk="class" name="TextCalendar">
        <scope doc="Print a month's calendar." ilk="function" name="prmonth" signature="prmonth(self, theyear, themonth, w=0, l=0)" />
        <scope doc="Returns a formatted day." ilk="function" name="formatday" signature="formatday(self, day, weekday, width)" />
        <scope doc="Return a header for a week." ilk="function" name="formatweekheader" signature="formatweekheader(self, width)" />
        <scope doc="Returns a formatted week day name." ilk="function" name="formatweekday" signature="formatweekday(self, day, width)" />
        <scope doc="Returns a single week in a string (no newline)." ilk="function" name="formatweek" signature="formatweek(self, theweek, width)" />
        <scope doc="Print a single week (no newline)." ilk="function" name="prweek" signature="prweek(self, theweek, width)" />
        <scope doc="Returns a year's calendar as a multi-line string." ilk="function" name="formatyear" signature="formatyear(self, theyear, w=2, l=1, c=6, m=3)" />
        <scope doc="Print a year's calendar." ilk="function" name="pryear" signature="pryear(self, theyear, w=0, l=0, c=6, m=3)" />
        <scope doc="Return a formatted month name." ilk="function" name="formatmonthname" signature="formatmonthname(self, theyear, themonth, width, withyear=True)" />
        <scope doc="Return a month's calendar string (multi-line)." ilk="function" name="formatmonth" signature="formatmonth(self, theyear, themonth, w=0, l=0)" />
      </scope>
      <variable citdl="int" name="WEDNESDAY" />
      <variable citdl="list" name="__all__" />
      <import module="_locale" />
      <variable citdl="TextCalendar" name="c" />
      <scope doc="Returns a year's calendar as a multi-line string." ilk="function" name="calendar" />
      <import module="datetime" />
      <variable citdl="_localized_day" name="day_abbr" />
      <variable citdl="_localized_day" name="day_name" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="different_locale">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, locale)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
      </scope>
      <scope classrefs="Exception" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
      </scope>
      <scope ilk="function" name="firstweekday" />
      <scope doc="Prints multi-column formatting for year calendars" ilk="function" name="format" signature="format(cols, colwidth=20, spacing=6)" />
      <scope doc="Returns a string formatted from n strings, centered within n&#10;columns." ilk="function" name="formatstring" signature="formatstring(cols, colwidth=20, spacing=6)" />
      <scope doc="Return True for leap years, False for non-leap years." ilk="function" name="isleap" signature="isleap(year)" />
      <scope doc="Return number of leap years in range [y1, y2)." ilk="function" name="leapdays" signature="leapdays(y1, y2)" />
      <scope ilk="function" name="main" signature="main(args)" />
      <variable citdl="list" name="mdays" />
      <scope doc="Return a month's calendar string (multi-line)." ilk="function" name="month" />
      <variable citdl="_localized_month" name="month_abbr" />
      <variable citdl="_localized_month" name="month_name" />
      <scope doc="Return a matrix representing a month's calendar." ilk="function" name="monthcalendar" />
      <scope doc="Return weekday (0-6 ~ Mon-Sun) and number of days (28-31)&#10;for year, month." ilk="function" name="monthrange" signature="monthrange(year, month)" />
      <scope doc="Print a year's calendar." ilk="function" name="prcal" />
      <scope doc="Print a month's calendar." ilk="function" name="prmonth" />
      <scope doc="Print a single week (no newline)." ilk="function" name="prweek" />
      <scope ilk="function" name="setfirstweekday" signature="setfirstweekday(firstweekday)" />
      <import module="sys" />
      <scope doc="Unrelated but handy function to calculate Unix timestamp&#10;from GMT." ilk="function" name="timegm" signature="timegm(tuple)" />
      <scope doc="Returns a single week in a string (no newline)." ilk="function" name="week" />
      <scope doc="Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month&#10;(1-12), day (1-31)." ilk="function" name="weekday" signature="weekday(year, month, day)" />
      <scope doc="Return a header for a week." ilk="function" name="weekheader" />
    </scope>
    <scope doc="functools.py - Tools for working with functions and callable objects&#10;" ilk="blob" lang="Python3" name="functools">
      <scope classrefs="object" doc="&#10;" ilk="class" name="MappingProxyType">
        <scope doc="D.values() -&gt; list of D's values" ilk="function" name="values" returns="list" signature="D.values() -&gt; list of D's values" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="D.keys() -&gt; list of D's keys" ilk="function" name="keys" returns="list" signature="D.keys() -&gt; list of D's keys" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="D.copy() -&gt; a shallow copy of D" ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" ilk="function" name="items" returns="list" signature="D.items() -&gt; list of D's (key, value) pairs, as 2-tuples" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="RLock">
        <scope doc="Lock the lock." ilk="function" name="__enter__" returns="bool" signature="acquire(blocking=True) -&gt; bool" />
        <scope doc="Release the lock, allowing another thread that is blocked&#10;waiting for the lock to acquire the lock." ilk="function" name="__exit__" signature="release()" />
        <scope doc="Lock the lock." ilk="function" name="acquire" returns="bool" signature="acquire(blocking=True) -&gt; bool" />
        <scope doc="Release the lock, allowing another thread that is blocked&#10;waiting for the lock to acquire the lock." ilk="function" name="release" signature="release()" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_release_save" returns="tuple" signature="_release_save() -&gt; tuple" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_acquire_restore" signature="_acquire_restore(state) -&gt; None" />
        <scope doc="For internal use by `threading.Condition`." ilk="function" name="_is_owned" returns="bool" signature="_is_owned() -&gt; bool" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <variable citdl="tuple" name="WRAPPER_ASSIGNMENTS" />
      <variable citdl="tuple" name="WRAPPER_UPDATES" />
      <scope classrefs="MutableMapping" doc="Mapping class that references keys weakly.&#10;Entries in the dictionary will be discarded when there is no longer a strong reference to the key. This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects. This can be especially useful with objects that override attribute accesses." ilk="class" name="WeakKeyDictionary">
        <scope ilk="function" name="__deepcopy__" signature="__deepcopy__(self, memo)" />
        <scope ilk="function" name="__copy__" signature="__copy__(self)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, key)" />
        <scope doc="D.values() -&gt; an object providing a view on D's values" ilk="function" name="values" signature="D.values() -&gt; an object providing a view on D's values" />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="__iter__" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, dict=None)" />
        <scope ilk="function" name="__contains__" signature="__contains__(self, key)" />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope ilk="function" name="_scrub_removals" signature="_scrub_removals(self)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_commit_removals" signature="_commit_removals(self)" />
        <scope doc="D.items() -&gt; a set-like object providing a view on D's items" ilk="function" name="items" signature="D.items() -&gt; a set-like object providing a view on D's items" />
        <scope doc="Return a list of weak references to the keys." ilk="function" name="keyrefs" signature="keyrefs(self)" />
        <scope doc="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." ilk="function" name="get" signature="D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None." />
        <scope doc="D.keys() -&gt; a set-like object providing a view on D's keys" ilk="function" name="keys" signature="D.keys() -&gt; a set-like object providing a view on D's keys" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="copy" signature="copy(self)" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Convert a cmp= function into a key= function." ilk="function" name="cmp_to_key" />
      <scope doc="Returns the current ABC cache token." ilk="function" name="get_cache_token" signature="get_cache_token()" />
      <scope doc="Least-recently-used cache decorator." ilk="function" name="lru_cache" signature="lru_cache(maxsize=128, typed=False)" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="Method descriptor with partial application of the given arguments&#10;and keywords.  Supports wrapping existing descriptors and handles non-descriptor callables as instance methods." ilk="class" name="partialmethod">
        <scope ilk="function" name="_make_unbound_method" signature="_make_unbound_method(self)" />
        <scope ilk="function" name="__get__" signature="__get__(self, obj, cls)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, func, *args, **keywords)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope doc="Apply a function of two arguments cumulatively to the items&#10;of a sequence, from left to right, so as to reduce the&#10;sequence to a single value." ilk="function" name="reduce" signature="reduce(function, sequence[, initial]) -&gt; value" />
      <scope doc="Single-dispatch generic function decorator." ilk="function" name="singledispatch" signature="singledispatch(func)" />
      <scope doc="Class decorator that fills in missing ordering methods" ilk="function" name="total_ordering" signature="total_ordering(cls)" />
      <scope doc="Update a wrapper function to look like the wrapped function" ilk="function" name="update_wrapper" signature="update_wrapper(wrapper, wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
      <scope doc="Decorator factory to apply update_wrapper() to a wrapper&#10;function" ilk="function" name="wraps" signature="wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))" />
    </scope>
    <scope doc="string helper module&#10;" ilk="blob" lang="Python3" name="_string">
      <scope doc="split the argument as a field name" ilk="function" name="formatter_field_name_split" />
      <scope doc="parse the argument as a format string" ilk="function" name="formatter_parser" />
    </scope>
    <scope doc="Text wrapping and filling.&#10;" ilk="blob" lang="Python3" name="textwrap">
      <scope classrefs="object" doc="Object for wrapping/filling text.  The public interface consists of&#10;the wrap() and fill() methods; the other methods are just there for subclasses to override in order to tweak the default behaviour. If you want to completely replace the main wrapping algorithm, you'll probably have to override _wrap_chunks().  Several instance attributes control various aspects of wrapping: width (default: 70) the maximum width of wrapped lines (unless break_long_words is false) initial_indent (default: &quot;&quot;)" ilk="class" name="TextWrapper">
        <scope doc="Correct for sentence endings buried in 'chunks'. Eg." ilk="function" name="_fix_sentence_endings" signature="_fix_sentence_endings(chunks : [string])" />
        <scope ilk="function" name="_split_chunks" signature="_split_chunks(self, text)" />
        <scope doc="Munge whitespace in text: expand tabs and convert all other&#10;whitespace characters to spaces." ilk="function" name="_munge_whitespace" returns="str" signature="_munge_whitespace(text : string) -&gt; string" />
        <scope doc="Split the text to wrap into indivisible chunks." ilk="function" name="_split" signature="_split(text : string) -&gt; [string]" />
        <scope doc="Reformat the single paragraph in 'text' so it fits in lines&#10;of no more than 'self.width' columns, and return a list of&#10;wrapped lines." ilk="function" name="wrap" signature="wrap(text : string) -&gt; [string]" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, width=70, initial_indent='', subsequent_indent='', expand_tabs=True, replace_whitespace=True, fix_sentence_endings=False, break_long_words=True, drop_whitespace=True, break_on_hyphens=True, tabsize=8, *, max_lines=None, placeholder=' [...]')" />
        <scope doc="Wrap a sequence of text chunks and return a list of lines of&#10;length 'self.width' or less." ilk="function" name="_wrap_chunks" signature="_wrap_chunks(chunks : [string]) -&gt; [string]" />
        <scope doc="Reformat the single paragraph in 'text' to fit in lines of&#10;no more than 'self.width' columns, and return a new string&#10;containing the entire wrapped paragraph." ilk="function" name="fill" returns="str" signature="fill(text : string) -&gt; string" />
        <scope doc="_handle_long_word(chunks : [string], cur_line : [string],&#10;cur_len : int, width : int)" ilk="function" name="_handle_long_word" signature="_handle_long_word(self, reversed_chunks, cur_line, cur_len, width)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Remove any common leading whitespace from every line in&#10;`text`." ilk="function" name="dedent" signature="dedent(text)" />
      <scope doc="Fill a single paragraph of text, returning a new string." ilk="function" name="fill" signature="fill(text, width=70, **kwargs)" />
      <scope doc="Adds 'prefix' to the beginning of selected lines in 'text'." ilk="function" name="indent" signature="indent(text, prefix, predicate=None)" />
      <import module="re" />
      <scope doc="Collapse and truncate the given text to fit in the given&#10;width." ilk="function" name="shorten" signature="shorten(text, width, **kwargs)" />
      <scope doc="Wrap a single paragraph of text, returning a list of wrapped&#10;lines." ilk="function" name="wrap" signature="wrap(text, width=70, **kwargs)" />
    </scope>
    <scope doc="The Tab Nanny despises ambiguous indentation.  She knows no mercy.&#10;tabnanny -- Detection of ambiguous indentation  For the time being this module is intended to be called as a script. However it is possible to import it into an IDE and use the function check() described below.  Warning: The API provided by this module is likely to change in future releases; such changes may not be backward compatible." ilk="blob" lang="Python3" name="tabnanny">
      <scope classrefs="Exception" doc="Raised by tokeneater() if detecting an ambiguous indent.&#10;Captured and handled in check()." ilk="class" name="NannyNag">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lineno, msg, line)" />
        <scope ilk="function" name="get_lineno" signature="get_lineno(self)" />
        <scope ilk="function" name="get_msg" signature="get_msg(self)" />
        <scope ilk="function" name="get_line" signature="get_line(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Whitespace">
        <scope doc="# return a list of tuples (ts, i1, i2) such that # i1 ==&#10;self.indent_level(ts) != other.indent_level(ts) == i2." ilk="function" name="not_equal_witness" signature="not_equal_witness(self, other)" />
        <scope doc="# return length of longest contiguous run of spaces (whether&#10;or not # preceding a tab)" ilk="function" name="longest_run_of_spaces" signature="longest_run_of_spaces(self)" />
        <scope doc="# return a list of tuples (ts, i1, i2) such that # i1 ==&#10;self.indent_level(ts) &gt;= other.indent_level(ts) == i2." ilk="function" name="not_less_witness" signature="not_less_witness(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, ws)" />
        <scope doc="# return true iff self.indent_level(t) ==&#10;other.indent_level(t) # for all t &gt;= 1" ilk="function" name="equal" signature="equal(self, other)" />
        <scope doc="# Return True iff self.indent_level(t) &lt;&#10;other.indent_level(t) # for all t &gt;= 1." ilk="function" name="less" signature="less(self, other)" />
        <scope ilk="function" name="indent_level" signature="indent_level(self, tabsize)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="If file_or_dir is a directory and not a symbolic link, then&#10;recursively descend the directory tree named by file_or_dir,&#10;checking all .py files along the way." ilk="function" name="check" signature="check(file_or_dir)" />
      <scope ilk="function" name="errprint" signature="errprint(*args)" />
      <variable citdl="int" name="filename_only" />
      <scope ilk="function" name="format_witnesses" signature="format_witnesses(w)" />
      <import module="getopt" />
      <scope ilk="function" name="main" signature="main()" />
      <import module="os" />
      <scope ilk="function" name="process_tokens" signature="process_tokens(tokens)" />
      <import module="sys" />
      <import module="tokenize" />
      <variable citdl="int" name="verbose" />
    </scope>
    <scope doc="# Package analogous to 'threading.py' but using processes&#10;# # multiprocessing/__init__.py # # This package is intended to duplicate the functionality (and much of # the API) of threading.py but uses processes instead of threads.  A # subpackage 'multiprocessing.dummy' has the same API but is a simple # wrapper for 'threading'. # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement." ilk="blob" lang="Python3" name="multiprocessing">
      <scope doc="Returns a synchronized shared array" ilk="function" name="Array" />
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="AuthenticationError" />
      <scope doc="Returns a barrier object" ilk="function" name="Barrier" />
      <scope doc="Returns a bounded semaphore object" ilk="function" name="BoundedSemaphore" />
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BufferTooShort" />
      <scope doc="Returns a condition object" ilk="function" name="Condition" />
      <scope doc="Returns an event object" ilk="function" name="Event" />
      <scope doc="Returns a queue object" ilk="function" name="JoinableQueue" />
      <scope doc="Returns a non-recursive lock object" ilk="function" name="Lock" />
      <scope doc="Returns a manager associated with a running server process" ilk="function" name="Manager" />
      <scope doc="Returns two connection object connected by a pipe" ilk="function" name="Pipe" />
      <scope doc="Returns a process pool object" ilk="function" name="Pool" />
      <scope classrefs="BaseProcess" doc="Process objects represent activity that is run in a separate process&#10;The class is analogous to `threading.Thread`" ilk="class" name="Process">
        <scope ilk="function" name="_Popen" signature="_Popen(process_obj)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ProcessError" />
      <scope doc="Returns a queue object" ilk="function" name="Queue" />
      <scope doc="Returns a recursive lock object" ilk="function" name="RLock" />
      <scope doc="Returns a shared array" ilk="function" name="RawArray" />
      <scope doc="Returns a shared object" ilk="function" name="RawValue" />
      <variable citdl="int" name="SUBDEBUG" />
      <variable citdl="int" name="SUBWARNING" />
      <scope doc="Returns a semaphore object" ilk="function" name="Semaphore" />
      <scope doc="Returns a queue object" ilk="function" name="SimpleQueue" />
      <scope classrefs="ProcessError" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="TimeoutError" />
      <scope doc="Returns a synchronized shared object" ilk="function" name="Value" />
      <variable citdl="list" name="__all__" />
      <scope doc="Return list of process objects corresponding to live child&#10;processes" ilk="function" name="active_children" signature="active_children()" />
      <scope doc="Install support for sending connections and sockets between&#10;processes" ilk="function" name="allow_connection_pickling" />
      <import module="connection" />
      <import module="context" />
      <scope doc="Returns the number of CPUs in the system" ilk="function" name="cpu_count" />
      <scope doc="Return process object representing the current process" ilk="function" name="current_process" signature="current_process()" />
      <scope doc="Check whether this is a fake forked process in a frozen&#10;executable." ilk="function" name="freeze_support" />
      <scope ilk="function" name="get_all_start_methods" />
      <scope ilk="function" name="get_context" />
      <scope doc="Return package logger -- if it does not already exist then&#10;it is created." ilk="function" name="get_logger" />
      <scope ilk="function" name="get_start_method" />
      <scope doc="Turn on logging and add a handler which prints to stderr" ilk="function" name="log_to_stderr" />
      <import module="process" />
      <import module="reduction" />
      <scope doc="Sets the path to a python.exe or pythonw.exe binary used to&#10;run child processes instead of sys.executable when using the&#10;'spawn' start method." ilk="function" name="set_executable" />
      <scope doc="Set list of module names to try to load in forkserver&#10;process." ilk="function" name="set_forkserver_preload" />
      <scope ilk="function" name="set_start_method" />
      <import module="sys" />
      <import module="util" />
    </scope>
    <scope doc="Command-line tool to validate and pretty-print JSON&#10;Usage::  $ echo '{&quot;json&quot;:&quot;obj&quot;}' | python -m json.tool { &quot;json&quot;: &quot;obj&quot; } $ echo '{ 1.2:3.4}' | python -m json.tool Expecting property name enclosed in double quotes: line 1 column 3 (char 2)" ilk="blob" lang="Python3" name="json.tool">
      <import module="argparse" />
      <import module="collections" />
      <import module="json" />
      <scope ilk="function" name="main" signature="main()" />
      <import module="sys" />
    </scope>
    <scope doc="hashlib module - A common interface to many hash functions.&#10;new(name, data=b'') - returns a new hash object implementing the given hash function; initializing the hash using the given binary data.  Named constructor functions are also available, these are faster than using new(name):  md5(), sha1(), sha224(), sha256(), sha384(), and sha512()  More algorithms may be available on your platform but the above are guaranteed" ilk="blob" lang="Python3" name="hashlib">
      <variable citdl="tuple" name="__all__" />
      <import module="_hashlib" />
      <variable citdl="set" name="algorithms_available" />
      <variable citdl="set" name="algorithms_guaranteed" />
      <scope doc="Returns a md5 hash object; optionally initialized with a&#10;string" ilk="function" name="md5" />
      <scope doc="Return a new hashing object using the named algorithm;" ilk="function" name="new" signature="new(name, data=b'')" />
      <scope doc="Password based key derivation function 2 (PKCS #5 v2.0) with&#10;HMAC as pseudorandom function." ilk="function" name="pbkdf2_hmac" signature="pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) -&gt; key" />
      <scope doc="Returns a sha1 hash object; optionally initialized with a&#10;string" ilk="function" name="sha1" />
      <scope doc="Returns a sha224 hash object; optionally initialized with a&#10;string" ilk="function" name="sha224" />
      <scope doc="Returns a sha256 hash object; optionally initialized with a&#10;string" ilk="function" name="sha256" />
      <scope doc="Returns a sha384 hash object; optionally initialized with a&#10;string" ilk="function" name="sha384" />
      <scope doc="Returns a sha512 hash object; optionally initialized with a&#10;string" ilk="function" name="sha512" />
    </scope>
    <scope doc="Core implementation of import.&#10;This module is NOT meant to be directly imported! It has been designed such that it can be bootstrapped into Python as the implementation of import. As such it requires the injection of specific modules and attributes in order to work. One should use importlib as the public-facing version of this module." ilk="blob" lang="Python3" name="importlib._bootstrap">
      <scope classrefs="object" doc="Meta path import for built-in modules.&#10;All methods are either class or static methods to avoid the need to instantiate the class." ilk="class" name="BuiltinImporter">
        <scope doc="Return False as built-in modules are never packages." ilk="function" name="is_package" />
        <scope doc="Return repr for the module." ilk="function" name="module_repr" signature="module_repr(module)" />
        <scope doc="Exec a built-in module" ilk="function" name="exec_module" />
        <scope doc="Return None as built-in modules do not have source code." ilk="function" name="get_source" />
        <scope doc="Create a built-in module" ilk="function" name="create_module" />
        <scope doc="Find the built-in module." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
        <scope doc="Return None as built-in modules do not have code objects." ilk="function" name="get_code" />
        <scope doc="Load the specified module into sys.modules and return it." ilk="function" name="load_module" />
      </scope>
      <scope classrefs="object" doc="File-based finder.&#10;Interactions with the file system are cached for performance, being refreshed when the directory the finder is handling has been modified." ilk="class" name="FileFinder">
        <scope doc="Initialize with the path to search on and a variable number&#10;of 2-tuples containing the loader and the file suffixes the&#10;loader recognizes." ilk="function" name="__init__" signature="__init__(self, path, *loader_details)" />
        <scope doc="Fill the cache of potential modules and packages for this&#10;directory." ilk="function" name="_fill_cache" signature="_fill_cache(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_spec" signature="find_spec(self, fullname, target=None)" />
        <scope doc="Invalidate the directory mtime." ilk="function" name="invalidate_caches" signature="invalidate_caches(self)" />
        <scope doc="A class method which returns a closure to use on&#10;sys.path_hook which will return an instance using the&#10;specified loaders and the path called on the closure." ilk="function" name="path_hook" />
        <scope ilk="function" name="_get_spec" signature="_get_spec(self, loader_class, fullname, path, smsl, target)" />
        <scope doc="Try to find a loader for the specified module by delegating&#10;to self.find_loader()." ilk="function" name="find_module" signature="find_module(self, fullname)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Try to find a loader for the specified module, or the&#10;namespace package portions." ilk="function" name="find_loader" signature="find_loader(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Meta path import for frozen modules.&#10;All methods are either class or static methods to avoid the need to instantiate the class." ilk="class" name="FrozenImporter">
        <scope doc="Return True if the frozen module is a package." ilk="function" name="is_package" />
        <scope doc="Return repr for the module." ilk="function" name="module_repr" signature="module_repr(m)" />
        <scope ilk="function" name="exec_module" signature="exec_module(module)" />
        <scope doc="Return None as frozen modules do not have source code." ilk="function" name="get_source" />
        <scope doc="Use default semantics for module creation." ilk="function" name="create_module" />
        <scope doc="Find a frozen module." ilk="function" name="find_module" />
        <scope ilk="function" name="find_spec" />
        <scope doc="Return the code object for the frozen module." ilk="function" name="get_code" />
        <scope doc="Load a frozen module." ilk="function" name="load_module" />
      </scope>
      <scope classrefs="object" doc="The specification for a module, used for loading.&#10;A module's spec is the source for information about the module.  For data associated with the module, including source, use the spec's loader.  `name` is the absolute name of the module.  `loader` is the loader to use when loading the module.  `parent` is the name of the package the module is in.  The parent is derived from the name.  `is_package` determines if the module is considered a package or not.  On modules this is reflected by the `__path__` attribute." ilk="class" name="ModuleSpec">
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, loader, *, origin=None, loader_state=None, is_package=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="FileLoader SourceLoader" doc="Concrete implementation of SourceLoader using the file system.&#10;" ilk="class" name="SourceFileLoader">
        <scope doc="Optional method which writes data (bytes) to a file path (a&#10;str)." ilk="function" name="_cache_bytecode" signature="_cache_bytecode(self, source_path, bytecode_path, data)" />
        <scope doc="Write bytes data to a file." ilk="function" name="set_data" signature="set_data(self, path, data, *, _mode=438)" />
        <scope doc="Return the metadata for the path." ilk="function" name="path_stats" signature="path_stats(self, path)" />
      </scope>
      <scope doc="Import a module." ilk="function" name="__import__" signature="__import__(name, globals=None, locals=None, fromlist=(), level=0)" />
      <import module="_bootstrap_external" />
      <import module="_imp" />
      <import module="_thread" />
      <import module="_warnings" />
      <import module="_weakref" />
      <scope doc="Create a module based on the provided spec." ilk="function" name="module_from_spec" signature="module_from_spec(spec)" />
      <scope doc="Return a module spec based on various loader methods." ilk="function" name="spec_from_loader" signature="spec_from_loader(name, loader, *, origin=None, is_package=None)" />
      <import module="sys" />
    </scope>
    <scope doc="Main program for 2to3.&#10;" ilk="blob" lang="Python3" name="lib2to3.main">
      <scope classrefs="MultiprocessRefactoringTool" doc="A refactoring tool that can avoid overwriting its input files.&#10;Prints output to stdout.  Output files can optionally be written to a different directory and or have an extra file suffix appended to their name for use in situations where you do not want to replace the input files." ilk="class" name="StdoutRefactoringTool">
        <scope doc="Args: fixers: A list of fixers to import." ilk="function" name="__init__" signature="__init__(self, fixers, options, explicit, nobackups, show_diffs, input_base_dir='', output_dir='', append_suffix='')" />
        <scope doc="Writes a string to a file." ilk="function" name="write_file" signature="write_file(self, new_text, filename, old_text, encoding)" />
        <scope doc="Called with the old version, new version, and filename of a&#10;refactored file." ilk="function" name="print_output" signature="print_output(self, old, new, filename, equal)" />
        <scope doc="Called when an error occurs." ilk="function" name="log_error" signature="log_error(self, msg, *args, **kwargs)" />
      </scope>
      <scope doc="Return a unified diff of two strings." ilk="function" name="diff_texts" signature="diff_texts(a, b, filename)" />
      <import module="difflib" />
      <import module="logging" />
      <scope doc="Main program." ilk="function" name="main" signature="main(fixer_pkg, args=None)" />
      <import module="optparse" />
      <import module="os" />
      <variable citdl="_Feature" name="print_function" />
      <import module="refactor" />
      <import module="shutil" />
      <import module="sys" />
      <scope ilk="function" name="warn" signature="warn(msg)" />
      <variable citdl="_Feature" name="with_statement" />
    </scope>
    <scope doc="Operator interface.&#10;This module exports a set of functions implemented in C corresponding to the intrinsic operators of Python.  For example, operator.add(x, y) is equivalent to the expression x+y.  The function names are those used for special methods; variants without leading and trailing '__' are also provided for convenience." ilk="blob" lang="Python3" name="operator">
      <scope doc="Same as abs(a)." ilk="function" name="__abs__" signature="abs(a)" />
      <scope doc="Same as a + b." ilk="function" name="__add__" signature="add(a, b)" />
      <variable citdl="list" name="__all__" />
      <scope doc="Same as a &amp; b." ilk="function" name="__and__" signature="and_(a, b)" />
      <scope doc="Same as a + b, for a and b sequences." ilk="function" name="__concat__" signature="concat(a, b)" />
      <scope doc="Same as b in a (note reversed operands)." ilk="function" name="__contains__" signature="contains(a, b)" />
      <scope doc="Same as del a[b]." ilk="function" name="__delitem__" signature="delitem(a, b)" />
      <scope doc="Same as a==b." ilk="function" name="__eq__" signature="eq(a, b)" />
      <scope doc="Same as a // b." ilk="function" name="__floordiv__" signature="floordiv(a, b)" />
      <scope doc="Same as a&gt;=b." ilk="function" name="__ge__" signature="ge(a, b)" />
      <scope doc="Same as a[b]." ilk="function" name="__getitem__" signature="getitem(a, b)" />
      <scope doc="Same as a&gt;b." ilk="function" name="__gt__" signature="gt(a, b)" />
      <scope doc="Same as a += b." ilk="function" name="__iadd__" signature="iadd(a, b) -&gt; a" />
      <scope doc="Same as a &amp;= b." ilk="function" name="__iand__" signature="iand(a, b) -&gt; a" />
      <scope doc="Same as a += b, for a and b sequences." ilk="function" name="__iconcat__" signature="iconcat(a, b) -&gt; a" />
      <scope doc="Same as a //= b." ilk="function" name="__ifloordiv__" signature="ifloordiv(a, b) -&gt; a" />
      <scope doc="Same as a &lt;&lt;= b." ilk="function" name="__ilshift__" signature="ilshift(a, b) -&gt; a" />
      <scope doc="Same as a @= b." ilk="function" name="__imatmul__" signature="imatmul(a, b) -&gt; a" />
      <scope doc="Same as a %= b." ilk="function" name="__imod__" signature="imod(a, b) -&gt; a" />
      <scope doc="Same as a *= b." ilk="function" name="__imul__" signature="imul(a, b) -&gt; a" />
      <scope doc="Same as a.__index__()" ilk="function" name="__index__" signature="index(a)" />
      <scope doc="Same as ~a." ilk="function" name="__inv__" signature="inv(a)" />
      <scope doc="Same as ~a." ilk="function" name="__invert__" signature="invert(a)" />
      <scope doc="Same as a |= b." ilk="function" name="__ior__" signature="ior(a, b) -&gt; a" />
      <scope doc="Same as a **= b." ilk="function" name="__ipow__" signature="ipow(a, b) -&gt; a" />
      <scope doc="Same as a &gt;&gt;= b." ilk="function" name="__irshift__" signature="irshift(a, b) -&gt; a" />
      <scope doc="Same as a -= b." ilk="function" name="__isub__" signature="isub(a, b) -&gt; a" />
      <scope doc="Same as a /= b" ilk="function" name="__itruediv__" signature="itruediv(a, b) -&gt; a" />
      <scope doc="Same as a ^= b." ilk="function" name="__ixor__" signature="ixor(a, b) -&gt; a" />
      <scope doc="Same as a&lt;=b." ilk="function" name="__le__" signature="le(a, b)" />
      <scope doc="Same as a &lt;&lt; b." ilk="function" name="__lshift__" signature="lshift(a, b)" />
      <scope doc="Same as a&lt;b." ilk="function" name="__lt__" signature="lt(a, b)" />
      <scope doc="Same as a @ b." ilk="function" name="__matmul__" signature="matmul(a, b)" />
      <scope doc="Same as a % b." ilk="function" name="__mod__" signature="mod(a, b)" />
      <scope doc="Same as a * b." ilk="function" name="__mul__" signature="mul(a, b)" />
      <scope doc="Same as a!=b." ilk="function" name="__ne__" signature="ne(a, b)" />
      <scope doc="Same as -a." ilk="function" name="__neg__" signature="neg(a)" />
      <scope doc="Same as not a." ilk="function" name="__not__" signature="not_(a)" />
      <scope doc="Same as a | b." ilk="function" name="__or__" signature="or_(a, b)" />
      <scope doc="Same as +a." ilk="function" name="__pos__" signature="pos(a)" />
      <scope doc="Same as a ** b." ilk="function" name="__pow__" signature="pow(a, b)" />
      <scope doc="Same as a &gt;&gt; b." ilk="function" name="__rshift__" signature="rshift(a, b)" />
      <scope doc="Same as a[b] = c." ilk="function" name="__setitem__" signature="setitem(a, b, c)" />
      <scope doc="Same as a - b." ilk="function" name="__sub__" signature="sub(a, b)" />
      <scope doc="Same as a / b." ilk="function" name="__truediv__" signature="truediv(a, b)" />
      <scope doc="Same as a ^ b." ilk="function" name="__xor__" signature="xor(a, b)" />
      <scope doc="Same as abs(a)." ilk="function" name="abs" signature="abs(a)" />
      <scope doc="Same as a + b." ilk="function" name="add" signature="add(a, b)" />
      <scope doc="Same as a &amp; b." ilk="function" name="and_" signature="and_(a, b)" />
      <scope classrefs="object" doc="attrgetter(attr, ...) --&gt; attrgetter object&#10;Return a callable object that fetches the given attribute(s) from its operand. After f = attrgetter('name'), the call f(r) returns r.name. After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date). After h = attrgetter('name.first', 'name.last'), the call h(r) returns (r.name.first, r.name.last)." ilk="class" name="attrgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a + b, for a and b sequences." ilk="function" name="concat" signature="concat(a, b)" />
      <scope doc="Same as b in a (note reversed operands)." ilk="function" name="contains" signature="contains(a, b)" />
      <scope doc="Return the number of times b occurs in a." ilk="function" name="countOf" signature="countOf(a, b)" />
      <scope doc="Same as del a[b]." ilk="function" name="delitem" signature="delitem(a, b)" />
      <scope doc="Same as a==b." ilk="function" name="eq" signature="eq(a, b)" />
      <scope doc="Same as a // b." ilk="function" name="floordiv" signature="floordiv(a, b)" />
      <scope doc="Same as a&gt;=b." ilk="function" name="ge" signature="ge(a, b)" />
      <scope doc="Same as a[b]." ilk="function" name="getitem" signature="getitem(a, b)" />
      <scope doc="Same as a&gt;b." ilk="function" name="gt" signature="gt(a, b)" />
      <scope doc="Same as a += b." ilk="function" name="iadd" signature="iadd(a, b) -&gt; a" />
      <scope doc="Same as a &amp;= b." ilk="function" name="iand" signature="iand(a, b) -&gt; a" />
      <scope doc="Same as a += b, for a and b sequences." ilk="function" name="iconcat" signature="iconcat(a, b) -&gt; a" />
      <scope doc="Same as a //= b." ilk="function" name="ifloordiv" signature="ifloordiv(a, b) -&gt; a" />
      <scope doc="Same as a &lt;&lt;= b." ilk="function" name="ilshift" signature="ilshift(a, b) -&gt; a" />
      <scope doc="Same as a @= b." ilk="function" name="imatmul" signature="imatmul(a, b) -&gt; a" />
      <scope doc="Same as a %= b." ilk="function" name="imod" signature="imod(a, b) -&gt; a" />
      <scope doc="Same as a *= b." ilk="function" name="imul" signature="imul(a, b) -&gt; a" />
      <scope doc="Same as a.__index__()" ilk="function" name="index" signature="index(a)" />
      <scope doc="Return the first index of b in a." ilk="function" name="indexOf" signature="indexOf(a, b)" />
      <scope doc="Same as ~a." ilk="function" name="inv" signature="inv(a)" />
      <scope doc="Same as ~a." ilk="function" name="invert" signature="invert(a)" />
      <scope doc="Same as a |= b." ilk="function" name="ior" signature="ior(a, b) -&gt; a" />
      <scope doc="Same as a **= b." ilk="function" name="ipow" signature="ipow(a, b) -&gt; a" />
      <scope doc="Same as a &gt;&gt;= b." ilk="function" name="irshift" signature="irshift(a, b) -&gt; a" />
      <scope doc="Same as a is b." ilk="function" name="is_" signature="is_(a, b)" />
      <scope doc="Same as a is not b." ilk="function" name="is_not" signature="is_not(a, b)" />
      <scope doc="Same as a -= b." ilk="function" name="isub" signature="isub(a, b) -&gt; a" />
      <scope classrefs="object" doc="itemgetter(item, ...) --&gt; itemgetter object&#10;Return a callable object that fetches the given item(s) from its operand. After f = itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])" ilk="class" name="itemgetter">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a /= b" ilk="function" name="itruediv" signature="itruediv(a, b) -&gt; a" />
      <scope doc="Same as a ^= b." ilk="function" name="ixor" signature="ixor(a, b) -&gt; a" />
      <scope doc="Same as a&lt;=b." ilk="function" name="le" signature="le(a, b)" />
      <scope doc="Return an estimate of the number of items in obj." ilk="function" name="length_hint" returns="int" signature="length_hint(obj, default=0) -&gt; int" />
      <scope doc="Same as a &lt;&lt; b." ilk="function" name="lshift" signature="lshift(a, b)" />
      <scope doc="Same as a&lt;b." ilk="function" name="lt" signature="lt(a, b)" />
      <scope doc="Same as a @ b." ilk="function" name="matmul" signature="matmul(a, b)" />
      <scope classrefs="object" doc="methodcaller(name, ...) --&gt; methodcaller object&#10;Return a callable object that calls the given method on its operand. After f = methodcaller('name'), the call f(r) returns r.name(). After g = methodcaller('name', 'date', foo=1), the call g(r) returns r.name('date', foo=1)." ilk="class" name="methodcaller">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Same as a % b." ilk="function" name="mod" signature="mod(a, b)" />
      <scope doc="Same as a * b." ilk="function" name="mul" signature="mul(a, b)" />
      <scope doc="Same as a!=b." ilk="function" name="ne" signature="ne(a, b)" />
      <scope doc="Same as -a." ilk="function" name="neg" signature="neg(a)" />
      <scope doc="Same as not a." ilk="function" name="not_" signature="not_(a)" />
      <scope doc="Same as a | b." ilk="function" name="or_" signature="or_(a, b)" />
      <scope doc="Same as +a." ilk="function" name="pos" signature="pos(a)" />
      <scope doc="Same as a ** b." ilk="function" name="pow" signature="pow(a, b)" />
      <scope doc="Same as a &gt;&gt; b." ilk="function" name="rshift" signature="rshift(a, b)" />
      <scope doc="Same as a[b] = c." ilk="function" name="setitem" signature="setitem(a, b, c)" />
      <scope doc="Same as a - b." ilk="function" name="sub" signature="sub(a, b)" />
      <scope doc="Same as a / b." ilk="function" name="truediv" signature="truediv(a, b)" />
      <scope doc="Return True if a is true, False otherwise." ilk="function" name="truth" signature="truth(a)" />
      <scope doc="Same as a ^ b." ilk="function" name="xor" signature="xor(a, b)" />
    </scope>
    <scope doc="This module provides access to some objects used or maintained by the&#10;interpreter and to functions that interact strongly with the interpreter.  Dynamic objects:  argv -- command line arguments; argv[0] is the script pathname if known path -- module search path; path[0] is the script directory, else '' modules -- dictionary of loaded modules  displayhook -- called to show results in an interactive session excepthook -- called to handle any uncaught exception other than SystemExit" ilk="blob" lang="Python3" name="sys">
      <scope doc="Print an object to sys.stdout and also save it in builtins._" ilk="function" name="__displayhook__" signature="displayhook(object) -&gt; None" />
      <scope doc="Handle an exception by displaying it with a traceback on&#10;sys.stderr." ilk="function" name="__excepthook__" signature="excepthook(exctype, value, traceback) -&gt; None" />
      <scope ilk="function" name="__interactivehook__" signature="__interactivehook__()" />
      <variable citdl="TextIOWrapper" name="__stderr__" />
      <variable citdl="TextIOWrapper" name="__stdin__" />
      <variable citdl="TextIOWrapper" name="__stdout__" />
      <variable citdl="str" name="abiflags" />
      <variable citdl="int" name="api_version" />
      <variable citdl="list" name="argv" />
      <variable citdl="str" name="base_exec_prefix" />
      <variable citdl="str" name="base_prefix" />
      <variable citdl="tuple" name="builtin_module_names" />
      <variable citdl="str" name="byteorder" />
      <scope doc="Call func(*args), while tracing is enabled." ilk="function" name="call_tracing" returns="object" signature="call_tracing(func, args) -&gt; object" />
      <scope doc="Return a tuple of function call statistics, if CALL_PROFILE&#10;was defined when Python was built." ilk="function" name="callstats" returns="tuple" signature="callstats() -&gt; tuple of integers" />
      <variable citdl="str" name="copyright" />
      <scope doc="Print an object to sys.stdout and also save it in builtins._" ilk="function" name="displayhook" signature="displayhook(object) -&gt; None" />
      <variable citdl="bool" name="dont_write_bytecode" />
      <scope doc="Return information about the most recent exception caught by&#10;an except clause in the current stack frame or in an older&#10;stack frame." ilk="function" name="exc_info" signature="exc_info() -&gt; (type, value, traceback)" />
      <scope doc="Handle an exception by displaying it with a traceback on&#10;sys.stderr." ilk="function" name="excepthook" signature="excepthook(exctype, value, traceback) -&gt; None" />
      <variable citdl="str" name="exec_prefix" />
      <variable citdl="str" name="executable" />
      <scope doc="Exit the interpreter by raising SystemExit(status)." ilk="function" name="exit" signature="exit([status])" />
      <variable citdl="flags" name="flags" />
      <variable citdl="float_info" name="float_info" />
      <variable citdl="str" name="float_repr_style" />
      <scope doc="Return the wrapper for coroutine objects set by&#10;sys.set_coroutine_wrapper." ilk="function" name="get_coroutine_wrapper" signature="get_coroutine_wrapper()" />
      <scope doc="Return the number of memory blocks currently allocated,&#10;regardless of their size." ilk="function" name="getallocatedblocks" returns="int" signature="getallocatedblocks() -&gt; integer" />
      <scope doc="getcheckinterval() -&gt; current check interval; see setcheckinterval()." ilk="function" name="getcheckinterval" signature="getcheckinterval() -&gt; current check interval; see setcheckinterval()." />
      <scope doc="Return the current default string encoding used by the&#10;Unicode implementation." ilk="function" name="getdefaultencoding" returns="str" signature="getdefaultencoding() -&gt; string" />
      <scope doc="Return the current value of the flags that are used for&#10;dlopen calls." ilk="function" name="getdlopenflags" returns="int" signature="getdlopenflags() -&gt; int" />
      <scope doc="Return the encoding used to convert Unicode filenames in&#10;operating system filenames." ilk="function" name="getfilesystemencoding" returns="str" signature="getfilesystemencoding() -&gt; string" />
      <scope doc="Return the profiling function set with sys.setprofile." ilk="function" name="getprofile" signature="getprofile()" />
      <scope doc="Return the current value of the recursion limit, the maximum&#10;depth of the Python interpreter stack." ilk="function" name="getrecursionlimit" signature="getrecursionlimit()" />
      <scope doc="Return the reference count of object." ilk="function" name="getrefcount" returns="int" signature="getrefcount(object) -&gt; integer" />
      <scope doc="Return the size of object in bytes." ilk="function" name="getsizeof" returns="int" signature="getsizeof(object, default) -&gt; int" />
      <scope doc="getswitchinterval() -&gt; current thread switch interval; see setswitchinterval()." ilk="function" name="getswitchinterval" signature="getswitchinterval() -&gt; current thread switch interval; see setswitchinterval()." />
      <scope doc="Return the global debug tracing function set with&#10;sys.settrace." ilk="function" name="gettrace" signature="gettrace()" />
      <variable citdl="hash_info" name="hash_info" />
      <variable citdl="int" name="hexversion" />
      <variable citdl="SimpleNamespace" name="implementation" />
      <variable citdl="int_info" name="int_info" />
      <scope doc="``Intern'' the given string." ilk="function" name="intern" returns="str" signature="intern(string) -&gt; string" />
      <scope doc="Return True if Python is exiting." ilk="function" name="is_finalizing" signature="is_finalizing()" />
      <variable citdl="int" name="maxsize" />
      <variable citdl="int" name="maxunicode" />
      <variable citdl="list" name="meta_path" />
      <variable citdl="dict" name="modules" />
      <variable citdl="list" name="path" />
      <variable citdl="list" name="path_hooks" />
      <variable citdl="dict" name="path_importer_cache" />
      <variable citdl="str" name="platform" />
      <variable citdl="str" name="prefix" />
      <scope doc="Set a wrapper for coroutine objects." ilk="function" name="set_coroutine_wrapper" signature="set_coroutine_wrapper(wrapper)" />
      <scope doc="Tell the Python interpreter to check for asynchronous events&#10;every n instructions." ilk="function" name="setcheckinterval" signature="setcheckinterval(n)" />
      <scope doc="Set the flags used by the interpreter for dlopen calls, such&#10;as when the interpreter loads extension modules." ilk="function" name="setdlopenflags" signature="setdlopenflags(n) -&gt; None" />
      <scope doc="Set the profiling function." ilk="function" name="setprofile" signature="setprofile(function)" />
      <scope doc="Set the maximum depth of the Python interpreter stack to n." ilk="function" name="setrecursionlimit" signature="setrecursionlimit(n)" />
      <scope doc="Set the ideal thread switching delay inside the Python&#10;interpreter The actual frequency of switching threads can be&#10;lower if the interpreter executes long sequences of&#10;uninterruptible code (this is implementation-specific and&#10;workload-dependent)." ilk="function" name="setswitchinterval" signature="setswitchinterval(n)" />
      <scope doc="Set the global debug tracing function." ilk="function" name="settrace" signature="settrace(function)" />
      <variable citdl="TextIOWrapper" name="stderr" />
      <variable citdl="TextIOWrapper" name="stdin" />
      <variable citdl="TextIOWrapper" name="stdout" />
      <variable citdl="thread_info" name="thread_info" />
      <variable citdl="str" name="version" />
      <variable citdl="version_info" name="version_info" />
      <variable citdl="list" name="warnoptions" />
    </scope>
    <scope doc="distutils.command.build&#10;Implements the Distutils 'build' command." ilk="blob" lang="Python3" name="distutils.command.build">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="DistutilsError" doc="Syntactic/semantic errors in command options, such as use of&#10;mutually conflicting options, or inconsistent options, badly-spelled values, etc.  No distinction is made between option values originating in the setup script, the command line, config files, or what-have-you -- but if we *know* something originated in the setup script, we'll raise DistutilsSetupError instead." ilk="class" name="DistutilsOptionError" />
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="build">
        <scope ilk="function" name="has_pure_modules" signature="has_pure_modules(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="has_scripts" signature="has_scripts(self)" />
        <scope ilk="function" name="has_c_libraries" signature="has_c_libraries(self)" />
        <scope ilk="function" name="has_ext_modules" signature="has_ext_modules(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <import module="os" />
      <scope ilk="function" name="show_compilers" signature="show_compilers()" />
      <import module="sys" />
    </scope>
    <scope doc="# This is the Python mapping for interface NodeFilter from&#10;# DOM2-Traversal-Range. It contains only constants." ilk="blob" lang="Python3" name="xml.dom.NodeFilter">
      <scope classrefs="object" doc="This is the DOM2 NodeFilter interface. It contains only constants.&#10;" ilk="class" name="NodeFilter">
        <scope ilk="function" name="acceptNode" signature="acceptNode(self, node)" />
      </scope>
    </scope>
    <scope doc="distutils.util&#10;Miscellaneous utility functions -- anything that doesn't fit into one of the other *util.py modules." ilk="blob" lang="Python3" name="distutils.util">
      <scope classrefs="DistutilsError" doc="Byte compile error.&#10;" ilk="class" name="DistutilsByteCompileError" />
      <scope classrefs="DistutilsError" doc="We don't know how to do something on the current platform (but&#10;we do know how to do it on some platform) -- eg. trying to compile C files on a platform not supported by a CCompiler subclass." ilk="class" name="DistutilsPlatformError" />
      <scope classrefs="object" doc="Mixin class for commands that run 2to3.&#10;To configure 2to3, setup scripts may either change the class variables, or inherit from individual commands to override how 2to3 is invoked." ilk="class" name="Mixin2to3">
        <scope ilk="function" name="run_2to3" signature="run_2to3(self, files)" />
      </scope>
      <scope doc="Byte-compile a collection of Python source files to .pyc&#10;files in a __pycache__ subdirectory." ilk="function" name="byte_compile" signature="byte_compile(py_files, optimize=0, force=0, prefix=None, base_dir=None, verbose=1, dry_run=0, direct=None)" />
      <scope doc="Return 'pathname' with 'new_root' prepended." ilk="function" name="change_root" signature="change_root(new_root, pathname)" />
      <scope doc="Ensure that 'os.environ' has all the environment variables&#10;we guarantee that users can use in config files, command-&#10;line options, etc." ilk="function" name="check_environ" signature="check_environ()" />
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Recursively copy a directory, only copying new and changed&#10;files, running run_2to3 over all newly copied Python modules&#10;afterward." ilk="function" name="copydir_run_2to3" signature="copydir_run_2to3(src, dest, template=None, fixer_names=None, options=None, explicit=None)" />
      <scope doc="Perform some action that affects the outside world (eg." ilk="function" name="execute" signature="execute(func, args, msg=None, verbose=0, dry_run=0)" />
      <scope doc="Return a string that identifies the current platform." ilk="function" name="get_platform" signature="get_platform()" />
      <scope ilk="function" name="grok_environment_error" signature="grok_environment_error(exc, prefix='error: ')" />
      <import module="importlib" />
      <import module="log" />
      <scope doc="Return true if 'source' exists and is more recently modified&#10;than 'target', or if 'source' exists and 'target' doesn't." ilk="function" name="newer" signature="newer(source, target)" />
      <import module="os" />
      <import module="re" />
      <scope doc="Return a version of the string escaped for inclusion in an&#10;RFC-822 header, by ensuring there are 8 spaces space after&#10;each newline." ilk="function" name="rfc822_escape" signature="rfc822_escape(header)" />
      <scope doc="Invoke 2to3 on a list of Python files." ilk="function" name="run_2to3" signature="run_2to3(files, fixer_names=None, options=None, explicit=None)" />
      <scope doc="Run another program, specified as a command list 'cmd', in a&#10;new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <scope doc="Split a string up according to Unix shell-like rules for&#10;quotes and backslashes." ilk="function" name="split_quoted" signature="split_quoted(s)" />
      <import module="string" />
      <scope doc="Convert a string representation of truth to true (1) or&#10;false (0)." ilk="function" name="strtobool" signature="strtobool(val)" />
      <scope doc="Perform shell/Perl-style variable substitution on 'string'." ilk="function" name="subst_vars" signature="subst_vars(s, local_vars)" />
      <import module="sys" />
    </scope>
    <scope doc="Debugger basics&#10;" ilk="blob" lang="Python3" name="bdb">
      <scope classrefs="object" doc="Generic Python debugger base class.&#10;This class takes care of details of the trace facility; a derived class should implement user interaction. The standard debugger class (pdb.Pdb) is an example." ilk="class" name="Bdb">
        <scope ilk="function" name="is_skipped_module" signature="is_skipped_module(self, module_name)" />
        <scope doc="This method is called if an exception occurs, but only if we&#10;are to stop at or just below this level." ilk="function" name="user_exception" signature="user_exception(self, frame, exc_info)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="_set_stopinfo" signature="_set_stopinfo(self, stopframe, returnframe, stoplineno=0)" />
        <scope ilk="function" name="get_file_breaks" signature="get_file_breaks(self, filename)" />
        <scope ilk="function" name="get_all_breaks" signature="get_all_breaks(self)" />
        <scope ilk="function" name="dispatch_return" signature="dispatch_return(self, frame, arg)" />
        <scope ilk="function" name="dispatch_call" signature="dispatch_call(self, frame, arg)" />
        <scope ilk="function" name="clear_break" signature="clear_break(self, filename, lineno)" />
        <scope ilk="function" name="do_clear" signature="do_clear(self, arg)" />
        <scope ilk="function" name="get_stack" signature="get_stack(self, f, t)" />
        <scope doc="Stop on the next line in or below the given frame." ilk="function" name="set_next" signature="set_next(self, frame)" />
        <scope ilk="function" name="trace_dispatch" signature="trace_dispatch(self, frame, event, arg)" />
        <scope ilk="function" name="break_here" signature="break_here(self, frame)" />
        <scope doc="This method is called when there is the remote possibility&#10;that we ever need to stop in this function." ilk="function" name="user_call" signature="user_call(self, frame, argument_list)" />
        <scope ilk="function" name="set_continue" signature="set_continue(self)" />
        <scope ilk="function" name="runctx" signature="runctx(self, cmd, globals, locals)" />
        <scope doc="This method is called when a return trap is set here." ilk="function" name="user_return" signature="user_return(self, frame, return_value)" />
        <scope doc="Stop when returning from the given frame." ilk="function" name="set_return" signature="set_return(self, frame)" />
        <scope ilk="function" name="set_quit" signature="set_quit(self)" />
        <scope ilk="function" name="runcall" signature="runcall(self, func, *args, **kwds)" />
        <scope ilk="function" name="clear_all_file_breaks" signature="clear_all_file_breaks(self, filename)" />
        <scope ilk="function" name="stop_here" signature="stop_here(self, frame)" />
        <scope ilk="function" name="break_anywhere" signature="break_anywhere(self, frame)" />
        <scope ilk="function" name="get_bpbynumber" signature="get_bpbynumber(self, arg)" />
        <scope ilk="function" name="get_break" signature="get_break(self, filename, lineno)" />
        <scope doc="Start debugging from `frame`." ilk="function" name="set_trace" signature="set_trace(self, frame=None)" />
        <scope doc="Stop after one line of code." ilk="function" name="set_step" signature="set_step(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, skip=None)" />
        <scope ilk="function" name="set_break" signature="set_break(self, filename, lineno, temporary=False, cond=None, funcname=None)" />
        <scope ilk="function" name="run" signature="run(self, cmd, globals=None, locals=None)" />
        <scope ilk="function" name="get_breaks" signature="get_breaks(self, filename, lineno)" />
        <scope ilk="function" name="format_stack_entry" signature="format_stack_entry(self, frame_lineno, lprefix=': ')" />
        <scope ilk="function" name="dispatch_line" signature="dispatch_line(self, frame)" />
        <scope ilk="function" name="clear_all_breaks" signature="clear_all_breaks(self)" />
        <scope ilk="function" name="canonic" signature="canonic(self, filename)" />
        <scope doc="Stop when the line with the line no greater than the current&#10;one is reached or when returning from current frame" ilk="function" name="set_until" signature="set_until(self, frame, lineno=None)" />
        <scope ilk="function" name="dispatch_exception" signature="dispatch_exception(self, frame, arg)" />
        <scope doc="This method is called when we stop or break at this line." ilk="function" name="user_line" signature="user_line(self, frame)" />
        <scope ilk="function" name="clear_bpbynumber" signature="clear_bpbynumber(self, arg)" />
        <scope ilk="function" name="_prune_breaks" signature="_prune_breaks(self, filename, lineno)" />
        <scope ilk="function" name="runeval" signature="runeval(self, expr, globals=None, locals=None)" />
      </scope>
      <scope classrefs="Exception" doc="Exception to give up completely.&#10;" ilk="class" name="BdbQuit" />
      <scope classrefs="object" doc="Breakpoint class.&#10;Implements temporary breakpoints, ignore counts, disabling and (re)-enabling, and conditionals.  Breakpoints are indexed by number through bpbynumber and by the file,line tuple using bplist.  The former points to a single instance of class Breakpoint.  The latter points to a list of such instances since there may be more than one breakpoint per line." ilk="class" name="Breakpoint">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, file, line, temporary=False, cond=None, funcname=None)" />
        <scope ilk="function" name="deleteMe" signature="deleteMe(self)" />
        <scope ilk="function" name="enable" signature="enable(self)" />
        <scope ilk="function" name="bpformat" signature="bpformat(self)" />
        <scope ilk="function" name="bpprint" signature="bpprint(self, out=None)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope ilk="function" name="disable" signature="disable(self)" />
      </scope>
      <variable citdl="int" name="CO_GENERATOR" />
      <scope classrefs="Bdb" doc="Generic Python debugger base class.&#10;This class takes care of details of the trace facility; a derived class should implement user interaction. The standard debugger class (pdb.Pdb) is an example." ilk="class" name="Tdb">
        <scope doc="This method is called when we stop or break at this line." ilk="function" name="user_line" signature="user_line(self, frame)" />
        <scope doc="This method is called if an exception occurs, but only if we&#10;are to stop at or just below this level." ilk="function" name="user_exception" signature="user_exception(self, frame, exc_stuff)" />
        <scope doc="This method is called when a return trap is set here." ilk="function" name="user_return" signature="user_return(self, frame, retval)" />
        <scope doc="This method is called when there is the remote possibility&#10;that we ever need to stop in this function." ilk="function" name="user_call" signature="user_call(self, frame, args)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="bar" signature="bar(a)" />
      <scope doc="Check whether we should break here because of `b.funcname`." ilk="function" name="checkfuncname" signature="checkfuncname(b, frame)" />
      <scope doc="Determine which breakpoint for this file:line is to be acted&#10;upon." ilk="function" name="effective" signature="effective(file, line, frame)" />
      <import module="fnmatch" />
      <scope ilk="function" name="foo" signature="foo(n)" />
      <import module="os" />
      <scope ilk="function" name="set_trace" signature="set_trace()" />
      <import module="sys" />
      <scope ilk="function" name="test" signature="test()" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="plat-darwin.IN">
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_ATM" />
      <variable citdl="int" name="AF_CCITT" />
      <variable citdl="int" name="AF_CHAOS" />
      <variable citdl="int" name="AF_CNT" />
      <variable citdl="int" name="AF_COIP" />
      <variable citdl="int" name="AF_DATAKIT" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_DLI" />
      <variable citdl="int" name="AF_E164" />
      <variable citdl="int" name="AF_ECMA" />
      <variable citdl="int" name="AF_HYLINK" />
      <variable citdl="int" name="AF_IMPLINK" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_IPX" />
      <variable citdl="int" name="AF_ISDN" />
      <variable citdl="int" name="AF_ISO" />
      <variable citdl="int" name="AF_LAT" />
      <variable citdl="int" name="AF_LINK" />
      <variable citdl="int" name="AF_LOCAL" />
      <variable citdl="int" name="AF_MAX" />
      <variable citdl="int" name="AF_NATM" />
      <variable citdl="int" name="AF_NDRV" />
      <variable citdl="int" name="AF_NETBIOS" />
      <variable citdl="int" name="AF_NETGRAPH" />
      <variable citdl="int" name="AF_NS" />
      <variable citdl="int" name="AF_OSI" />
      <variable citdl="int" name="AF_PPP" />
      <variable citdl="int" name="AF_PUP" />
      <variable citdl="int" name="AF_RESERVED_36" />
      <variable citdl="int" name="AF_ROUTE" />
      <variable citdl="int" name="AF_SIP" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_SYSTEM" />
      <variable citdl="int" name="AF_UNIX" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="CMGROUP_MAX" />
      <scope ilk="function" name="HTONL" signature="HTONL(x)" />
      <scope ilk="function" name="HTONS" signature="HTONS(x)" />
      <variable citdl="int" name="ICMP6_FILTER" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <variable citdl="int" name="INADDR_NONE" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="INT16_C" signature="INT16_C(v)" />
      <variable citdl="int" name="INT16_MAX" />
      <variable citdl="int" name="INT16_MIN" />
      <scope ilk="function" name="INT32_C" signature="INT32_C(v)" />
      <variable citdl="int" name="INT32_MAX" />
      <variable citdl="int" name="INT32_MIN" />
      <scope ilk="function" name="INT8_C" signature="INT8_C(v)" />
      <variable citdl="int" name="INT8_MAX" />
      <variable citdl="int" name="INT8_MIN" />
      <variable citdl="int" name="INTPTR_MAX" />
      <variable citdl="int" name="INTPTR_MIN" />
      <variable citdl="int" name="INT_FAST16_MAX" />
      <variable citdl="int" name="INT_FAST16_MIN" />
      <variable citdl="int" name="INT_FAST32_MAX" />
      <variable citdl="int" name="INT_FAST32_MIN" />
      <variable citdl="int" name="INT_FAST8_MAX" />
      <variable citdl="int" name="INT_FAST8_MIN" />
      <variable citdl="int" name="INT_LEAST16_MAX" />
      <variable citdl="int" name="INT_LEAST16_MIN" />
      <variable citdl="int" name="INT_LEAST32_MAX" />
      <variable citdl="int" name="INT_LEAST32_MIN" />
      <variable citdl="int" name="INT_LEAST8_MAX" />
      <variable citdl="int" name="INT_LEAST8_MIN" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(i)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(i)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(i)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(i)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(i)" />
      <variable citdl="int" name="IN_CLASSD_HOST" />
      <variable citdl="int" name="IN_CLASSD_NET" />
      <variable citdl="int" name="IN_CLASSD_NSHIFT" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(i)" />
      <scope ilk="function" name="IN_LINKLOCAL" signature="IN_LINKLOCAL(i)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(i)" />
      <variable citdl="int" name="IPCTL_ACCEPTSOURCEROUTE" />
      <variable citdl="int" name="IPCTL_DEFMTU" />
      <variable citdl="int" name="IPCTL_DEFTTL" />
      <variable citdl="int" name="IPCTL_DIRECTEDBROADCAST" />
      <variable citdl="int" name="IPCTL_FASTFORWARDING" />
      <variable citdl="int" name="IPCTL_FORWARDING" />
      <variable citdl="int" name="IPCTL_GIF_TTL" />
      <variable citdl="int" name="IPCTL_INTRQDROPS" />
      <variable citdl="int" name="IPCTL_INTRQMAXLEN" />
      <variable citdl="int" name="IPCTL_KEEPFAITH" />
      <variable citdl="int" name="IPCTL_MAXID" />
      <variable citdl="int" name="IPCTL_RTEXPIRE" />
      <variable citdl="int" name="IPCTL_RTMAXCACHE" />
      <variable citdl="int" name="IPCTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPCTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPCTL_SOURCEROUTE" />
      <variable citdl="int" name="IPCTL_STATS" />
      <variable citdl="int" name="IPPORT_HIFIRSTAUTO" />
      <variable citdl="int" name="IPPORT_HILASTAUTO" />
      <variable citdl="int" name="IPPORT_RESERVED" />
      <variable citdl="int" name="IPPORT_RESERVEDSTART" />
      <variable citdl="int" name="IPPORT_USERRESERVED" />
      <variable citdl="int" name="IPPROTO_3PC" />
      <variable citdl="int" name="IPPROTO_ADFS" />
      <variable citdl="int" name="IPPROTO_AH" />
      <variable citdl="int" name="IPPROTO_AHIP" />
      <variable citdl="int" name="IPPROTO_APES" />
      <variable citdl="int" name="IPPROTO_ARGUS" />
      <variable citdl="int" name="IPPROTO_AX25" />
      <variable citdl="int" name="IPPROTO_BHA" />
      <variable citdl="int" name="IPPROTO_BLT" />
      <variable citdl="int" name="IPPROTO_BRSATMON" />
      <variable citdl="int" name="IPPROTO_CFTP" />
      <variable citdl="int" name="IPPROTO_CHAOS" />
      <variable citdl="int" name="IPPROTO_CMTP" />
      <variable citdl="int" name="IPPROTO_CPHB" />
      <variable citdl="int" name="IPPROTO_CPNX" />
      <variable citdl="int" name="IPPROTO_DDP" />
      <variable citdl="int" name="IPPROTO_DGP" />
      <variable citdl="int" name="IPPROTO_DIVERT" />
      <variable citdl="int" name="IPPROTO_DONE" />
      <variable citdl="int" name="IPPROTO_DSTOPTS" />
      <variable citdl="int" name="IPPROTO_EGP" />
      <variable citdl="int" name="IPPROTO_EMCON" />
      <variable citdl="int" name="IPPROTO_ENCAP" />
      <variable citdl="int" name="IPPROTO_EON" />
      <variable citdl="int" name="IPPROTO_ESP" />
      <variable citdl="int" name="IPPROTO_ETHERIP" />
      <variable citdl="int" name="IPPROTO_FRAGMENT" />
      <variable citdl="int" name="IPPROTO_GGP" />
      <variable citdl="int" name="IPPROTO_GMTP" />
      <variable citdl="int" name="IPPROTO_GRE" />
      <variable citdl="int" name="IPPROTO_HELLO" />
      <variable citdl="int" name="IPPROTO_HMP" />
      <variable citdl="int" name="IPPROTO_HOPOPTS" />
      <variable citdl="int" name="IPPROTO_ICMP" />
      <variable citdl="int" name="IPPROTO_ICMPV6" />
      <variable citdl="int" name="IPPROTO_IDP" />
      <variable citdl="int" name="IPPROTO_IDPR" />
      <variable citdl="int" name="IPPROTO_IDRP" />
      <variable citdl="int" name="IPPROTO_IGMP" />
      <variable citdl="int" name="IPPROTO_IGP" />
      <variable citdl="int" name="IPPROTO_IGRP" />
      <variable citdl="int" name="IPPROTO_IL" />
      <variable citdl="int" name="IPPROTO_INLSP" />
      <variable citdl="int" name="IPPROTO_INP" />
      <variable citdl="int" name="IPPROTO_IP" />
      <variable citdl="int" name="IPPROTO_IPCOMP" />
      <variable citdl="int" name="IPPROTO_IPCV" />
      <variable citdl="int" name="IPPROTO_IPEIP" />
      <variable citdl="int" name="IPPROTO_IPIP" />
      <variable citdl="int" name="IPPROTO_IPPC" />
      <variable citdl="int" name="IPPROTO_IPV4" />
      <variable citdl="int" name="IPPROTO_IPV6" />
      <variable citdl="int" name="IPPROTO_IRTP" />
      <variable citdl="int" name="IPPROTO_KRYPTOLAN" />
      <variable citdl="int" name="IPPROTO_LARP" />
      <variable citdl="int" name="IPPROTO_LEAF1" />
      <variable citdl="int" name="IPPROTO_LEAF2" />
      <variable citdl="int" name="IPPROTO_MAX" />
      <variable citdl="int" name="IPPROTO_MAXID" />
      <variable citdl="int" name="IPPROTO_MEAS" />
      <variable citdl="int" name="IPPROTO_MHRP" />
      <variable citdl="int" name="IPPROTO_MICP" />
      <variable citdl="int" name="IPPROTO_MTP" />
      <variable citdl="int" name="IPPROTO_MUX" />
      <variable citdl="int" name="IPPROTO_ND" />
      <variable citdl="int" name="IPPROTO_NHRP" />
      <variable citdl="int" name="IPPROTO_NONE" />
      <variable citdl="int" name="IPPROTO_NSP" />
      <variable citdl="int" name="IPPROTO_NVPII" />
      <variable citdl="int" name="IPPROTO_OSPFIGP" />
      <variable citdl="int" name="IPPROTO_PGM" />
      <variable citdl="int" name="IPPROTO_PIGP" />
      <variable citdl="int" name="IPPROTO_PIM" />
      <variable citdl="int" name="IPPROTO_PRM" />
      <variable citdl="int" name="IPPROTO_PUP" />
      <variable citdl="int" name="IPPROTO_PVP" />
      <variable citdl="int" name="IPPROTO_RAW" />
      <variable citdl="int" name="IPPROTO_RCCMON" />
      <variable citdl="int" name="IPPROTO_RDP" />
      <variable citdl="int" name="IPPROTO_ROUTING" />
      <variable citdl="int" name="IPPROTO_RSVP" />
      <variable citdl="int" name="IPPROTO_RVD" />
      <variable citdl="int" name="IPPROTO_SATEXPAK" />
      <variable citdl="int" name="IPPROTO_SATMON" />
      <variable citdl="int" name="IPPROTO_SCCSP" />
      <variable citdl="int" name="IPPROTO_SDRP" />
      <variable citdl="int" name="IPPROTO_SEP" />
      <variable citdl="int" name="IPPROTO_SRPC" />
      <variable citdl="int" name="IPPROTO_ST" />
      <variable citdl="int" name="IPPROTO_SVMTP" />
      <variable citdl="int" name="IPPROTO_SWIPE" />
      <variable citdl="int" name="IPPROTO_TCF" />
      <variable citdl="int" name="IPPROTO_TCP" />
      <variable citdl="int" name="IPPROTO_TP" />
      <variable citdl="int" name="IPPROTO_TPXX" />
      <variable citdl="int" name="IPPROTO_TRUNK1" />
      <variable citdl="int" name="IPPROTO_TRUNK2" />
      <variable citdl="int" name="IPPROTO_TTP" />
      <variable citdl="int" name="IPPROTO_UDP" />
      <variable citdl="int" name="IPPROTO_VINES" />
      <variable citdl="int" name="IPPROTO_VISA" />
      <variable citdl="int" name="IPPROTO_VMTP" />
      <variable citdl="int" name="IPPROTO_WBEXPAK" />
      <variable citdl="int" name="IPPROTO_WBMON" />
      <variable citdl="int" name="IPPROTO_WSN" />
      <variable citdl="int" name="IPPROTO_XNET" />
      <variable citdl="int" name="IPPROTO_XTP" />
      <variable citdl="int" name="IPV6CTL_ACCEPT_RTADV" />
      <variable citdl="int" name="IPV6CTL_AUTO_FLOWLABEL" />
      <variable citdl="int" name="IPV6CTL_AUTO_LINKLOCAL" />
      <variable citdl="int" name="IPV6CTL_DAD_COUNT" />
      <variable citdl="int" name="IPV6CTL_DEFHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMCASTHLIM" />
      <variable citdl="int" name="IPV6CTL_DEFMTU" />
      <variable citdl="int" name="IPV6CTL_FORWARDING" />
      <variable citdl="int" name="IPV6CTL_FORWSRCRT" />
      <variable citdl="int" name="IPV6CTL_GIF_HLIM" />
      <variable citdl="int" name="IPV6CTL_HDRNESTLIMIT" />
      <variable citdl="int" name="IPV6CTL_KAME_VERSION" />
      <variable citdl="int" name="IPV6CTL_KEEPFAITH" />
      <variable citdl="int" name="IPV6CTL_LOG_INTERVAL" />
      <variable citdl="int" name="IPV6CTL_MAPPED_ADDR" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGPACKETS" />
      <variable citdl="int" name="IPV6CTL_MAXFRAGS" />
      <variable citdl="int" name="IPV6CTL_MAXID" />
      <variable citdl="int" name="IPV6CTL_MRTPROTO" />
      <variable citdl="int" name="IPV6CTL_MRTSTATS" />
      <variable citdl="int" name="IPV6CTL_RIP6STATS" />
      <variable citdl="int" name="IPV6CTL_RR_PRUNE" />
      <variable citdl="int" name="IPV6CTL_RTEXPIRE" />
      <variable citdl="int" name="IPV6CTL_RTMAXCACHE" />
      <variable citdl="int" name="IPV6CTL_RTMINEXPIRE" />
      <variable citdl="int" name="IPV6CTL_SENDREDIRECTS" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK" />
      <variable citdl="int" name="IPV6CTL_SOURCECHECK_LOGINT" />
      <variable citdl="int" name="IPV6CTL_STATS" />
      <variable citdl="int" name="IPV6CTL_TEMPPLTIME" />
      <variable citdl="int" name="IPV6CTL_TEMPVLTIME" />
      <variable citdl="int" name="IPV6CTL_USETEMPADDR" />
      <variable citdl="int" name="IPV6CTL_USE_DEPRECATED" />
      <variable citdl="int" name="IPV6CTL_V6ONLY" />
      <variable citdl="int" name="IPV6PORT_ANONMAX" />
      <variable citdl="int" name="IPV6PORT_ANONMIN" />
      <variable citdl="int" name="IPV6PORT_RESERVED" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMAX" />
      <variable citdl="int" name="IPV6PORT_RESERVEDMIN" />
      <variable citdl="int" name="IPV6PROTO_MAXID" />
      <variable citdl="int" name="IPV6_BINDV6ONLY" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_FAITH" />
      <variable citdl="int" name="IPV6_FW_ADD" />
      <variable citdl="int" name="IPV6_FW_DEL" />
      <variable citdl="int" name="IPV6_FW_FLUSH" />
      <variable citdl="int" name="IPV6_FW_GET" />
      <variable citdl="int" name="IPV6_FW_ZERO" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_IPSEC_POLICY" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_OPTIONS" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PORTRANGE" />
      <variable citdl="int" name="IPV6_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IPV6_PORTRANGE_HIGH" />
      <variable citdl="int" name="IPV6_PORTRANGE_LOW" />
      <variable citdl="int" name="IPV6_RECVDSTADDR" />
      <variable citdl="int" name="IPV6_RECVOPTS" />
      <variable citdl="int" name="IPV6_RECVRETOPTS" />
      <variable citdl="int" name="IPV6_RETOPTS" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_SOCKOPT_RESERVED1" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IPV6_V6ONLY" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_DUMMYNET_CONFIGURE" />
      <variable citdl="int" name="IP_DUMMYNET_DEL" />
      <variable citdl="int" name="IP_DUMMYNET_FLUSH" />
      <variable citdl="int" name="IP_DUMMYNET_GET" />
      <variable citdl="int" name="IP_FAITH" />
      <variable citdl="int" name="IP_FORCE_OUT_IFP" />
      <variable citdl="int" name="IP_FW_ADD" />
      <variable citdl="int" name="IP_FW_DEL" />
      <variable citdl="int" name="IP_FW_FLUSH" />
      <variable citdl="int" name="IP_FW_GET" />
      <variable citdl="int" name="IP_FW_RESETLOG" />
      <variable citdl="int" name="IP_FW_ZERO" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_IPSEC_POLICY" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_MULTICAST_VIF" />
      <variable citdl="int" name="IP_NAT__XXX" />
      <variable citdl="int" name="IP_OLD_FW_ADD" />
      <variable citdl="int" name="IP_OLD_FW_DEL" />
      <variable citdl="int" name="IP_OLD_FW_FLUSH" />
      <variable citdl="int" name="IP_OLD_FW_GET" />
      <variable citdl="int" name="IP_OLD_FW_RESETLOG" />
      <variable citdl="int" name="IP_OLD_FW_ZERO" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PORTRANGE" />
      <variable citdl="int" name="IP_PORTRANGE_DEFAULT" />
      <variable citdl="int" name="IP_PORTRANGE_HIGH" />
      <variable citdl="int" name="IP_PORTRANGE_LOW" />
      <variable citdl="int" name="IP_RECVDSTADDR" />
      <variable citdl="int" name="IP_RECVIF" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RECVTTL" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_RSVP_OFF" />
      <variable citdl="int" name="IP_RSVP_ON" />
      <variable citdl="int" name="IP_RSVP_VIF_OFF" />
      <variable citdl="int" name="IP_RSVP_VIF_ON" />
      <variable citdl="int" name="IP_STRIPHDR" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TRAFFIC_MGT_BACKGROUND" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="MSG_CTRUNC" />
      <variable citdl="int" name="MSG_DONTROUTE" />
      <variable citdl="int" name="MSG_DONTWAIT" />
      <variable citdl="int" name="MSG_EOF" />
      <variable citdl="int" name="MSG_EOR" />
      <variable citdl="int" name="MSG_FLUSH" />
      <variable citdl="int" name="MSG_HAVEMORE" />
      <variable citdl="int" name="MSG_HOLD" />
      <variable citdl="int" name="MSG_NEEDSA" />
      <variable citdl="int" name="MSG_OOB" />
      <variable citdl="int" name="MSG_PEEK" />
      <variable citdl="int" name="MSG_RCVMORE" />
      <variable citdl="int" name="MSG_SEND" />
      <variable citdl="int" name="MSG_TRUNC" />
      <variable citdl="int" name="MSG_WAITALL" />
      <variable citdl="int" name="MSG_WAITSTREAM" />
      <variable citdl="int" name="NET_MAXID" />
      <variable citdl="int" name="NET_RT_DUMP" />
      <variable citdl="int" name="NET_RT_DUMP2" />
      <variable citdl="int" name="NET_RT_FLAGS" />
      <variable citdl="int" name="NET_RT_IFLIST" />
      <variable citdl="int" name="NET_RT_IFLIST2" />
      <variable citdl="int" name="NET_RT_MAXID" />
      <variable citdl="int" name="NET_RT_STAT" />
      <variable citdl="int" name="NET_RT_TRASH" />
      <scope ilk="function" name="NTOHL" signature="NTOHL(x)" />
      <scope ilk="function" name="NTOHS" signature="NTOHS(x)" />
      <variable citdl="int" name="PF_APPLETALK" />
      <variable citdl="int" name="PF_ATM" />
      <variable citdl="int" name="PF_CCITT" />
      <variable citdl="int" name="PF_CHAOS" />
      <variable citdl="int" name="PF_CNT" />
      <variable citdl="int" name="PF_COIP" />
      <variable citdl="int" name="PF_DATAKIT" />
      <variable citdl="int" name="PF_DECnet" />
      <variable citdl="int" name="PF_DLI" />
      <variable citdl="int" name="PF_ECMA" />
      <variable citdl="int" name="PF_HYLINK" />
      <variable citdl="int" name="PF_IMPLINK" />
      <variable citdl="int" name="PF_INET" />
      <variable citdl="int" name="PF_INET6" />
      <variable citdl="int" name="PF_IPX" />
      <variable citdl="int" name="PF_ISDN" />
      <variable citdl="int" name="PF_ISO" />
      <variable citdl="int" name="PF_KEY" />
      <variable citdl="int" name="PF_LAT" />
      <variable citdl="int" name="PF_LINK" />
      <variable citdl="int" name="PF_LOCAL" />
      <variable citdl="int" name="PF_MAX" />
      <variable citdl="int" name="PF_NATM" />
      <variable citdl="int" name="PF_NDRV" />
      <variable citdl="int" name="PF_NETBIOS" />
      <variable citdl="int" name="PF_NETGRAPH" />
      <variable citdl="int" name="PF_NS" />
      <variable citdl="int" name="PF_OSI" />
      <variable citdl="int" name="PF_PIP" />
      <variable citdl="int" name="PF_PPP" />
      <variable citdl="int" name="PF_PUP" />
      <variable citdl="int" name="PF_RESERVED_36" />
      <variable citdl="int" name="PF_ROUTE" />
      <variable citdl="int" name="PF_RTIP" />
      <variable citdl="int" name="PF_SIP" />
      <variable citdl="int" name="PF_SNA" />
      <variable citdl="int" name="PF_SYSTEM" />
      <variable citdl="int" name="PF_UNIX" />
      <variable citdl="int" name="PF_UNSPEC" />
      <variable citdl="int" name="PF_XTP" />
      <variable citdl="int" name="PTRDIFF_MAX" />
      <variable citdl="int" name="PTRDIFF_MIN" />
      <variable citdl="int" name="SCM_CREDS" />
      <variable citdl="int" name="SCM_RIGHTS" />
      <variable citdl="int" name="SCM_TIMESTAMP" />
      <variable citdl="int" name="SHUT_RD" />
      <variable citdl="int" name="SHUT_RDWR" />
      <variable citdl="int" name="SHUT_WR" />
      <variable citdl="int" name="SIG_ATOMIC_MAX" />
      <variable citdl="int" name="SIG_ATOMIC_MIN" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_MAXADDRLEN" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_ACCEPTFILTER" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_DONTTRUNC" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LABEL" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_LINGER_SEC" />
      <variable citdl="int" name="SO_NKE" />
      <variable citdl="int" name="SO_NOADDRERR" />
      <variable citdl="int" name="SO_NOSIGPIPE" />
      <variable citdl="int" name="SO_NOTIFYCONFLICT" />
      <variable citdl="int" name="SO_NREAD" />
      <variable citdl="int" name="SO_NWRITE" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_PEERLABEL" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_RESTRICTIONS" />
      <variable citdl="int" name="SO_RESTRICT_DENYIN" />
      <variable citdl="int" name="SO_RESTRICT_DENYOUT" />
      <variable citdl="int" name="SO_RESTRICT_DENYSET" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_REUSEPORT" />
      <variable citdl="int" name="SO_REUSESHAREUID" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TIMESTAMP" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SO_USELOOPBACK" />
      <variable citdl="int" name="SO_WANTMORE" />
      <variable citdl="int" name="SO_WANTOOBFLAG" />
      <variable citdl="int" name="TRAFFIC_MGT_SO_BACKGROUND" />
      <variable citdl="int" name="TRAFFIC_MGT_SO_BG_SUPPRESSED" />
      <variable citdl="int" name="UINT16_MAX" />
      <variable citdl="int" name="UINT8_MAX" />
      <variable citdl="int" name="UINT_FAST16_MAX" />
      <variable citdl="int" name="UINT_FAST8_MAX" />
      <variable citdl="int" name="UINT_LEAST16_MAX" />
      <variable citdl="int" name="UINT_LEAST8_MAX" />
      <variable citdl="int" name="WCHAR_MAX" />
      <variable citdl="int" name="WCHAR_MIN" />
      <variable citdl="int" name="WINT_MAX" />
      <variable citdl="int" name="WINT_MIN" />
      <variable citdl="int" name="__PTHREAD_ATTR_SIZE__" />
      <variable citdl="int" name="__PTHREAD_CONDATTR_SIZE__" />
      <variable citdl="int" name="__PTHREAD_COND_SIZE__" />
      <variable citdl="int" name="__PTHREAD_MUTEXATTR_SIZE__" />
      <variable citdl="int" name="__PTHREAD_MUTEX_SIZE__" />
      <variable citdl="int" name="__PTHREAD_ONCE_SIZE__" />
      <variable citdl="int" name="__PTHREAD_RWLOCKATTR_SIZE__" />
      <variable citdl="int" name="__PTHREAD_RWLOCK_SIZE__" />
      <variable citdl="int" name="__PTHREAD_SIZE__" />
      <scope ilk="function" name="__attribute__" signature="__attribute__(x)" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
      <variable citdl="int" name="pseudo_AF_HDRCMPLT" />
      <variable citdl="int" name="pseudo_AF_KEY" />
      <variable citdl="int" name="pseudo_AF_PIP" />
      <variable citdl="int" name="pseudo_AF_RTIP" />
      <variable citdl="int" name="pseudo_AF_XTP" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="audioop">
      <scope doc="Return a fragment which is the addition of the two samples&#10;passed as parameters." ilk="function" name="add" />
      <scope doc="Decode an Intel/DVI ADPCM coded fragment to a linear&#10;fragment." ilk="function" name="adpcm2lin" />
      <scope doc="Convert sound fragments in a-LAW encoding to linearly&#10;encoded sound fragments." ilk="function" name="alaw2lin" />
      <scope doc="Return the average over all samples in the fragment." ilk="function" name="avg" />
      <scope doc="Return the average peak-peak value over all samples in the&#10;fragment." ilk="function" name="avgpp" />
      <scope doc="Return a fragment that is the original fragment with a bias&#10;added to each sample." ilk="function" name="bias" />
      <scope doc="Convert big-endian samples to little-endian and vice versa." ilk="function" name="byteswap" />
      <scope doc="Return the number of zero crossings in the fragment passed&#10;as an argument." ilk="function" name="cross" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <scope doc="Return a factor F such that rms(add(fragment, mul(reference,&#10;-F))) is minimal." ilk="function" name="findfactor" />
      <scope doc="Try to match reference as well as possible to a portion of&#10;fragment." ilk="function" name="findfit" />
      <scope doc="Search fragment for a slice of specified number of samples&#10;with maximum energy." ilk="function" name="findmax" />
      <scope doc="Return the value of sample index from the fragment." ilk="function" name="getsample" />
      <scope doc="Convert samples to 4 bit Intel/DVI ADPCM encoding." ilk="function" name="lin2adpcm" />
      <scope doc="Convert samples in the audio fragment to a-LAW encoding." ilk="function" name="lin2alaw" />
      <scope doc="Convert samples between 1-, 2-, 3- and 4-byte formats." ilk="function" name="lin2lin" />
      <scope doc="Convert samples in the audio fragment to u-LAW encoding." ilk="function" name="lin2ulaw" />
      <scope doc="Return the maximum of the absolute value of all samples in a&#10;fragment." ilk="function" name="max" />
      <scope doc="Return the maximum peak-peak value in the sound fragment." ilk="function" name="maxpp" />
      <scope doc="Return the minimum and maximum values of all samples in the&#10;sound fragment." ilk="function" name="minmax" />
      <scope doc="Return a fragment that has all samples in the original&#10;fragment multiplied by the floating-point value factor." ilk="function" name="mul" />
      <scope doc="Convert the frame rate of the input fragment." ilk="function" name="ratecv" />
      <scope doc="Reverse the samples in a fragment and returns the modified&#10;fragment." ilk="function" name="reverse" />
      <scope doc="Return the root-mean-square of the fragment, i.e." ilk="function" name="rms" />
      <scope doc="Convert a stereo fragment to a mono fragment." ilk="function" name="tomono" />
      <scope doc="Generate a stereo fragment from a mono fragment." ilk="function" name="tostereo" />
      <scope doc="Convert sound fragments in u-LAW encoding to linearly&#10;encoded sound fragments." ilk="function" name="ulaw2lin" />
    </scope>
    <scope doc="Fixer that changes raw_input(...) into input(...).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_raw_input">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixRawInput">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="Header encoding and decoding functionality.&#10;" ilk="blob" lang="Python3" name="email.header">
      <variable citdl="bytes" name="BSPACE" />
      <scope classrefs="object" doc="Map character sets to their email properties.&#10;This class provides information about the requirements imposed on email for a specific character set.  It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.  Given a character set, it will do its best to provide information on how to use that character set in an email in an RFC-compliant way.  Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.  Certain character sets must be converted outright, and are not allowed in email.  Instances of this" ilk="class" name="Charset">
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode_lines" signature="header_encode_lines(self, string, maxlengths)" />
        <scope doc="Return the output character set." ilk="function" name="get_output_charset" signature="get_output_charset(self)" />
        <scope doc="Return the content-transfer-encoding used for body encoding." ilk="function" name="get_body_encoding" signature="get_body_encoding(self)" />
        <scope ilk="function" name="_get_encoder" signature="_get_encoder(self, header_bytes)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input_charset='us-ascii')" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Body-encode a string by converting it first to bytes." ilk="function" name="body_encode" signature="body_encode(self, string)" />
        <scope doc="Header-encode a string by converting it first to bytes." ilk="function" name="header_encode" signature="header_encode(self, string)" />
      </scope>
      <variable citdl="str" name="EMPTYSTRING" />
      <variable citdl="str" name="FWS" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Header">
        <scope doc="Encode a message header into an RFC-compliant format." ilk="function" name="encode" signature="encode(self, splitchars=';, \t', maxlinelen=None, linesep='\n')" />
        <scope doc="True if string s is not a ctext character of RFC822." ilk="function" name="_nonctext" signature="_nonctext(self, s)" />
        <scope doc="Return self==value." ilk="function" name="__eq__" signature="__eq__(self, other)" />
        <scope doc="Create a MIME-compliant header that can contain many&#10;character sets." ilk="function" name="__init__" signature="__init__(self, s=None, charset=None, maxlinelen=None, header_name=None, continuation_ws=' ', errors='strict')" />
        <scope ilk="function" name="_normalize" signature="_normalize(self)" />
        <scope doc="Append a string to the MIME header." ilk="function" name="append" signature="append(self, s, charset=None, errors='strict')" />
        <scope doc="Return the string value of the header." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="MessageParseError" doc="Error while parsing headers.&#10;" ilk="class" name="HeaderParseError" />
      <variable citdl="int" name="MAXLINELEN" />
      <variable citdl="str" name="NL" />
      <variable citdl="str" name="SPACE" />
      <variable citdl="str" name="SPACE8" />
      <variable citdl="Charset" name="USASCII" />
      <variable citdl="Charset" name="UTF8" />
      <variable citdl="list" name="__all__" />
      <import module="_charset" />
      <import module="binascii" />
      <scope doc="Decode a message header value without converting charset." ilk="function" name="decode_header" signature="decode_header(header)" />
      <variable citdl="SRE_Pattern" name="ecre" />
      <import module="email" />
      <variable citdl="SRE_Pattern" name="fcre" />
      <scope doc="Create a Header from a sequence of pairs as returned by&#10;decode_header()" ilk="function" name="make_header" signature="make_header(decoded_seq, maxlinelen=None, header_name=None, continuation_ws=' ')" />
      <import module="re" />
    </scope>
    <scope doc="Implementation of the UUencode and UUdecode functions.&#10;encode(in_file, out_file [,name, mode]) decode(in_file [, out_file, mode])" ilk="blob" lang="Python3" name="uu">
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="Error" />
      <variable citdl="list" name="__all__" />
      <import module="binascii" />
      <scope doc="Decode uuencoded file" ilk="function" name="decode" signature="decode(in_file, out_file=None, mode=None, quiet=False)" />
      <scope doc="Uuencode file" ilk="function" name="encode" signature="encode(in_file, out_file, name=None, mode=None)" />
      <import module="os" />
      <import module="sys" />
      <scope doc="uuencode/uudecode main program" ilk="function" name="test" signature="test()" />
    </scope>
    <scope doc="Internationalization and localization support.&#10;This module provides internationalization (I18N) and localization (L10N) support for your Python programs by providing an interface to the GNU gettext message catalog library.  I18N refers to the operation by which a program is made aware of multiple languages.  L10N refers to the adaptation of your program, once internationalized, to the local language and cultural habits." ilk="blob" lang="Python3" name="gettext">
      <scope ilk="function" name="Catalog" signature="Catalog(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)" />
      <variable citdl="int" name="ENOENT" />
      <scope classrefs="NullTranslations" doc="&#10;" ilk="class" name="GNUTranslations">
        <scope ilk="function" name="lngettext" signature="lngettext(self, msgid1, msgid2, n)" />
        <scope doc="Override this method to support alternative .mo formats." ilk="function" name="_parse" signature="_parse(self, fp)" />
        <scope ilk="function" name="gettext" signature="gettext(self, message)" />
        <scope ilk="function" name="lgettext" signature="lgettext(self, message)" />
        <scope doc="Returns a tuple of major version, minor version" ilk="function" name="_get_versions" signature="_get_versions(self, version)" />
        <scope ilk="function" name="ngettext" signature="ngettext(self, msgid1, msgid2, n)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="NullTranslations">
        <scope ilk="function" name="info" signature="info(self)" />
        <scope ilk="function" name="lngettext" signature="lngettext(self, msgid1, msgid2, n)" />
        <scope ilk="function" name="_parse" signature="_parse(self, fp)" />
        <scope ilk="function" name="output_charset" signature="output_charset(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp=None)" />
        <scope ilk="function" name="install" signature="install(self, names=None)" />
        <scope ilk="function" name="set_output_charset" signature="set_output_charset(self, charset)" />
        <scope ilk="function" name="charset" signature="charset(self)" />
        <scope ilk="function" name="gettext" signature="gettext(self, message)" />
        <scope ilk="function" name="lgettext" signature="lgettext(self, message)" />
        <scope ilk="function" name="add_fallback" signature="add_fallback(self, fallback)" />
        <scope ilk="function" name="ngettext" signature="ngettext(self, msgid1, msgid2, n)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="bind_textdomain_codeset" signature="bind_textdomain_codeset(domain, codeset=None)" />
      <scope ilk="function" name="bindtextdomain" signature="bindtextdomain(domain, localedir=None)" />
      <scope doc="Gets a C expression as used in PO files for plural forms and&#10;returns a Python lambda function that implements an&#10;equivalent expression." ilk="function" name="c2py" signature="c2py(plural)" />
      <import module="copy" />
      <scope ilk="function" name="dgettext" signature="dgettext(domain, message)" />
      <scope ilk="function" name="dngettext" signature="dngettext(domain, msgid1, msgid2, n)" />
      <scope doc="# Locate a .mo file using the gettext strategy" ilk="function" name="find" signature="find(domain, localedir=None, languages=None, all=False)" />
      <scope ilk="function" name="gettext" signature="gettext(message)" />
      <scope ilk="function" name="install" signature="install(domain, localedir=None, codeset=None, names=None)" />
      <import module="io" />
      <scope ilk="function" name="ldgettext" signature="ldgettext(domain, message)" />
      <scope ilk="function" name="ldngettext" signature="ldngettext(domain, msgid1, msgid2, n)" />
      <scope ilk="function" name="lgettext" signature="lgettext(message)" />
      <scope ilk="function" name="lngettext" signature="lngettext(msgid1, msgid2, n)" />
      <import module="locale" />
      <scope ilk="function" name="ngettext" signature="ngettext(msgid1, msgid2, n)" />
      <import module="os" />
      <import module="re" />
      <import module="struct" />
      <import module="sys" />
      <scope ilk="function" name="textdomain" signature="textdomain(domain=None)" />
      <scope ilk="function" name="translation" signature="translation(domain, localedir=None, languages=None, class_=None, fallback=False, codeset=None)" />
    </scope>
    <scope doc="Virtual environment (venv) package for Python. Based on PEP 405.&#10;Copyright (C) 2011-2014 Vinay Sajip. Licensed to the PSF under a contributor agreement.  usage: python -m venv [-h] [--system-site-packages] [--symlinks] [--clear] [--upgrade] ENV_DIR [ENV_DIR ...]  Creates virtual Python environments in one or more target directories.  positional arguments:" ilk="blob" lang="Python3" name="venv">
      <scope classrefs="object" doc="This class exists to allow virtual environment creation to be&#10;customized. The constructor parameters determine the builder's behaviour when called upon to create a virtual environment.  By default, the builder makes the system (global) site-packages dir *un*available to the created environment.  If invoked using the Python -m option, the default is to use copying on Windows platforms but symlinks elsewhere. If instantiated some other way, the default is to *not* use symlinks. " ilk="class" name="EnvBuilder">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, system_site_packages=False, clear=False, symlinks=False, upgrade=False, with_pip=False)" />
        <scope doc="Set up a Python executable in the environment." ilk="function" name="setup_python" signature="setup_python(self, context)" />
        <scope doc="Set up scripts into the created environment from a&#10;directory." ilk="function" name="setup_scripts" signature="setup_scripts(self, context)" />
        <scope ilk="function" name="clear_directory" signature="clear_directory(self, path)" />
        <scope doc="Create a configuration file indicating where the&#10;environment's Python was copied from, and whether the system&#10;site-packages should be made available in the environment." ilk="function" name="create_configuration" signature="create_configuration(self, context)" />
        <scope doc="Install scripts into the created environment from a&#10;directory." ilk="function" name="install_scripts" signature="install_scripts(self, context, path)" />
        <scope doc="Create a virtual environment in a directory." ilk="function" name="create" signature="create(self, env_dir)" />
        <scope doc="Try symlinking a file, and if that fails, fall back to&#10;copying." ilk="function" name="symlink_or_copy" signature="symlink_or_copy(self, src, dst, relative_symlinks_ok=False)" />
        <scope doc="Hook for post-setup modification of the venv." ilk="function" name="post_setup" signature="post_setup(self, context)" />
        <scope doc="Create the directories for the environment." ilk="function" name="ensure_directories" signature="ensure_directories(self, env_dir)" />
        <scope doc="Installs or upgrades pip in a virtual environment" ilk="function" name="_setup_pip" signature="_setup_pip(self, context)" />
        <scope doc="Replace variable placeholders in script text with context-&#10;specific variables." ilk="function" name="replace_variables" signature="replace_variables(self, text, context)" />
      </scope>
      <scope doc="Create a virtual environment in a directory." ilk="function" name="create" signature="create(env_dir, system_site_packages=False, clear=False, symlinks=False, with_pip=False)" />
      <variable citdl="Logger" name="logger" />
      <import module="logging" />
      <scope ilk="function" name="main" signature="main(args=None)" />
      <import module="os" />
      <import module="shutil" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="types" />
    </scope>
    <scope doc="Abstract base classes related to import.&#10;" ilk="blob" lang="Python3" name="importlib.abc">
      <scope classrefs="InspectLoader" doc="Abstract base class for loaders that wish to support the execution of&#10;modules as scripts.  This ABC represents one of the optional protocols specified in PEP 302." ilk="class" name="ExecutionLoader">
        <scope doc="Abstract method which should return the value that __file__&#10;is to be set to." ilk="function" name="get_filename" signature="get_filename(self, fullname)" />
        <scope doc="Method to return the code object for fullname." ilk="function" name="get_code" signature="get_code(self, fullname)" />
      </scope>
      <scope classrefs="FileLoader ResourceLoader ExecutionLoader" doc="Abstract base class partially implementing the ResourceLoader and&#10;ExecutionLoader ABCs." ilk="class" name="FileLoader" />
      <scope classrefs="object" doc="Legacy abstract base class for import finders.&#10;It may be subclassed for compatibility with legacy third party reimplementations of the import system.  Otherwise, finder implementations should derive from the more specific MetaPathFinder or PathEntryFinder ABCs." ilk="class" name="Finder">
        <scope doc="An abstract method that should find a module." ilk="function" name="find_module" signature="find_module(self, fullname, path=None)" />
      </scope>
      <scope classrefs="Loader" doc="Abstract base class for loaders which support inspection about the&#10;modules they can load.  This ABC represents one of the optional protocols specified by PEP 302." ilk="class" name="InspectLoader">
        <scope doc="Compile 'data' into a code object." ilk="function" name="source_to_code" signature="source_to_code(data, path='&lt;string&gt;')" />
        <scope doc="Optional method which when implemented should return whether&#10;the module is a package." ilk="function" name="is_package" signature="is_package(self, fullname)" />
        <scope doc="Execute the module." ilk="function" name="exec_module" signature="exec_module(self, module)" />
        <scope doc="Abstract method which should return the source code for the&#10;module." ilk="function" name="get_source" signature="get_source(self, fullname)" />
        <scope doc="Method which returns the code object for the module." ilk="function" name="get_code" signature="get_code(self, fullname)" />
        <scope ilk="function" name="load_module" signature="load_module(self, fullname)" />
      </scope>
      <scope classrefs="object" doc="Abstract base class for import loaders.&#10;" ilk="class" name="Loader">
        <scope doc="Return a module to initialize and into which to load." ilk="function" name="create_module" signature="create_module(self, spec)" />
        <scope doc="Return a module's repr." ilk="function" name="module_repr" signature="module_repr(self, module)" />
        <scope doc="Return the loaded module." ilk="function" name="load_module" signature="load_module(self, fullname)" />
      </scope>
      <scope classrefs="Finder" doc="Abstract base class for import finders on sys.meta_path.&#10;" ilk="class" name="MetaPathFinder">
        <scope doc="An optional method for clearing the finder's cache, if any." ilk="function" name="invalidate_caches" signature="invalidate_caches(self)" />
        <scope doc="Return a loader for the module." ilk="function" name="find_module" signature="find_module(self, fullname, path)" />
      </scope>
      <scope classrefs="Finder" doc="Abstract base class for path entry finders used by PathFinder.&#10;" ilk="class" name="PathEntryFinder">
        <scope doc="An optional method for clearing the finder's cache, if any." ilk="function" name="invalidate_caches" signature="invalidate_caches(self)" />
        <scope doc="Try to find a loader for the specified module by delegating&#10;to self.find_loader()." ilk="function" name="find_module" signature="find_module(self, fullname)" />
        <scope doc="The fullname is a str." ilk="function" name="find_loader" signature="Return (loader, namespace portion) for the path entry." />
      </scope>
      <scope classrefs="Loader" doc="Abstract base class for loaders which can return data from their&#10;back-end storage.  This ABC represents one of the optional protocols specified by PEP 302." ilk="class" name="ResourceLoader">
        <scope doc="Abstract method which when implemented should return the&#10;bytes for the specified path." ilk="function" name="get_data" signature="get_data(self, path)" />
      </scope>
      <scope classrefs="SourceLoader ResourceLoader ExecutionLoader" doc="Abstract base class for loading source code (and optionally any&#10;corresponding bytecode).  To support loading from source code, the abstractmethods inherited from ResourceLoader and ExecutionLoader need to be implemented. To also support loading from bytecode, the optional methods specified directly by this ABC is required.  Inherited abstractmethods not implemented in this ABC:  * ResourceLoader.get_data" ilk="class" name="SourceLoader">
        <scope doc="Write the bytes to the path (if possible)." ilk="function" name="set_data" signature="set_data(self, path, data)" />
        <scope doc="Return a metadata dict for the source pointed to by the path&#10;(str)." ilk="function" name="path_stats" signature="path_stats(self, path)" />
        <scope doc="Return the (int) modification time for the path (str)." ilk="function" name="path_mtime" signature="path_mtime(self, path)" />
      </scope>
      <import module="_bootstrap" />
      <import module="_bootstrap_external" />
      <import module="_frozen_importlib" />
      <import module="_frozen_importlib_external" />
      <import module="abc" />
      <import module="machinery" />
    </scope>
    <scope doc="Helper to provide extensibility for pickle.&#10;This is only useful to add pickle support for extension types defined in C, not for instances of user-defined classes." ilk="blob" lang="Python3" name="copyreg">
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="__newobj__" signature="__newobj__(cls, *args)" />
      <scope doc="Used by pickle protocol 4, instead of __newobj__ to allow&#10;classes with keyword-only arguments to be pickled correctly." ilk="function" name="__newobj_ex__" signature="__newobj_ex__(cls, args, kwargs)" />
      <scope doc="Register an extension code." ilk="function" name="add_extension" signature="add_extension(module, name, code)" />
      <scope ilk="function" name="clear_extension_cache" signature="clear_extension_cache()" />
      <scope ilk="function" name="constructor" signature="constructor(object)" />
      <variable citdl="dict" name="dispatch_table" />
      <scope ilk="function" name="pickle" signature="pickle(ob_type, pickle_function, constructor_ob=None)" />
      <scope ilk="function" name="pickle_complex" signature="pickle_complex(c)" />
      <scope doc="Unregister an extension code. For testing only." ilk="function" name="remove_extension" signature="remove_extension(module, name, code)" />
    </scope>
    <scope doc="Classes to generate plain text from a message object tree.&#10;" ilk="blob" lang="Python3" name="email.generator">
      <scope classrefs="Generator" doc="Generates a bytes version of a Message object tree.&#10;Functionally identical to the base Generator except that the output is bytes and not string.  When surrogates were used in the input to encode bytes, these are decoded back to bytes for output.  If the policy has cte_type set to 7bit, then the message is transformed such that the non-ASCII bytes are properly content transfer encoded, using the charset unknown-8bit.  The outfp object must accept bytes in its write method." ilk="class" name="BytesGenerator">
        <scope ilk="function" name="_handle_text" signature="_handle_text(self, msg)" />
        <scope ilk="function" name="_write_headers" signature="_write_headers(self, msg)" />
        <scope ilk="function" name="write" signature="write(self, s)" />
        <scope ilk="function" name="_new_buffer" signature="_new_buffer(self)" />
        <scope ilk="function" name="_writeBody" signature="_writeBody(self, msg)" />
        <scope ilk="function" name="_compile_re" />
        <scope ilk="function" name="_encode" signature="_encode(self, s)" />
      </scope>
      <scope classrefs="_BufferedIOBase" doc="Buffered I/O implementation using an in-memory bytes buffer.&#10;" ilk="class" name="BytesIO">
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read1" />
        <scope doc="Truncate the file to at most size bytes." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="List of bytes objects, each a line from the file." ilk="function" name="readlines" />
        <scope doc="Read up to len(buffer) bytes into buffer." ilk="function" name="readinto" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the BytesIO object." ilk="function" name="getvalue" />
        <scope doc="Next line from the file, as a bytes object." ilk="function" name="readline" />
        <scope doc="Always returns False." ilk="function" name="isatty" />
        <scope doc="Disable all I/O operations." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Does nothing." ilk="function" name="flush" />
        <scope doc="Write bytes to file." ilk="function" name="write" />
        <scope doc="Read at most size bytes, returned as a bytes object." ilk="function" name="read" />
        <scope doc="Current file position, an integer." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Write lines to the file." ilk="function" name="writelines" />
        <scope doc="Get a read-write view over the contents of the BytesIO&#10;object." ilk="function" name="getbuffer" />
        <scope doc="size of object in memory, in bytes" ilk="function" name="__sizeof__" returns="int" signature="__sizeof__() -&gt; int" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
      </scope>
      <scope classrefs="Generator" doc="Generates a text representation of a message.&#10;Like the Generator base class, except that non-text parts are substituted with a format string representing the part." ilk="class" name="DecodedGenerator">
        <scope doc="Like Generator.__init__() except that an additional optional&#10;argument is allowed." ilk="function" name="__init__" signature="__init__(self, outfp, mangle_from_=None, maxheaderlen=78, fmt=None)" />
        <scope ilk="function" name="_dispatch" signature="_dispatch(self, msg)" />
      </scope>
      <scope classrefs="object" doc="Generates output from a Message object tree.&#10;This basic generator writes the message to the given file object as plain text." ilk="class" name="Generator">
        <scope ilk="function" name="_handle_text" signature="_handle_text(self, msg)" />
        <scope ilk="function" name="_write_headers" signature="_write_headers(self, msg)" />
        <scope ilk="function" name="_handle_message_delivery_status" signature="_handle_message_delivery_status(self, msg)" />
        <scope ilk="function" name="_handle_message" signature="_handle_message(self, msg)" />
        <scope ilk="function" name="_write_lines" signature="_write_lines(self, lines)" />
        <scope doc="Create the generator for message flattening." ilk="function" name="__init__" signature="__init__(self, outfp, mangle_from_=None, maxheaderlen=None, *, policy=None)" />
        <scope ilk="function" name="_writeBody" signature="_writeBody(self, msg)" />
        <scope doc="Print the message object tree rooted at msg to the output&#10;file specified when the Generator instance was created." ilk="function" name="flatten" signature="flatten(self, msg, unixfrom=False, linesep=None)" />
        <scope ilk="function" name="_encode" signature="_encode(self, s)" />
        <scope ilk="function" name="_dispatch" signature="_dispatch(self, msg)" />
        <scope ilk="function" name="_handle_multipart" signature="_handle_multipart(self, msg)" />
        <scope ilk="function" name="_compile_re" />
        <scope doc="# This used to be a module level function; we use a&#10;classmethod for this # and _compile_re so we can continue to&#10;provide the module level function # for backward&#10;compatibility by doing #   _make_boundary =&#10;Generator._make_boundary" ilk="function" name="_make_boundary" />
        <scope ilk="function" name="write" signature="write(self, s)" />
        <scope ilk="function" name="_handle_multipart_signed" signature="_handle_multipart_signed(self, msg)" />
        <scope doc="Clone this generator with the exact same options." ilk="function" name="clone" signature="clone(self, fp)" />
        <scope ilk="function" name="_new_buffer" signature="_new_buffer(self)" />
        <scope ilk="function" name="_write" signature="_write(self, msg)" />
      </scope>
      <variable citdl="str" name="NL" />
      <scope classrefs="_TextIOBase" doc="Text I/O implementation using an in-memory buffer.&#10;The initial_value argument sets the value of object.  The newline argument is like the one of TextIOWrapper's constructor." ilk="class" name="StringIO">
        <scope doc="Read at most size characters, returned as a string." ilk="function" name="read" />
        <scope doc="Read until newline or EOF." ilk="function" name="readline" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns True if the IO object can be read." ilk="function" name="readable" />
        <scope doc="Close the IO object." ilk="function" name="close" />
        <scope doc="Returns True if the IO object can be written." ilk="function" name="writable" />
        <scope doc="Returns True if the IO object can be seeked." ilk="function" name="seekable" />
        <scope doc="Write string to file." ilk="function" name="write" />
        <scope doc="Truncate size to pos." ilk="function" name="truncate" />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Tell the current file position." ilk="function" name="tell" />
        <scope ilk="function" name="__getstate__" />
        <scope doc="Change stream position." ilk="function" name="seek" />
        <scope doc="Retrieve the entire contents of the object." ilk="function" name="getvalue" />
      </scope>
      <variable citdl="str" name="UNDERSCORE" />
      <variable citdl="list" name="__all__" />
      <scope doc="Deep copy operation on arbitrary Python objects." ilk="function" name="deepcopy" signature="deepcopy(x, memo=None, _nil=[])" />
      <variable citdl="SRE_Pattern" name="fcre" />
      <import module="random" />
      <import module="re" />
      <import module="sys" />
      <import module="time" />
    </scope>
    <scope doc="Base implementation of event loop.&#10;The event loop can be broken up into a multiplexer (the part responsible for notifying us of I/O events) and the event loop proper, which wraps a multiplexer with functionality for scheduling callbacks, immediately or at a given time in the future.  Whenever a public API takes a callback, subsequent positional arguments will be passed to the callback if/when it is called.  This avoids the proliferation of trivial lambdas implementing closures. Keyword arguments for the callback are not supported; this is a conscious design decision, leaving the door open for keyword arguments" ilk="blob" lang="Python3" name="asyncio.base_events">
      <scope classrefs="AbstractEventLoop" doc="Abstract event loop.&#10;" ilk="class" name="BaseEventLoop">
        <scope doc="Returns True if the event loop is running." ilk="function" name="is_running" signature="is_running(self)" />
        <scope doc="Write a byte to self-pipe, to wake up the event loop." ilk="function" name="_write_to_self" signature="_write_to_self(self)" />
        <scope doc="Arrange for a callback to be called at a given time." ilk="function" name="call_later" signature="call_later(self, delay, callback, *args)" />
        <scope ilk="function" name="_create_server_getaddrinfo" signature="_create_server_getaddrinfo(self, host, port, family, flags)" />
        <scope doc="Create a TCP server." ilk="function" name="create_server" signature="create_server(self, protocol_factory, host=None, port=None, *, family=&lt;AddressFamily.AF_UNSPEC: 0&gt;, flags=1, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None)" />
        <scope doc="Create read pipe transport." ilk="function" name="_make_read_pipe_transport" signature="_make_read_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Schedule a coroutine object." ilk="function" name="create_task" signature="create_task(self, coro)" />
        <scope doc="Create SSL transport." ilk="function" name="_make_ssl_transport" signature="_make_ssl_transport(self, rawsock, protocol, sslcontext, waiter=None, *, server_side=False, server_hostname=None, extra=None, server=None)" />
        <scope ilk="function" name="_set_coroutine_wrapper" signature="_set_coroutine_wrapper(self, enabled)" />
        <scope ilk="function" name="_create_connection_transport" signature="_create_connection_transport(self, sock, protocol_factory, ssl, server_hostname)" />
        <scope doc="Close the event loop." ilk="function" name="close" signature="close(self)" />
        <scope doc="Run until stop() is called." ilk="function" name="run_forever" signature="run_forever(self)" />
        <scope doc="Create datagram transport." ilk="function" name="_make_datagram_transport" signature="_make_datagram_transport(self, sock, protocol, address=None, waiter=None, extra=None)" />
        <scope ilk="function" name="_call_soon" signature="_call_soon(self, callback, args)" />
        <scope ilk="function" name="set_default_executor" signature="set_default_executor(self, executor)" />
        <scope doc="Return the time according to the event loop's clock." ilk="function" name="time" signature="time(self)" />
        <scope doc="Arrange for a callback to be called as soon as possible." ilk="function" name="call_soon" signature="call_soon(self, callback, *args)" />
        <scope doc="Add a Handle to _scheduled (TimerHandle) or _ready." ilk="function" name="_add_callback" signature="_add_callback(self, handle)" />
        <scope ilk="function" name="_check_closed" signature="_check_closed(self)" />
        <scope doc="Set a task factory that will be used by loop.create_task()." ilk="function" name="set_task_factory" signature="set_task_factory(self, factory)" />
        <scope doc="Create write pipe transport." ilk="function" name="_make_write_pipe_transport" signature="_make_write_pipe_transport(self, pipe, protocol, waiter=None, extra=None)" />
        <scope doc="Call the current event loop's exception handler." ilk="function" name="call_exception_handler" signature="call_exception_handler(self, context)" />
        <scope ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Check that the current thread is the thread running the&#10;event loop." ilk="function" name="_check_thread" signature="_check_thread(self)" />
        <scope ilk="function" name="set_debug" signature="set_debug(self, enabled)" />
        <scope doc="Notification that a TimerHandle has been cancelled." ilk="function" name="_timer_handle_cancelled" signature="_timer_handle_cancelled(self, handle)" />
        <scope ilk="function" name="_log_subprocess" signature="_log_subprocess(self, msg, stdin, stdout, stderr)" />
        <scope doc="Default exception handler." ilk="function" name="default_exception_handler" signature="default_exception_handler(self, context)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="run_in_executor" signature="run_in_executor(self, executor, func, *args)" />
        <scope doc="Return a task factory, or None if the default one is in use." ilk="function" name="get_task_factory" signature="get_task_factory(self)" />
        <scope ilk="function" name="get_debug" signature="get_debug(self)" />
        <scope ilk="function" name="subprocess_shell" signature="subprocess_shell(self, protocol_factory, cmd, *, stdin=-1, stdout=-1, stderr=-1, universal_newlines=False, shell=True, bufsize=0, **kwargs)" />
        <scope ilk="function" name="_getaddrinfo_debug" signature="_getaddrinfo_debug(self, host, port, family, type, proto, flags)" />
        <scope ilk="function" name="getaddrinfo" signature="getaddrinfo(self, host, port, *, family=0, type=0, proto=0, flags=0)" />
        <scope doc="Like call_later(), but uses an absolute time." ilk="function" name="call_at" signature="call_at(self, when, callback, *args)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Like call_soon(), but thread-safe." ilk="function" name="call_soon_threadsafe" signature="call_soon_threadsafe(self, callback, *args)" />
        <scope doc="Like _add_callback() but called from a signal handler." ilk="function" name="_add_callback_signalsafe" signature="_add_callback_signalsafe(self, handle)" />
        <scope ilk="function" name="getnameinfo" signature="getnameinfo(self, sockaddr, flags=0)" />
        <scope doc="Returns True if the event loop was closed." ilk="function" name="is_closed" signature="is_closed(self)" />
        <scope doc="Run one full iteration of the event loop." ilk="function" name="_run_once" signature="_run_once(self)" />
        <scope doc="Stop running the event loop." ilk="function" name="stop" signature="stop(self)" />
        <scope doc="Create socket transport." ilk="function" name="_make_socket_transport" signature="_make_socket_transport(self, sock, protocol, waiter=None, *, extra=None, server=None)" />
        <scope doc="Create subprocess transport." ilk="function" name="_make_subprocess_transport" signature="_make_subprocess_transport(*args, **kw)" />
        <scope doc="Run until the Future is done." ilk="function" name="run_until_complete" signature="run_until_complete(self, future)" />
        <scope ilk="function" name="subprocess_exec" signature="subprocess_exec(self, protocol_factory, program, *args, stdin=-1, stdout=-1, stderr=-1, universal_newlines=False, shell=False, bufsize=0, **kwargs)" />
        <scope doc="Create datagram connection." ilk="function" name="create_datagram_endpoint" signature="create_datagram_endpoint(self, protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)" />
        <scope doc="Process selector events." ilk="function" name="_process_events" signature="_process_events(self, event_list)" />
        <scope doc="Connect to a TCP server." ilk="function" name="create_connection" signature="create_connection(self, protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None)" />
        <scope doc="Set handler as the new event loop exception handler." ilk="function" name="set_exception_handler" signature="set_exception_handler(self, handler)" />
        <scope doc="Register read pipe in event loop." ilk="function" name="connect_read_pipe" signature="connect_read_pipe(self, protocol_factory, pipe)" />
        <scope doc="Register write pipe in event loop." ilk="function" name="connect_write_pipe" signature="connect_write_pipe(self, protocol_factory, pipe)" />
      </scope>
      <scope classrefs="AbstractServer" doc="Abstract server returned by create_server().&#10;" ilk="class" name="Server">
        <scope doc="Stop serving. This leaves existing connections open." ilk="function" name="close" signature="close(self)" />
        <scope ilk="function" name="_wakeup" signature="_wakeup(self)" />
        <scope ilk="function" name="_detach" signature="_detach(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, loop, sockets)" />
        <scope ilk="function" name="_attach" signature="_attach(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Coroutine to wait until service is closed." ilk="function" name="wait_closed" signature="wait_closed(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="compat" />
      <import module="concurrent" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <import module="coroutines" />
      <import module="events" />
      <import module="futures" />
      <import module="heapq" />
      <import module="inspect" />
      <import module="itertools" />
      <variable citdl="Logger" name="logger" />
      <import module="logging" />
      <import module="os" />
      <import module="socket" />
      <import module="subprocess" />
      <import module="sys" />
      <import module="tasks" />
      <import module="threading" />
      <import module="time" />
      <import module="traceback" />
      <import module="warnings" />
    </scope>
    <scope doc="Parser for command line options.&#10;This module helps scripts to parse the command line arguments in sys.argv.  It supports the same conventions as the Unix getopt() function (including the special meanings of arguments of the form `-' and `--').  Long options similar to those supported by GNU software may be used as well via an optional third argument.  This module provides two functions and an exception:  getopt() -- Parse command line options gnu_getopt() -- Like getopt(), but allow option and non-option arguments to be intermixed." ilk="blob" lang="Python3" name="getopt">
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="GetoptError">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, opt='')" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="do_longs" signature="do_longs(opts, opt, longopts, args)" />
      <scope ilk="function" name="do_shorts" signature="do_shorts(opts, optstring, shortopts, args)" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, msg, opt='')" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope doc="Parses command line options and parameter list." ilk="function" name="getopt" signature="getopt(args, options[, long_options]) -&gt; opts, args" />
      <scope doc="This function works like getopt(), except that GNU style&#10;scanning mode is used by default." ilk="function" name="gnu_getopt" signature="getopt(args, options[, long_options]) -&gt; opts, args" />
      <scope doc="# Return: #   has_arg? #   full option name" ilk="function" name="long_has_args" signature="long_has_args(opt, longopts)" />
      <import module="os" />
      <scope ilk="function" name="short_has_arg" signature="short_has_arg(opt, shortopts)" />
    </scope>
    <scope doc="distutils.filelist&#10;Provides the FileList class, used for poking about the filesystem and building lists of files." ilk="blob" lang="Python3" name="distutils.filelist">
      <scope classrefs="DistutilsError" doc="Internal inconsistencies or impossibilities (obviously, this&#10;should never be seen if the code is working!)." ilk="class" name="DistutilsInternalError" />
      <scope classrefs="DistutilsError" doc="Syntax error in a file list template.&#10;" ilk="class" name="DistutilsTemplateError" />
      <scope classrefs="object" doc="A list of files built by on exploring the filesystem and filtered by&#10;applying various patterns to what we find there.  Instance attributes: dir directory from which files will be taken -- only used if 'allfiles' not supplied to constructor files list of filenames currently being built/filtered/manipulated allfiles complete list of files under consideration (ie. without any" ilk="class" name="FileList">
        <scope ilk="function" name="extend" signature="extend(self, items)" />
        <scope doc="Remove strings (presumably filenames) from 'files' that&#10;match 'pattern'." ilk="function" name="exclude_pattern" signature="exclude_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)" />
        <scope ilk="function" name="remove_duplicates" signature="remove_duplicates(self)" />
        <scope ilk="function" name="findall" signature="findall(self, dir='.')" />
        <scope ilk="function" name="_parse_template_line" signature="_parse_template_line(self, line)" />
        <scope ilk="function" name="process_template_line" signature="process_template_line(self, line)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, warn=None, debug_print=None)" />
        <scope doc="Select strings (presumably filenames) from 'self.files' that&#10;match 'pattern', a Unix-style wildcard (glob) pattern." ilk="function" name="include_pattern" signature="include_pattern(self, pattern, anchor=1, prefix=None, is_regex=0)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope ilk="function" name="sort" signature="sort(self)" />
        <scope ilk="function" name="append" signature="append(self, item)" />
        <scope ilk="function" name="set_allfiles" signature="set_allfiles(self, allfiles)" />
      </scope>
      <scope doc="Return 'pathname' as a name that will work on the native&#10;filesystem, i.e." ilk="function" name="convert_path" signature="convert_path(pathname)" />
      <scope doc="Find all files under 'dir' and return the list of full&#10;filenames (relative to 'dir')." ilk="function" name="findall" signature="findall(dir='.')" />
      <import module="fnmatch" />
      <scope doc="Translate a shell-like glob pattern to a regular expression;&#10;return a string containing the regex." ilk="function" name="glob_to_re" signature="glob_to_re(pattern)" />
      <import module="log" />
      <import module="os" />
      <import module="re" />
      <scope doc="Translate a shell-like wildcard pattern to a compiled&#10;regular expression." ilk="function" name="translate_pattern" signature="translate_pattern(pattern, anchor=1, prefix=None, is_regex=0)" />
    </scope>
    <scope doc="OS routines for NT or Posix depending on what system we're on.&#10;This exports: - all functions from posix, nt or ce, e.g. unlink, stat, etc. - os.path is either posixpath or ntpath - os.name is either 'posix', 'nt' or 'ce'. - os.curdir is a string representing the current directory ('.' or ':') - os.pardir is a string representing the parent directory ('..' or '::') - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\') - os.extsep is the extension separator (always '.') - os.altsep is the alternate pathname separator (None or '/') - os.pathsep is the component separator used in $PATH etc" ilk="blob" lang="Python3" name="os">
      <variable citdl="int" name="CLD_CONTINUED" />
      <variable citdl="int" name="CLD_DUMPED" />
      <variable citdl="int" name="CLD_EXITED" />
      <variable citdl="int" name="CLD_TRAPPED" />
      <variable citdl="int" name="EX_CANTCREAT" />
      <variable citdl="int" name="EX_CONFIG" />
      <variable citdl="int" name="EX_DATAERR" />
      <variable citdl="int" name="EX_IOERR" />
      <variable citdl="int" name="EX_NOHOST" />
      <variable citdl="int" name="EX_NOINPUT" />
      <variable citdl="int" name="EX_NOPERM" />
      <variable citdl="int" name="EX_NOUSER" />
      <variable citdl="int" name="EX_OK" />
      <variable citdl="int" name="EX_OSERR" />
      <variable citdl="int" name="EX_OSFILE" />
      <variable citdl="int" name="EX_PROTOCOL" />
      <variable citdl="int" name="EX_SOFTWARE" />
      <variable citdl="int" name="EX_TEMPFAIL" />
      <variable citdl="int" name="EX_UNAVAILABLE" />
      <variable citdl="int" name="EX_USAGE" />
      <variable citdl="int" name="F_LOCK" />
      <variable citdl="int" name="F_OK" />
      <variable citdl="int" name="F_TEST" />
      <variable citdl="int" name="F_TLOCK" />
      <variable citdl="int" name="F_ULOCK" />
      <scope classrefs="Mapping" doc="&#10;" ilk="class" name="MutableMapping">
        <scope doc="D.clear() -&gt; None.  Remove all items from D." ilk="function" name="clear" signature="D.clear() -&gt; None.  Remove all items from D." />
        <scope ilk="function" name="__delitem__" signature="__delitem__(self, key)" />
        <scope doc="If key is not found, d is returned if given, otherwise&#10;KeyError is raised." ilk="function" name="pop" signature="D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value." />
        <scope doc="If E present and has a .keys() method, does:     for k in E:&#10;D[k] = E[k] If E present and lacks .keys() method, does: for&#10;(k, v) in E: D[k] = v In either case, this is followed by:&#10;for k, v in F.items(): D[k] = v" ilk="function" name="update" signature="D.update([E, ]**F) -&gt; None.  Update D from mapping/iterable E and F." />
        <scope ilk="function" name="__setitem__" signature="__setitem__(self, key, value)" />
        <scope doc="as a 2-tuple; but raise KeyError if D is empty." ilk="function" name="popitem" signature="D.popitem() -&gt; (k, v), remove and return some (key, value) pair" />
        <scope doc="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" ilk="function" name="setdefault" signature="D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D" />
      </scope>
      <variable citdl="int" name="NGROUPS_MAX" />
      <variable citdl="int" name="O_ACCMODE" />
      <variable citdl="int" name="O_APPEND" />
      <variable citdl="int" name="O_ASYNC" />
      <variable citdl="int" name="O_CLOEXEC" />
      <variable citdl="int" name="O_CREAT" />
      <variable citdl="int" name="O_DIRECT" />
      <variable citdl="int" name="O_DIRECTORY" />
      <variable citdl="int" name="O_DSYNC" />
      <variable citdl="int" name="O_EXCL" />
      <variable citdl="int" name="O_LARGEFILE" />
      <variable citdl="int" name="O_NDELAY" />
      <variable citdl="int" name="O_NOATIME" />
      <variable citdl="int" name="O_NOCTTY" />
      <variable citdl="int" name="O_NOFOLLOW" />
      <variable citdl="int" name="O_NONBLOCK" />
      <variable citdl="int" name="O_PATH" />
      <variable citdl="int" name="O_RDONLY" />
      <variable citdl="int" name="O_RDWR" />
      <variable citdl="int" name="O_RSYNC" />
      <variable citdl="int" name="O_SYNC" />
      <variable citdl="int" name="O_TMPFILE" />
      <variable citdl="int" name="O_TRUNC" />
      <variable citdl="int" name="O_WRONLY" />
      <variable citdl="int" name="POSIX_FADV_DONTNEED" />
      <variable citdl="int" name="POSIX_FADV_NOREUSE" />
      <variable citdl="int" name="POSIX_FADV_NORMAL" />
      <variable citdl="int" name="POSIX_FADV_RANDOM" />
      <variable citdl="int" name="POSIX_FADV_SEQUENTIAL" />
      <variable citdl="int" name="POSIX_FADV_WILLNEED" />
      <variable citdl="int" name="PRIO_PGRP" />
      <variable citdl="int" name="PRIO_PROCESS" />
      <variable citdl="int" name="PRIO_USER" />
      <variable citdl="int" name="P_ALL" />
      <variable citdl="int" name="P_NOWAIT" />
      <variable citdl="int" name="P_NOWAITO" />
      <variable citdl="int" name="P_PGID" />
      <variable citdl="int" name="P_PID" />
      <variable citdl="int" name="P_WAIT" />
      <variable citdl="int" name="RTLD_DEEPBIND" />
      <variable citdl="int" name="RTLD_GLOBAL" />
      <variable citdl="int" name="RTLD_LAZY" />
      <variable citdl="int" name="RTLD_LOCAL" />
      <variable citdl="int" name="RTLD_NODELETE" />
      <variable citdl="int" name="RTLD_NOLOAD" />
      <variable citdl="int" name="RTLD_NOW" />
      <variable citdl="int" name="R_OK" />
      <variable citdl="int" name="SCHED_BATCH" />
      <variable citdl="int" name="SCHED_FIFO" />
      <variable citdl="int" name="SCHED_IDLE" />
      <variable citdl="int" name="SCHED_OTHER" />
      <variable citdl="int" name="SCHED_RESET_ON_FORK" />
      <variable citdl="int" name="SCHED_RR" />
      <variable citdl="int" name="SEEK_CUR" />
      <variable citdl="int" name="SEEK_DATA" />
      <variable citdl="int" name="SEEK_END" />
      <variable citdl="int" name="SEEK_HOLE" />
      <variable citdl="int" name="SEEK_SET" />
      <variable citdl="int" name="ST_APPEND" />
      <variable citdl="int" name="ST_MANDLOCK" />
      <variable citdl="int" name="ST_NOATIME" />
      <variable citdl="int" name="ST_NODEV" />
      <variable citdl="int" name="ST_NODIRATIME" />
      <variable citdl="int" name="ST_NOEXEC" />
      <variable citdl="int" name="ST_NOSUID" />
      <variable citdl="int" name="ST_RDONLY" />
      <variable citdl="int" name="ST_RELATIME" />
      <variable citdl="int" name="ST_SYNCHRONOUS" />
      <variable citdl="int" name="ST_WRITE" />
      <variable citdl="int" name="TMP_MAX" />
      <variable citdl="int" name="WCONTINUED" />
      <scope doc="Return True if the process returning status was dumped to a&#10;core file." ilk="function" name="WCOREDUMP" />
      <variable citdl="int" name="WEXITED" />
      <scope doc="Return the process return code from status." ilk="function" name="WEXITSTATUS" />
      <scope doc="Return True if a particular process was continued from a job&#10;control stop." ilk="function" name="WIFCONTINUED" />
      <scope doc="Return True if the process returning status exited via the&#10;exit() system call." ilk="function" name="WIFEXITED" />
      <scope doc="Return True if the process returning status was terminated&#10;by a signal." ilk="function" name="WIFSIGNALED" />
      <scope doc="Return True if the process returning status was stopped." ilk="function" name="WIFSTOPPED" />
      <variable citdl="int" name="WNOHANG" />
      <variable citdl="int" name="WNOWAIT" />
      <variable citdl="int" name="WSTOPPED" />
      <scope doc="Return the signal that stopped the process that provided the&#10;status value." ilk="function" name="WSTOPSIG" />
      <scope doc="Return the signal that terminated the process that provided&#10;the status value." ilk="function" name="WTERMSIG" />
      <variable citdl="int" name="WUNTRACED" />
      <variable citdl="int" name="W_OK" />
      <variable citdl="int" name="XATTR_CREATE" />
      <variable citdl="int" name="XATTR_REPLACE" />
      <variable citdl="int" name="XATTR_SIZE_MAX" />
      <variable citdl="int" name="X_OK" />
      <variable citdl="list" name="__all__" />
      <scope doc="Abort the interpreter immediately." ilk="function" name="abort" />
      <scope doc="Use the real uid/gid to test for access to a path." ilk="function" name="access" />
      <variable citdl="NoneType" name="altsep" />
      <scope doc="Change the current working directory to the specified path." ilk="function" name="chdir" />
      <scope doc="Change the access permissions of a file." ilk="function" name="chmod" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#10;gid.\" ilk="function" name="chown" />
      <scope doc="Change root directory to path." ilk="function" name="chroot" />
      <scope doc="Close a file descriptor." ilk="function" name="close" />
      <scope doc="Closes all file descriptors in [fd_low, fd_high), ignoring&#10;errors." ilk="function" name="closerange" />
      <scope doc="Return a string-valued system configuration variable." ilk="function" name="confstr" />
      <variable citdl="dict" name="confstr_names" />
      <scope doc="Return the number of CPUs in the system; return None if&#10;indeterminable." ilk="function" name="cpu_count" />
      <scope doc="Return the name of the controlling terminal for this&#10;process." ilk="function" name="ctermid" />
      <variable citdl="str" name="curdir" />
      <variable citdl="str" name="defpath" />
      <scope doc="Return a string describing the encoding of a terminal's file&#10;descriptor." ilk="function" name="device_encoding" />
      <variable citdl="str" name="devnull" />
      <scope doc="Return a duplicate of a file descriptor." ilk="function" name="dup" />
      <scope doc="Duplicate file descriptor." ilk="function" name="dup2" />
      <variable citdl="_Environ" name="environ" />
      <variable citdl="_Environ" name="environb" />
      <import module="errno" />
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Execute the executable file with argument list args,&#10;replacing the current process." ilk="function" name="execl" signature="execl(file, *args)" />
      <scope doc="Execute the executable file with argument list args and&#10;environment env, replacing the current process." ilk="function" name="execle" signature="execle(file, *args, env)" />
      <scope doc="Execute the executable file (which is searched for along&#10;$PATH) with argument list args, replacing the current&#10;process." ilk="function" name="execlp" signature="execlp(file, *args)" />
      <scope doc="Execute the executable file (which is searched for along&#10;$PATH) with argument list args and environment env,&#10;replacing the current process." ilk="function" name="execlpe" signature="execlpe(file, *args, env)" />
      <scope doc="Execute an executable path with arguments, replacing current&#10;process." ilk="function" name="execv" />
      <scope doc="Execute an executable path with arguments, replacing current&#10;process." ilk="function" name="execve" />
      <scope doc="Execute the executable file (which is searched for along&#10;$PATH) with argument list args, replacing the current&#10;process." ilk="function" name="execvp" signature="execvp(file, args)" />
      <scope doc="Execute the executable file (which is searched for along&#10;$PATH) with argument list args and environment env ,&#10;replacing the current process." ilk="function" name="execvpe" signature="execvpe(file, args, env)" />
      <variable citdl="str" name="extsep" />
      <scope doc="Change to the directory of the given file descriptor." ilk="function" name="fchdir" />
      <scope doc="Change the access permissions of the file given by file&#10;descriptor fd." ilk="function" name="fchmod" />
      <scope doc="Change the owner and group id of the file specified by file&#10;descriptor." ilk="function" name="fchown" />
      <scope doc="Force write of fd to disk without forcing update of&#10;metadata." ilk="function" name="fdatasync" />
      <scope doc="# Supply os.fdopen()" ilk="function" name="fdopen" signature="fdopen(fd, *args, **kwargs)" />
      <scope doc="Fork a child process." ilk="function" name="fork" />
      <scope doc="Fork a new process with a new pseudo-terminal as controlling&#10;tty." ilk="function" name="forkpty" />
      <scope doc="Return the configuration limit name for the file descriptor&#10;fd." ilk="function" name="fpathconf" />
      <scope doc="Decode filename from the filesystem encoding with&#10;'surrogateescape' error handler, return str unchanged." ilk="function" name="fsdecode" signature="fsdecode(filename)" />
      <scope doc="Encode filename to the filesystem encoding with&#10;'surrogateescape' error handler, return bytes unchanged." ilk="function" name="fsencode" signature="fsencode(filename)" />
      <scope doc="Perform a stat system call on the given file descriptor." ilk="function" name="fstat" />
      <scope doc="Perform an fstatvfs system call on the given fd." ilk="function" name="fstatvfs" />
      <scope doc="Force write of fd to disk." ilk="function" name="fsync" />
      <scope doc="Truncate a file, specified by file descriptor, to a specific&#10;length." ilk="function" name="ftruncate" />
      <scope doc="Directory tree generator." ilk="function" name="fwalk" signature="fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None)" />
      <scope doc="Get the blocking mode of the file descriptor: False if the&#10;O_NONBLOCK flag is set, True if the flag is cleared." ilk="function" name="get_blocking" returns="bool" signature="get_blocking(fd) -&gt; bool" />
      <scope doc="Returns the sequence of directories that will be searched&#10;for the named executable (similar to a shell) when launching&#10;a process." ilk="function" name="get_exec_path" signature="get_exec_path(env=None)" />
      <scope doc="Get the close-on-exe flag of the specified file descriptor." ilk="function" name="get_inheritable" />
      <scope doc="Return the size of the terminal window as (columns, lines)." ilk="function" name="get_terminal_size" />
      <scope doc="Return a unicode string representing the current working&#10;directory." ilk="function" name="getcwd" />
      <scope doc="Return a bytes string representing the current working&#10;directory." ilk="function" name="getcwdb" />
      <scope doc="Return the current process's effective group id." ilk="function" name="getegid" />
      <scope doc="Get an environment variable, return None if it doesn't&#10;exist." ilk="function" name="getenv" signature="getenv(key, default=None)" />
      <scope doc="Get an environment variable, return None if it doesn't&#10;exist." ilk="function" name="getenvb" signature="getenvb(key, default=None)" />
      <scope doc="Return the current process's effective user id." ilk="function" name="geteuid" />
      <scope doc="Return the current process's group id." ilk="function" name="getgid" />
      <scope doc="Returns a list of groups to which a user belongs." ilk="function" name="getgrouplist" returns="list" signature="getgrouplist(user, group) -&gt; list of groups to which a user belongs" />
      <scope doc="Return list of supplemental group IDs for the process." ilk="function" name="getgroups" />
      <scope doc="Return average recent system load information." ilk="function" name="getloadavg" />
      <scope doc="Return the actual login name." ilk="function" name="getlogin" />
      <scope doc="Call the system call getpgid(), and return the result." ilk="function" name="getpgid" />
      <scope doc="Return the current process group id." ilk="function" name="getpgrp" />
      <scope doc="Return the current process id." ilk="function" name="getpid" />
      <scope doc="Return the parent's process id." ilk="function" name="getppid" />
      <scope doc="Return program scheduling priority." ilk="function" name="getpriority" />
      <scope doc="Return a tuple of the current process's real, effective, and&#10;saved group ids." ilk="function" name="getresgid" />
      <scope doc="Return a tuple of the current process's real, effective, and&#10;saved user ids." ilk="function" name="getresuid" />
      <scope doc="Call the system call getsid(pid) and return the result." ilk="function" name="getsid" />
      <scope doc="Return the current process's user id." ilk="function" name="getuid" />
      <scope doc="Return the value of extended attribute attribute on path." ilk="function" name="getxattr" />
      <scope doc="Call the system initgroups() to initialize the group access&#10;list with all of the groups of which the specified username&#10;is a member, plus the specified group id." ilk="function" name="initgroups" signature="initgroups(username, gid) -&gt; None" />
      <scope doc="Return True if the fd is connected to a terminal." ilk="function" name="isatty" />
      <scope doc="Kill a process with a signal." ilk="function" name="kill" />
      <scope doc="Kill a process group with a signal." ilk="function" name="killpg" />
      <scope doc="Change the owner and group id of path to the numeric uid and&#10;gid." ilk="function" name="lchown" />
      <variable citdl="str" name="linesep" />
      <scope doc="Create a hard link to a file." ilk="function" name="link" />
      <scope doc="Return a list containing the names of the files in the&#10;directory." ilk="function" name="listdir" />
      <scope doc="Return a list of extended attributes on path." ilk="function" name="listxattr" />
      <scope doc="Apply, test or remove a POSIX lock on an open file&#10;descriptor." ilk="function" name="lockf" />
      <scope doc="Set the position of a file descriptor." ilk="function" name="lseek" />
      <scope doc="Perform a stat system call on the given path, without&#10;following symbolic links." ilk="function" name="lstat" />
      <scope doc="Extracts a device major number from a raw device number." ilk="function" name="major" />
      <scope doc="Composes a raw device number from the major and minor device&#10;numbers." ilk="function" name="makedev" />
      <scope doc="Super-mkdir; create a leaf directory and all intermediate&#10;ones." ilk="function" name="makedirs" signature="makedirs(name [, mode=0o777][, exist_ok=False])" />
      <scope doc="Extracts a device minor number from a raw device number." ilk="function" name="minor" />
      <scope doc="Create a directory." ilk="function" name="mkdir" />
      <scope doc="Create a &quot;fifo&quot; (a POSIX named pipe)." ilk="function" name="mkfifo" />
      <scope doc="Create a node in the file system." ilk="function" name="mknod" />
      <variable citdl="str" name="name" />
      <scope doc="Add increment to the priority of process and return the new&#10;priority." ilk="function" name="nice" />
      <scope doc="Open a file for low level IO." ilk="function" name="open" />
      <scope doc="Open a pseudo-terminal." ilk="function" name="openpty" />
      <variable citdl="str" name="pardir" />
      <import alias="path" line="1" module="os.path" />
      <scope doc="Return the configuration limit name for the file or&#10;directory path." ilk="function" name="pathconf" />
      <variable citdl="dict" name="pathconf_names" />
      <variable citdl="str" name="pathsep" />
      <scope doc="Create a pipe." ilk="function" name="pipe" />
      <scope doc="Create a pipe with flags set atomically." ilk="function" name="pipe2" />
      <scope doc="# Supply os.popen()" ilk="function" name="popen" signature="popen(cmd, mode='r', buffering=-1)" />
      <scope doc="Announce an intention to access data in a specific pattern." ilk="function" name="posix_fadvise" />
      <scope doc="Ensure a file has allocated at least a particular number of&#10;bytes on disk." ilk="function" name="posix_fallocate" />
      <scope doc="Read a number of bytes from a file descriptor starting at a&#10;particular offset." ilk="function" name="pread" />
      <scope doc="Change or add an environment variable." ilk="function" name="putenv" />
      <scope doc="Write bytes to a file descriptor starting at a particular&#10;offset." ilk="function" name="pwrite" />
      <scope doc="Read from a file descriptor. Returns a bytes object." ilk="function" name="read" />
      <scope doc="Return a string representing the path to which the symbolic&#10;link points." ilk="function" name="readlink" signature="readlink(path, *, dir_fd=None) -&gt; path" />
      <scope doc="Read from a file descriptor fd into an iterable of buffers." ilk="function" name="readv" />
      <scope doc="Remove a file (same as unlink())." ilk="function" name="remove" />
      <scope doc="Super-rmdir; remove a leaf directory and all empty&#10;intermediate ones." ilk="function" name="removedirs" signature="removedirs(name)" />
      <scope doc="Remove extended attribute attribute on path." ilk="function" name="removexattr" />
      <scope doc="Rename a file or directory." ilk="function" name="rename" />
      <scope doc="Super-rename; create directories as necessary and delete any&#10;left empty." ilk="function" name="renames" signature="renames(old, new)" />
      <scope doc="Rename a file or directory, overwriting the destination." ilk="function" name="replace" />
      <scope doc="Remove a directory." ilk="function" name="rmdir" />
      <scope doc="scandir(path='.') -&gt; iterator of DirEntry objects for given path" ilk="function" name="scandir" signature="scandir(path='.') -&gt; iterator of DirEntry objects for given path" />
      <scope doc="Get the maximum scheduling priority for policy." ilk="function" name="sched_get_priority_max" />
      <scope doc="Get the minimum scheduling priority for policy." ilk="function" name="sched_get_priority_min" />
      <scope doc="Return the affinity of the process identified by pid." ilk="function" name="sched_getaffinity" />
      <scope doc="Returns scheduling parameters for the process identified by&#10;pid." ilk="function" name="sched_getparam" />
      <scope doc="Get the scheduling policy for the process identifiedy by&#10;pid." ilk="function" name="sched_getscheduler" />
      <scope classrefs="tuple" doc="Current has only one field: sched_priority&quot;);&#10;sched_priority A scheduling parameter." ilk="class" name="sched_param">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Return the round-robin quantum for the process identified by&#10;pid, in seconds." ilk="function" name="sched_rr_get_interval" />
      <scope doc="Set the CPU affinity of the process identified by pid to&#10;mask." ilk="function" name="sched_setaffinity" />
      <scope doc="Set scheduling parameters for the process identified by pid." ilk="function" name="sched_setparam" />
      <scope doc="Set the scheduling policy for the process identified by pid." ilk="function" name="sched_setscheduler" />
      <scope doc="Voluntarily relinquish the CPU." ilk="function" name="sched_yield" />
      <scope doc="-&gt; byteswritten Copy count bytes from file descriptor in to&#10;file descriptor out." ilk="function" name="sendfile" signature="sendfile(out, in, offset, count) -&gt; byteswritten&#10;sendfile(out, in, offset, count[, headers][, trailers], flags=0)" />
      <variable citdl="str" name="sep" />
      <scope doc="Set the blocking mode of the specified file descriptor." ilk="function" name="set_blocking" signature="set_blocking(fd, blocking)" />
      <scope doc="Set the inheritable flag of the specified file descriptor." ilk="function" name="set_inheritable" />
      <scope doc="Set the current process's effective group id." ilk="function" name="setegid" />
      <scope doc="Set the current process's effective user id." ilk="function" name="seteuid" />
      <scope doc="Set the current process's group id." ilk="function" name="setgid" />
      <scope doc="Set the groups of the current process to list." ilk="function" name="setgroups" />
      <scope doc="Call the system call setpgid(pid, pgrp)." ilk="function" name="setpgid" />
      <scope doc="Make the current process the leader of its process group." ilk="function" name="setpgrp" />
      <scope doc="Set program scheduling priority." ilk="function" name="setpriority" />
      <scope doc="Set the current process's real and effective group ids." ilk="function" name="setregid" />
      <scope doc="Set the current process's real, effective, and saved group&#10;ids." ilk="function" name="setresgid" />
      <scope doc="Set the current process's real, effective, and saved user&#10;ids." ilk="function" name="setresuid" />
      <scope doc="Set the current process's real and effective user ids." ilk="function" name="setreuid" />
      <scope doc="Call the system call setsid()." ilk="function" name="setsid" />
      <scope doc="Set the current process's user id." ilk="function" name="setuid" />
      <scope doc="Set extended attribute attribute on path to value." ilk="function" name="setxattr" />
      <scope doc="Execute file with arguments from args in a subprocess." ilk="function" name="spawnl" returns="int" signature="spawnl(mode, file, *args) -&gt; integer" />
      <scope doc="Execute file with arguments from args in a subprocess with&#10;the supplied environment." ilk="function" name="spawnle" returns="int" signature="spawnle(mode, file, *args, env) -&gt; integer" />
      <scope doc="Execute file (which is looked for along $PATH) with&#10;arguments from args in a subprocess with the supplied&#10;environment." ilk="function" name="spawnlp" returns="int" signature="spawnlp(mode, file, *args) -&gt; integer" />
      <scope doc="Execute file (which is looked for along $PATH) with&#10;arguments from args in a subprocess with the supplied&#10;environment." ilk="function" name="spawnlpe" returns="int" signature="spawnlpe(mode, file, *args, env) -&gt; integer" />
      <scope doc="Execute file with arguments from args in a subprocess." ilk="function" name="spawnv" returns="int" signature="spawnv(mode, file, args) -&gt; integer" />
      <scope doc="Execute file with arguments from args in a subprocess with&#10;the specified environment." ilk="function" name="spawnve" returns="int" signature="spawnve(mode, file, args, env) -&gt; integer" />
      <scope doc="Execute file (which is looked for along $PATH) with&#10;arguments from args in a subprocess." ilk="function" name="spawnvp" returns="int" signature="spawnvp(mode, file, args) -&gt; integer" />
      <scope doc="Execute file (which is looked for along $PATH) with&#10;arguments from args in a subprocess with the supplied&#10;environment." ilk="function" name="spawnvpe" returns="int" signature="spawnvpe(mode, file, args, env) -&gt; integer" />
      <import module="st" />
      <scope doc="Perform a stat system call on the given path." ilk="function" name="stat" />
      <scope doc="Determine whether os.[lf]stat represents time stamps as&#10;float objects." ilk="function" name="stat_float_times" signature="stat_float_times([newval]) -&gt; oldval" />
      <scope classrefs="tuple" doc="stat_result: Result from stat, fstat, or lstat.&#10;This object may be accessed either as a tuple of (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.  Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev, or st_flags, they are available as attributes only.  See os.stat for more information." ilk="class" name="stat_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Perform a statvfs system call on the given path." ilk="function" name="statvfs" />
      <scope classrefs="tuple" doc="statvfs_result: Result from statvfs or fstatvfs.&#10;This object may be accessed either as a tuple of (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax), or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.  See os.statvfs for more information." ilk="class" name="statvfs_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Translate an error code to a message string." ilk="function" name="strerror" />
      <variable citdl="bool" name="supports_bytes_environ" />
      <variable citdl="set" name="supports_dir_fd" />
      <variable citdl="set" name="supports_effective_ids" />
      <variable citdl="set" name="supports_fd" />
      <variable citdl="set" name="supports_follow_symlinks" />
      <scope doc="Create a symbolic link pointing to src named dst." ilk="function" name="symlink" />
      <scope doc="Force write of everything to disk." ilk="function" name="sync" />
      <import module="sys" />
      <scope doc="Return an integer-valued system configuration variable." ilk="function" name="sysconf" />
      <variable citdl="dict" name="sysconf_names" />
      <scope doc="Execute the command in a subshell." ilk="function" name="system" />
      <scope doc="Return the process group associated with the terminal&#10;specified by fd." ilk="function" name="tcgetpgrp" />
      <scope doc="Set the process group associated with the terminal specified&#10;by fd." ilk="function" name="tcsetpgrp" />
      <scope classrefs="tuple" doc="A tuple of (columns, lines) for holding terminal window size&#10;" ilk="class" name="terminal_size">
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
      </scope>
      <scope doc="Return a collection containing process timing information." ilk="function" name="times" />
      <scope classrefs="tuple" doc="times_result: Result from os.times().&#10;This object may be accessed either as a tuple of (user, system, children_user, children_system, elapsed), or via the attributes user, system, children_user, children_system, and elapsed.  See os.times for more information." ilk="class" name="times_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Truncate a file, specified by path, to a specific length." ilk="function" name="truncate" />
      <scope doc="Return the name of the terminal device connected to 'fd'." ilk="function" name="ttyname" />
      <scope doc="Set the current numeric umask and return the previous umask." ilk="function" name="umask" />
      <scope doc="Return an object identifying the current operating system." ilk="function" name="uname" />
      <scope classrefs="tuple" doc="uname_result: Result from os.uname().&#10;This object may be accessed either as a tuple of (sysname, nodename, release, version, machine), or via the attributes sysname, nodename, release, version, and machine.  See os.uname for more information." ilk="class" name="uname_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Remove a file (same as remove())." ilk="function" name="unlink" />
      <scope doc="Delete an environment variable." ilk="function" name="unsetenv" />
      <scope doc="Return a bytes object containing random bytes suitable for&#10;cryptographic use." ilk="function" name="urandom" />
      <scope doc="Set the access and modified time of path." ilk="function" name="utime" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait" />
      <scope doc="Wait for completion of a child process." ilk="function" name="wait3" />
      <scope doc="Wait for completion of a specific child process." ilk="function" name="wait4" />
      <scope doc="Returns the result of waiting for a process or processes." ilk="function" name="waitid" />
      <scope classrefs="tuple" doc="waitid_result: Result from waitid.&#10;This object may be accessed either as a tuple of (si_pid, si_uid, si_signo, si_status, si_code), or via the attributes si_pid, si_uid, and so on.  See os.waitid for more information." ilk="class" name="waitid_result">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Wait for completion of a given child process." ilk="function" name="waitpid" />
      <scope doc="Directory tree generator." ilk="function" name="walk" signature="walk(top, topdown=True, onerror=None, followlinks=False)" />
      <scope doc="Write a bytes object to a file descriptor." ilk="function" name="write" />
      <scope doc="Iterate over buffers, and write the contents of each to a&#10;file descriptor." ilk="function" name="writev" />
    </scope>
    <scope doc="# Generated by h2py from /usr/include/netinet/in.h&#10;" ilk="blob" lang="Python3" name="IN">
      <variable citdl="int" name="AF_APPLETALK" />
      <variable citdl="int" name="AF_ASH" />
      <variable citdl="int" name="AF_ATMPVC" />
      <variable citdl="int" name="AF_ATMSVC" />
      <variable citdl="int" name="AF_AX25" />
      <variable citdl="int" name="AF_BLUETOOTH" />
      <variable citdl="int" name="AF_BRIDGE" />
      <variable citdl="int" name="AF_DECnet" />
      <variable citdl="int" name="AF_ECONET" />
      <variable citdl="int" name="AF_FILE" />
      <variable citdl="int" name="AF_INET" />
      <variable citdl="int" name="AF_INET6" />
      <variable citdl="int" name="AF_IPX" />
      <variable citdl="int" name="AF_IRDA" />
      <variable citdl="int" name="AF_KEY" />
      <variable citdl="int" name="AF_LOCAL" />
      <variable citdl="int" name="AF_MAX" />
      <variable citdl="int" name="AF_NETBEUI" />
      <variable citdl="int" name="AF_NETLINK" />
      <variable citdl="int" name="AF_NETROM" />
      <variable citdl="int" name="AF_PACKET" />
      <variable citdl="int" name="AF_PPPOX" />
      <variable citdl="int" name="AF_ROSE" />
      <variable citdl="int" name="AF_ROUTE" />
      <variable citdl="int" name="AF_SECURITY" />
      <variable citdl="int" name="AF_SNA" />
      <variable citdl="int" name="AF_UNIX" />
      <variable citdl="int" name="AF_UNSPEC" />
      <variable citdl="int" name="AF_WANPIPE" />
      <variable citdl="int" name="AF_X25" />
      <variable citdl="int" name="AIO_PRIO_DELTA_MAX" />
      <variable citdl="int" name="ARG_MAX" />
      <variable citdl="int" name="BC_BASE_MAX" />
      <variable citdl="int" name="BC_DIM_MAX" />
      <variable citdl="int" name="BC_SCALE_MAX" />
      <variable citdl="int" name="BC_STRING_MAX" />
      <variable citdl="int" name="BIG_ENDIAN" />
      <variable citdl="int" name="BYTE_ORDER" />
      <variable citdl="int" name="CHARCLASS_NAME_MAX" />
      <variable citdl="int" name="CHAR_BIT" />
      <variable citdl="int" name="CHAR_MAX" />
      <variable citdl="int" name="CHAR_MIN" />
      <variable citdl="int" name="CHILD_MAX" />
      <variable citdl="int" name="CLK_TCK" />
      <variable citdl="int" name="CLOCKS_PER_SEC" />
      <variable citdl="int" name="CLOCK_PROCESS_CPUTIME_ID" />
      <variable citdl="int" name="CLOCK_REALTIME" />
      <variable citdl="int" name="CLOCK_THREAD_CPUTIME_ID" />
      <variable citdl="int" name="CLONE_FILES" />
      <variable citdl="int" name="CLONE_FS" />
      <variable citdl="int" name="CLONE_PID" />
      <variable citdl="int" name="CLONE_PTRACE" />
      <variable citdl="int" name="CLONE_SIGHAND" />
      <variable citdl="int" name="CLONE_VFORK" />
      <variable citdl="int" name="CLONE_VM" />
      <scope ilk="function" name="CMSG_FIRSTHDR" signature="CMSG_FIRSTHDR(mhdr)" />
      <variable citdl="int" name="COLL_WEIGHTS_MAX" />
      <variable citdl="int" name="CSIGNAL" />
      <variable citdl="int" name="EXPR_NEST_MAX" />
      <variable citdl="int" name="FD_SETSIZE" />
      <scope ilk="function" name="FD_ZERO" signature="FD_ZERO(fdsetp)" />
      <variable citdl="int" name="FILENAME_MAX" />
      <variable citdl="int" name="FIOGETOWN" />
      <variable citdl="int" name="FIOSETOWN" />
      <variable citdl="int" name="FOPEN_MAX" />
      <scope ilk="function" name="IN6_IS_ADDR_LINKLOCAL" signature="IN6_IS_ADDR_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_LOOPBACK" signature="IN6_IS_ADDR_LOOPBACK(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_GLOBAL" signature="IN6_IS_ADDR_MC_GLOBAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_LINKLOCAL" signature="IN6_IS_ADDR_MC_LINKLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_NODELOCAL" signature="IN6_IS_ADDR_MC_NODELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_ORGLOCAL" signature="IN6_IS_ADDR_MC_ORGLOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_MC_SITELOCAL" signature="IN6_IS_ADDR_MC_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_SITELOCAL" signature="IN6_IS_ADDR_SITELOCAL(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_UNSPECIFIED" signature="IN6_IS_ADDR_UNSPECIFIED(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4COMPAT" signature="IN6_IS_ADDR_V4COMPAT(a)" />
      <scope ilk="function" name="IN6_IS_ADDR_V4MAPPED" signature="IN6_IS_ADDR_V4MAPPED(a)" />
      <variable citdl="int" name="INET6_ADDRSTRLEN" />
      <variable citdl="int" name="INET_ADDRSTRLEN" />
      <scope ilk="function" name="INT16_C" signature="INT16_C(c)" />
      <variable citdl="int" name="INT16_MAX" />
      <variable citdl="int" name="INT16_MIN" />
      <scope ilk="function" name="INT32_C" signature="INT32_C(c)" />
      <variable citdl="int" name="INT32_MAX" />
      <variable citdl="int" name="INT32_MIN" />
      <scope ilk="function" name="INT64_C" signature="INT64_C(c)" />
      <variable citdl="int" name="INT64_MAX" />
      <variable citdl="int" name="INT64_MIN" />
      <scope ilk="function" name="INT8_C" signature="INT8_C(c)" />
      <variable citdl="int" name="INT8_MAX" />
      <variable citdl="int" name="INT8_MIN" />
      <scope ilk="function" name="INTMAX_C" signature="INTMAX_C(c)" />
      <variable citdl="int" name="INTMAX_MAX" />
      <variable citdl="int" name="INTMAX_MIN" />
      <variable citdl="int" name="INTPTR_MAX" />
      <variable citdl="int" name="INTPTR_MIN" />
      <variable citdl="int" name="INT_FAST16_MAX" />
      <variable citdl="int" name="INT_FAST16_MIN" />
      <variable citdl="int" name="INT_FAST32_MAX" />
      <variable citdl="int" name="INT_FAST32_MIN" />
      <variable citdl="int" name="INT_FAST64_MAX" />
      <variable citdl="int" name="INT_FAST64_MIN" />
      <variable citdl="int" name="INT_FAST8_MAX" />
      <variable citdl="int" name="INT_FAST8_MIN" />
      <variable citdl="int" name="INT_LEAST16_MAX" />
      <variable citdl="int" name="INT_LEAST16_MIN" />
      <variable citdl="int" name="INT_LEAST32_MAX" />
      <variable citdl="int" name="INT_LEAST32_MIN" />
      <variable citdl="int" name="INT_LEAST64_MAX" />
      <variable citdl="int" name="INT_LEAST64_MIN" />
      <variable citdl="int" name="INT_LEAST8_MAX" />
      <variable citdl="int" name="INT_LEAST8_MIN" />
      <variable citdl="int" name="INT_MAX" />
      <scope ilk="function" name="IN_BADCLASS" signature="IN_BADCLASS(a)" />
      <scope ilk="function" name="IN_CLASSA" signature="IN_CLASSA(a)" />
      <variable citdl="int" name="IN_CLASSA_HOST" />
      <variable citdl="int" name="IN_CLASSA_MAX" />
      <variable citdl="int" name="IN_CLASSA_NET" />
      <variable citdl="int" name="IN_CLASSA_NSHIFT" />
      <scope ilk="function" name="IN_CLASSB" signature="IN_CLASSB(a)" />
      <variable citdl="int" name="IN_CLASSB_HOST" />
      <variable citdl="int" name="IN_CLASSB_MAX" />
      <variable citdl="int" name="IN_CLASSB_NET" />
      <variable citdl="int" name="IN_CLASSB_NSHIFT" />
      <scope ilk="function" name="IN_CLASSC" signature="IN_CLASSC(a)" />
      <variable citdl="int" name="IN_CLASSC_HOST" />
      <variable citdl="int" name="IN_CLASSC_NET" />
      <variable citdl="int" name="IN_CLASSC_NSHIFT" />
      <scope ilk="function" name="IN_CLASSD" signature="IN_CLASSD(a)" />
      <scope ilk="function" name="IN_EXPERIMENTAL" signature="IN_EXPERIMENTAL(a)" />
      <variable citdl="int" name="IN_LOOPBACKNET" />
      <scope ilk="function" name="IN_MULTICAST" signature="IN_MULTICAST(a)" />
      <variable citdl="int" name="IOV_MAX" />
      <variable citdl="int" name="IPV6_ADDRFORM" />
      <variable citdl="int" name="IPV6_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IPV6_AUTHHDR" />
      <variable citdl="int" name="IPV6_CHECKSUM" />
      <variable citdl="int" name="IPV6_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IPV6_DSTOPTS" />
      <variable citdl="int" name="IPV6_HOPLIMIT" />
      <variable citdl="int" name="IPV6_HOPOPTS" />
      <variable citdl="int" name="IPV6_JOIN_GROUP" />
      <variable citdl="int" name="IPV6_LEAVE_GROUP" />
      <variable citdl="int" name="IPV6_MTU" />
      <variable citdl="int" name="IPV6_MTU_DISCOVER" />
      <variable citdl="int" name="IPV6_MULTICAST_HOPS" />
      <variable citdl="int" name="IPV6_MULTICAST_IF" />
      <variable citdl="int" name="IPV6_MULTICAST_LOOP" />
      <variable citdl="int" name="IPV6_NEXTHOP" />
      <variable citdl="int" name="IPV6_PKTINFO" />
      <variable citdl="int" name="IPV6_PKTOPTIONS" />
      <variable citdl="int" name="IPV6_PMTUDISC_DO" />
      <variable citdl="int" name="IPV6_PMTUDISC_DONT" />
      <variable citdl="int" name="IPV6_PMTUDISC_WANT" />
      <variable citdl="int" name="IPV6_RECVERR" />
      <variable citdl="int" name="IPV6_ROUTER_ALERT" />
      <variable citdl="int" name="IPV6_RTHDR" />
      <variable citdl="int" name="IPV6_RTHDR_LOOSE" />
      <variable citdl="int" name="IPV6_RTHDR_STRICT" />
      <variable citdl="int" name="IPV6_RTHDR_TYPE_0" />
      <variable citdl="int" name="IPV6_RXDSTOPTS" />
      <variable citdl="int" name="IPV6_RXHOPOPTS" />
      <variable citdl="int" name="IPV6_UNICAST_HOPS" />
      <variable citdl="int" name="IP_ADD_MEMBERSHIP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_DEFAULT_MULTICAST_TTL" />
      <variable citdl="int" name="IP_DROP_MEMBERSHIP" />
      <variable citdl="int" name="IP_HDRINCL" />
      <variable citdl="int" name="IP_MAX_MEMBERSHIPS" />
      <variable citdl="int" name="IP_MTU_DISCOVER" />
      <variable citdl="int" name="IP_MULTICAST_IF" />
      <variable citdl="int" name="IP_MULTICAST_LOOP" />
      <variable citdl="int" name="IP_MULTICAST_TTL" />
      <variable citdl="int" name="IP_OPTIONS" />
      <variable citdl="int" name="IP_PKTINFO" />
      <variable citdl="int" name="IP_PKTOPTIONS" />
      <variable citdl="int" name="IP_PMTUDISC" />
      <variable citdl="int" name="IP_PMTUDISC_DO" />
      <variable citdl="int" name="IP_PMTUDISC_DONT" />
      <variable citdl="int" name="IP_PMTUDISC_WANT" />
      <variable citdl="int" name="IP_RECVERR" />
      <variable citdl="int" name="IP_RECVOPTS" />
      <variable citdl="int" name="IP_RECVRETOPTS" />
      <variable citdl="int" name="IP_RECVTOS" />
      <variable citdl="int" name="IP_RECVTTL" />
      <variable citdl="int" name="IP_RETOPTS" />
      <variable citdl="int" name="IP_ROUTER_ALERT" />
      <variable citdl="int" name="IP_TOS" />
      <variable citdl="int" name="IP_TTL" />
      <variable citdl="int" name="LINE_MAX" />
      <variable citdl="int" name="LINK_MAX" />
      <variable citdl="int" name="LITTLE_ENDIAN" />
      <variable citdl="int" name="LONG_BIT" />
      <variable citdl="int" name="LONG_MAX" />
      <variable citdl="int" name="LONG_MIN" />
      <variable citdl="int" name="L_ctermid" />
      <variable citdl="int" name="L_cuserid" />
      <variable citdl="int" name="L_tmpnam" />
      <variable citdl="int" name="MAX_CANON" />
      <variable citdl="int" name="MAX_INPUT" />
      <variable citdl="int" name="MB_LEN_MAX" />
      <variable citdl="int" name="NAME_MAX" />
      <variable citdl="int" name="NGROUPS_MAX" />
      <variable citdl="int" name="NL_ARGMAX" />
      <variable citdl="int" name="NL_LANGMAX" />
      <variable citdl="int" name="NL_MSGMAX" />
      <variable citdl="int" name="NL_NMAX" />
      <variable citdl="int" name="NL_SETMAX" />
      <variable citdl="int" name="NL_TEXTMAX" />
      <variable citdl="int" name="NR_OPEN" />
      <variable citdl="int" name="NZERO" />
      <variable citdl="int" name="OPEN_MAX" />
      <variable citdl="int" name="PATH_MAX" />
      <variable citdl="int" name="PDP_ENDIAN" />
      <variable citdl="int" name="PF_APPLETALK" />
      <variable citdl="int" name="PF_ASH" />
      <variable citdl="int" name="PF_ATMPVC" />
      <variable citdl="int" name="PF_ATMSVC" />
      <variable citdl="int" name="PF_AX25" />
      <variable citdl="int" name="PF_BLUETOOTH" />
      <variable citdl="int" name="PF_BRIDGE" />
      <variable citdl="int" name="PF_DECnet" />
      <variable citdl="int" name="PF_ECONET" />
      <variable citdl="int" name="PF_FILE" />
      <variable citdl="int" name="PF_INET" />
      <variable citdl="int" name="PF_INET6" />
      <variable citdl="int" name="PF_IPX" />
      <variable citdl="int" name="PF_IRDA" />
      <variable citdl="int" name="PF_KEY" />
      <variable citdl="int" name="PF_LOCAL" />
      <variable citdl="int" name="PF_MAX" />
      <variable citdl="int" name="PF_NETBEUI" />
      <variable citdl="int" name="PF_NETLINK" />
      <variable citdl="int" name="PF_NETROM" />
      <variable citdl="int" name="PF_PACKET" />
      <variable citdl="int" name="PF_PPPOX" />
      <variable citdl="int" name="PF_ROSE" />
      <variable citdl="int" name="PF_ROUTE" />
      <variable citdl="int" name="PF_SECURITY" />
      <variable citdl="int" name="PF_SNA" />
      <variable citdl="int" name="PF_UNIX" />
      <variable citdl="int" name="PF_UNSPEC" />
      <variable citdl="int" name="PF_WANPIPE" />
      <variable citdl="int" name="PF_X25" />
      <variable citdl="int" name="PIPE_BUF" />
      <variable citdl="int" name="PTHREAD_DESTRUCTOR_ITERATIONS" />
      <variable citdl="int" name="PTHREAD_KEYS_MAX" />
      <variable citdl="int" name="PTHREAD_STACK_MIN" />
      <variable citdl="int" name="PTHREAD_THREADS_MAX" />
      <variable citdl="int" name="PTRDIFF_MAX" />
      <variable citdl="int" name="PTRDIFF_MIN" />
      <variable citdl="int" name="RE_DUP_MAX" />
      <variable citdl="int" name="RTSIG_MAX" />
      <variable citdl="int" name="SCHAR_MAX" />
      <variable citdl="int" name="SCHAR_MIN" />
      <variable citdl="int" name="SCHED_FIFO" />
      <variable citdl="int" name="SCHED_OTHER" />
      <variable citdl="int" name="SCHED_RR" />
      <variable citdl="int" name="SCM_TIMESTAMP" />
      <variable citdl="int" name="SHRT_MAX" />
      <variable citdl="int" name="SHRT_MIN" />
      <variable citdl="int" name="SIG_ATOMIC_MAX" />
      <variable citdl="int" name="SIG_ATOMIC_MIN" />
      <variable citdl="int" name="SIOCATMARK" />
      <variable citdl="int" name="SIOCGPGRP" />
      <variable citdl="int" name="SIOCGSTAMP" />
      <variable citdl="int" name="SIOCSPGRP" />
      <variable citdl="int" name="SOCK_DGRAM" />
      <variable citdl="int" name="SOCK_MAX" />
      <variable citdl="int" name="SOCK_PACKET" />
      <variable citdl="int" name="SOCK_RAW" />
      <variable citdl="int" name="SOCK_RDM" />
      <variable citdl="int" name="SOCK_SEQPACKET" />
      <variable citdl="int" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_AAL" />
      <variable citdl="int" name="SOL_ATM" />
      <variable citdl="int" name="SOL_DECNET" />
      <variable citdl="int" name="SOL_ICMPV6" />
      <variable citdl="int" name="SOL_IP" />
      <variable citdl="int" name="SOL_IPV6" />
      <variable citdl="int" name="SOL_IRDA" />
      <variable citdl="int" name="SOL_PACKET" />
      <variable citdl="int" name="SOL_RAW" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SOL_X25" />
      <variable citdl="int" name="SOMAXCONN" />
      <variable citdl="int" name="SO_ACCEPTCONN" />
      <variable citdl="int" name="SO_ATTACH_FILTER" />
      <variable citdl="int" name="SO_BINDTODEVICE" />
      <variable citdl="int" name="SO_BROADCAST" />
      <variable citdl="int" name="SO_BSDCOMPAT" />
      <variable citdl="int" name="SO_DEBUG" />
      <variable citdl="int" name="SO_DETACH_FILTER" />
      <variable citdl="int" name="SO_DONTROUTE" />
      <variable citdl="int" name="SO_ERROR" />
      <variable citdl="int" name="SO_KEEPALIVE" />
      <variable citdl="int" name="SO_LINGER" />
      <variable citdl="int" name="SO_NO_CHECK" />
      <variable citdl="int" name="SO_OOBINLINE" />
      <variable citdl="int" name="SO_PASSCRED" />
      <variable citdl="int" name="SO_PEERCRED" />
      <variable citdl="int" name="SO_PEERNAME" />
      <variable citdl="int" name="SO_PRIORITY" />
      <variable citdl="int" name="SO_RCVBUF" />
      <variable citdl="int" name="SO_RCVLOWAT" />
      <variable citdl="int" name="SO_RCVTIMEO" />
      <variable citdl="int" name="SO_REUSEADDR" />
      <variable citdl="int" name="SO_SECURITY_AUTHENTICATION" />
      <variable citdl="int" name="SO_SECURITY_ENCRYPTION_NETWORK" />
      <variable citdl="int" name="SO_SECURITY_ENCRYPTION_TRANSPORT" />
      <variable citdl="int" name="SO_SNDBUF" />
      <variable citdl="int" name="SO_SNDLOWAT" />
      <variable citdl="int" name="SO_SNDTIMEO" />
      <variable citdl="int" name="SO_TIMESTAMP" />
      <variable citdl="int" name="SO_TYPE" />
      <variable citdl="int" name="SSIZE_MAX" />
      <variable citdl="int" name="TIMER_ABSTIME" />
      <variable citdl="int" name="TIMER_MAX" />
      <variable citdl="int" name="TMP_MAX" />
      <variable citdl="int" name="UCHAR_MAX" />
      <scope ilk="function" name="UINT16_C" signature="UINT16_C(c)" />
      <variable citdl="int" name="UINT16_MAX" />
      <scope ilk="function" name="UINT32_C" signature="UINT32_C(c)" />
      <scope ilk="function" name="UINT64_C" signature="UINT64_C(c)" />
      <variable citdl="int" name="UINT64_MAX" />
      <scope ilk="function" name="UINT8_C" signature="UINT8_C(c)" />
      <variable citdl="int" name="UINT8_MAX" />
      <scope ilk="function" name="UINTMAX_C" signature="UINTMAX_C(c)" />
      <variable citdl="int" name="UINTMAX_MAX" />
      <variable citdl="int" name="UINT_FAST64_MAX" />
      <variable citdl="int" name="UINT_FAST8_MAX" />
      <variable citdl="int" name="UINT_LEAST16_MAX" />
      <variable citdl="int" name="UINT_LEAST64_MAX" />
      <variable citdl="int" name="UINT_LEAST8_MAX" />
      <variable citdl="int" name="USHRT_MAX" />
      <variable citdl="int" name="WCHAR_MAX" />
      <variable citdl="int" name="WCHAR_MIN" />
      <variable citdl="int" name="WORD_BIT" />
      <variable citdl="int" name="__GLIBC_MINOR__" />
      <variable citdl="int" name="__GLIBC__" />
      <variable citdl="int" name="__GNU_LIBRARY__" />
      <variable citdl="int" name="__STDC_IEC_559_COMPLEX__" />
      <variable citdl="int" name="__STDC_IEC_559__" />
      <variable citdl="int" name="__STDC_ISO_10646__" />
      <scope ilk="function" name="__attribute__" signature="__attribute__(xyz)" />
      <scope ilk="function" name="__attribute_format_arg__" signature="__attribute_format_arg__(x)" />
      <scope ilk="function" name="htonl" signature="htonl(x)" />
      <scope ilk="function" name="htons" signature="htons(x)" />
      <scope ilk="function" name="major" signature="major(dev)" />
      <scope ilk="function" name="minor" signature="minor(dev)" />
      <scope ilk="function" name="ntohl" signature="ntohl(x)" />
      <scope ilk="function" name="ntohs" signature="ntohs(x)" />
    </scope>
    <scope doc="dyld emulation&#10;" ilk="blob" lang="Python3" name="ctypes.macholib.dyld">
      <variable citdl="list" name="DEFAULT_FRAMEWORK_FALLBACK" />
      <variable citdl="list" name="DEFAULT_LIBRARY_FALLBACK" />
      <variable citdl="list" name="__all__" />
      <scope classrefs="object" doc="accumulate(iterable[, func]) --&gt; accumulate object&#10;Return series of accumulated sums (or other binary function results)." ilk="class" name="accumulate">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="chain(*iterables) --&gt; chain object&#10;Return a chain object whose .__next__() method returns elements from the first iterable until it is exhausted, then elements from the next iterable, until all of the iterables are exhausted." ilk="class" name="chain">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
      </scope>
      <scope classrefs="object" doc="combinations(iterable, r) --&gt; combinations object&#10;Return successive r-length combinations of elements in the iterable.  combinations(range(4), 3) --&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)" ilk="class" name="combinations">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="combinations_with_replacement(iterable, r) --&gt; combinations_with_replacement object&#10;Return successive r-length combinations of elements in the iterable allowing individual elements to have successive repeats. combinations_with_replacement('ABC', 2) --&gt; AA AB AC BB BC CC" ilk="class" name="combinations_with_replacement">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="compress(data, selectors) --&gt; iterator over selected data&#10;Return data elements corresponding to true selector elements. Forms a shorter iterator from selected data elements using the selectors to choose the data elements." ilk="class" name="compress">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="count(start=0, step=1) --&gt; count object&#10;Return a count object whose .__next__() method returns consecutive values. Equivalent to:  def count(firstval=0, step=1): x = firstval while 1: yield x x += step" ilk="class" name="count">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="cycle(iterable) --&gt; cycle object&#10;Return elements from the iterable until it is exhausted. Then repeat the sequence indefinitely." ilk="class" name="cycle">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="dropwhile(predicate, iterable) --&gt; dropwhile object&#10;Drop items from the iterable while predicate(item) is true. Afterwards, return every element until the iterable is exhausted." ilk="class" name="dropwhile">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope ilk="function" name="dyld_default_search" signature="dyld_default_search(name, env=None)" />
      <scope ilk="function" name="dyld_env" signature="dyld_env(env, var)" />
      <scope ilk="function" name="dyld_executable_path_search" signature="dyld_executable_path_search(name, executable_path=None)" />
      <scope ilk="function" name="dyld_fallback_framework_path" signature="dyld_fallback_framework_path(env=None)" />
      <scope ilk="function" name="dyld_fallback_library_path" signature="dyld_fallback_library_path(env=None)" />
      <scope doc="Find a library or framework using dyld semantics" ilk="function" name="dyld_find" signature="dyld_find(name, executable_path=None, env=None)" />
      <scope ilk="function" name="dyld_framework_path" signature="dyld_framework_path(env=None)" />
      <scope ilk="function" name="dyld_image_suffix" signature="dyld_image_suffix(env=None)" />
      <scope doc="For a potential path iterator, add DYLD_IMAGE_SUFFIX&#10;semantics" ilk="function" name="dyld_image_suffix_search" signature="dyld_image_suffix_search(iterator, env=None)" />
      <scope ilk="function" name="dyld_library_path" signature="dyld_library_path(env=None)" />
      <scope ilk="function" name="dyld_override_search" signature="dyld_override_search(name, env=None)" />
      <scope doc="A dylib name can take one of the following four forms:&#10;Location/Name.SomeVersion_Suffix.dylib&#10;Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib" ilk="function" name="dylib_info" signature="dylib_info(filename)" />
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object&#10;Return those items of sequence for which function(item) is false. If function is None, return the items that are false." ilk="class" name="filterfalse">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Find a framework using dyld semantics in a very loose&#10;manner." ilk="function" name="framework_find" signature="framework_find(fn, executable_path=None, env=None)" />
      <scope doc="A framework name can take one of the following four forms:&#10;Location/Name.framework/Versions/SomeVersion/Name_Suffix&#10;Location/Name.framework/Versions/SomeVersion/Name&#10;Location/Name.framework/Name_Suffix" ilk="function" name="framework_info" signature="framework_info(filename)" />
      <scope classrefs="object" doc="groupby(iterable[, keyfunc]) -&gt; create an iterator which returns&#10;(key, sub-iterator) grouped by each value of key(value)." ilk="class" name="groupby">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="islice(iterable, stop) --&gt; islice object&#10;islice(iterable, start, stop[, step]) --&gt; islice object  Return an iterator whose next() method returns selected values from an iterable.  If start is specified, will skip all preceding elements; otherwise, start defaults to zero.  Step defaults to one.  If specified as another value, step determines how many values are skipped between successive calls.  Works like a slice() on a list but returns an iterator." ilk="class" name="islice">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <import module="os" />
      <scope classrefs="object" doc="permutations(iterable[, r]) --&gt; permutations object&#10;Return successive r-length permutations of elements in the iterable.  permutations(range(3), 2) --&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)" ilk="class" name="permutations">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="product(*iterables, repeat=1) --&gt; product object&#10;Cartesian product of input iterables.  Equivalent to nested for-loops.  For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B). The leftmost iterators are in the outermost for-loop, so the output tuples cycle in a manner similar to an odometer (with the rightmost element changing on every iteration).  To compute the product of an iterable with itself, specify the number of repetitions with the optional repeat keyword argument. For example, product(A, repeat=4) means the same as product(A, A, A, A)." ilk="class" name="product">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Returns size in memory, in bytes." ilk="function" name="__sizeof__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="repeat(object [,times]) -&gt; create an iterator which returns the object&#10;for the specified number of times.  If not specified, returns the object endlessly." ilk="class" name="repeat">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Private method returning an estimate of len(list(it))." ilk="function" name="__length_hint__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="starmap(function, sequence) --&gt; starmap object&#10;Return an iterator whose values are returned from the function evaluated with an argument tuple taken from the given sequence." ilk="class" name="starmap">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope classrefs="object" doc="takewhile(predicate, iterable) --&gt; takewhile object&#10;Return successive entries from an iterable as long as the predicate evaluates to true for each entry." ilk="class" name="takewhile">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <scope doc="tee(iterable, n=2) --&gt; tuple of n independent iterators." ilk="function" name="tee" signature="tee(iterable, n=2) --&gt; tuple of n independent iterators." />
      <scope ilk="function" name="test_dyld_find" signature="test_dyld_find()" />
      <scope classrefs="object" doc="zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --&gt; zip_longest object&#10;Return an zip_longest object whose .__next__() method returns a tuple where the i-th element comes from the i-th iterable argument.  The .__next__() method continues until the longest iterable in the argument sequence is exhausted and then it raises StopIteration.  When the shorter iterables are exhausted, the fillvalue is substituted in their place.  The fillvalue defaults to None or can be specified by a keyword argument." ilk="class" name="zip_longest">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Set state information for unpickling." ilk="function" name="__setstate__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
    </scope>
    <scope doc="distutils.archive_util&#10;Utility functions for creating archive files (tarballs, zip files, that sort of thing)." ilk="blob" lang="Python3" name="distutils.archive_util">
      <variable citdl="dict" name="ARCHIVE_FORMATS" />
      <scope classrefs="DistutilsError" doc="Any problems executing an external program (such as the C&#10;compiler, when compiling C files)." ilk="class" name="DistutilsExecError" />
      <scope doc="Returns the first format from the 'format' list that is&#10;unknown." ilk="function" name="check_archive_formats" signature="check_archive_formats(formats)" />
      <scope doc="Return the group database entry for the given group name." ilk="function" name="getgrnam" />
      <scope doc="Return the password database entry for the given user name." ilk="function" name="getpwnam" />
      <import module="log" />
      <scope doc="Create an archive file (eg. zip or tar)." ilk="function" name="make_archive" signature="make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None)" />
      <scope doc="Create a (possibly compressed) tar file from all the files&#10;under 'base_dir'." ilk="function" name="make_tarball" signature="make_tarball(base_name, base_dir, compress='gzip', verbose=0, dry_run=0, owner=None, group=None)" />
      <scope doc="Create a zip file from all the files under 'base_dir'." ilk="function" name="make_zipfile" signature="make_zipfile(base_name, base_dir, verbose=0, dry_run=0)" />
      <scope doc="Create a directory and any missing ancestor directories." ilk="function" name="mkpath" signature="mkpath(name, mode=511, verbose=1, dry_run=0)" />
      <import module="os" />
      <scope doc="Run another program, specified as a command list 'cmd', in a&#10;new process." ilk="function" name="spawn" signature="spawn(cmd, search_path=1, verbose=0, dry_run=0)" />
      <import module="sys" />
      <scope doc="Issue a warning, or maybe ignore it or raise an exception." ilk="function" name="warn" />
      <import module="zipfile" />
    </scope>
    <scope doc="distutils.dep_util&#10;Utility functions for simple, timestamp-based dependency of files and groups of files; also, function based entirely on such timestamp dependency analysis." ilk="blob" lang="Python3" name="distutils.dep_util">
      <scope classrefs="DistutilsError" doc="Any problems in the filesystem: expected file not found, etc.&#10;Typically this is for problems that we detect before OSError could be raised." ilk="class" name="DistutilsFileError" />
      <scope doc="Return true if 'source' exists and is more recently modified&#10;than 'target', or if 'source' exists and 'target' doesn't." ilk="function" name="newer" signature="newer(source, target)" />
      <scope doc="Return true if 'target' is out-of-date with respect to any&#10;file listed in 'sources'." ilk="function" name="newer_group" signature="newer_group(sources, target, missing='error')" />
      <scope doc="Walk two filename lists in parallel, testing if each source&#10;is newer than its corresponding target." ilk="function" name="newer_pairwise" signature="newer_pairwise(sources, targets)" />
      <import module="os" />
    </scope>
    <scope doc="Utilities to get a password and/or the current user name.&#10;getpass(prompt[, stream]) - Prompt for a password, with echo turned off. getuser() - Get the user name from the environment or password database.  GetPassWarning - This UserWarning is issued when getpass() cannot prevent echoing of the password contents while reading.  On Windows, the msvcrt module will be used. On the Mac EasyDialogs.AskPassword is used, if available." ilk="blob" lang="Python3" name="getpass">
      <scope classrefs="UserWarning" doc="Base class for warnings generated by user code.&#10;" ilk="class" name="GetPassWarning" />
      <variable citdl="list" name="__all__" />
      <import module="contextlib" />
      <scope ilk="function" name="fallback_getpass" signature="fallback_getpass(prompt='Password: ', stream=None)" />
      <scope doc="Prompt for a password, with echo turned off." ilk="function" name="getpass" signature="getpass(prompt='Password: ', stream=None)" />
      <scope doc="Get the username from the environment or password database." ilk="function" name="getuser" signature="getuser()" />
      <import module="io" />
      <import module="os" />
      <import module="sys" />
      <import module="termios" />
      <scope doc="Prompt for a password, with echo turned off." ilk="function" name="unix_getpass" signature="unix_getpass(prompt='Password: ', stream=None)" />
      <import module="warnings" />
      <scope doc="Prompt for password with echo off, using Windows getch()." ilk="function" name="win_getpass" signature="win_getpass(prompt='Password: ', stream=None)" />
    </scope>
    <scope doc="codecs -- Python Codec Registry, API and helpers.&#10; Written by Marc-Andre Lemburg (mal@lemburg.com).  (c) Copyright CNRI, All Rights Reserved. NO WARRANTY." ilk="blob" lang="Python3" name="codecs">
      <variable citdl="bytes" name="BOM" />
      <variable citdl="bytes" name="BOM32_BE" />
      <variable citdl="bytes" name="BOM32_LE" />
      <variable citdl="bytes" name="BOM64_BE" />
      <variable citdl="bytes" name="BOM64_LE" />
      <variable citdl="bytes" name="BOM_BE" />
      <variable citdl="bytes" name="BOM_LE" />
      <variable citdl="bytes" name="BOM_UTF16" />
      <variable citdl="bytes" name="BOM_UTF16_BE" />
      <variable citdl="bytes" name="BOM_UTF16_LE" />
      <variable citdl="bytes" name="BOM_UTF32" />
      <variable citdl="bytes" name="BOM_UTF32_BE" />
      <variable citdl="bytes" name="BOM_UTF32_LE" />
      <variable citdl="bytes" name="BOM_UTF8" />
      <scope classrefs="IncrementalDecoder" doc="This subclass of IncrementalDecoder can be used as the baseclass for an&#10;incremental decoder if the decoder must be able to handle incomplete byte sequences." ilk="class" name="BufferedIncrementalDecoder">
        <scope ilk="function" name="_buffer_decode" signature="_buffer_decode(self, input, errors, final)" />
        <scope doc="Set the current state of the decoder." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Reset the decoder to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Create an IncrementalDecoder instance." ilk="function" name="__init__" signature="__init__(self, errors='strict')" />
        <scope doc="Return the current state of the decoder." ilk="function" name="getstate" signature="getstate(self)" />
        <scope doc="Decode input and returns the resulting object." ilk="function" name="decode" signature="decode(self, input, final=False)" />
      </scope>
      <scope classrefs="IncrementalEncoder" doc="This subclass of IncrementalEncoder can be used as the baseclass for an&#10;incremental encoder if the encoder must keep some of the output in a buffer between calls to encode()." ilk="class" name="BufferedIncrementalEncoder">
        <scope doc="Set the current state of the encoder." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Resets the encoder to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Encodes input and returns the resulting object." ilk="function" name="encode" signature="encode(self, input, final=False)" />
        <scope doc="Creates an IncrementalEncoder instance." ilk="function" name="__init__" signature="__init__(self, errors='strict')" />
        <scope doc="Return the current state of the encoder." ilk="function" name="getstate" signature="getstate(self)" />
        <scope ilk="function" name="_buffer_encode" signature="_buffer_encode(self, input, errors, final)" />
      </scope>
      <scope classrefs="object" doc="Defines the interface for stateless encoders/decoders.&#10;The .encode()/.decode() methods may use different error handling schemes by providing the errors argument. These string values are predefined:  'strict' - raise a ValueError error (or a subclass) 'ignore' - ignore the character and continue with the next 'replace' - replace with a suitable replacement character; Python will use the official U+FFFD REPLACEMENT CHARACTER for the builtin Unicode codecs on decoding and '?' on encoding." ilk="class" name="Codec">
        <scope doc="Encodes the object input and returns a tuple (output object,&#10;length consumed)." ilk="function" name="encode" signature="encode(self, input, errors='strict')" />
        <scope doc="Decodes the object input and returns a tuple (output object,&#10;length consumed)." ilk="function" name="decode" signature="decode(self, input, errors='strict')" />
      </scope>
      <scope classrefs="tuple" doc="Codec details when looking up the codec registry&#10;" ilk="class" name="CodecInfo">
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None, *, _is_text_encoding=None)" />
      </scope>
      <scope doc="Return a wrapped version of file which provides transparent&#10;encoding translation." ilk="function" name="EncodedFile" signature="EncodedFile(file, data_encoding, file_encoding=None, errors='strict')" />
      <scope classrefs="object" doc="An IncrementalDecoder decodes an input in multiple steps. The input can&#10;be passed piece by piece to the decode() method. The IncrementalDecoder remembers the state of the decoding process between calls to decode()." ilk="class" name="IncrementalDecoder">
        <scope doc="Set the current state of the decoder." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Reset the decoder to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Create an IncrementalDecoder instance." ilk="function" name="__init__" signature="__init__(self, errors='strict')" />
        <scope doc="Return the current state of the decoder." ilk="function" name="getstate" signature="getstate(self)" />
        <scope doc="Decode input and returns the resulting object." ilk="function" name="decode" signature="decode(self, input, final=False)" />
      </scope>
      <scope classrefs="object" doc="An IncrementalEncoder encodes an input in multiple steps. The input can&#10;be passed piece by piece to the encode() method. The IncrementalEncoder remembers the state of the encoding process between calls to encode()." ilk="class" name="IncrementalEncoder">
        <scope doc="Encodes input and returns the resulting object." ilk="function" name="encode" signature="encode(self, input, final=False)" />
        <scope doc="Set the current state of the encoder." ilk="function" name="setstate" signature="setstate(self, state)" />
        <scope doc="Resets the encoder to the initial state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Creates an IncrementalEncoder instance." ilk="function" name="__init__" signature="__init__(self, errors='strict')" />
        <scope doc="Return the current state of the encoder." ilk="function" name="getstate" signature="getstate(self)" />
      </scope>
      <scope classrefs="Codec" doc="Defines the interface for stateless encoders/decoders.&#10;The .encode()/.decode() methods may use different error handling schemes by providing the errors argument. These string values are predefined:  'strict' - raise a ValueError error (or a subclass) 'ignore' - ignore the character and continue with the next 'replace' - replace with a suitable replacement character; Python will use the official U+FFFD REPLACEMENT CHARACTER for the builtin Unicode codecs on decoding and '?' on encoding." ilk="class" name="StreamReader">
        <scope doc="Decodes data from the stream self.stream and returns the&#10;resulting object." ilk="function" name="read" signature="read(self, size=-1, chars=-1, firstline=False)" />
        <scope doc="Read one line from the input stream and return the decoded&#10;data." ilk="function" name="readline" signature="readline(self, size=None, keepends=True)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Read all lines available on the input stream and return them&#10;as a list." ilk="function" name="readlines" signature="readlines(self, sizehint=None, keepends=True)" />
        <scope doc="Return the next decoded line from the input stream." ilk="function" name="__next__" signature="__next__(self)" />
        <scope doc="Resets the codec buffers used for keeping state." ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, tb)" />
        <scope doc="Decodes the object input and returns a tuple (output object,&#10;length consumed)." ilk="function" name="decode" signature="decode(self, input, errors='strict')" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Creates a StreamReader instance." ilk="function" name="__init__" signature="__init__(self, stream, errors='strict')" />
        <scope doc="Set the input stream's current position." ilk="function" name="seek" signature="seek(self, offset, whence=0)" />
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" name="__getattr__" signature="__getattr__(self, name, getattr=&lt;built-in function getattr&gt;)" />
      </scope>
      <scope classrefs="object" doc="StreamReaderWriter instances allow wrapping streams which&#10;work in both read and write modes.  The design is such that one can use the factory functions returned by the codec.lookup() function to construct the instance." ilk="class" name="StreamReaderWriter">
        <scope ilk="function" name="readline" signature="readline(self, size=None)" />
        <scope doc="Return the next decoded line from the input stream." ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, tb)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Creates a StreamReaderWriter instance." ilk="function" name="__init__" signature="__init__(self, stream, Reader, Writer, errors='strict')" />
        <scope ilk="function" name="seek" signature="seek(self, offset, whence=0)" />
        <scope ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" name="__getattr__" signature="__getattr__(self, name, getattr=&lt;built-in function getattr&gt;)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="readlines" signature="readlines(self, sizehint=None)" />
        <scope ilk="function" name="write" signature="write(self, data)" />
        <scope ilk="function" name="writelines" signature="writelines(self, list)" />
      </scope>
      <scope classrefs="object" doc="StreamRecoder instances translate data from one encoding to another.&#10;They use the complete set of APIs returned by the codecs.lookup() function to implement their task.  Data written to the StreamRecoder is first decoded into an intermediate format (depending on the &quot;decode&quot; codec) and then written to the underlying stream using an instance of the provided Writer class.  In the other direction, data is read from the underlying stream using a Reader instance and then encoded and returned to the caller." ilk="class" name="StreamRecoder">
        <scope ilk="function" name="readline" signature="readline(self, size=None)" />
        <scope doc="Return the next decoded line from the input stream." ilk="function" name="__next__" signature="__next__(self)" />
        <scope ilk="function" name="reset" signature="reset(self)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, tb)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Creates a StreamRecoder instance which implements a two-way&#10;conversion: encode and decode work on the frontend (the data&#10;visible to .read() and .write()) while Reader and Writer&#10;work on the backend (the data in stream)." ilk="function" name="__init__" signature="__init__(self, stream, encode, decode, Reader, Writer, errors='strict')" />
        <scope ilk="function" name="read" signature="read(self, size=-1)" />
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" name="__getattr__" signature="__getattr__(self, name, getattr=&lt;built-in function getattr&gt;)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="readlines" signature="readlines(self, sizehint=None)" />
        <scope ilk="function" name="write" signature="write(self, data)" />
        <scope ilk="function" name="writelines" signature="writelines(self, list)" />
      </scope>
      <scope classrefs="Codec" doc="Defines the interface for stateless encoders/decoders.&#10;The .encode()/.decode() methods may use different error handling schemes by providing the errors argument. These string values are predefined:  'strict' - raise a ValueError error (or a subclass) 'ignore' - ignore the character and continue with the next 'replace' - replace with a suitable replacement character; Python will use the official U+FFFD REPLACEMENT CHARACTER for the builtin Unicode codecs on decoding and '?' on encoding." ilk="class" name="StreamWriter">
        <scope doc="Inherit all other methods from the underlying stream." ilk="function" name="__getattr__" signature="__getattr__(self, name, getattr=&lt;built-in function getattr&gt;)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, tb)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Flushes and resets the codec buffers used for keeping state." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="Writes the object's contents encoded to self.stream." ilk="function" name="write" signature="write(self, object)" />
        <scope doc="Creates a StreamWriter instance." ilk="function" name="__init__" signature="__init__(self, stream, errors='strict')" />
        <scope doc="Writes the concatenated list of strings to the stream using&#10;.write()." ilk="function" name="writelines" signature="writelines(self, list)" />
        <scope ilk="function" name="seek" signature="seek(self, offset, whence=0)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope ilk="function" name="ascii_decode" />
      <scope ilk="function" name="ascii_encode" />
      <scope doc="Implements the 'backslashreplace' error handling, which&#10;replaces malformed data with a backslashed escape sequence." ilk="function" name="backslashreplace_errors" />
      <import module="builtins" />
      <scope ilk="function" name="charmap_build" />
      <scope ilk="function" name="charmap_decode" />
      <scope ilk="function" name="charmap_encode" />
      <scope doc="Decodes obj using the codec registered for encoding." ilk="function" name="decode" />
      <scope doc="Encodes obj using the codec registered for encoding." ilk="function" name="encode" />
      <scope ilk="function" name="escape_decode" />
      <scope ilk="function" name="escape_encode" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;decoder function." ilk="function" name="getdecoder" signature="getdecoder(encoding)" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;encoder function." ilk="function" name="getencoder" signature="getencoder(encoding)" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;IncrementalDecoder class or factory function." ilk="function" name="getincrementaldecoder" signature="getincrementaldecoder(encoding)" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;IncrementalEncoder class or factory function." ilk="function" name="getincrementalencoder" signature="getincrementalencoder(encoding)" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;StreamReader class or factory function." ilk="function" name="getreader" signature="getreader(encoding)" />
      <scope doc="Lookup up the codec for the given encoding and return its&#10;StreamWriter class or factory function." ilk="function" name="getwriter" signature="getwriter(encoding)" />
      <scope doc="Implements the 'ignore' error handling, which ignores&#10;malformed data and continues." ilk="function" name="ignore_errors" />
      <scope doc="Decoding iterator." ilk="function" name="iterdecode" signature="iterdecode(iterator, encoding, errors='strict', **kwargs)" />
      <scope doc="Encoding iterator." ilk="function" name="iterencode" signature="iterencode(iterator, encoding, errors='strict', **kwargs)" />
      <scope ilk="function" name="latin_1_decode" />
      <scope ilk="function" name="latin_1_encode" />
      <scope doc="Looks up a codec tuple in the Python codec registry and&#10;returns a CodecInfo object." ilk="function" name="lookup" />
      <scope doc="Return the error handler for the specified error handling&#10;name or raise a LookupError, if no handler exists under this&#10;name." ilk="function" name="lookup_error" signature="lookup_error(errors) -&gt; handler" />
      <scope doc="Creates an encoding map from a decoding map." ilk="function" name="make_encoding_map" signature="make_encoding_map(decoding_map)" />
      <scope doc="Return a dictionary where elements of the rng sequence are&#10;mapped to themselves." ilk="function" name="make_identity_dict" returns="dict" signature="make_identity_dict(rng) -&gt; dict" />
      <scope doc="Implements the 'namereplace' error handling, which replaces&#10;an unencodable character with a \N{...} escape sequence." ilk="function" name="namereplace_errors" />
      <scope doc="Open an encoded file using the given mode and return a&#10;wrapped version providing transparent encoding/decoding." ilk="function" name="open" signature="open(filename, mode='r', encoding=None, errors='strict', buffering=1)" />
      <scope ilk="function" name="raw_unicode_escape_decode" />
      <scope ilk="function" name="raw_unicode_escape_encode" />
      <scope ilk="function" name="readbuffer_encode" />
      <scope doc="Register a codec search function." ilk="function" name="register" />
      <scope doc="Register the specified error handler under the name errors." ilk="function" name="register_error" />
      <scope doc="Implements the 'replace' error handling, which replaces&#10;malformed data with a replacement marker." ilk="function" name="replace_errors" />
      <scope doc="Implements the 'strict' error handling, which raises a&#10;UnicodeError on coding errors." ilk="function" name="strict_errors" />
      <import module="sys" />
      <scope ilk="function" name="unicode_escape_decode" />
      <scope ilk="function" name="unicode_escape_encode" />
      <scope ilk="function" name="unicode_internal_decode" />
      <scope ilk="function" name="unicode_internal_encode" />
      <scope ilk="function" name="utf_16_be_decode" />
      <scope ilk="function" name="utf_16_be_encode" />
      <scope ilk="function" name="utf_16_decode" />
      <scope ilk="function" name="utf_16_encode" />
      <scope ilk="function" name="utf_16_ex_decode" />
      <scope ilk="function" name="utf_16_le_decode" />
      <scope ilk="function" name="utf_16_le_encode" />
      <scope ilk="function" name="utf_32_be_decode" />
      <scope ilk="function" name="utf_32_be_encode" />
      <scope ilk="function" name="utf_32_decode" />
      <scope ilk="function" name="utf_32_encode" />
      <scope ilk="function" name="utf_32_ex_decode" />
      <scope ilk="function" name="utf_32_le_decode" />
      <scope ilk="function" name="utf_32_le_encode" />
      <scope ilk="function" name="utf_7_decode" />
      <scope ilk="function" name="utf_7_encode" />
      <scope ilk="function" name="utf_8_decode" />
      <scope ilk="function" name="utf_8_encode" />
      <scope doc="Implements the 'xmlcharrefreplace' error handling, which&#10;replaces an unencodable character with the appropriate XML&#10;character reference." ilk="function" name="xmlcharrefreplace_errors" />
    </scope>
    <scope doc="allow programmer to define multiple exit functions to be executedupon normal program termination.&#10;Two public functions, register and unregister, are defined." ilk="blob" lang="Python3" name="atexit">
      <scope doc="Register a function to be executed upon normal program&#10;termination" ilk="function" name="register" signature="register(func, *args, **kwargs) -&gt; func" />
      <scope doc="Unregister an exit function which was previously registered&#10;using atexit.register" ilk="function" name="unregister" signature="unregister(func) -&gt; None" />
    </scope>
    <scope doc="Utilities for comparing files and directories.&#10;Classes: dircmp  Functions: cmp(f1, f2, shallow=True) -&gt; int cmpfiles(a, b, common) -&gt; ([], [], []) clear_cache()" ilk="blob" lang="Python3" name="filecmp">
      <variable citdl="int" name="BUFSIZE" />
      <variable citdl="list" name="DEFAULT_IGNORES" />
      <variable citdl="list" name="__all__" />
      <scope doc="Clear the filecmp cache." ilk="function" name="clear_cache" signature="clear_cache()" />
      <scope doc="Compare two files." ilk="function" name="cmp" signature="cmp(f1, f2, shallow=True)" />
      <scope doc="Compare common files in two directories." ilk="function" name="cmpfiles" signature="cmpfiles(a, b, common, shallow=True)" />
      <scope doc="# Demonstration and testing." ilk="function" name="demo" signature="demo()" />
      <scope classrefs="object" doc="A class that manages the comparison of 2 directories.&#10;dircmp(a, b, ignore=None, hide=None) A and B are directories. IGNORE is a list of names to ignore, defaults to DEFAULT_IGNORES. HIDE is a list of names to hide, defaults to [os.curdir, os.pardir].  High level usage: x = dircmp(dir1, dir2) x.report() -&gt; prints a report on the differences between dir1 and dir2" ilk="class" name="dircmp">
        <scope ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope ilk="function" name="phase2" signature="phase2(self)" />
        <scope ilk="function" name="report" signature="report(self)" />
        <scope ilk="function" name="phase4_closure" signature="phase4_closure(self)" />
        <scope ilk="function" name="phase1" signature="phase1(self)" />
        <scope ilk="function" name="phase0" signature="phase0(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, a, b, ignore=None, hide=None)" />
        <scope ilk="function" name="report_partial_closure" signature="report_partial_closure(self)" />
        <scope ilk="function" name="report_full_closure" signature="report_full_closure(self)" />
        <scope ilk="function" name="phase4" signature="phase4(self)" />
        <scope ilk="function" name="phase3" signature="phase3(self)" />
      </scope>
      <scope classrefs="object" doc="filterfalse(function or None, sequence) --&gt; filterfalse object&#10;Return those items of sequence for which function(item) is false. If function is None, return the items that are false." ilk="class" name="filterfalse">
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Implement next(self)." ilk="function" name="__next__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <import module="os" />
      <import module="stat" />
    </scope>
    <scope doc="Optional fixer to transform set() calls to set literals.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_set_literal">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixSetLiteral">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <import module="pytree" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Fixer that changes buffer(...) into memoryview(...).&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_buffer">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixBuffer">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
    </scope>
    <scope doc="A parser for HTML and XHTML.&#10;" ilk="blob" lang="Python3" name="html.parser">
      <scope classrefs="ParserBase" doc="Find tags and other markup and call handler functions.&#10;Usage: p = HTMLParser() p.feed(data) ... p.close()  Start tags are handled by calling self.handle_starttag() or self.handle_startendtag(); end tags by self.handle_endtag().  The data between tags is passed from the parser to the derived class by calling self.handle_data() with the data as argument (the data" ilk="class" name="HTMLParser">
        <scope doc="Feed data to the parser." ilk="function" name="feed" signature="feed(self, data)" />
        <scope doc="Reset this instance. Loses all unprocessed data." ilk="function" name="reset" signature="reset(self)" />
        <scope doc="# Internal -- parse processing instr, return end or -1 if&#10;not terminated" ilk="function" name="parse_pi" signature="parse_pi(self, i)" />
        <scope doc="# Internal -- parse endtag, return end or -1 if incomplete" ilk="function" name="parse_endtag" signature="parse_endtag(self, i)" />
        <scope doc="Initialize and reset this instance." ilk="function" name="__init__" signature="__init__(self, *, convert_charrefs=True)" />
        <scope doc="# Overridable -- handle processing instruction" ilk="function" name="handle_pi" signature="handle_pi(self, data)" />
        <scope doc="# Overridable -- handle entity reference" ilk="function" name="handle_entityref" signature="handle_entityref(self, name)" />
        <scope ilk="function" name="set_cdata_mode" signature="set_cdata_mode(self, elem)" />
        <scope doc="# Internal -- handle starttag, return end or -1 if not&#10;terminated" ilk="function" name="parse_starttag" signature="parse_starttag(self, i)" />
        <scope doc="# Internal -- parse bogus comment, return length or -1 if&#10;not terminated # see&#10;http://www.w3.org/TR/html5/tokenization.html#bogus-comment-&#10;state" ilk="function" name="parse_bogus_comment" signature="parse_bogus_comment(self, i, report=1)" />
        <scope doc="# Internal -- helper to remove special character quoting" ilk="function" name="unescape" signature="unescape(self, s)" />
        <scope doc="# Overridable -- handle character reference" ilk="function" name="handle_charref" signature="handle_charref(self, name)" />
        <scope doc="# Overridable -- handle comment" ilk="function" name="handle_comment" signature="handle_comment(self, data)" />
        <scope doc="# Internal -- handle data as far as reasonable." ilk="function" name="goahead" signature="goahead(self, end)" />
        <scope doc="# Overridable -- handle start tag" ilk="function" name="handle_starttag" signature="handle_starttag(self, tag, attrs)" />
        <scope doc="Handle any buffered data." ilk="function" name="close" signature="close(self)" />
        <scope doc="# Overridable -- handle declaration" ilk="function" name="handle_decl" signature="handle_decl(self, decl)" />
        <scope doc="# Overridable -- handle end tag" ilk="function" name="handle_endtag" signature="handle_endtag(self, tag)" />
        <scope doc="# Internal -- check to see if we have a complete starttag;&#10;return end # or -1 if incomplete." ilk="function" name="check_for_whole_start_tag" signature="check_for_whole_start_tag(self, i)" />
        <scope doc="# Overridable -- finish processing of start+end tag:&#10;&lt;tag.../&gt;" ilk="function" name="handle_startendtag" signature="handle_startendtag(self, tag, attrs)" />
        <scope doc="# Overridable -- handle data" ilk="function" name="handle_data" signature="handle_data(self, data)" />
        <scope doc="Return full source of start tag: '&lt;...&gt;'." ilk="function" name="get_starttag_text" signature="get_starttag_text(self)" />
        <scope ilk="function" name="clear_cdata_mode" signature="clear_cdata_mode(self)" />
        <scope ilk="function" name="unknown_decl" signature="unknown_decl(self, data)" />
        <scope doc="# Internal -- parse html declarations, return length or -1&#10;if not terminated # See&#10;w3.org/TR/html5/tokenization.html#markup-declaration-open-&#10;state # See also parse_declaration in _markupbase" ilk="function" name="parse_html_declaration" signature="parse_html_declaration(self, i)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_markupbase" />
      <variable citdl="SRE_Pattern" name="attrfind_tolerant" />
      <variable citdl="SRE_Pattern" name="charref" />
      <variable citdl="SRE_Pattern" name="commentclose" />
      <variable citdl="SRE_Pattern" name="endendtag" />
      <variable citdl="SRE_Pattern" name="endtagfind" />
      <variable citdl="SRE_Pattern" name="entityref" />
      <variable citdl="SRE_Pattern" name="incomplete" />
      <variable citdl="SRE_Pattern" name="interesting_normal" />
      <variable citdl="SRE_Pattern" name="locatestarttagend_tolerant" />
      <variable citdl="SRE_Pattern" name="piclose" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="starttagopen" />
      <variable citdl="SRE_Pattern" name="tagfind_tolerant" />
      <scope doc="Convert all named and numeric character references (e.g." ilk="function" name="unescape" signature="unescape(s)" />
      <import module="warnings" />
    </scope>
    <scope doc="This module provides some more Pythonic support for SSL.&#10;Object types:  SSLSocket -- subtype of socket.socket which does SSL over the socket  Exceptions:  SSLError -- exception raised for I/O errors  Functions: " ilk="blob" lang="Python3" name="ssl">
      <variable citdl="AddressFamily" name="AF_INET" />
      <variable citdl="int" name="ALERT_DESCRIPTION_ACCESS_DENIED" />
      <variable citdl="int" name="ALERT_DESCRIPTION_BAD_CERTIFICATE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_BAD_RECORD_MAC" />
      <variable citdl="int" name="ALERT_DESCRIPTION_CERTIFICATE_EXPIRED" />
      <variable citdl="int" name="ALERT_DESCRIPTION_CERTIFICATE_REVOKED" />
      <variable citdl="int" name="ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN" />
      <variable citdl="int" name="ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_CLOSE_NOTIFY" />
      <variable citdl="int" name="ALERT_DESCRIPTION_DECODE_ERROR" />
      <variable citdl="int" name="ALERT_DESCRIPTION_DECOMPRESSION_FAILURE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_DECRYPT_ERROR" />
      <variable citdl="int" name="ALERT_DESCRIPTION_HANDSHAKE_FAILURE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_ILLEGAL_PARAMETER" />
      <variable citdl="int" name="ALERT_DESCRIPTION_INSUFFICIENT_SECURITY" />
      <variable citdl="int" name="ALERT_DESCRIPTION_INTERNAL_ERROR" />
      <variable citdl="int" name="ALERT_DESCRIPTION_NO_RENEGOTIATION" />
      <variable citdl="int" name="ALERT_DESCRIPTION_PROTOCOL_VERSION" />
      <variable citdl="int" name="ALERT_DESCRIPTION_RECORD_OVERFLOW" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNEXPECTED_MESSAGE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNKNOWN_CA" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNRECOGNIZED_NAME" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE" />
      <variable citdl="int" name="ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION" />
      <variable citdl="int" name="ALERT_DESCRIPTION_USER_CANCELLED" />
      <variable citdl="int" name="CERT_NONE" />
      <variable citdl="int" name="CERT_OPTIONAL" />
      <variable citdl="int" name="CERT_REQUIRED" />
      <variable citdl="list" name="CHANNEL_BINDING_TYPES" />
      <scope classrefs="ValueError" doc="Inappropriate argument value (of correct type).&#10;" ilk="class" name="CertificateError" />
      <scope doc="Takes a certificate in binary DER format and returns the PEM&#10;version of it as a string." ilk="function" name="DER_cert_to_PEM_cert" signature="DER_cert_to_PEM_cert(der_cert_bytes)" />
      <scope classrefs="tuple" doc="DefaultVerifyPaths(cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env, openssl_capath)&#10;" ilk="class" name="DefaultVerifyPaths">
        <scope doc="Return a new DefaultVerifyPaths object replacing specified&#10;fields with new values" ilk="function" name="_replace" signature="_replace(_self, **kwds)" />
        <scope doc="Make a new DefaultVerifyPaths object from a sequence or&#10;iterable" ilk="function" name="_make" />
        <scope doc="Return a nicely formatted representation string" ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return self as a plain tuple. Used by copy and pickle." ilk="function" name="__getnewargs__" signature="__getnewargs__(self)" />
        <scope doc="Create new instance of DefaultVerifyPaths(cafile, capath,&#10;openssl_cafile_env, openssl_cafile, openssl_capath_env,&#10;openssl_capath)" ilk="function" name="__new__" signature="__new__(_cls, cafile, capath, openssl_cafile_env, openssl_cafile, openssl_capath_env, openssl_capath)" />
        <scope doc="Return a new OrderedDict which maps field names to their&#10;values." ilk="function" name="_asdict" signature="_asdict(self)" />
      </scope>
      <variable citdl="bool" name="HAS_ALPN" />
      <variable citdl="bool" name="HAS_ECDH" />
      <variable citdl="bool" name="HAS_NPN" />
      <variable citdl="bool" name="HAS_SNI" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="MemoryBIO">
        <scope doc="Read up to size bytes from the memory BIO." ilk="function" name="read" />
        <scope doc="Writes the bytes b into the memory BIO." ilk="function" name="write" />
        <scope doc="Write an EOF marker to the memory BIO." ilk="function" name="write_eof" />
      </scope>
      <variable citdl="str" name="OPENSSL_VERSION" />
      <variable citdl="tuple" name="OPENSSL_VERSION_INFO" />
      <variable citdl="int" name="OPENSSL_VERSION_NUMBER" />
      <variable citdl="int" name="OP_ALL" />
      <variable citdl="int" name="OP_CIPHER_SERVER_PREFERENCE" />
      <variable citdl="int" name="OP_NO_COMPRESSION" />
      <variable citdl="int" name="OP_NO_SSLv2" />
      <variable citdl="int" name="OP_NO_SSLv3" />
      <variable citdl="int" name="OP_NO_TLSv1" />
      <variable citdl="int" name="OP_NO_TLSv1_1" />
      <variable citdl="int" name="OP_NO_TLSv1_2" />
      <variable citdl="int" name="OP_SINGLE_DH_USE" />
      <variable citdl="int" name="OP_SINGLE_ECDH_USE" />
      <variable citdl="str" name="PEM_FOOTER" />
      <variable citdl="str" name="PEM_HEADER" />
      <scope doc="Takes a certificate in ASCII PEM format and returns the DER-&#10;encoded version of it as a byte sequence" ilk="function" name="PEM_cert_to_DER_cert" signature="PEM_cert_to_DER_cert(pem_cert_string)" />
      <variable citdl="_SSLMethod" name="PROTOCOL_SSLv23" />
      <variable citdl="_SSLMethod" name="PROTOCOL_SSLv3" />
      <variable citdl="_SSLMethod" name="PROTOCOL_TLSv1" />
      <variable citdl="_SSLMethod" name="PROTOCOL_TLSv1_1" />
      <variable citdl="_SSLMethod" name="PROTOCOL_TLSv1_2" />
      <scope classrefs="_ASN1Object Enum" doc="SSLContext purpose flags with X509v3 Extended Key Usage objects&#10;" ilk="class" name="Purpose">
        <scope ilk="function" name="__reduce_ex__" signature="__reduce_ex__(self, proto)" />
      </scope>
      <scope doc="Mix string into the OpenSSL PRNG state." ilk="function" name="RAND_add" />
      <scope doc="Generate n cryptographically strong pseudo-random bytes." ilk="function" name="RAND_bytes" />
      <scope doc="Queries the entropy gather daemon (EGD) on the socket named&#10;by 'path'." ilk="function" name="RAND_egd" />
      <scope doc="Generate n pseudo-random bytes." ilk="function" name="RAND_pseudo_bytes" />
      <scope doc="Returns 1 if the OpenSSL PRNG has been seeded with enough&#10;data and 0 if not." ilk="function" name="RAND_status" />
      <variable citdl="SocketKind" name="SOCK_STREAM" />
      <variable citdl="int" name="SOL_SOCKET" />
      <variable citdl="int" name="SO_TYPE" />
      <scope classrefs="_SSLContext" doc="An SSLContext holds various SSL-related configuration options and&#10;data, such as certificates and possibly a private key." ilk="class" name="SSLContext">
        <scope ilk="function" name="wrap_bio" signature="wrap_bio(self, incoming, outgoing, server_side=False, server_hostname=None)" />
        <scope doc="Create and return a new object." ilk="function" name="__new__" signature="__new__(cls, protocol, *args, **kwargs)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, protocol)" />
        <scope ilk="function" name="_load_windows_store_certs" signature="_load_windows_store_certs(self, storename, purpose)" />
        <scope ilk="function" name="set_alpn_protocols" signature="set_alpn_protocols(self, alpn_protocols)" />
        <scope ilk="function" name="load_default_certs" signature="load_default_certs(self, purpose=&lt;Purpose.SERVER_AUTH: _ASN1Object(nid=129, shortname='serverAuth', longname='TLS Web Server Authentication', oid='1.3.6.1.5.5.7.3.1')&gt;)" />
        <scope ilk="function" name="wrap_socket" signature="wrap_socket(self, sock, server_side=False, do_handshake_on_connect=True, suppress_ragged_eofs=True, server_hostname=None)" />
        <scope ilk="function" name="set_npn_protocols" signature="set_npn_protocols(self, npn_protocols)" />
      </scope>
      <scope classrefs="SSLError" doc="SSL/TLS connection terminated abruptly.&#10;" ilk="class" name="SSLEOFError" />
      <scope classrefs="OSError" doc="An error occurred in the SSL implementation.&#10;" ilk="class" name="SSLError">
        <scope doc="Return str(self)." ilk="function" name="__str__" />
      </scope>
      <scope classrefs="object" doc="This class implements an interface on top of a low-level SSL object as&#10;implemented by OpenSSL. This object captures the state of an SSL connection but does not provide any network IO itself. IO needs to be performed through separate &quot;BIO&quot; objects which are OpenSSL's IO abstraction layer.  This class does not have a public constructor. Instances are returned by ``SSLContext.wrap_bio``. This class is typically used by framework authors that want to implement asynchronous IO for SSL through memory buffers.  When compared to ``SSLSocket``, this object lacks the following features: " ilk="class" name="SSLObject">
        <scope doc="Start the SSL/TLS handshake." ilk="function" name="do_handshake" signature="do_handshake(self)" />
        <scope doc="Return the currently selected cipher as a 3-tuple ``(name,&#10;ssl_version, secret_bits)``." ilk="function" name="cipher" signature="cipher(self)" />
        <scope doc="Returns a formatted version of the data in the certificate&#10;provided by the other end of the SSL channel." ilk="function" name="getpeercert" signature="getpeercert(self, binary_form=False)" />
        <scope doc="Return the number of bytes that can be read immediately." ilk="function" name="pending" signature="pending(self)" />
        <scope doc="Start the SSL shutdown handshake." ilk="function" name="unwrap" signature="unwrap(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sslobj, owner=None)" />
        <scope doc="Return the current compression algorithm in use, or ``None``&#10;if compression was not negotiated or not supported by one of&#10;the peers." ilk="function" name="compression" signature="compression(self)" />
        <scope doc="Get channel binding data for current connection." ilk="function" name="get_channel_binding" signature="get_channel_binding(self, cb_type='tls-unique')" />
        <scope doc="Read up to 'len' bytes from the SSL object and return them." ilk="function" name="read" signature="read(self, len=0, buffer=None)" />
        <scope doc="Return the currently selected NPN protocol as a string, or&#10;``None`` if a next protocol was not negotiated or if NPN is&#10;not supported by one of the peers." ilk="function" name="selected_npn_protocol" signature="selected_npn_protocol(self)" />
        <scope doc="Return a list of ciphers shared by the client during the&#10;handshake or None if this is not a valid server connection." ilk="function" name="shared_ciphers" signature="shared_ciphers(self)" />
        <scope doc="Write 'data' to the SSL object and return the number of&#10;bytes written." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Return a string identifying the protocol version used by the&#10;current SSL channel." ilk="function" name="version" signature="version(self)" />
        <scope doc="Return the currently selected ALPN protocol as a string, or&#10;``None`` if a next protocol was not negotiated or if ALPN is&#10;not supported by one of the peers." ilk="function" name="selected_alpn_protocol" signature="selected_alpn_protocol(self)" />
      </scope>
      <scope classrefs="socket" doc="This class implements a subtype of socket.socket that wraps&#10;the underlying OS socket in an SSL context when necessary, and provides read and write methods over that channel." ilk="class" name="SSLSocket">
        <scope doc="Perform a TLS/SSL handshake." ilk="function" name="do_handshake" signature="do_handshake(self, block=False)" />
        <scope ilk="function" name="cipher" signature="cipher(self)" />
        <scope doc="Like recv_into(buffer[, nbytes[, flags]]) but also return&#10;the sender's address info." ilk="function" name="recvfrom_into" signature="recvfrom_into(buffer[, nbytes[, flags]]) -&gt; (nbytes, address info)" />
        <scope ilk="function" name="compression" signature="compression(self)" />
        <scope ilk="function" name="unwrap" signature="unwrap(self)" />
        <scope ilk="function" name="_real_close" signature="_real_close(self)" />
        <scope doc="Duplicate the socket." ilk="function" name="dup" signature="dup() -&gt; socket object" />
        <scope doc="Receive normal data and ancillary data from the socket,&#10;scattering the non-ancillary data into a series of buffers." ilk="function" name="recvmsg_into" signature="recvmsg_into(buffers[, ancbufsize[, flags]]) -&gt; (nbytes, ancdata, msg_flags, address)" />
        <scope doc="Get channel binding data for current connection." ilk="function" name="get_channel_binding" signature="get_channel_binding(self, cb_type='tls-unique')" />
        <scope doc="Send a data string to the socket." ilk="function" name="send" signature="send(data[, flags]) -&gt; count" />
        <scope ilk="function" name="_checkClosed" signature="_checkClosed(self, msg=None)" />
        <scope ilk="function" name="shared_ciphers" signature="shared_ciphers(self)" />
        <scope doc="Connects to remote ADDR, and then wraps the connection in an&#10;SSL channel." ilk="function" name="connect" signature="connect(self, addr)" />
        <scope doc="Accepts a new connection from a remote client, and returns a&#10;tuple containing that new connection wrapped with a server-&#10;side SSL channel, and the address of the remote client." ilk="function" name="accept" signature="accept(self)" />
        <scope doc="Shut down the reading side of the socket (flag == SHUT_RD),&#10;the writing side of the socket (flag == SHUT_WR), or both&#10;ends (flag == SHUT_RDWR)." ilk="function" name="shutdown" signature="shutdown(flag)" />
        <scope ilk="function" name="selected_alpn_protocol" signature="selected_alpn_protocol(self)" />
        <scope doc="Read up to LEN bytes and return them." ilk="function" name="read" signature="read(self, len=0, buffer=None)" />
        <scope doc="Returns a formatted version of the data in the certificate&#10;provided by the other end of the SSL channel." ilk="function" name="getpeercert" signature="getpeercert(self, binary_form=False)" />
        <scope ilk="function" name="pending" signature="pending(self)" />
        <scope doc="Like recv(buffersize, flags) but also return the sender's&#10;address info." ilk="function" name="recvfrom" signature="recvfrom(buffersize[, flags]) -&gt; (data, address info)" />
        <scope ilk="function" name="_real_connect" signature="_real_connect(self, addr, connect_ex)" />
        <scope doc="Receive up to buffersize bytes from the socket." ilk="function" name="recv" signature="recv(buffersize[, flags]) -&gt; data" />
        <scope doc="Send normal and ancillary data to the socket, gathering the&#10;non-ancillary data from a series of buffers and&#10;concatenating it into a single message." ilk="function" name="sendmsg" signature="sendmsg(buffers[, ancdata[, flags[, address]]]) -&gt; count" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock=None, keyfile=None, certfile=None, server_side=False, cert_reqs=0, ssl_version=&lt;_SSLMethod.PROTOCOL_SSLv23: 2&gt;, ca_certs=None, do_handshake_on_connect=True, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketKind.SOCK_STREAM: 1&gt;, proto=0, fileno=None, suppress_ragged_eofs=True, npn_protocols=None, ciphers=None, server_hostname=None, _context=None)" />
        <scope doc="Receive normal data (up to bufsize bytes) and ancillary data&#10;from the socket." ilk="function" name="recvmsg" signature="recvmsg(bufsize[, ancbufsize[, flags]]) -&gt; (data, ancdata, msg_flags, address)" />
        <scope ilk="function" name="selected_npn_protocol" signature="selected_npn_protocol(self)" />
        <scope doc="Send a file, possibly by using os.sendfile() if this is a&#10;clear-text socket." ilk="function" name="sendfile" signature="sendfile(self, file, offset=0, count=None)" />
        <scope doc="Like send(data, flags) but allows specifying the destination&#10;address." ilk="function" name="sendto" signature="sendto(data[, flags], address) -&gt; count" />
        <scope doc="A version of recv() that stores its data into a buffer&#10;rather than creating a new string." ilk="function" name="recv_into" signature="recv_into(buffer, [nbytes[, flags]]) -&gt; nbytes_read" />
        <scope doc="Connects to remote ADDR, and then wraps the connection in an&#10;SSL channel." ilk="function" name="connect_ex" signature="connect_ex(self, addr)" />
        <scope doc="Write DATA to the underlying SSL channel." ilk="function" name="write" signature="write(self, data)" />
        <scope doc="Send a data string to the socket." ilk="function" name="sendall" signature="sendall(data[, flags])" />
        <scope ilk="function" name="_check_connected" signature="_check_connected(self)" />
        <scope doc="Return a string identifying the protocol version used by the&#10;current SSL channel, or None if there is no established&#10;channel." ilk="function" name="version" signature="version(self)" />
      </scope>
      <scope classrefs="SSLError" doc="System error when attempting SSL operation.&#10;" ilk="class" name="SSLSyscallError" />
      <scope classrefs="SSLError" doc="Non-blocking SSL socket needs to read more data&#10;before the requested operation can be completed." ilk="class" name="SSLWantReadError" />
      <scope classrefs="SSLError" doc="Non-blocking SSL socket needs to write more data&#10;before the requested operation can be completed." ilk="class" name="SSLWantWriteError" />
      <scope classrefs="SSLError" doc="SSL/TLS session closed cleanly.&#10;" ilk="class" name="SSLZeroReturnError" />
      <variable citdl="int" name="SSL_ERROR_EOF" />
      <variable citdl="int" name="SSL_ERROR_INVALID_ERROR_CODE" />
      <variable citdl="int" name="SSL_ERROR_SSL" />
      <variable citdl="int" name="SSL_ERROR_SYSCALL" />
      <variable citdl="int" name="SSL_ERROR_WANT_CONNECT" />
      <variable citdl="int" name="SSL_ERROR_WANT_READ" />
      <variable citdl="int" name="SSL_ERROR_WANT_WRITE" />
      <variable citdl="int" name="SSL_ERROR_WANT_X509_LOOKUP" />
      <variable citdl="int" name="SSL_ERROR_ZERO_RETURN" />
      <variable citdl="int" name="VERIFY_CRL_CHECK_CHAIN" />
      <variable citdl="int" name="VERIFY_CRL_CHECK_LEAF" />
      <variable citdl="int" name="VERIFY_DEFAULT" />
      <variable citdl="int" name="VERIFY_X509_STRICT" />
      <import module="_ssl" />
      <import module="base64" />
      <scope doc="Return the time in seconds since the Epoch, given the&#10;timestring representing the &quot;notBefore&quot; or &quot;notAfter&quot; date&#10;from a certificate in ``&quot;%b %d %H:%M:%S %Y %Z&quot;`` strptime&#10;format (C locale)." ilk="function" name="cert_time_to_seconds" signature="cert_time_to_seconds(cert_time)" />
      <scope doc="Connect to *address* and return the socket object." ilk="function" name="create_connection" signature="create_connection(address, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
      <scope doc="Create a SSLContext object with default settings." ilk="function" name="create_default_context" signature="create_default_context(purpose=&lt;Purpose.SERVER_AUTH: _ASN1Object(nid=129, shortname='serverAuth', longname='TLS Web Server Authentication', oid='1.3.6.1.5.5.7.3.1')&gt;, *, cafile=None, capath=None, cadata=None)" />
      <import module="errno" />
      <scope doc="Return paths to default cafile and capath." ilk="function" name="get_default_verify_paths" signature="get_default_verify_paths()" />
      <scope ilk="function" name="get_protocol_name" signature="get_protocol_name(protocol_code)" />
      <scope doc="Retrieve the certificate from the server at the specified&#10;address, and return it as a PEM-encoded string." ilk="function" name="get_server_certificate" signature="get_server_certificate(addr, ssl_version=&lt;_SSLMethod.PROTOCOL_SSLv23: 2&gt;, ca_certs=None)" />
      <import module="ipaddress" />
      <scope doc="Verify that *cert* (in decoded format as returned by&#10;SSLSocket.getpeercert()) matches the *hostname*." ilk="function" name="match_hostname" signature="match_hostname(cert, hostname)" />
      <scope doc="Returns a new subclass of tuple with named fields." ilk="function" name="namedtuple" signature="namedtuple(typename, field_names, verbose=False, rename=False)" />
      <import module="os" />
      <import module="re" />
      <scope classrefs="socket" doc="A subclass of _socket.socket adding the makefile() method.&#10;" ilk="class" name="socket">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope doc="Close the socket object without closing the underlying file&#10;descriptor." ilk="function" name="detach" returns="file" signature="detach() -&gt; file descriptor" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketKind.SOCK_STREAM: 1&gt;, proto=0, fileno=None)" />
        <scope ilk="function" name="_real_close" signature="_real_close(self, _ss=&lt;class '_socket.socket'&gt;)" />
        <scope doc="Duplicate the socket." ilk="function" name="dup" signature="dup() -&gt; socket object" />
        <scope doc="Wrap __repr__() to reveal the real class name and socket&#10;address(es)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="_sendfile_use_send" signature="_sendfile_use_send(self, file, offset=0, count=None)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="The arguments are as for io.open() after the filename,&#10;except the only mode characters supported are 'r', 'w' and&#10;'b'." ilk="function" name="makefile" signature="makefile(...) -&gt; an I/O stream connected to the socket" />
        <scope doc="Send a file until EOF is reached by using high-performance&#10;os.sendfile() and return the total number of bytes which&#10;were sent." ilk="function" name="sendfile" signature="sendfile(file[, offset[, count]]) -&gt; sent" />
        <scope doc="Close the socket. It cannot be used after this call." ilk="function" name="close" signature="close()" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="_decref_socketios" signature="_decref_socketios(self)" />
        <scope ilk="function" name="_sendfile_use_sendfile" signature="_sendfile_use_sendfile(self, file, offset=0, count=None)" />
        <scope doc="Get the inheritable flag of the socket" ilk="function" name="get_inheritable" signature="get_inheritable(self)" />
        <scope doc="Wait for an incoming connection." ilk="function" name="accept" signature="accept() -&gt; (socket object, address info)" />
        <scope ilk="function" name="_check_sendfile_params" signature="_check_sendfile_params(self, file, offset, count)" />
        <scope doc="Set the inheritable flag of the socket" ilk="function" name="set_inheritable" signature="set_inheritable(self, inheritable)" />
      </scope>
      <scope classrefs="Exception" doc="Base class for I/O related errors.&#10;" ilk="class" name="socket_error">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Return str(self)." ilk="function" name="__str__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <import module="sys" />
      <import module="textwrap" />
      <scope ilk="function" name="wrap_socket" signature="wrap_socket(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=0, ssl_version=&lt;_SSLMethod.PROTOCOL_SSLv23: 2&gt;, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)" />
    </scope>
    <scope doc="Abstract Protocol class.&#10;" ilk="blob" lang="Python3" name="asyncio.protocols">
      <scope classrefs="object" doc="Common base class for protocol interfaces.&#10;Usually user implements protocols that derived from BaseProtocol like Protocol or ProcessProtocol.  The only case when BaseProtocol should be implemented directly is write-only transport like write pipe" ilk="class" name="BaseProtocol">
        <scope doc="Called when the transport's buffer drains below the low-&#10;water mark." ilk="function" name="resume_writing" signature="resume_writing(self)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Called when the transport's buffer goes over the high-water&#10;mark." ilk="function" name="pause_writing" signature="pause_writing(self)" />
        <scope doc="Called when the connection is lost or closed." ilk="function" name="connection_lost" signature="connection_lost(self, exc)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for datagram protocol.&#10;" ilk="class" name="DatagramProtocol">
        <scope doc="Called when a send or receive operation raises an OSError." ilk="function" name="error_received" signature="error_received(self, exc)" />
        <scope doc="Called when some datagram is received." ilk="function" name="datagram_received" signature="datagram_received(self, data, addr)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for stream protocol.&#10;The user should implement this interface.  They can inherit from this class but don't need to.  The implementations here do nothing (they don't raise exceptions).  When the user wants to requests a transport, they pass a protocol factory to a utility function (e.g., EventLoop.create_connection()).  When the connection is made successfully, connection_made() is called with a suitable transport object.  Then data_received() will be called 0 or more times with data (bytes) received from the" ilk="class" name="Protocol">
        <scope doc="Called when the other end calls write_eof() or equivalent." ilk="function" name="eof_received" signature="eof_received(self)" />
        <scope doc="Called when some data is received." ilk="function" name="data_received" signature="data_received(self, data)" />
      </scope>
      <scope classrefs="BaseProtocol" doc="Interface for protocol for subprocess calls.&#10;" ilk="class" name="SubprocessProtocol">
        <scope doc="Called when a file descriptor associated with the child&#10;process is closed." ilk="function" name="pipe_connection_lost" signature="pipe_connection_lost(self, fd, exc)" />
        <scope doc="Called when the subprocess writes data into stdout/stderr&#10;pipe." ilk="function" name="pipe_data_received" signature="pipe_data_received(self, fd, data)" />
        <scope doc="Called when subprocess has exited." ilk="function" name="process_exited" signature="process_exited(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
    </scope>
    <scope doc="Fixer that turns 'long' into 'int' everywhere.&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_long">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixLong">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <scope doc="Check that something isn't an attribute or function name&#10;etc." ilk="function" name="is_probably_builtin" signature="is_probably_builtin(node)" />
    </scope>
    <scope doc="The pgen2 package.&#10;" ilk="blob" lang="Python3" name="lib2to3.pgen2">
      <import module="driver" />
      <import module="grammar" />
      <import module="literals" />
      <import module="parse" />
      <import module="pgen" />
      <import module="token" />
      <import module="tokenize" />
    </scope>
    <scope doc="TELNET client class.&#10;Based on RFC 854: TELNET Protocol Specification, by J. Postel and J. Reynolds  Example:  &gt;&gt;&gt; from telnetlib import Telnet &gt;&gt;&gt; tn = Telnet('www.python.org', 79)   # connect to finger port &gt;&gt;&gt; tn.write(b'guido\r\n') &gt;&gt;&gt; print(tn.read_all()) Login       Name               TTY         Idle    When    Where" ilk="blob" lang="Python3" name="telnetlib">
      <variable citdl="bytes" name="AO" />
      <variable citdl="bytes" name="AUTHENTICATION" />
      <variable citdl="bytes" name="AYT" />
      <variable citdl="bytes" name="BINARY" />
      <variable citdl="bytes" name="BM" />
      <variable citdl="bytes" name="BRK" />
      <variable citdl="bytes" name="CHARSET" />
      <variable citdl="bytes" name="COM_PORT_OPTION" />
      <variable citdl="int" name="DEBUGLEVEL" />
      <variable citdl="bytes" name="DET" />
      <variable citdl="bytes" name="DM" />
      <variable citdl="bytes" name="DO" />
      <variable citdl="bytes" name="DONT" />
      <variable citdl="bytes" name="EC" />
      <variable citdl="bytes" name="ECHO" />
      <variable citdl="bytes" name="EL" />
      <variable citdl="bytes" name="ENCRYPT" />
      <variable citdl="bytes" name="EOR" />
      <variable citdl="bytes" name="EXOPL" />
      <variable citdl="bytes" name="FORWARD_X" />
      <variable citdl="bytes" name="GA" />
      <variable citdl="bytes" name="IAC" />
      <variable citdl="bytes" name="IP" />
      <variable citdl="bytes" name="KERMIT" />
      <variable citdl="bytes" name="LFLOW" />
      <variable citdl="bytes" name="LINEMODE" />
      <variable citdl="bytes" name="LOGOUT" />
      <variable citdl="bytes" name="NAMS" />
      <variable citdl="bytes" name="NAOCRD" />
      <variable citdl="bytes" name="NAOFFD" />
      <variable citdl="bytes" name="NAOHTD" />
      <variable citdl="bytes" name="NAOHTS" />
      <variable citdl="bytes" name="NAOL" />
      <variable citdl="bytes" name="NAOLFD" />
      <variable citdl="bytes" name="NAOP" />
      <variable citdl="bytes" name="NAOVTD" />
      <variable citdl="bytes" name="NAOVTS" />
      <variable citdl="bytes" name="NAWS" />
      <variable citdl="bytes" name="NEW_ENVIRON" />
      <variable citdl="bytes" name="NOOPT" />
      <variable citdl="bytes" name="NOP" />
      <variable citdl="bytes" name="OLD_ENVIRON" />
      <variable citdl="bytes" name="OUTMRK" />
      <variable citdl="bytes" name="PRAGMA_HEARTBEAT" />
      <variable citdl="bytes" name="PRAGMA_LOGON" />
      <variable citdl="bytes" name="RCP" />
      <variable citdl="bytes" name="RCTE" />
      <variable citdl="bytes" name="RSP" />
      <variable citdl="bytes" name="SB" />
      <variable citdl="bytes" name="SE" />
      <variable citdl="bytes" name="SEND_URL" />
      <variable citdl="bytes" name="SGA" />
      <variable citdl="bytes" name="SNDLOC" />
      <variable citdl="bytes" name="SSPI_LOGON" />
      <variable citdl="bytes" name="STATUS" />
      <variable citdl="bytes" name="SUPDUP" />
      <variable citdl="bytes" name="SUPDUPOUTPUT" />
      <variable citdl="bytes" name="SUPPRESS_LOCAL_ECHO" />
      <variable citdl="int" name="TELNET_PORT" />
      <variable citdl="bytes" name="TLS" />
      <variable citdl="bytes" name="TM" />
      <variable citdl="bytes" name="TN3270E" />
      <variable citdl="bytes" name="TSPEED" />
      <variable citdl="bytes" name="TTYLOC" />
      <variable citdl="bytes" name="TTYPE" />
      <variable citdl="bytes" name="TUID" />
      <scope classrefs="object" doc="Telnet interface class.&#10;An instance of this class represents a connection to a telnet server.  The instance is initially not connected; the open() method must be used to establish a connection.  Alternatively, the host name and optional port number can be passed to the constructor, too.  Don't try to reopen an already connected instance.  This class has many read_*() methods.  Note that some of them raise EOFError when the end of the connection is read, because" ilk="class" name="Telnet">
        <scope doc="Destructor -- close the connection." ilk="function" name="__del__" signature="__del__(self)" />
        <scope doc="Return the socket object used internally." ilk="function" name="get_socket" signature="get_socket(self)" />
        <scope doc="Read at least one byte of cooked data unless EOF is hit." ilk="function" name="read_some" signature="read_some(self)" />
        <scope doc="Write a string to the socket, doubling any IAC characters." ilk="function" name="write" signature="write(self, buffer)" />
        <scope doc="Test whether data is available on the socket." ilk="function" name="sock_avail" signature="sock_avail(self)" />
        <scope doc="Fill raw queue from exactly one recv() system call." ilk="function" name="fill_rawq" signature="fill_rawq(self)" />
        <scope doc="Constructor." ilk="function" name="__init__" signature="__init__(self, host=None, port=0, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope doc="Multithreaded version of interact()." ilk="function" name="mt_interact" signature="mt_interact(self)" />
        <scope doc="Return the fileno() of the socket object used internally." ilk="function" name="fileno" signature="fileno(self)" />
        <scope doc="Read until one from a list of a regular expressions matches." ilk="function" name="expect" signature="expect(self, list, timeout=None)" />
        <scope doc="Return any data available in the cooked queue (very lazy)." ilk="function" name="read_very_lazy" signature="read_very_lazy(self)" />
        <scope doc="Print a debug message, when the debug level is &gt; 0." ilk="function" name="msg" signature="msg(self, msg, *args)" />
        <scope doc="Read readily available data." ilk="function" name="read_eager" signature="read_eager(self)" />
        <scope doc="Transfer from raw queue to cooked queue." ilk="function" name="process_rawq" signature="process_rawq(self)" />
        <scope doc="Get next char from raw queue." ilk="function" name="rawq_getchar" signature="rawq_getchar(self)" />
        <scope doc="Connect to a host." ilk="function" name="open" signature="open(self, host, port=0, timeout=&lt;object object at 0x7f11880dc170&gt;)" />
        <scope doc="Return any data available in the SB ... SE queue." ilk="function" name="read_sb_data" signature="read_sb_data(self)" />
        <scope doc="Close the connection." ilk="function" name="close" signature="close(self)" />
        <scope doc="Provide a callback function called after each receipt of a&#10;telnet option." ilk="function" name="set_option_negotiation_callback" signature="set_option_negotiation_callback(self, callback)" />
        <scope doc="Read everything that's possible without blocking in I/O&#10;(eager)." ilk="function" name="read_very_eager" signature="read_very_eager(self)" />
        <scope doc="Read all data until EOF; block until connection closed." ilk="function" name="read_all" signature="read_all(self)" />
        <scope doc="Interaction function, emulates a very dumb telnet client." ilk="function" name="interact" signature="interact(self)" />
        <scope doc="Helper for mt_interact() -- this executes in the other&#10;thread." ilk="function" name="listener" signature="listener(self)" />
        <scope doc="Set the debug level." ilk="function" name="set_debuglevel" signature="set_debuglevel(self, debuglevel)" />
        <scope doc="Read until a given string is encountered or until timeout." ilk="function" name="read_until" signature="read_until(self, match, timeout=None)" />
        <scope doc="Process and return data that's already in the queues (lazy)." ilk="function" name="read_lazy" signature="read_lazy(self)" />
      </scope>
      <variable citdl="bytes" name="VT3270REGIME" />
      <variable citdl="bytes" name="WILL" />
      <variable citdl="bytes" name="WONT" />
      <variable citdl="bytes" name="X3PAD" />
      <variable citdl="bytes" name="XASCII" />
      <variable citdl="bytes" name="XAUTH" />
      <variable citdl="bytes" name="XDISPLOC" />
      <variable citdl="list" name="__all__" />
      <import module="selectors" />
      <import module="socket" />
      <import module="sys" />
      <scope doc="Test program for telnetlib." ilk="function" name="test" signature="test()" />
      <variable citdl="bytes" name="theNULL" />
    </scope>
    <scope doc="A class supporting chat-style (command/response) protocols.&#10;This class adds support for 'chat' style protocols - where one side sends a 'command', and the other sends a response (examples would be the common internet protocols - smtp, nntp, ftp, etc..).  The handle_read() method looks at the input stream for the current 'terminator' (usually '\r\n' for single-line responses, '\r\n.\r\n' for multi-line output), calling self.found_terminator() on its receipt.  for example:" ilk="blob" lang="Python3" name="asynchat">
      <scope classrefs="dispatcher" doc="This is an abstract class.  You must derive from this class, and add&#10;the two methods collect_incoming_data() and found_terminator()" ilk="class" name="async_chat">
        <scope ilk="function" name="push_with_producer" signature="push_with_producer(self, producer)" />
        <scope ilk="function" name="found_terminator" signature="found_terminator(self)" />
        <scope ilk="function" name="_collect_incoming_data" signature="_collect_incoming_data(self, data)" />
        <scope ilk="function" name="initiate_send" signature="initiate_send(self)" />
        <scope ilk="function" name="handle_close" signature="handle_close(self)" />
        <scope ilk="function" name="handle_read" signature="handle_read(self)" />
        <scope doc="predicate for inclusion in the readable for select()" ilk="function" name="readable" signature="readable(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock=None, map=None)" />
        <scope ilk="function" name="push" signature="push(self, data)" />
        <scope ilk="function" name="get_terminator" signature="get_terminator(self)" />
        <scope ilk="function" name="_get_data" signature="_get_data(self)" />
        <scope doc="predicate for inclusion in the writable for select()" ilk="function" name="writable" signature="writable(self)" />
        <scope ilk="function" name="handle_write" signature="handle_write(self)" />
        <scope doc="Set the input delimiter." ilk="function" name="set_terminator" signature="set_terminator(self, term)" />
        <scope ilk="function" name="collect_incoming_data" signature="collect_incoming_data(self, data)" />
        <scope ilk="function" name="discard_buffers" signature="discard_buffers(self)" />
        <scope doc="automatically close this channel once the outgoing queue is&#10;empty" ilk="function" name="close_when_done" signature="close_when_done(self)" />
      </scope>
      <import module="asyncore" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="fifo">
        <scope ilk="function" name="is_empty" signature="is_empty(self)" />
        <scope ilk="function" name="pop" signature="pop(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, list=None)" />
        <scope ilk="function" name="push" signature="push(self, data)" />
        <scope ilk="function" name="__len__" signature="__len__(self)" />
        <scope ilk="function" name="first" signature="first(self)" />
      </scope>
      <scope ilk="function" name="find_prefix_at_end" signature="find_prefix_at_end(haystack, needle)" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="simple_producer">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, data, buffer_size=512)" />
        <scope ilk="function" name="more" signature="more(self)" />
      </scope>
    </scope>
    <scope doc="distutils.command.install_headers&#10;Implements the Distutils 'install_headers' command, to install C/C++ header files to the Python include directory." ilk="blob" lang="Python3" name="distutils.command.install_headers">
      <scope classrefs="object" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="Command">
        <scope doc="Copy a file respecting verbose, dry-run and force flags." ilk="function" name="copy_file" signature="copy_file(self, infile, outfile, preserve_mode=1, preserve_times=1, link=None, level=1)" />
        <scope doc="# XXX rename to 'get_reinitialized_command()'? (should do&#10;the # same in dist.py, if so)" ilk="function" name="reinitialize_command" signature="reinitialize_command(self, command, reinit_subcommands=0)" />
        <scope ilk="function" name="execute" signature="execute(self, func, args, msg=None, level=1)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope doc="Ensure that 'option' is the name of an existing file." ilk="function" name="ensure_filename" signature="ensure_filename(self, option)" />
        <scope doc="Special case of 'execute()' for operations that process one&#10;or more input files and generate one output file." ilk="function" name="make_file" signature="make_file(self, infiles, outfile, func, args, exec_msg=None, skip_msg=None, level=1)" />
        <scope doc="Determine the sub-commands that are relevant in the current&#10;distribution (ie., that need to be run)." ilk="function" name="get_sub_commands" signature="get_sub_commands(self)" />
        <scope doc="Ensure that 'option' is a list of strings." ilk="function" name="ensure_string_list" signature="ensure_string_list(self, option)" />
        <scope ilk="function" name="_ensure_tested_string" signature="_ensure_tested_string(self, option, tester, what, error_fmt, default=None)" />
        <scope doc="Print 'msg' to stdout if the global DEBUG (taken from the&#10;DISTUTILS_DEBUG environment variable) flag is true." ilk="function" name="debug_print" signature="debug_print(self, msg)" />
        <scope doc="Move a file respecting dry-run flag." ilk="function" name="move_file" signature="move_file(self, src, dst, level=1)" />
        <scope ilk="function" name="_ensure_stringlike" signature="_ensure_stringlike(self, option, what, default=None)" />
        <scope ilk="function" name="dump_options" signature="dump_options(self, header=None, indent='')" />
        <scope doc="Ensure that 'option' is a string; if not defined, set it to&#10;'default'." ilk="function" name="ensure_string" signature="ensure_string(self, option, default=None)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
        <scope ilk="function" name="warn" signature="warn(self, msg)" />
        <scope ilk="function" name="ensure_dirname" signature="ensure_dirname(self, option)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Create and initialize a new Command object." ilk="function" name="__init__" signature="__init__(self, dist)" />
        <scope ilk="function" name="mkpath" signature="mkpath(self, name, mode=511)" />
        <scope doc="Run some other command: uses the 'run_command()' method of&#10;Distribution, which creates and finalizes the command object&#10;if necessary and then invokes its 'run()' method." ilk="function" name="run_command" signature="run_command(self, command)" />
        <scope doc="Set the values of any &quot;undefined&quot; options from corresponding&#10;option values in some other command object." ilk="function" name="set_undefined_options" signature="set_undefined_options(self, src_cmd, *option_pairs)" />
        <scope doc="# XXX A more explicit way to customize dry_run would be&#10;better." ilk="function" name="__getattr__" signature="__getattr__(self, attr)" />
        <scope doc="Copy an entire directory tree respecting verbose, dry-run,&#10;and force flags." ilk="function" name="copy_tree" signature="copy_tree(self, infile, outfile, preserve_mode=1, preserve_times=1, preserve_symlinks=0, level=1)" />
        <scope doc="Spawn an external command respecting dry-run flag." ilk="function" name="spawn" signature="spawn(self, cmd, search_path=1, level=1)" />
        <scope ilk="function" name="make_archive" signature="make_archive(self, base_name, format, root_dir=None, base_dir=None, owner=None, group=None)" />
        <scope doc="If the current verbosity level is of greater than or equal&#10;to 'level' print 'msg' to stdout." ilk="function" name="announce" signature="announce(self, msg, level=1)" />
        <scope ilk="function" name="get_command_name" signature="get_command_name(self)" />
        <scope ilk="function" name="ensure_finalized" signature="ensure_finalized(self)" />
        <scope doc="Wrapper around Distribution's 'get_command_obj()' method:&#10;find (create if necessary and 'create' is true) the command&#10;object for 'command', call its 'ensure_finalized()' method,&#10;and return the finalized command object." ilk="function" name="get_finalized_command" signature="get_finalized_command(self, command, create=1)" />
      </scope>
      <scope classrefs="Command" doc="Abstract base class for defining command classes, the &quot;worker bees&quot;&#10;of the Distutils.  A useful analogy for command classes is to think of them as subroutines with local variables called &quot;options&quot;.  The options are &quot;declared&quot; in 'initialize_options()' and &quot;defined&quot; (given their final values, aka &quot;finalized&quot;) in 'finalize_options()', both of which must be defined by every command class.  The distinction between the two is necessary because option values might come from the outside world (command line, config file, ...), and any options dependent on other options must be computed *after* these outside influences have been processed -- hence 'finalize_options()'.  The &quot;body&quot; of the subroutine, where it does all its work based on the values of its" ilk="class" name="install_headers">
        <scope ilk="function" name="get_inputs" signature="get_inputs(self)" />
        <scope doc="A command's raison d'etre: carry out the action it exists to&#10;perform, controlled by the options initialized in&#10;'initialize_options()', customized by other commands, the&#10;setup script, the command-line, and config files, and&#10;finalized in" ilk="function" name="run" signature="run(self)" />
        <scope doc="Set default values for all the options that this command&#10;supports." ilk="function" name="initialize_options" signature="initialize_options(self)" />
        <scope ilk="function" name="get_outputs" signature="get_outputs(self)" />
        <scope doc="Set final values for all the options that this command&#10;supports." ilk="function" name="finalize_options" signature="finalize_options(self)" />
      </scope>
    </scope>
    <scope doc="Shared OS X support functions.&#10;" ilk="blob" lang="Python3" name="_osx_support">
      <variable citdl="list" name="__all__" />
      <scope doc="This function will strip '-isysroot PATH' and '-arch ARCH'&#10;from the compile flags if the user has specified one them in&#10;extra_compile_flags." ilk="function" name="compiler_fixup" signature="compiler_fixup(compiler_so, cc_args)" />
      <scope doc="Customize compiler path and configuration variables." ilk="function" name="customize_compiler" signature="customize_compiler(_config_vars)" />
      <scope doc="Customize Python build configuration variables." ilk="function" name="customize_config_vars" signature="customize_config_vars(_config_vars)" />
      <scope doc="Filter values for get_platform()" ilk="function" name="get_platform_osx" signature="get_platform_osx(_config_vars, osname, release, machine)" />
      <import module="os" />
      <import module="re" />
      <import module="sys" />
    </scope>
    <scope doc="# Module implementing synchronization primitives&#10;# # multiprocessing/synchronize.py # # Copyright (c) 2006-2008, R Oudkerk # Licensed to PSF under a Contributor Agreement. #" ilk="blob" lang="Python3" name="multiprocessing.synchronize">
      <scope classrefs="Barrier" doc="Implements a Barrier.&#10;Useful for synchronizing a fixed number of threads at known synchronization points.  Threads block on 'wait()' and are simultaneously once they have all made that call." ilk="class" name="Barrier">
        <scope doc="Create a barrier, initialised to 'parties' threads." ilk="function" name="__init__" signature="__init__(self, parties, action=None, timeout=None, *, ctx)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
      </scope>
      <scope classrefs="Semaphore" doc="&#10;" ilk="class" name="BoundedSemaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, ctx)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Condition">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, lock=None, *, ctx)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="notify" signature="notify(self)" />
        <scope ilk="function" name="_make_methods" signature="_make_methods(self)" />
        <scope ilk="function" name="wait_for" signature="wait_for(self, predicate, timeout=None)" />
        <scope ilk="function" name="notify_all" signature="notify_all(self)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Event">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, ctx)" />
        <scope ilk="function" name="clear" signature="clear(self)" />
        <scope ilk="function" name="set" signature="set(self)" />
        <scope ilk="function" name="wait" signature="wait(self, timeout=None)" />
        <scope ilk="function" name="is_set" signature="is_set(self)" />
      </scope>
      <scope classrefs="SemLock" doc="&#10;" ilk="class" name="Lock">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, ctx)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="RECURSIVE_MUTEX" />
      <scope classrefs="SemLock" doc="&#10;" ilk="class" name="RLock">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *, ctx)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="int" name="SEMAPHORE" />
      <variable citdl="int" name="SEM_VALUE_MAX" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="SemLock">
        <scope ilk="function" name="__exit__" signature="__exit__(self, *args)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope ilk="function" name="_cleanup" signature="_cleanup(name)" />
        <scope ilk="function" name="_make_name" signature="_make_name()" />
        <scope ilk="function" name="__getstate__" signature="__getstate__(self)" />
        <scope ilk="function" name="__setstate__" signature="__setstate__(self, state)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, kind, value, maxvalue, *, ctx)" />
        <scope ilk="function" name="_make_methods" signature="_make_methods(self)" />
      </scope>
      <scope classrefs="SemLock" doc="&#10;" ilk="class" name="Semaphore">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, value=1, *, ctx)" />
        <scope ilk="function" name="get_value" signature="get_value(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="_multiprocessing" />
      <import module="context" />
      <import module="process" />
      <scope ilk="function" name="sem_unlink" />
      <import module="sys" />
      <import module="tempfile" />
      <import module="threading" />
      <import module="util" />
    </scope>
    <scope doc="HTTP/1.1 client library&#10;&lt;intro stuff goes here&gt; &lt;other stuff, too&gt;  HTTPConnection goes through a number of &quot;states&quot;, which define when a client may legally make another request or fetch the response for a particular request. This diagram details these state transitions:  (null) | | HTTPConnection()" ilk="blob" lang="Python3" name="http.client">
      <variable citdl="HTTPStatus" name="ACCEPTED" />
      <variable citdl="HTTPStatus" name="ALREADY_REPORTED" />
      <variable citdl="HTTPStatus" name="BAD_GATEWAY" />
      <variable citdl="HTTPStatus" name="BAD_REQUEST" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="BadStatusLine">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, line)" />
      </scope>
      <variable citdl="HTTPStatus" name="CONFLICT" />
      <variable citdl="HTTPStatus" name="CONTINUE" />
      <variable citdl="HTTPStatus" name="CREATED" />
      <scope classrefs="ImproperConnectionState" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="CannotSendHeader" />
      <scope classrefs="ImproperConnectionState" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="CannotSendRequest" />
      <variable citdl="HTTPStatus" name="EXPECTATION_FAILED" />
      <variable citdl="HTTPStatus" name="FAILED_DEPENDENCY" />
      <variable citdl="HTTPStatus" name="FORBIDDEN" />
      <variable citdl="HTTPStatus" name="FOUND" />
      <variable citdl="HTTPStatus" name="GATEWAY_TIMEOUT" />
      <variable citdl="HTTPStatus" name="GONE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="HTTPConnection">
        <scope doc="Send a request header line to the server." ilk="function" name="putheader" signature="putheader(self, header, *values)" />
        <scope ilk="function" name="_tunnel" signature="_tunnel(self)" />
        <scope ilk="function" name="_set_content_length" signature="_set_content_length(self, body, method)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host, port=None, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None)" />
        <scope ilk="function" name="_send_request" signature="_send_request(self, method, url, body, headers)" />
        <scope doc="Send the currently buffered request and clear the buffer." ilk="function" name="_send_output" signature="_send_output(self, message_body=None)" />
        <scope doc="Indicate that the last header line has been sent to the&#10;server." ilk="function" name="endheaders" signature="endheaders(self, message_body=None)" />
        <scope doc="Send `data' to the server." ilk="function" name="send" signature="send(self, data)" />
        <scope ilk="function" name="_get_hostport" signature="_get_hostport(self, host, port)" />
        <scope doc="Close the connection to the HTTP server." ilk="function" name="close" signature="close(self)" />
        <scope doc="Connect to the host and port specified in __init__." ilk="function" name="connect" signature="connect(self)" />
        <scope doc="Set up host and port for HTTP CONNECT tunnelling." ilk="function" name="set_tunnel" signature="set_tunnel(self, host, port=None, headers=None)" />
        <scope doc="Add a line of output to the current request buffer." ilk="function" name="_output" signature="_output(self, s)" />
        <scope doc="Send a request to the server." ilk="function" name="putrequest" signature="putrequest(self, method, url, skip_host=0, skip_accept_encoding=0)" />
        <scope doc="Send a complete request to the server." ilk="function" name="request" signature="request(self, method, url, body=None, headers={})" />
        <scope ilk="function" name="set_debuglevel" signature="set_debuglevel(self, level)" />
        <scope doc="Get the response from the server." ilk="function" name="getresponse" signature="getresponse(self)" />
      </scope>
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="HTTPException" />
      <scope classrefs="Message" doc="Basic message object.&#10;A message object is defined as something that has a bunch of RFC 2822 headers and a payload.  It may optionally have an envelope header (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a multipart or a message/rfc822), then the payload is a list of Message objects, otherwise it is a string.  Message objects implement part of the `mapping' interface, which assumes there is exactly one occurrence of the header per message.  Some headers do in fact appear multiple times (e.g. Received) and for those headers, you must use the explicit API to set or get all the headers.  Not all of" ilk="class" name="HTTPMessage">
        <scope doc="Find all header lines matching a given header name." ilk="function" name="getallmatchingheaders" signature="getallmatchingheaders(self, name)" />
      </scope>
      <scope classrefs="BufferedIOBase" doc="Base class for buffered IO objects.&#10;The main difference with RawIOBase is that the read() method supports omitting the size argument, and does not have a default implementation that defers to readinto().  In addition, read(), readinto() and write() may raise BlockingIOError if the underlying raw stream is in non-blocking mode and not ready; unlike their raw counterparts, they will never return None.  A typical implementation should not inherit from a RawIOBase" ilk="class" name="HTTPResponse">
        <scope ilk="function" name="_close_conn" signature="_close_conn(self)" />
        <scope doc="Return list of (header, value) tuples." ilk="function" name="getheaders" signature="getheaders(self)" />
        <scope ilk="function" name="_read_and_discard_trailer" signature="_read_and_discard_trailer(self)" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope ilk="function" name="_get_chunk_left" signature="_get_chunk_left(self)" />
        <scope ilk="function" name="_check_close" signature="_check_close(self)" />
        <scope ilk="function" name="getcode" signature="getcode(self)" />
        <scope doc="Same as _safe_read, but for reading into a buffer." ilk="function" name="_safe_readinto" signature="_safe_readinto(self, b)" />
        <scope doc="Read and return up to n bytes." ilk="function" name="read" signature="read(self, amt=None)" />
        <scope doc="Flush and close the IO object." ilk="function" name="close" signature="close(self)" />
        <scope doc="Flush write buffers, if applicable." ilk="function" name="flush" signature="flush(self)" />
        <scope ilk="function" name="peek" signature="peek(self, n=-1)" />
        <scope ilk="function" name="_readall_chunked" signature="_readall_chunked(self)" />
        <scope doc="Return whether object was opened for reading." ilk="function" name="readable" signature="readable(self)" />
        <scope ilk="function" name="info" signature="info(self)" />
        <scope doc="Read with at most one underlying system call." ilk="function" name="read1" signature="read1(self, n=-1)" />
        <scope ilk="function" name="begin" signature="begin(self)" />
        <scope doc="Read the number of bytes requested, compensating for partial&#10;reads." ilk="function" name="_safe_read" signature="_safe_read(self, amt)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, sock, debuglevel=0, method=None, url=None)" />
        <scope doc="Returns underlying file descriptor if one exists." ilk="function" name="fileno" signature="fileno(self)" />
        <scope ilk="function" name="_read_next_chunk_size" signature="_read_next_chunk_size(self)" />
        <scope ilk="function" name="readinto" signature="readinto(self, b)" />
        <scope ilk="function" name="getheader" signature="getheader(self, name, default=None)" />
        <scope doc="Read and return a line from the stream." ilk="function" name="readline" signature="readline(self, limit=-1)" />
        <scope ilk="function" name="_read_status" signature="_read_status(self)" />
        <scope ilk="function" name="_read1_chunked" signature="_read1_chunked(self, n)" />
        <scope ilk="function" name="geturl" signature="geturl(self)" />
        <scope doc="True if the connection is closed." ilk="function" name="isclosed" signature="isclosed(self)" />
        <scope ilk="function" name="_readinto_chunked" signature="_readinto_chunked(self, b)" />
        <scope ilk="function" name="_peek_chunked" signature="_peek_chunked(self, n)" />
      </scope>
      <scope classrefs="HTTPConnection" doc="This class allows communication via SSL.&#10;" ilk="class" name="HTTPSConnection">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, host, port=None, key_file=None, cert_file=None, timeout=&lt;object object at 0x7f11880dc170&gt;, source_address=None, *, context=None, check_hostname=None)" />
        <scope doc="Connect to a host on a given (SSL) port." ilk="function" name="connect" signature="connect(self)" />
      </scope>
      <variable citdl="int" name="HTTPS_PORT" />
      <variable citdl="int" name="HTTP_PORT" />
      <variable citdl="HTTPStatus" name="HTTP_VERSION_NOT_SUPPORTED" />
      <variable citdl="HTTPStatus" name="IM_USED" />
      <variable citdl="HTTPStatus" name="INSUFFICIENT_STORAGE" />
      <variable citdl="HTTPStatus" name="INTERNAL_SERVER_ERROR" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ImproperConnectionState" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="IncompleteRead">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, partial, expected=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="InvalidURL" />
      <variable citdl="HTTPStatus" name="LENGTH_REQUIRED" />
      <variable citdl="HTTPStatus" name="LOCKED" />
      <variable citdl="HTTPStatus" name="LOOP_DETECTED" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="LineTooLong">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, line_type)" />
      </scope>
      <variable citdl="int" name="MAXAMOUNT" />
      <variable citdl="HTTPStatus" name="METHOD_NOT_ALLOWED" />
      <variable citdl="HTTPStatus" name="MOVED_PERMANENTLY" />
      <variable citdl="HTTPStatus" name="MULTIPLE_CHOICES" />
      <variable citdl="HTTPStatus" name="MULTI_STATUS" />
      <variable citdl="HTTPStatus" name="NETWORK_AUTHENTICATION_REQUIRED" />
      <variable citdl="HTTPStatus" name="NON_AUTHORITATIVE_INFORMATION" />
      <variable citdl="HTTPStatus" name="NOT_ACCEPTABLE" />
      <variable citdl="HTTPStatus" name="NOT_EXTENDED" />
      <variable citdl="HTTPStatus" name="NOT_FOUND" />
      <variable citdl="HTTPStatus" name="NOT_IMPLEMENTED" />
      <variable citdl="HTTPStatus" name="NOT_MODIFIED" />
      <variable citdl="HTTPStatus" name="NO_CONTENT" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="NotConnected" />
      <variable citdl="HTTPStatus" name="OK" />
      <variable citdl="HTTPStatus" name="PARTIAL_CONTENT" />
      <variable citdl="HTTPStatus" name="PAYMENT_REQUIRED" />
      <variable citdl="HTTPStatus" name="PERMANENT_REDIRECT" />
      <variable citdl="HTTPStatus" name="PRECONDITION_FAILED" />
      <variable citdl="HTTPStatus" name="PRECONDITION_REQUIRED" />
      <variable citdl="HTTPStatus" name="PROCESSING" />
      <variable citdl="HTTPStatus" name="PROXY_AUTHENTICATION_REQUIRED" />
      <variable citdl="HTTPStatus" name="REQUESTED_RANGE_NOT_SATISFIABLE" />
      <variable citdl="HTTPStatus" name="REQUEST_ENTITY_TOO_LARGE" />
      <variable citdl="HTTPStatus" name="REQUEST_HEADER_FIELDS_TOO_LARGE" />
      <variable citdl="HTTPStatus" name="REQUEST_TIMEOUT" />
      <variable citdl="HTTPStatus" name="REQUEST_URI_TOO_LONG" />
      <variable citdl="HTTPStatus" name="RESET_CONTENT" />
      <scope classrefs="ConnectionResetError BadStatusLine" doc="Connection reset.&#10;" ilk="class" name="RemoteDisconnected">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, *pos, **kw)" />
      </scope>
      <scope classrefs="ImproperConnectionState" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="ResponseNotReady" />
      <variable citdl="HTTPStatus" name="SEE_OTHER" />
      <variable citdl="HTTPStatus" name="SERVICE_UNAVAILABLE" />
      <variable citdl="HTTPStatus" name="SWITCHING_PROTOCOLS" />
      <variable citdl="HTTPStatus" name="TEMPORARY_REDIRECT" />
      <variable citdl="HTTPStatus" name="TOO_MANY_REQUESTS" />
      <variable citdl="HTTPStatus" name="UNAUTHORIZED" />
      <variable citdl="HTTPStatus" name="UNPROCESSABLE_ENTITY" />
      <variable citdl="HTTPStatus" name="UNSUPPORTED_MEDIA_TYPE" />
      <variable citdl="HTTPStatus" name="UPGRADE_REQUIRED" />
      <variable citdl="HTTPStatus" name="USE_PROXY" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="UnimplementedFileMode" />
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="UnknownProtocol">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, version)" />
      </scope>
      <scope classrefs="HTTPException" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="UnknownTransferEncoding" />
      <variable citdl="HTTPStatus" name="VARIANT_ALSO_NEGOTIATES" />
      <variable citdl="list" name="__all__" />
      <import module="collections" />
      <import module="email" />
      <scope classrefs="Exception" doc="Common base class for all non-exit exceptions.&#10;" ilk="class" name="error" />
      <import module="http" />
      <import module="io" />
      <import module="os" />
      <scope doc="Parses only RFC2822 headers from a file pointer." ilk="function" name="parse_headers" signature="parse_headers(fp, _class=&lt;class 'http.client.HTTPMessage'&gt;)" />
      <import module="re" />
      <variable citdl="dict" name="responses" />
      <import module="socket" />
      <import module="ssl" />
      <scope doc="Parse a URL into 5 components:&#10;&lt;scheme&gt;://&lt;netloc&gt;/&lt;path&gt;?&lt;query&gt;#&lt;fragment&gt; Return a&#10;5-tuple: (scheme, netloc, path, query, fragment)." ilk="function" name="urlsplit" signature="urlsplit(url, scheme='', allow_fragments=True)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="asyncio.subprocess">
      <variable citdl="int" name="DEVNULL" />
      <variable citdl="int" name="PIPE" />
      <scope classrefs="object" doc="&#10;" ilk="class" name="Process">
        <scope ilk="function" name="communicate" signature="communicate(self, input=None)" />
        <scope ilk="function" name="_noop" signature="_noop(*args, **kw)" />
        <scope ilk="function" name="_read_stream" signature="_read_stream(self, fd)" />
        <scope ilk="function" name="_feed_stdin" signature="_feed_stdin(self, input)" />
        <scope ilk="function" name="send_signal" signature="send_signal(self, signal)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, transport, protocol, loop)" />
        <scope doc="Wait until the process exit and return the process return&#10;code." ilk="function" name="wait" signature="wait(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="kill" signature="kill(self)" />
        <scope ilk="function" name="terminate" signature="terminate(self)" />
      </scope>
      <variable citdl="int" name="STDOUT" />
      <scope classrefs="FlowControlMixin SubprocessProtocol" doc="Like StreamReaderProtocol, but for a subprocess.&#10;" ilk="class" name="SubprocessStreamProtocol">
        <scope doc="Called when a file descriptor associated with the child&#10;process is closed." ilk="function" name="pipe_connection_lost" signature="pipe_connection_lost(self, fd, exc)" />
        <scope doc="Called when a connection is made." ilk="function" name="connection_made" signature="connection_made(self, transport)" />
        <scope doc="Called when subprocess has exited." ilk="function" name="process_exited" signature="process_exited(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, limit, loop)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Called when the subprocess writes data into stdout/stderr&#10;pipe." ilk="function" name="pipe_data_received" signature="pipe_data_received(self, fd, data)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <scope doc="Decorator to mark coroutines." ilk="function" name="coroutine" signature="coroutine(func)" />
      <scope ilk="function" name="create_subprocess_exec" signature="create_subprocess_exec(program, *args, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds)" />
      <scope ilk="function" name="create_subprocess_shell" signature="create_subprocess_shell(cmd, stdin=None, stdout=None, stderr=None, loop=None, limit=65536, **kwds)" />
      <import module="events" />
      <variable citdl="Logger" name="logger" />
      <import module="protocols" />
      <import module="streams" />
      <import module="subprocess" />
      <import module="tasks" />
    </scope>
    <scope doc="Record of phased-in incompatible language changes.&#10;Each line is of the form:  FeatureName = &quot;_Feature(&quot; OptionalRelease &quot;,&quot; MandatoryRelease &quot;,&quot; CompilerFlag &quot;)&quot;  where, normally, OptionalRelease &lt; MandatoryRelease, and both are 5-tuples of the same form as sys.version_info:  (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int PY_MINOR_VERSION, # the 1; an int" ilk="blob" lang="Python3" name="__future__">
      <variable citdl="int" name="CO_FUTURE_ABSOLUTE_IMPORT" />
      <variable citdl="int" name="CO_FUTURE_BARRY_AS_BDFL" />
      <variable citdl="int" name="CO_FUTURE_DIVISION" />
      <variable citdl="int" name="CO_FUTURE_GENERATOR_STOP" />
      <variable citdl="int" name="CO_FUTURE_PRINT_FUNCTION" />
      <variable citdl="int" name="CO_FUTURE_UNICODE_LITERALS" />
      <variable citdl="int" name="CO_FUTURE_WITH_STATEMENT" />
      <variable citdl="int" name="CO_GENERATOR_ALLOWED" />
      <variable citdl="int" name="CO_NESTED" />
      <variable citdl="list" name="__all__" />
      <variable citdl="_Feature" name="absolute_import" />
      <variable citdl="list" name="all_feature_names" />
      <variable citdl="_Feature" name="barry_as_FLUFL" />
      <variable citdl="_Feature" name="division" />
      <variable citdl="_Feature" name="generator_stop" />
      <variable citdl="_Feature" name="generators" />
      <variable citdl="_Feature" name="nested_scopes" />
      <variable citdl="_Feature" name="print_function" />
      <variable citdl="_Feature" name="unicode_literals" />
      <variable citdl="_Feature" name="with_statement" />
    </scope>
    <scope doc="A bottom-up tree matching algorithm implementation meant to speed&#10;up 2to3's matching process. After the tree patterns are reduced to their rarest linear path, a linear Aho-Corasick automaton is created. The linear automaton traverses the linear paths from the leaves to the root of the AST and returns a set of nodes for further matching. This reduces significantly the number of candidate nodes." ilk="blob" lang="Python3" name="lib2to3.btm_matcher">
      <scope classrefs="object" doc="Class for a node of the Aho-Corasick automaton used in matching&#10;" ilk="class" name="BMNode">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
      </scope>
      <scope classrefs="object" doc="The main matcher class. After instantiating the patterns should&#10;be added using the add_fixer method" ilk="class" name="BottomMatcher">
        <scope doc="Prints a graphviz diagram of the BM automaton(for debugging)" ilk="function" name="print_ac" signature="print_ac(self)" />
        <scope doc="The main interface with the bottom matcher." ilk="function" name="run" signature="run(self, leaves)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope doc="Recursively adds a linear pattern to the AC automaton" ilk="function" name="add" signature="add(self, pattern, start)" />
        <scope doc="Reduces a fixer's pattern tree to a linear path and adds it&#10;to the matcher(a common Aho-Corasick automaton)." ilk="function" name="add_fixer" signature="add_fixer(self, fixer)" />
      </scope>
      <scope classrefs="dict" doc="defaultdict(default_factory[, ...]) --&gt; dict with default factory&#10;The default factory is called without arguments to produce a new value when a key is not present, in __getitem__ only. A defaultdict compares equal to a dict with the same items. All remaining arguments are treated the same as if they were passed to the dict constructor, including keyword arguments." ilk="class" name="defaultdict">
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="__copy__" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="if self.default_factory is None: raise KeyError((key,))&#10;self[key] = value = self.default_factory() return value" ilk="function" name="__missing__" signature="__missing__(key) # Called by __getitem__ for missing key; pseudo-code:" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="D.copy() -&gt; a shallow copy of D." ilk="function" name="copy" signature="D.copy() -&gt; a shallow copy of D." />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
      </scope>
      <import module="itertools" />
      <import module="logging" />
      <import module="pytree" />
      <scope doc="Internal function." ilk="function" name="reduce_tree" signature="reduce_tree(node, parent=None)" />
      <scope ilk="function" name="type_repr" signature="type_repr(type_num)" />
    </scope>
    <scope doc="This module contains functions that can read and write Python values in&#10;a binary format. The format is specific to Python, but independent of machine architecture issues.  Not all Python object types are supported; in general, only objects whose value is independent from a particular invocation of Python can be written and read by this module. The following types are supported: None, integers, floating point numbers, strings, bytes, bytearrays, tuples, lists, sets, dictionaries, and code objects, where it should be understood that tuples, lists and dictionaries are only supported as long as the values contained therein are themselves" ilk="blob" lang="Python3" name="marshal">
      <scope doc="Write the value on the open file." ilk="function" name="dump" signature="dump(value, file[, version])" />
      <scope doc="Return the string that would be written to a file by&#10;dump(value, file)." ilk="function" name="dumps" signature="dumps(value[, version])" />
      <scope doc="Read one value from the open file and return it." ilk="function" name="load" signature="load(file)" />
      <scope doc="Convert the bytes object to a value." ilk="function" name="loads" signature="loads(bytes)" />
      <variable citdl="int" name="version" />
    </scope>
    <scope doc="The objects used by the site module to add custom builtins.&#10;" ilk="blob" lang="Python3" name="_sitebuiltins">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Quitter">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, name, eof)" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, code=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <import module="sys" />
    </scope>
    <scope doc="This will be the home for the policy that hooks in the new&#10;code that adds all the email6 features." ilk="blob" lang="Python3" name="email.policy">
      <scope classrefs="Policy" doc="Controls for how messages are interpreted and formatted.&#10;Most of the classes and many of the methods in the email package accept Policy objects as parameters.  A Policy object contains a set of values and functions that control how input is interpreted and how output is rendered. For example, the parameter 'raise_on_defect' controls whether or not an RFC violation results in an error being raised or not, while 'max_line_length' controls the maximum length of output lines when a Message is serialized.  Any valid attribute may be overridden when a Policy is created by passing it as a keyword argument to the constructor.  Policy objects are immutable, but a new Policy object can be created with only certain values changed by" ilk="class" name="Compat32">
        <scope ilk="function" name="_fold" signature="_fold(self, name, value, sanitize)" />
        <scope ilk="function" name="_sanitize_header" signature="_sanitize_header(self, name, value)" />
        <scope doc="Given a list of linesep terminated strings constituting the&#10;lines of a single header, return the (name, value) tuple&#10;that should be stored in the model." ilk="function" name="header_source_parse" signature="header_source_parse(self, sourcelines)" />
        <scope doc="Given the header name and the value from the model, return&#10;binary data containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold_binary" signature="fold_binary(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return a&#10;string containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold" signature="fold(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return&#10;the value to be returned to the application program that is&#10;requesting that header." ilk="function" name="header_fetch_parse" signature="header_fetch_parse(self, name, value)" />
        <scope doc="Given the header name and the value provided by the&#10;application program, return the (name, value) that should be&#10;stored in the model." ilk="function" name="header_store_parse" signature="header_store_parse(self, name, value)" />
      </scope>
      <scope classrefs="Policy" doc="Controls for how messages are interpreted and formatted.&#10;Most of the classes and many of the methods in the email package accept Policy objects as parameters.  A Policy object contains a set of values and functions that control how input is interpreted and how output is rendered. For example, the parameter 'raise_on_defect' controls whether or not an RFC violation results in an error being raised or not, while 'max_line_length' controls the maximum length of output lines when a Message is serialized.  Any valid attribute may be overridden when a Policy is created by passing it as a keyword argument to the constructor.  Policy objects are immutable, but a new Policy object can be created with only certain values changed by" ilk="class" name="EmailPolicy">
        <scope doc="Given a list of linesep terminated strings constituting the&#10;lines of a single header, return the (name, value) tuple&#10;that should be stored in the model." ilk="function" name="header_source_parse" signature="header_source_parse(self, sourcelines)" />
        <scope doc="Return the maximum allowed number of headers named 'name'." ilk="function" name="header_max_count" signature="header_max_count(self, name)" />
        <scope doc="Given the header name and the value from the model, return&#10;binary data containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold_binary" signature="fold_binary(self, name, value)" />
        <scope doc="Create new Policy, possibly overriding some defaults." ilk="function" name="__init__" signature="__init__(self, **kw)" />
        <scope doc="Given the header name and the value from the model, return a&#10;string containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold" signature="fold(self, name, value)" />
        <scope ilk="function" name="_fold" signature="_fold(self, name, value, refold_binary=False)" />
        <scope doc="Given the header name and the value from the model, return&#10;the value to be returned to the application program that is&#10;requesting that header." ilk="function" name="header_fetch_parse" signature="header_fetch_parse(self, name, value)" />
        <scope doc="Given the header name and the value provided by the&#10;application program, return the (name, value) that should be&#10;stored in the model." ilk="function" name="header_store_parse" signature="header_store_parse(self, name, value)" />
      </scope>
      <variable citdl="EmailPolicy" name="HTTP" />
      <scope classrefs="object" doc="A header_factory and header registry.&#10;" ilk="class" name="HeaderRegistry">
        <scope doc="Create a header_factory that works with the Policy API." ilk="function" name="__init__" signature="__init__(self, base_class=&lt;class 'email.headerregistry.BaseHeader'&gt;, default_class=&lt;class 'email.headerregistry.UnstructuredHeader'&gt;, use_default_map=True)" />
        <scope doc="Create a header instance for header 'name' from 'value'." ilk="function" name="__call__" signature="__call__(self, name, value)" />
        <scope ilk="function" name="__getitem__" signature="__getitem__(self, name)" />
        <scope doc="Register cls as the specialized class for handling &quot;name&quot;&#10;headers." ilk="function" name="map_to_type" signature="map_to_type(self, name, cls)" />
      </scope>
      <scope classrefs="_PolicyBase" doc="Controls for how messages are interpreted and formatted.&#10;Most of the classes and many of the methods in the email package accept Policy objects as parameters.  A Policy object contains a set of values and functions that control how input is interpreted and how output is rendered. For example, the parameter 'raise_on_defect' controls whether or not an RFC violation results in an error being raised or not, while 'max_line_length' controls the maximum length of output lines when a Message is serialized.  Any valid attribute may be overridden when a Policy is created by passing it as a keyword argument to the constructor.  Policy objects are immutable, but a new Policy object can be created with only certain values changed by" ilk="class" name="Policy">
        <scope doc="Return the maximum allowed number of headers named 'name'." ilk="function" name="header_max_count" signature="header_max_count(self, name)" />
        <scope doc="Given a list of linesep terminated strings constituting the&#10;lines of a single header, return the (name, value) tuple&#10;that should be stored in the model." ilk="function" name="header_source_parse" signature="header_source_parse(self, sourcelines)" />
        <scope doc="Given the header name and the value from the model, return&#10;binary data containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold_binary" signature="fold_binary(self, name, value)" />
        <scope doc="Record 'defect' on 'obj'." ilk="function" name="register_defect" signature="register_defect(self, obj, defect)" />
        <scope doc="Given the header name and the value provided by the&#10;application program, return the (name, value) that should be&#10;stored in the model." ilk="function" name="header_store_parse" signature="header_store_parse(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return a&#10;string containing linesep characters that implement the&#10;folding of the header according to the policy controls." ilk="function" name="fold" signature="fold(self, name, value)" />
        <scope doc="Given the header name and the value from the model, return&#10;the value to be returned to the application program that is&#10;requesting that header." ilk="function" name="header_fetch_parse" signature="header_fetch_parse(self, name, value)" />
        <scope doc="Based on policy, either raise defect or call&#10;register_defect." ilk="function" name="handle_defect" signature="handle_defect(self, obj, defect)" />
      </scope>
      <variable citdl="EmailPolicy" name="SMTP" />
      <variable citdl="EmailPolicy" name="SMTPUTF8" />
      <variable citdl="list" name="__all__" />
      <variable citdl="Compat32" name="compat32" />
      <variable citdl="EmailPolicy" name="default" />
      <variable citdl="ContentManager" name="raw_data_manager" />
      <variable citdl="EmailPolicy" name="strict" />
    </scope>
    <scope doc="Fixer for imports of itertools.(imap|ifilter|izip|ifilterfalse)&#10;" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_itertools_imports">
      <scope doc="A blank line" ilk="function" name="BlankLine" signature="BlankLine()" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixItertoolsImports">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <import module="fixer_base" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
    </scope>
    <scope doc="Class representing image/* type MIME documents.&#10;" ilk="blob" lang="Python3" name="email.mime.image">
      <scope classrefs="MIMENonMultipart" doc="Class for generating image/* type MIME documents.&#10;" ilk="class" name="MIMEImage">
        <scope doc="Create an image/* type MIME document." ilk="function" name="__init__" signature="__init__(self, _imagedata, _subtype=None, _encoder=&lt;function encode_base64 at 0x7f117f759d90&gt;, **_params)" />
      </scope>
      <scope classrefs="MIMEBase" doc="Base class for MIME non-multipart type messages.&#10;" ilk="class" name="MIMENonMultipart">
        <scope doc="Add the given payload to the current payload." ilk="function" name="attach" signature="attach(self, payload)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <import module="encoders" />
      <import module="imghdr" />
    </scope>
    <scope doc="Fixer for operator functions.&#10;operator.isCallable(obj)       -&gt; hasattr(obj, '__call__') operator.sequenceIncludes(obj) -&gt; operator.contains(obj) operator.isSequenceType(obj)   -&gt; isinstance(obj, collections.Sequence) operator.isMappingType(obj)    -&gt; isinstance(obj, collections.Mapping) operator.isNumberType(obj)     -&gt; isinstance(obj, numbers.Number) operator.repeat(obj, n)        -&gt; operator.mul(obj, n) operator.irepeat(obj, n)       -&gt; operator.imul(obj, n)" ilk="blob" lang="Python3" name="lib2to3.fixes.fix_operator">
      <scope doc="A function call" ilk="function" name="Call" signature="Call(func_name, args=None, prefix=None)" />
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixOperator">
        <scope ilk="function" name="_isNumberType" signature="_isNumberType(self, node, results)" />
        <scope ilk="function" name="_handle_type2abc" signature="_handle_type2abc(self, node, results, module, abc)" />
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
        <scope ilk="function" name="_sequenceIncludes" signature="_sequenceIncludes(self, node, results)" />
        <scope ilk="function" name="_irepeat" signature="_irepeat(self, node, results)" />
        <scope ilk="function" name="_isCallable" signature="_isCallable(self, node, results)" />
        <scope ilk="function" name="_check_method" signature="_check_method(self, node, results)" />
        <scope ilk="function" name="_isSequenceType" signature="_isSequenceType(self, node, results)" />
        <scope ilk="function" name="_isMappingType" signature="_isMappingType(self, node, results)" />
        <scope ilk="function" name="_repeat" signature="_repeat(self, node, results)" />
        <scope ilk="function" name="_handle_rename" signature="_handle_rename(self, node, results, name)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <scope doc="A string leaf" ilk="function" name="String" signature="String(string, prefix=None)" />
      <import module="collections" />
      <import module="fixer_base" />
      <scope ilk="function" name="invocation" signature="invocation(s)" />
      <scope doc="Works like `does_tree_import` but adds an import statement&#10;if it was not imported." ilk="function" name="touch_import" signature="touch_import(package, name, node)" />
    </scope>
    <scope doc="Response classes used by urllib.&#10;The base class, addbase, defines a minimal file-like interface, including read() and readline().  The typical response object is an addinfourl instance, which defines an info() method that returns headers and a geturl() method that returns the url." ilk="blob" lang="Python3" name="urllib.response">
      <variable citdl="list" name="__all__" />
      <scope classrefs="_TemporaryFileWrapper" doc="Base class for addinfo and addclosehook. Is a good idea for garbage collection.&#10;" ilk="class" name="addbase">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp)" />
        <scope ilk="function" name="__exit__" signature="__exit__(self, type, value, traceback)" />
        <scope ilk="function" name="__enter__" signature="__enter__(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
      </scope>
      <scope classrefs="addbase" doc="Class to add a close hook to an open file.&#10;" ilk="class" name="addclosehook">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, closehook, *hookargs)" />
        <scope doc="Close the temporary file, possibly deleting it." ilk="function" name="close" signature="close(self)" />
      </scope>
      <scope classrefs="addbase" doc="class to add an info() method to an open file.&#10;" ilk="class" name="addinfo">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, headers)" />
        <scope ilk="function" name="info" signature="info(self)" />
      </scope>
      <scope classrefs="addinfo" doc="class to add info() and geturl() methods to an open file.&#10;" ilk="class" name="addinfourl">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, fp, headers, url, code=None)" />
        <scope ilk="function" name="getcode" signature="getcode(self)" />
        <scope ilk="function" name="geturl" signature="geturl(self)" />
      </scope>
      <import module="tempfile" />
    </scope>
    <scope doc="Tools that operate on functions.&#10;" ilk="blob" lang="Python3" name="_functools">
      <scope doc="Convert a cmp= function into a key= function." ilk="function" name="cmp_to_key" />
      <scope classrefs="object" doc="partial(func, *args, **keywords) - new function with partial application&#10;of the given arguments and keywords." ilk="class" name="partial">
        <scope doc="Call self as a function." ilk="function" name="__call__" />
        <scope doc="Implement delattr(self, name)." ilk="function" name="__delattr__" />
        <scope ilk="function" name="__setstate__" />
        <scope doc="Implement setattr(self, name, value)." ilk="function" name="__setattr__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="helper for pickle" ilk="function" name="__reduce__" />
      </scope>
      <scope doc="Apply a function of two arguments cumulatively to the items&#10;of a sequence, from left to right, so as to reduce the&#10;sequence to a single value." ilk="function" name="reduce" signature="reduce(function, sequence[, initial]) -&gt; value" />
    </scope>
    <scope doc="Utility functions used by the btm_matcher module&#10;" ilk="blob" lang="Python3" name="lib2to3.btm_utils">
      <scope classrefs="object" doc="This class serves as an intermediate representation of the&#10;pattern tree during the conversion to sets of leaf-to-root subpatterns" ilk="class" name="MinNode">
        <scope doc="Drives the leaf_to_root method." ilk="function" name="get_linear_subpattern" signature="get_linear_subpattern(self)" />
        <scope doc="Internal method." ilk="function" name="leaf_to_root" signature="leaf_to_root(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, type=None, name=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Generator that returns the leaves of the tree" ilk="function" name="leaves" signature="leaves(self)" />
      </scope>
      <variable citdl="int" name="TYPE_ALTERNATIVES" />
      <variable citdl="int" name="TYPE_ANY" />
      <variable citdl="int" name="TYPE_GROUP" />
      <scope doc="Picks the most characteristic from a list of linear patterns&#10;Current order used is: names &gt; common_names &gt; common_chars" ilk="function" name="get_characteristic_subpattern" signature="get_characteristic_subpattern(subpatterns)" />
      <import module="grammar" />
      <variable citdl="Symbols" name="pattern_symbols" />
      <variable citdl="Symbols" name="pysyms" />
      <variable citdl="Symbols" name="python_symbols" />
      <import module="pytree" />
      <scope doc="Tests test_func on all items of sequence and items of&#10;included sub-iterables" ilk="function" name="rec_test" signature="rec_test(sequence, test_func)" />
      <scope doc="Internal function." ilk="function" name="reduce_tree" signature="reduce_tree(node, parent=None)" />
      <variable citdl="Symbols" name="syms" />
      <import module="token" />
      <import module="token_labels" />
      <variable citdl="dict" name="tokens" />
    </scope>
    <scope doc="Generate Python documentation in HTML or text for interactive use.&#10;At the Python interactive prompt, calling help(thing) on a Python object documents the object, and calling help() starts up an interactive help session.  Or, at the shell command line outside of Python:  Run &quot;pydoc &lt;name&gt;&quot; to show documentation on something.  &lt;name&gt; may be the name of a function, module, package, or a dotted reference to a class or function within a module or module in a package.  If the argument contains a path segment delimiter (e.g. slash on Unix," ilk="blob" lang="Python3" name="pydoc">
      <scope classrefs="object" doc="&#10;" ilk="class" name="Doc">
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docroutine" signature="docroutine(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docdata" signature="docdata(self, object, name=None, *args)" />
        <scope doc="Return the location of module docs or None" ilk="function" name="getdocloc" signature="getdocloc(self, object)" />
        <scope doc="Generate documentation for an object." ilk="function" name="document" signature="document(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docmodule" signature="docmodule(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docproperty" signature="docproperty(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="fail" signature="fail(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docother" signature="docother(self, object, name=None, *args)" />
        <scope doc="Raise an exception for unimplemented types." ilk="function" name="docclass" signature="docclass(self, object, name=None, *args)" />
      </scope>
      <scope classrefs="Exception" doc="Errors that occurred while trying to import something to document it.&#10;" ilk="class" name="ErrorDuringImport">
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, filename, exc_info)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
      </scope>
      <scope classrefs="Doc" doc="Formatter class for HTML documentation.&#10;" ilk="class" name="HTMLDoc">
        <scope doc="Make a link for a module or package to display in an index." ilk="function" name="modpkglink" signature="modpkglink(self, modpkginfo)" />
        <scope ilk="function" name="_docdescriptor" signature="_docdescriptor(self, name, value, mod)" />
        <scope doc="Produce html documentation for a data descriptor." ilk="function" name="docdata" signature="docdata(self, object, name=None, mod=None, cl=None)" />
        <scope doc="Produce HTML for a class tree as given by&#10;inspect.getclasstree()." ilk="function" name="formattree" signature="formattree(self, tree, modname, parent=None)" />
        <scope ilk="function" name="repr" />
        <scope ilk="function" name="grey" signature="grey(self, text)" />
        <scope doc="Make a link for a module." ilk="function" name="modulelink" signature="modulelink(self, object)" />
        <scope doc="Format an argument default value as text." ilk="function" name="formatvalue" signature="formatvalue(self, object)" />
        <scope doc="Make a link for a class." ilk="function" name="classlink" signature="classlink(self, object, modname)" />
        <scope doc="Make a link for an identifier, given name-to-URL mappings." ilk="function" name="namelink" signature="namelink(self, name, *dicts)" />
        <scope doc="Format an HTML page." ilk="function" name="page" signature="page(self, title, contents)" />
        <scope doc="Produce HTML documentation for a data object." ilk="function" name="docother" signature="docother(self, object, name=None, mod=None, *ignored)" />
        <scope ilk="function" name="escape" />
        <scope doc="Format a page heading." ilk="function" name="heading" signature="heading(self, title, fgcol, bgcol, extras='')" />
        <scope doc="Generate an HTML index for a directory of modules." ilk="function" name="index" signature="index(self, dir, shadowed=None)" />
        <scope doc="Produce HTML documentation for a class object." ilk="function" name="docclass" signature="docclass(self, object, name=None, mod=None, funcs={}, classes={}, *ignored)" />
        <scope doc="Mark up some plain text, given a context of symbols to look&#10;for." ilk="function" name="markup" signature="markup(self, text, escape=None, funcs={}, classes={}, methods={})" />
        <scope doc="Produce HTML documentation for a function or method object." ilk="function" name="docroutine" signature="docroutine(self, object, name=None, mod=None, funcs={}, classes={}, methods={}, cl=None)" />
        <scope doc="Make a link to source file." ilk="function" name="filelink" signature="filelink(self, url, path)" />
        <scope doc="Produce HTML documentation for a module object." ilk="function" name="docmodule" signature="docmodule(self, object, name=None, mod=None, *ignored)" />
        <scope doc="Produce html documentation for a property." ilk="function" name="docproperty" signature="docproperty(self, object, name=None, mod=None, cl=None)" />
        <scope doc="Format a list of items into a multi-column list." ilk="function" name="multicolumn" signature="multicolumn(self, list, format, cols=4)" />
        <scope doc="Format a section with a big heading." ilk="function" name="bigsection" signature="bigsection(self, title, *args)" />
        <scope doc="Format a section with a heading." ilk="function" name="section" signature="section(self, title, fgcol, bgcol, contents, width=6, prelude='', marginalia=None, gap='&amp;nbsp;')" />
        <scope doc="Format literal preformatted text." ilk="function" name="preformat" signature="preformat(self, text)" />
      </scope>
      <scope classrefs="Repr" doc="Class for safely making an HTML representation of a Python object.&#10;" ilk="class" name="HTMLRepr">
        <scope ilk="function" name="repr_str" signature="repr_str(self, x, level)" />
        <scope ilk="function" name="repr" signature="repr(self, object)" />
        <scope ilk="function" name="repr_string" signature="repr_string(self, x, level)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="repr_instance" signature="repr_instance(self, x, level)" />
        <scope ilk="function" name="escape" signature="escape(self, text)" />
        <scope ilk="function" name="repr_unicode" signature="repr_unicode(self, x, level)" />
        <scope ilk="function" name="repr1" signature="repr1(self, x, level)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Helper">
        <scope ilk="function" name="listsymbols" signature="listsymbols(self)" />
        <scope ilk="function" name="showtopic" signature="showtopic(self, topic, more_xrefs='')" />
        <scope ilk="function" name="showsymbol" signature="showsymbol(self, symbol)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, input=None, output=None)" />
        <scope ilk="function" name="listmodules" signature="listmodules(self, key='')" />
        <scope doc="Call self as a function." ilk="function" name="__call__" signature="__call__(self, request=&lt;object object at 0x7f11880dc100&gt;)" />
        <scope ilk="function" name="list" signature="list(self, items, columns=4, width=80)" />
        <scope doc="Read one line, using input() when appropriate." ilk="function" name="getline" signature="getline(self, prompt)" />
        <scope ilk="function" name="listkeywords" signature="listkeywords(self)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope ilk="function" name="help" signature="help(self, request)" />
        <scope ilk="function" name="interact" signature="interact(self)" />
        <scope ilk="function" name="intro" signature="intro(self)" />
        <scope ilk="function" name="listtopics" signature="listtopics(self)" />
        <scope doc="Return unbuffered tuple of (topic, xrefs)." ilk="function" name="_gettopic" signature="_gettopic(self, topic, more_xrefs='')" />
      </scope>
      <scope classrefs="object" doc="An interruptible scanner that searches module synopses.&#10;" ilk="class" name="ModuleScanner">
        <scope ilk="function" name="run" signature="run(self, callback, key=None, completer=None, onerror=None)" />
      </scope>
      <scope classrefs="object" doc="&#10;" ilk="class" name="Repr">
        <scope ilk="function" name="repr_int" signature="repr_int(self, x, level)" />
        <scope ilk="function" name="_repr_iterable" signature="_repr_iterable(self, x, level, left, right, maxiter, trail='')" />
        <scope ilk="function" name="repr_frozenset" signature="repr_frozenset(self, x, level)" />
        <scope ilk="function" name="repr" signature="repr(self, x)" />
        <scope ilk="function" name="repr_dict" signature="repr_dict(self, x, level)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="repr_array" signature="repr_array(self, x, level)" />
        <scope ilk="function" name="repr_str" signature="repr_str(self, x, level)" />
        <scope ilk="function" name="repr_tuple" signature="repr_tuple(self, x, level)" />
        <scope ilk="function" name="repr_instance" signature="repr_instance(self, x, level)" />
        <scope ilk="function" name="repr_list" signature="repr_list(self, x, level)" />
        <scope ilk="function" name="repr_deque" signature="repr_deque(self, x, level)" />
        <scope ilk="function" name="repr_set" signature="repr_set(self, x, level)" />
        <scope ilk="function" name="repr1" signature="repr1(self, x, level)" />
      </scope>
      <scope classrefs="Doc" doc="Formatter class for text documentation.&#10;" ilk="class" name="TextDoc">
        <scope ilk="function" name="_docdescriptor" signature="_docdescriptor(self, name, value, mod)" />
        <scope doc="Produce text documentation for a data descriptor." ilk="function" name="docdata" signature="docdata(self, object, name=None, mod=None, cl=None)" />
        <scope doc="Format a section with a given heading." ilk="function" name="section" signature="section(self, title, contents)" />
        <scope ilk="function" name="repr" />
        <scope doc="Render in text a class tree as returned by&#10;inspect.getclasstree()." ilk="function" name="formattree" signature="formattree(self, tree, modname, parent=None, prefix='')" />
        <scope doc="Format an argument default value as text." ilk="function" name="formatvalue" signature="formatvalue(self, object)" />
        <scope doc="Produce text documentation for a data object." ilk="function" name="docother" signature="docother(self, object, name=None, mod=None, parent=None, maxlen=None, doc=None)" />
        <scope doc="Indent text by prepending a given prefix to each line." ilk="function" name="indent" signature="indent(self, text, prefix='    ')" />
        <scope doc="Produce text documentation for a given class object." ilk="function" name="docclass" signature="docclass(self, object, name=None, mod=None, *ignored)" />
        <scope doc="Format a string in bold by overstriking." ilk="function" name="bold" signature="bold(self, text)" />
        <scope doc="Produce text documentation for a function or method object." ilk="function" name="docroutine" signature="docroutine(self, object, name=None, mod=None, cl=None)" />
        <scope doc="Produce text documentation for a given module object." ilk="function" name="docmodule" signature="docmodule(self, object, name=None, mod=None)" />
        <scope doc="Produce text documentation for a property." ilk="function" name="docproperty" signature="docproperty(self, object, name=None, mod=None, cl=None)" />
      </scope>
      <scope classrefs="Repr" doc="Class for safely making a text representation of a Python object.&#10;" ilk="class" name="TextRepr">
        <scope ilk="function" name="repr_str" signature="repr_str(self, x, level)" />
        <scope ilk="function" name="repr_instance" signature="repr_instance(self, x, level)" />
        <scope ilk="function" name="repr_string" signature="repr_string(self, x, level)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self)" />
        <scope ilk="function" name="repr1" signature="repr1(self, x, level)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="dict" name="__warningregistry__" />
      <scope ilk="function" name="allmethods" signature="allmethods(cl)" />
      <scope doc="Print all the one-line module summaries that contain a&#10;substring." ilk="function" name="apropos" signature="apropos(key)" />
      <scope doc="Start the enhanced pydoc Web server and open a Web browser." ilk="function" name="browse" signature="browse(port=0, *, open_browser=True)" />
      <import module="builtins" />
      <scope doc="Wrap inspect.classify_class_attrs, with fixup for data&#10;descriptors." ilk="function" name="classify_class_attrs" signature="classify_class_attrs(object)" />
      <scope doc="Get a class name and qualify it with a module name if&#10;necessary." ilk="function" name="classname" signature="classname(object, modname)" />
      <scope doc="Command-line interface (looks at sys.argv to decide what to&#10;do)." ilk="function" name="cli" signature="cli()" />
      <scope doc="Omit part of a string if needed to make it fit in a maximum&#10;length." ilk="function" name="cram" signature="cram(text, maxlen)" />
      <scope classrefs="object" doc="deque([iterable[, maxlen]]) --&gt; deque object&#10;A list-like sequence optimized for data accesses near its endpoints." ilk="class" name="deque">
        <scope doc="Extend the left side of the deque with elements from the&#10;iterable" ilk="function" name="extendleft" />
        <scope doc="Remove all elements from the deque." ilk="function" name="clear" />
        <scope doc="Return key in self." ilk="function" name="__contains__" />
        <scope doc="Add an element to the left side of the deque." ilk="function" name="appendleft" />
        <scope doc="Return self[key]." ilk="function" name="__getitem__" />
        <scope doc="Return self&gt;=value." ilk="function" name="__ge__" />
        <scope doc="Return self==value." ilk="function" name="__eq__" />
        <scope doc="Delete self[key]." ilk="function" name="__delitem__" />
        <scope doc="Implement iter(self)." ilk="function" name="__iter__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="__copy__" />
        <scope doc="return a reverse iterator over the deque" ilk="function" name="__reversed__" signature="D.__reversed__()" />
        <scope doc="Raises ValueError if the value is not present." ilk="function" name="index" returns="int" signature="D.index(value, [start, [stop]]) -&gt; integer -- return first index of value." />
        <scope doc="Initialize self." ilk="function" name="__init__" />
        <scope doc="Set self[key] to value." ilk="function" name="__setitem__" />
        <scope doc="Return self*value.n" ilk="function" name="__mul__" />
        <scope doc="Return self*value." ilk="function" name="__rmul__" />
        <scope doc="Return a shallow copy of a deque." ilk="function" name="copy" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" />
        <scope doc="Rotate the deque n steps to the right (default n=1)." ilk="function" name="rotate" />
        <scope doc="Implement self*=value." ilk="function" name="__imul__" />
        <scope doc="Return self&gt;value." ilk="function" name="__gt__" />
        <scope doc="Return getattr(self, name)." ilk="function" name="__getattribute__" />
        <scope doc="Extend the right side of the deque with elements from the&#10;iterable" ilk="function" name="extend" />
        <scope doc="Return self&lt;value." ilk="function" name="__lt__" />
        <scope doc="Return self!=value." ilk="function" name="__ne__" />
        <scope doc="reverse *IN PLACE*" ilk="function" name="reverse" signature="D.reverse()" />
        <scope doc="Remove and return the leftmost element." ilk="function" name="popleft" />
        <scope doc="D.count(value) -&gt; integer -- return number of occurrences of value" ilk="function" name="count" returns="int" signature="D.count(value) -&gt; integer -- return number of occurrences of value" />
        <scope doc="Implement self+=value." ilk="function" name="__iadd__" />
        <scope doc="self != 0" ilk="function" name="__bool__" />
        <scope doc="Return self+value." ilk="function" name="__add__" />
        <scope doc="Remove and return the rightmost element." ilk="function" name="pop" />
        <scope doc="Add an element to the right side of the deque." ilk="function" name="append" />
        <scope doc="Return self&lt;=value." ilk="function" name="__le__" />
        <scope doc="Return state information for pickling." ilk="function" name="__reduce__" />
        <scope doc="size of D in memory, in bytes" ilk="function" name="__sizeof__" signature="D.__sizeof__()" />
        <scope doc="Return len(self)." ilk="function" name="__len__" />
        <scope doc="insert object before index" ilk="function" name="insert" signature="D.insert(index, object)" />
        <scope doc="remove first occurrence of value." ilk="function" name="remove" signature="D.remove(value)" />
      </scope>
      <scope doc="Produce a short description of the given thing." ilk="function" name="describe" signature="describe(thing)" />
      <scope doc="Display text documentation, given an object or a path to an&#10;object." ilk="function" name="doc" signature="doc(thing, title='Python Library Documentation: %s', forceload=0, output=None)" />
      <scope doc="Format the exception part of a traceback." ilk="function" name="format_exception_only" signature="format_exception_only(etype, value)" />
      <scope doc="Get the doc string or comments for an object." ilk="function" name="getdoc" signature="getdoc(object)" />
      <scope doc="Decide what method to use for paging through text." ilk="function" name="getpager" signature="getpager()" />
      <variable citdl="Helper" name="help" />
      <variable citdl="HTMLDoc" name="html" />
      <scope doc="Import a Python source file or compiled file given its path." ilk="function" name="importfile" signature="importfile(path)" />
      <import module="importlib" />
      <import module="inspect" />
      <import module="io" />
      <scope doc="Check if an object is of a type that probably means it's&#10;data." ilk="function" name="isdata" signature="isdata(object)" />
      <scope doc="Guess whether a path refers to a package directory." ilk="function" name="ispackage" signature="ispackage(path)" />
      <scope ilk="function" name="ispath" signature="ispath(x)" />
      <scope doc="Locate an object by name or dotted path, importing as&#10;necessary." ilk="function" name="locate" signature="locate(path, forceload=0)" />
      <import module="os" />
      <scope doc="The first time this is called, determine what kind of pager&#10;to use." ilk="function" name="pager" signature="pager(text)" />
      <scope doc="Convert sys.path into a list of absolute, existing, unique&#10;paths." ilk="function" name="pathdirs" signature="pathdirs()" />
      <scope doc="Page through text by feeding it to another program." ilk="function" name="pipepager" signature="pipepager(text, cmd)" />
      <import module="pkgutil" />
      <scope doc="Remove boldface formatting from text." ilk="function" name="plain" signature="plain(text)" />
      <scope doc="Simply print unformatted text." ilk="function" name="plainpager" signature="plainpager(text)" />
      <variable citdl="_PlainTextDoc" name="plaintext" />
      <import module="platform" />
      <import module="re" />
      <scope doc="Render text documentation, given an object or a path to an&#10;object." ilk="function" name="render_doc" signature="render_doc(thing, title='Python Library Documentation: %s', forceload=0, renderer=None)" />
      <scope doc="Do a series of global replacements on a string." ilk="function" name="replace" signature="replace(text, *pairs)" />
      <scope doc="Given an object or a path to an object, get the object and&#10;its name." ilk="function" name="resolve" signature="resolve(thing, forceload=0)" />
      <scope doc="Import a module; handle errors; return None if the module&#10;isn't found." ilk="function" name="safeimport" signature="safeimport(path, forceload=0, cache={})" />
      <scope ilk="function" name="source_synopsis" signature="source_synopsis(file)" />
      <scope doc="Split a doc string into a synopsis line (if any) and the&#10;rest." ilk="function" name="splitdoc" signature="splitdoc(doc)" />
      <scope doc="Remove the hexadecimal id from a Python object&#10;representation." ilk="function" name="stripid" signature="stripid(text)" />
      <scope doc="Get the one-line summary out of a module file." ilk="function" name="synopsis" signature="synopsis(filename, cache={})" />
      <import module="sys" />
      <scope doc="Page through text by invoking a program on a temporary file." ilk="function" name="tempfilepager" signature="tempfilepager(text, cmd)" />
      <variable citdl="TextDoc" name="text" />
      <import module="time" />
      <import module="tokenize" />
      <scope doc="Page through text on a text terminal." ilk="function" name="ttypager" signature="ttypager(text)" />
      <import module="urllib" />
      <scope doc="Decide whether to show documentation on a variable." ilk="function" name="visiblename" signature="visiblename(name, all=None, obj=None)" />
      <import module="warnings" />
      <scope doc="Write HTML documentation to a file in the current directory." ilk="function" name="writedoc" signature="writedoc(thing, forceload=0)" />
      <scope doc="Write out HTML documentation for all modules in a directory&#10;tree." ilk="function" name="writedocs" signature="writedocs(dir, pkgpath='', done=None)" />
    </scope>
    <scope doc="Module for parsing and testing package version predicate strings.&#10;" ilk="blob" lang="Python3" name="distutils.versionpredicate">
      <scope classrefs="object" doc="Parse and test package version predicates.&#10;&gt;&gt;&gt; v = VersionPredicate('pyepat.abc (&gt;1.0, &lt;3333.3a1, !=1555.1b3)')  The `name` attribute provides the full dotted name that is given::  &gt;&gt;&gt; v.name 'pyepat.abc'  The str() of a `VersionPredicate` provides a normalized human-readable version of the expression:: " ilk="class" name="VersionPredicate">
        <scope doc="Parse a version predicate string." ilk="function" name="__init__" signature="__init__(self, versionPredicateStr)" />
        <scope doc="Return str(self)." ilk="function" name="__str__" signature="__str__(self)" />
        <scope doc="True if version is compatible with all the predicates in&#10;self." ilk="function" name="satisfied_by" signature="satisfied_by(self, version)" />
      </scope>
      <variable citdl="dict" name="compmap" />
      <import module="distutils" />
      <import module="operator" />
      <import module="re" />
      <variable citdl="SRE_Pattern" name="re_paren" />
      <variable citdl="SRE_Pattern" name="re_splitComparison" />
      <variable citdl="SRE_Pattern" name="re_validPackage" />
      <scope doc="Parse a single version comparison." ilk="function" name="splitUp" signature="splitUp(pred)" />
      <scope doc="Return the name and optional version number of a provision." ilk="function" name="split_provision" signature="split_provision(value)" />
    </scope>
    <scope doc="&#10;" ilk="blob" lang="Python3" name="ensurepip.__main__">
      <import module="ensurepip" />
    </scope>
    <scope doc="Disassembler of Python byte code into mnemonics.&#10;" ilk="blob" lang="Python3" name="dis">
      <scope classrefs="object" doc="The bytecode operations of a piece of code&#10;Instantiate this with a function, method, string of code, or a code object (as returned by compile()).  Iterating over this yields the bytecode operations as Instruction instances." ilk="class" name="Bytecode">
        <scope doc="Return formatted information about the code object." ilk="function" name="info" signature="info(self)" />
        <scope ilk="function" name="__iter__" signature="__iter__(self)" />
        <scope doc="Return a formatted view of the bytecode operations." ilk="function" name="dis" signature="dis(self)" />
        <scope doc="Initialize self." ilk="function" name="__init__" signature="__init__(self, x, *, first_line=None, current_offset=None)" />
        <scope doc="Return repr(self)." ilk="function" name="__repr__" signature="__repr__(self)" />
        <scope doc="Construct a Bytecode from the given traceback" ilk="function" name="from_traceback" />
      </scope>
      <variable citdl="dict" name="COMPILER_FLAG_NAMES" />
      <variable citdl="int" name="EXTENDED_ARG" />
      <variable citdl="int" name="HAVE_ARGUMENT" />
      <scope classrefs="_Instruction" doc="Details for a bytecode operation&#10;Defined fields: opname - human readable name for operation opcode - numeric code for operation arg - numeric argument to operation (if any), otherwise None argval - resolved arg value (if known), otherwise same as arg argrepr - human readable description of operation argument offset - start index of operation within bytecode sequence starts_line - line started by this opcode (if any), otherwise None is_jump_target - True if other code jumps to here, otherwise False" ilk="class" name="Instruction">
        <scope doc="Format instruction details for inclusion in disassembly&#10;output" ilk="function" name="_disassemble" signature="_disassemble(self, lineno_width=3, mark_as_current=False)" />
      </scope>
      <variable citdl="list" name="__all__" />
      <variable citdl="tuple" name="cmp_op" />
      <scope doc="Formatted details of methods, functions, or code." ilk="function" name="code_info" signature="code_info(x)" />
      <import module="collections" />
      <scope doc="Disassemble classes, methods, functions, generators, or&#10;code." ilk="function" name="dis" signature="dis(x=None, *, file=None)" />
      <scope doc="Disassemble a code object." ilk="function" name="disassemble" signature="disassemble(co, lasti=-1, *, file=None)" />
      <scope doc="Disassemble a code object." ilk="function" name="disco" signature="disco(co, lasti=-1, *, file=None)" />
      <scope doc="Disassemble a traceback (default: last traceback)." ilk="function" name="distb" signature="distb(tb=None, *, file=None)" />
      <scope doc="Detect all offsets in a byte code which are jump targets." ilk="function" name="findlabels" signature="findlabels(code)" />
      <scope doc="Find the offsets in a byte code which are start of lines in&#10;the source." ilk="function" name="findlinestarts" signature="findlinestarts(code)" />
      <scope doc="Iterator for the opcodes in methods, functions or code" ilk="function" name="get_instructions" signature="get_instructions(x, *, first_line=None)" />
      <variable citdl="list" name="hascompare" />
      <variable citdl="list" name="hasconst" />
      <variable citdl="list" name="hasfree" />
      <variable citdl="list" name="hasjabs" />
      <variable citdl="list" name="hasjrel" />
      <variable citdl="list" name="haslocal" />
      <variable citdl="list" name="hasname" />
      <variable citdl="list" name="hasnargs" />
      <import module="io" />
      <variable citdl="dict" name="opmap" />
      <variable citdl="list" name="opname" />
      <scope doc="Return pretty representation of code flags." ilk="function" name="pretty_flags" signature="pretty_flags(flags)" />
      <scope doc="Print details of methods, functions, or code to *file*." ilk="function" name="show_code" signature="show_code(co, *, file=None)" />
      <scope doc="Compute the stack effect of the opcode." ilk="function" name="stack_effect" />
      <import module="sys" />
      <import module="types" />
    </scope>
    <scope doc="Fixer for has_key().&#10;Calls to .has_key() methods are expressed in terms of the 'in' operator:  d.has_key(k) -&gt; k in d  CAVEATS: 1) While the primary target of this fixer is dict.has_key(), the fixer will change any has_key() method call, regardless of its class. " ilk="blob" lang="Python3" name="lib2to3.fixes.fix_has_key">
      <scope classrefs="BaseFix" doc="Optional base class for fixers.&#10;The subclass name must be FixFooBar where FooBar is the result of removing underscores and capitalizing the words of the fix name. For example, the class name for a fixer named 'has_key' should be FixHasKey." ilk="class" name="FixHasKey">
        <scope doc="Returns the transformation for a given parse tree node." ilk="function" name="transform" signature="transform(self, node, results)" />
      </scope>
      <scope doc="Return a NAME leaf" ilk="function" name="Name" signature="Name(name, prefix=None)" />
      <import module="fixer_base" />
      <scope ilk="function" name="parenthesize" signature="parenthesize(node)" />
      <import module="pytree" />
      <import module="token" />
    </scope>
  </file>
</codeintel>
