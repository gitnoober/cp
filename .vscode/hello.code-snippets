{
	// Place your cp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"": {
		"prefix": "hello",
		"body": [
		  "inf = float('inf')",
		  "import sys",
		  "import pprint",
		  "import logging",
		  "from logging import getLogger",
		  "import array",
		  "import collections",
		  "import os",
		  "# sys.setrecursionlimit(10 ** 9)",
		  "",
		  "def main():",
		  "    osi = '/home/ps/Documents/cp/input.txt'",
		  "    oso = '/home/ps/Documents/cp/output.txt'",
		  "    if os.path.exists(osi):",
		  "        sys.stdin = open(osi , 'r')",
		  "        sys.stdout = open(oso , 'w')",
		  "",
		  "def solve():",
		  "    pass",
		  "    ",
		  "",
		  "",
		  "",
		  "",
		  "",
		  "if __name__ == '__main__':",
		  "    main()",
		  "    def input(): return sys.stdin.readline().rstrip(\"\\r\\n\")",
		  "",
		  "    def maps(): return [int(i) for i in input().split()]",
		  "",
		  "    logging.basicConfig(",
		  "        format=\"%(message)s\",",
		  "        level=logging.WARNING,",
		  "    )",
		  "    logger = getLogger(__name__)",
		  "    logger.setLevel(logging.INFO)",
		  "",
		  "    def debug(msg, *args):",
		  "        logger.info(f'{msg}={pprint.pformat(args)}')",
		  "",
		  "    solve()",
		  ""
		],
		"description": ""
	  }
}